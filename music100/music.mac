; MUSIC.MAC

; MSX-MUSIC, FM-PAC version

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders

        .Z80
        ASEG
        ORG	4000H

RDSLT	EQU	000CH
CALSLT	EQU	001CH
ENASLT  EQU     0024H
IDBYT0	EQU	002BH
GICINI	EQU	0090H

M2F8A   EQU     02F8AH                  ; FRCINT: convert DAC to integer
M406F   EQU     0406FH                  ; ERROR: BASIC error
M4601   EQU     04601H                  ; NEWSTT: execute new statement
M4666   EQU     04666H                  ; CHRGTR: get next BASIC char
M4C64   EQU     04C64H                  ; FRMEVL: expression evaluator
M4E9B   EQU     04E9BH                  ; ISVAR: get variable value
M517A   EQU     0517AH                  ; DOCNVF: convert DAC to other type
M521C   EQU     0521CH                  ; GETBYT: evaluate byte operand
M542F   EQU     0542FH                  ; GETUIN: evaluate address operand
M5EA4   EQU     05EA4H                  ; PTRGET: locate variable
M67D0   EQU     067D0H                  ; FRESTR: free temporary string with type check
M6A0E   EQU     06A0EH                  ; FILEVL: evaluate filespecification
M6C1C   EQU     06C1CH                  ; CLSALL: close all i/o channels
M73E5   EQU     073E5H                  ; PLAY: PLAY statement

I$8010  EQU     08010H

DF349	EQU	0F349H	                ; HIMSAV: disksystem bottom

CURLIN	EQU	0F41CH
VALTYP	EQU	0F663H
SUBFLG	EQU	0F6A5H
OLDLIN	EQU	0F6BEH                  ; line number for CONT
OLDTXT	EQU	0F6C0H                  ; BASIC pointer for CONT
STREND	EQU	0F6C6H
DAC	EQU	0F7F6H
ARG	EQU	0F847H
MAXFIL	EQU	0F85FH                  ; number of user file channels
FILTAB	EQU	0F860H                  ; pointer to file channel info blocks
MCLTAB	EQU	0F956H
VOICAQ  EQU     0F975h                  ; queue PSG play voice 0, used in MSX-MUSIC BASIC as static variables area
VOICBQ  EQU     0F9F5h                  ; queue PSG play voice 1, not used in MSX-MUSIC BASIC
VOICCQ  EQU     0FA75h                  ; queue PSG play voice 2, not used in MSX-MUSIC BASIC
PRSCNT	EQU	0FB35H
SAVSP	EQU	0FB36H
VOICEN	EQU	0FB38H                  ; current play voice
SAVVOL	EQU	0FB39H
MCLLEN	EQU	0FB3BH
MCLPTR	EQU	0FB3CH
MUSICF	EQU	0FB3FH
PLYCNT	EQU	0FB40H
VCBA	EQU	0FB41H                  ; VCB PSG play voice 0
VCBB	EQU	0FB66H                  ; VCB PSG play voice 1
VCBC	EQU	0FB8BH                  ; VCB PSG play voice 2

; PSG VCB structure:
;
;       +0,2    timer (not used, )
;       +2      MCLLEN
;       +3,2    MCLPTR
;       +5,2    top of stack
;       +7      size music packet
;       +8,7    music packet
;               +0, high byte duration counter + music packet size (b7-b5)
;               +1, low byte duration counter
;               +2, music data. b7+b6 = type
;                       type 00hhhhhh = tone packet, h = high byte tone, next byte = low byte tone
;                       type 1x0svvvv = volume/envelope specified, s = shape bit, vvvv = volume/shape
;                       type x10svvvv = envelope period specified, next byte = low byte period, next byte = high byte period
;       +15     octave
;       +16     tone length
;       +17     tempo
;       +18     volume
;       +19,2   envelope period
;       +21,16  stack

BASROM	EQU	0FBB1H
HIMEM	EQU	0FC4AH
INTFLG	EQU	0FC9BH
EXPTBL	EQU	0FCC1H
SLTWRK	EQU	0FD09H
PROCNM	EQU	0FD89H

H.TIMI	EQU	0FD9FH
H.PHYD	EQU	0FFA7H
H.PLAY	EQU	0FFC5H

; temporary workarea

BUF	EQU	0F55EH                  ; BASIC line buffer used as temporary storage
T.MUSI  EQU     BUF                     ; temporary storage _MUSIC
T.VOIE  EQU     BUF                     ; temporary storage _VOICE
T.VOIC  EQU     BUF                     ; temporary storage _VOICE COPY
T.MCLV  EQU     BUF                     ; temporary storage variable name
T.CDAC  EQU     BUF+128                 ; temporary storage convert DAC routine

HOLD8	EQU	0F806H                  ; BASIC number convert used as temporary storage
T.BINI  EQU     HOLD8                   ; temporary storage BASIC init

; static start workarea

C.F975	EQU	0F975H	                ; MIDI hook
D.F97A	EQU	0F97AH                  ; (number of interrupts for tempo 120, length 4)/2
D.F97C	EQU	0F97CH	                ; slotid MSX-MUSIC
D.F97D	EQU	0F97DH	                ; start of MSX-MUSIC workarea
D.F97F	EQU	0F97FH                  ; PLAY device (0 = OPLL/PSG, 1 = MIDI)
D.F980	EQU	0F980H	                ; current device (0 = OPLL/PSG, 1 = MIDI)
D.F981	EQU	0F981H	                ; use MIDI
D.F982	EQU	0F982H                  ; sample number (MSX-AUDIO left over)
D.F983	EQU	0F983H                  ; in MSX-MUSIC timer interrupt handler flag
D.F984	EQU	0F984H                  ; number of OPLL FM play voices
I.F985	EQU	0F985H                  ; number FM channels per voice
D.F98E	EQU	0F98EH                  ; drum mode flag (b0)
D.F98F	EQU	0F98FH                  ; play voice mask
D.F991	EQU	0F991H                  ; total number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
D.F992	EQU	0F992H                  ; number of OPLL play voices (includes drum voice)
D.F993	EQU	0F993H                  ; number of OPLL play voices, b7 set
D.F994	EQU	0F994H                  ; queue size
D.F995	EQU	0F995H                  ; play voice active
D.F997	EQU	0F997H                  ; queued count
D.F998	EQU	0F998H                  ; background mode (0 = background)
D.F999	EQU	0F999H                  ; number of unhandled interrupts
D.F99A	EQU	0F99AH                  ; current play voice
D.F99B	EQU	0F99BH                  ; pointer to play queue info blocks
D.F99D	EQU	0F99DH                  ; pitch
D.F99F	EQU	0F99FH                  ; transpose
D.F9A1	EQU	0F9A1H                  ; pointer to I$F9A3
I$F9A3	EQU	0F9A3H                  ; 12 bytes
D.F9AF	EQU	0F9AFH                  ; timer PSG voice 0
D$F9B1	EQU	0F9B1H                  ; timer PSG voice 1
D$F9B3	EQU	0F9B3H                  ; timer PSG voice 2
J.F9BB	EQU	0F9BBH                  ; previous H.TIMI hook
I.F9C0	EQU	0F9C0H                  ; OPLL register read back
I.F9F9	EQU	0F9F9H                  ; OPLL instrument 63
I$FA19	EQU	0FA19H                  ; corrector for interrupt resolution for every playvoice
D.FA26	EQU	0FA26H                  ; request service
I.FA27	EQU	0FA27H                  ; 16 bytes data for 9 FM channels
I.FAB7	EQU	0FAB7H                  ; rhythm volume offsets

; variable start workarea

; +0,12*6                               ; play queue info blocks
;       queue info block
;       +0      PUT offset
;       +1      GET offset
;       +2      backup byte flag
;       +3      queue size
;       +4,2    pointer to queue
; +72,12*32                             ; play queues
; +456,9*39                             ; VCB OPLL
;       +0,2    timer
;       +2      MCLLEN
;       +3,2    MCLPTR
;       +5,2    top of stack
;       +7      size music packet
;       +8,7    music packet
;               +0, high byte duration counter + music packet size (b7-b5)
;               +1, low byte duration counter
;               +2, music data. b7+b6 = type
;                       type 00hhhhhh = tone packet, h = high byte tone, next byte = low byte tone
;                       type 1x0svvvv = volume/envelope specified, s = shape bit, vvvv = volume/shape
;                       type x10svvvv = envelope period specified, next byte = low byte period, next byte = high byte period
;       +15     octave
;       +16     tone length
;       +17     tempo
;       +18     volume
;       +19,2   envelope period
;       +21,16  stack
;       +37     ?
;       +38     divsion value

V.OFFI  EQU     0                       ; offset play queue info blocks
V.OFFQ  EQU     12*6                    ; offset play queues
V.OFFV  EQU     12*6+12*32              ; offset VCBs
S.VARW  EQU     12*6+12*32+9*39


KEYWRD	MACRO	X,Y
G	ASET	0
Q	ASET	0
        IRPC	D,<X>
        IF	G EQ 0
G	ASET	1
        ELSE
        IF	Q NE 0
        IF	Q EQ " "
        DEFB	0FFH
        ELSE
        DEFB	Q
        ENDIF
        ENDIF
Q	ASET	"&D"
        ENDIF
        ENDM
        DEFB	Q+128
        DEFW	Y
        ENDM


D4000:	DEFB	"AB"
        DEFW	0                       ; no INIT
        DEFW	I4082                   ; CALL statement handler
        DEFW	0                       ; no DEVICE
        DEFW	0                       ; no BASIC program
        DEFS	6,0

?4010:  DEFS	8,0

I4018:	DEFB	"PAC2"                  ; external MSX-MUSIC indentifier string
        DEFB	"OPLL"                  ; MSX-MUSIC identifer string


; FMPAC BIOS (bank switching)

J4020:	JP	J4064                   ; start routine in fmpac bank
?4023:	JP	J405E                   ; start routine in fmpac bank
?4026:	JP	J4048                   ; transfer to/from fmpac bank
?4029:	JP	C402F                   ; read byte from fmpac bank
C402C:	JP	J403D                   ; read word from fmpac bank

;	  Subroutine read byte from fmpac bank
;	     Inputs  HL = adres, E = bank
;	     Outputs A = data

C402F:	PUSH	BC
        LD	BC,D7FF7
        LD	A,(BC)
        EX	AF,AF'
        LD	A,E
        LD	(BC),A
        LD	A,(HL)
        EX	AF,AF'
        LD	(BC),A
        EX	AF,AF'
        POP	BC
        RET

;	  Subroutine read word from fmpac bank
;	     Inputs  HL = adres, E = bank
;	     Outputs HL = data

J403D:	CALL	C402F
        LD	D,A
        INC	HL
        CALL	C402F
        LD	H,A
        LD	L,D
        RET

;	  Subroutine transfer to/from fmpac bank
;	     Inputs  HL = source, DE = dest, BC = lenght, bank on stack
;	     Outputs HL = data

J4048:	LD	A,(D7FF7)
        EX	AF,AF'
        EXX
        POP	HL
        POP	DE
        PUSH	DE
        PUSH	HL
        LD	A,E
        EXX
        LD	(D7FF7),A
        EX	DE,HL
        LDIR
        EX	AF,AF'
        LD	(D7FF7),A
        RET

;	  Subroutine start routine in fmpac bank
;	     Inputs  E = bank, BC = adres
;	     Outputs depends

J405E:	PUSH	BC
        EXX
        POP	HL
        JP	J4064

;	  Subroutine start routine in fmpac bank
;	     Inputs  E' = bank, HL' = adres
;	     Outputs depends

J4064:	EXX
        EX	AF,AF'
        LD	A,(D7FF7)
        PUSH	AF
        LD	A,E
        LD	(D7FF7),A
        LD	DE,I4076
        PUSH	DE
        PUSH	HL
        EX	AF,AF'
        EXX
        RET

I4076:	EX	AF,AF'
        POP	AF
        LD	(D7FF7),A
        EX	AF,AF'
        RET

        DEFS	04080H-$,0

D4080:	DEFW	I5000			; address additional CALL statement handler

;	  Subroutine FMPAC CALL statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

I4082:	PUSH	HL
        LD	HL,PROCNM
        LD	DE,I40B3                ; FMPAC
J4089:	LD	A,(DE)
        CP	(HL)
        INC	HL
        INC	DE
        JR	NZ,J40A6                ; not _FMPAC, try optional statement handler
        AND	A                       ; end of statement ?
        JR	NZ,J4089                ; nope, next
        POP	HL
        LD	A,(X5006)
        INC	A			; 0FFH on 5006H ?
        CALL	NZ,X5006		; nope, stop background music
        LD	E,1			; bank 1
        LD	HL,D4080
        CALL	C402C			; read word from fmpac bank
        EXX
        JP	J4020			; start routine in fmpac bank

J40A6:	POP	HL
        LD	DE,(D4080)
        LD	A,D
        AND	E
        INC	A			; additional CALL statement handler adres FFFFH ?
        PUSH	DE
        RET	NZ			; nope, then start it!
        POP	DE
        SCF
        RET				; statement not recognized, quit

I40B3:	DEFB	"FMPAC",0

        DEFS	04100H-$,0

; MSX-MUSIC FM BIOS

        DEFB	"V1.3 1988 04 26",0

?4110:  JP	J4140		; WRTOPL
?4113:	JP	J417B		; INIOPL
?4116:	JP	J42CE		; MSTART
?4119:	JP	J43DA		; MSTOP
?411C:	JP	J4430		; RDDATA
?411F:	JP	J4447		; OPLDRV
?4122:	JP	J473B		; TSTBGM
?4125:	RET                     ; unused entry
?4126:	DEFW	I4726           ; pointer to ?? routine

I4128:	DEFB	0ABH,0
        DEFB	0B5H,0
        DEFB	0C0H,0
        DEFB	0CCH,0
        DEFB	0D8H,0
        DEFB	0E5H,0
        DEFB	0F2H,0
        DEFB	001H,1
        DEFB	010H,1
        DEFB	020H,1
        DEFB	031H,1
        DEFB	043H,1

;	  Subroutine WRTOPL
;	     Inputs  ________________________
;	     Outputs ________________________

J4140:	OUT	(7CH),A
        PUSH	AF
        LD	A,E
        OUT	(7DH),A
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        POP	AF
        RET

;	  Subroutine write OPLL register
;	     Inputs  A = register, E = data, IY = pointer to OPLL register backup
;	     Outputs ________________________

C4150:	PUSH	IY
        PUSH	DE
        ADD	A,0
        LD	D,0
        LD	E,A
        ADD	IY,DE
        POP	DE
        OUT	(7CH),A
        PUSH	AF
        LD	A,E
        OUT	(7DH),A
        LD	(IY+0),A
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        POP	AF
        POP	IY
        RET

;	  Subroutine read OPLL register
;	     Inputs  A = register
;	     Outputs ________________________

C416C:	PUSH	HL
        PUSH	IY
        POP	HL
        ADD	A,0
        ADD	A,L
        LD	L,A
        LD	A,H
        ADC	A,0
        LD	H,A
        LD	A,(HL)
        POP	HL
        RET

;	  Subroutine INIOPL
;	     Inputs  HL = pointer to workarea
;	     Outputs ________________________

J417B:	DI
        LD	A,L
        AND	0FEH
        LD	L,A                     ; force even address and b0 = 0
        PUSH	HL
        LD	BC,4000H                ; page 1
        CALL	C41DC                   ; get SLTWRK entry
        POP	BC
        LD	A,(HL)
        AND	01H                     ; leave MSX-MUSIC BASIC initialized flag
        OR	C
        LD	(HL),A
        INC	HL
        LD	(HL),B                  ; store pointer to workarea
        PUSH	BC
        POP	IY
        CALL	C4230			; enable MSX-MUSIC hardware
        PUSH	IY
        POP	HL
        LD	DE,0
        ADD	HL,DE
        LD	E,L
        LD	D,H
        INC	DE
        LD	BC,61+9*11+1-1
        LD	(HL),0
        LDIR                            ; initialize work area
        LD	A,0                     ; software instrument 0, PIANO 1
        CALL	C463B                   ; initialize user defined voice
        LD	A,14                    ; rhythm register
        LD	E,00H                   ; rhythm disabled
        CALL	C4150                   ; write OPLL register
        INC	A                       ; test register
        CALL	C4150                   ; write OPLL register
        LD	A,10H                   ; F-number LSB register
        LD	E,20H
        LD	B,9
J41BC:	CALL	C4150                   ; write OPLL register
        INC	A
        DJNZ	J41BC
        LD	A,20H                   ; F-number MSB, octave, key, sustain register
        LD	E,07H
        LD	B,9
J41C8:	CALL	C4150                   ; write OPLL register
        INC	A
        DJNZ	J41C8
        LD	A,30H                   ; volume/instrument register
        LD	E,0B3H                  ; volume 11, instrument 3
        LD	B,9
J41D4:	CALL	C4150                   ; write OPLL register
        INC	A
        DJNZ	J41D4
        EI
        RET

;	  Subroutine get SLTWRK entry
;	     Inputs  BC = address
;	     Outputs ________________________

C41DC:	CALL	C41F6                   ; get slotid
        AND	0FH
        LD	L,A
        RLCA
        RLCA
        RLCA
        RLCA
        AND	30H
        OR	L
        AND	3CH
        OR	01H
        RLCA
        LD	E,A
        LD	D,0
        LD	HL,SLTWRK
        ADD	HL,DE
        RET

;	  Subroutine get slotid
;	     Inputs  BC = address
;	     Outputs ________________________

C41F6:	PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,B
        RLCA
        RLCA
        AND	03H
        LD	B,A
        IN	A,(0A8H)
        CALL	C4226                   ; shift page
        AND	03H                     ; primairy slot
        LD	E,A
        LD	D,0
        LD	HL,EXPTBL
        ADD	HL,DE
        LD	A,(HL)
        AND	80H                     ; expand flag
        OR	E                       ; primairy slot with expand flag
        JP	P,J4222                 ; slot not expanded,
        LD	E,A
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	A,(HL)                  ; secundairy slot register (backup)
        RLCA
        RLCA                            ; extra shift left, result must be in b3,b2
        CALL	C4226                   ; shift page
        AND	0CH                     ; secundairy slot
        OR	E
J4222:	POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine shift page
;	     Inputs  ________________________
;	     Outputs ________________________

C4226:	INC	B
        DEC	B
        RET	Z
        PUSH	BC
J422A:	RRCA
        RRCA
        DJNZ	J422A
        POP	BC
        RET

;	  Subroutine enable MSX-MUSIC hardware
;	     Inputs  IY = workarea
;	     Outputs ________________________

C4230:	LD	HL,I4243
        PUSH	IY
        POP	DE
        LD	BC,S4243
        LDIR				; copy detect routine in workarea
        LD	BC,4000H                ; page 1
        CALL	C41F6			; get slotid
        JP	(IY)                    ; execute detect routine

I4243:	PUSH	AF			; save slotid of this MSX-MUSIC
        PUSH	IY
        POP	DE                      ; start detect routine
        LD	HL,I4258-I4243
        ADD	HL,DE
        PUSH	HL			; continue here after search
        LD	HL,I42BE-I4243
        ADD	HL,DE			; internal MSX-MUSIC search string
        LD	IX,I427A-I4243
        ADD	IX,DE
        JP	(IX)			; search MSX-MUSIC

I4258:	CP	0FFH			; internal MSX-MUSIC found ?
        JR	NZ,J4272		; yep, restore MSX-MUSIC in page 1 and quit
        PUSH	IY
        POP	DE
        LD	HL,I426A-I4243
        ADD	HL,DE
        PUSH	HL			; continue here after search
        LD	HL,I42C6-I4243
        ADD	HL,DE			; external MSX-MUSIC search string
        JP	(IX)			; search MSX-MUSIC

; enable external MSX-MUSIC hardware

I426A:	LD	A,(D7FF6)
        OR	01H
        LD	(D7FF6),A		; enable fmpac hardware
J4272:	POP	AF
        LD	HL,4000H                ; page 1
        CALL	ENASLT			; restore MSX-MUSIC in page 1 and quit
        RET

;	  Subroutine search MSX-MUSIC
;	     Inputs  HL = pointer to search string
;	     Outputs ________________________

I427A:	EX	DE,HL                   ; pointer to search string
        LD	HL,EXPTBL
        LD	C,0
        LD	B,4
J4282:	PUSH	BC
        PUSH	HL
        LD	A,(HL)
        AND	80H
        OR	C
        LD	C,A
        LD	B,1
        RLCA
        JR	NC,J4290
        LD	B,4
J4290:	PUSH	BC
        PUSH	DE
        LD	A,C
        LD	H,HIGH 4000H
        CALL	ENASLT
        POP	DE
        PUSH	DE
        LD	HL,I4018
        LD	B,8
J429F:	LD	A,(DE)
        INC	DE
        CP	(HL)
        INC	HL
        JR	NZ,J42A7
        DJNZ	J429F
J42A7:	POP	DE
        POP	BC
        JR	Z,J42BA
        LD	A,C
        ADD	A,4
        LD	C,A
        DJNZ	J4290
        POP	HL
        POP	BC
        INC	HL
        INC	C
        DJNZ	J4282
        LD	A,0FFH
        RET

J42BA:	LD	A,C
        POP	HL
        POP	BC
        RET

I42BE:	DEFB	"APRLOPLL"

I42C6:	DEFB	"PAC2OPLL"

S4243   EQU     $-I4243


;	  Subroutine MSTART
;	     Inputs  A = repeat count, HL = pointer to song data
;	     Outputs ________________________

J42CE:	DI
        PUSH	HL                      ; store pointer to song data
        PUSH	AF
        LD	BC,4000H                ; page 1
        CALL	C41DC                   ; get SLTWRK entry
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        AND	0FEH
        LD	L,A
        PUSH	HL
        POP	IY                      ; pointer to workarea
        LD	DE,61
        ADD	HL,DE
        PUSH	HL
        POP	IX                      ; pointer to channel area
        POP	AF
        OR	A                       ; repeat infinite ?
        JR	NZ,J42EC                ; nope,
        DEC	A
J42EC:	LD	(IY+58),A               ; repeat count
        POP	HL                      ; restore pointer to song data
        LD	A,(HL)
        CP	12H                     ; song without rhythm section ?
        JP	NZ,J4306                ; nope,
        LD	A,14                    ; rhythm register
        LD	E,00H                   ; disabled rhythm
        CALL	C4150                   ; write OPLL register
        LD	B,9
        LD	(IY+57),0               ; FM9
I4303:	JP	J430C

J4306:	LD	B,7                     ; 1 drum channel, 6 FM channels
        LD	(IY+57),0FFH            ; FM6
J430C:	LD	(IY+59),0
        PUSH	HL
J4311:	LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; offset to data
        INC	HL
        LD	A,D
        OR	E                       ; no data ?
        JP	NZ,J4325                ; nope,
        LD	(IX+0),0
        LD	(IX+1),0                ; null pointer to data
        JP	J4337

J4325:	EX	(SP),HL                 ; restore pointer to song data, store pointer
        EX	DE,HL
        ADD	HL,DE
        LD	(IX+0),L
        LD	(IX+1),H                ; pointer to data
        LD	(IX+10),1
        EX	DE,HL
        EX	(SP),HL                 ; restore pointer, store pointer to song data
        INC	(IY+59)                 ; update
J4337:	LD	DE,11
        ADD	IX,DE                   ; next channel
        DJNZ	J4311
        POP	HL                      ; restore pointer to song data
        CALL	C4344
        EI
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C4344:	PUSH	IY
        POP	IX
        LD	DE,61
        ADD	IX,DE                   ; channel work area
        LD	B,9                     ; assume 9 channels
        LD	A,(IY+57)
        OR	A                       ; FM9 ?
        JP	Z,J4374                 ; yep,
        LD	L,(IX+0)
        LD	H,(IX+1)                ; pointer to channel data
        LD	(IX+2),L
        LD	(IX+3),H
        LD	(IX+4),1
        LD	(IX+5),0
        CALL	C43B5                   ; setup OPLL for rhythm
        LD	DE,11
        ADD	IX,DE                   ; to next channel
        LD	B,6                     ; 6 channels
J4374:	LD	L,(IX+0)
        LD	H,(IX+1)                ; pointer to channel data
        LD	(IX+2),L
        LD	(IX+3),H
        LD	(IX+4),1
        LD	(IX+5),0
        LD	(IX+6),0
        LD	(IX+7),0
        LD	(IX+9),0                ; legato off
        LD	(IX+8),8                ; Q value = 8
        LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        AND	0CFH                    ; key off, sustain off
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        CALL	C4150                   ; write OPLL register
        LD	DE,11
        ADD	IX,DE                   ; to next channel
        DJNZ	J4374                   ; next
        LD	A,(IY+59)
        LD	(IY+60),A
        RET

;	  Subroutine setup OPLL for rhythm
;	     Inputs  ________________________
;	     Outputs ________________________

C43B5:	LD	HL,I43C5
J43B8:	LD	A,(HL)
        CP	0FFH
        RET	Z
        INC	HL
        LD	E,(HL)
        INC	HL
        CALL	C4150                   ; write OPLL register
        JP	J43B8

I43C5:	DEFB 00EH,020H			; enable rhythm
        DEFB 016H,020H			; channel 6, f-number lsb
        DEFB 017H,050H			; channel 7, f-number lsb
        DEFB 018H,0C0H			; channel 8, f-number lsb
        DEFB 026H,005H			; channel 6, sustain off, key off, octave 2, b8 f-number=1
        DEFB 027H,005H			; channel 7, sustain off, key off, octave 2, b8 f-number=1
        DEFB 028H,001H			; channel 8, sustain off, key off, octave 0, b8 f-number=1
        DEFB 036H,003H			; channel 6, instrument 0, volume 3
        DEFB 037H,033H			; channel 7, instrument 3, volume 3
        DEFB 038H,033H			; channel 8, instrument 3, volume 3
        DEFB 0FFH

;	  Subroutine MSTOP
;	     Inputs  ________________________
;	     Outputs ________________________

J43DA:	DI
        LD	BC,4000H                ; page 1
        CALL	C41DC                   ; get SLTWRK entry
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        AND	0FEH
        LD	L,A                     ; get pointer to workarea
        PUSH	HL
        POP	IY
        LD	DE,61
        ADD	HL,DE
        PUSH	HL
        POP	IX                      ; pointer to channel work area
        LD	B,9                     ; assume 9 channels
        LD	A,(IY+57)
        OR	A                       ; FM9 ?
        JP	Z,J4410                 ; yep,
        LD	A,14
        LD	E,20H                   ; rhythm enabled, all rhythm instruments off
        CALL	C4150                   ; write OPLL register
        LD	(IX+2),0
        LD	(IX+3),0
        LD	DE,11
J440C:	ADD	IX,DE
        LD	B,6                     ; 6 channels
J4410:	LD	(IX+2),0
        LD	(IX+3),0
        LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        AND	0EFH                    ; key off
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        CALL	C4150                   ; write OPLL register
        LD	DE,11
        ADD	IX,DE
        DJNZ	J4410
        EI
        RET

;	  Subroutine RDDATA (get software instrument data)
;	     Inputs  A = software instrument, HL = pointer to buffer
;	     Outputs ________________________

J4430:	PUSH	BC
        PUSH	DE
        PUSH	HL
        EX	DE,HL
        LD	L,A
        LD	H,0
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        LD	BC,I4C00
        ADD	HL,BC
        LD	BC,8
        LDIR
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine OPLDRV
;	     Inputs  ________________________
;	     Outputs ________________________

J4447:	PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        PUSH	IX
        PUSH	IY
        LD	BC,4000H                ; page 1
        CALL	C41DC                   ; get SLTWRK entry
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        AND	0FEH
        LD	L,A
        PUSH	HL
        POP	IY                      ; pointer to workarea
        LD	DE,61
        ADD	HL,DE
        PUSH	HL
        POP	IX                      ; pointer to channel work area

J4465:	LD	B,9                     ; assume 9 channels
        LD	A,(IY+57)
        OR	A                       ; FM9 ?
        JP	Z,J4492                 ; yep,
        LD	L,(IX+2)
        LD	H,(IX+3)                ; pointer to rhythm data
        LD	A,L
        OR	H                       ; no data ?
        JP	Z,J448B                 ; yep, skip
        LD	E,(IX+4)
        LD	D,(IX+5)                ; duration
        DEC	DE
        LD	A,E
        OR	D                       ; duration finished ?
        CALL	Z,C4681                 ; yep, get new rhythm data
        LD	(IX+4),E
        LD	(IX+5),D                ; update duration
J448B:	LD	DE,11
        ADD	IX,DE                   ; next channel
        LD	B,6                     ; 6 channels
J4492:	LD	E,(IX+6)
        LD	D,(IX+7)                ; duration
        LD	A,E
        OR	D                       ; duration already finished ?
        JP	Z,J44A9                 ; yep, skip
        DEC	DE
        LD	A,E
        OR	D
        LD	(IX+6),E
        LD	(IX+7),D                ; update duration
        CALL	Z,C44D6                 ; duration finished, key off when legato = off
J44A9:	LD	L,(IX+2)
        LD	H,(IX+3)                ; pointer to FM data
        LD	A,L
        OR	H                       ; no data ?
        JP	Z,J44C6                 ; yep, skip
        LD	E,(IX+4)
        LD	D,(IX+5)                ; duration
        DEC	DE
        LD	A,E
        OR	D
        CALL	Z,C44EA                 ; duration finished, execute FM instruction
        LD	(IX+4),E
        LD	(IX+5),D                ; update duration
J44C6:	LD	DE,11
        ADD	IX,DE
        DJNZ	J4492                   ; next
        POP	IY
        POP	IX
        POP	HL
        POP	DE
        POP	BC
        POP	AF
        RET

;	  Subroutine key off when legato = off
;	     Inputs  ________________________
;	     Outputs ________________________

C44D6:	LD	A,(IX+9)
        OR	A                       ; legato on ?
        RET	NZ                      ; yep, quit
        LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        AND	0EFH                    ; key off
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        JP	C4150                   ; write OPLL register

;	  Subroutine execute instruction
;	     Inputs  HL = pointer to channel instruction, IX = pointer to channel work area
;	     Outputs ________________________

C44EA:	LD	A,(HL)
        INC	HL
        CP	0FFH                    ; end marker ?
        JP	Z,J4524                 ; yep,
        CP	60H
        JP	C,J4554                 ; 00H-5FH, pitch
        CP	70H
        JP	C,J45DD                 ; 60H-6FH, set channel volume
        CP	80H
        JP	C,J45F3                 ; 70H-7FH, set channel instrument
        JP	Z,J460D                 ; 80H, set channel sustain on
        CP	81H
        JP	Z,J461F                 ; 81H, set channel sustain off
        CP	82H
        JP	Z,J4631                 ; 82H, set software instrument
        CP	83H
        JP	Z,J4654                 ; 83H, set user defined instrument
        CP	84H
        JP	Z,J467A                 ; 84H, set legato off
        CP	85H
        JP	Z,J4673                 ; 85H, set legato on
        CP	86H
        JP	Z,J466B                 ; 86H, set Q value
        JP	C44EA                   ; unkown, ignore (execute next channel instruction)

J4524:	LD	(IX+2),0
        LD	(IX+3),0                ; duration = 0
        LD	A,(IX+10)
        OR	A
        RET	Z
        DEC	(IY+60)
        RET	NZ
        LD	A,(IY+58)
        CP	0FFH                    ; repeat infinite ?
        JP	Z,J4544                 ; yep,
        OR	A                       ; finished repeats ?
        RET	Z                       ; yep, quit
        DEC	A
        LD	(IY+58),A               ; update repeat count
        RET	Z                       ; finished repeats, quit
J4544:	POP	HL
        CALL	C4344
        PUSH	IY
        POP	IX
        LD	DE,61
        ADD	IX,DE                   ; pointer to channel work area
        JP	J4465

J4554:	LD	C,A
        CALL	C4712                   ; retrieve duration
        LD	(IX+2),L
        LD	(IX+3),H                ; update pointer
        LD	A,C
        OR	A                       ; pitch = 0 ?
        RET	Z                       ; yep, quit
        PUSH	DE
        LD	A,(IX+8)                ; Q value
        AND	07H                     ; Q = 0 ?
        JP	NZ,J456F                ; nope,
        LD	H,E
        LD	L,D
        JP	J458C

J456F:	RRCA
        RRCA
        RRCA
        PUSH	BC
        LD	HL,0
        LD	B,8
J4578:	ADD	HL,HL
        RLA
        JP	NC,J4580
        ADD	HL,DE
        ADC	A,0
J4580:	DJNZ	J4578
        POP	BC
        LD	L,A
        OR	H
        JP	NZ,J458C
        LD	H,01H
        LD	L,00H
J458C:	LD	(IX+6),H
        LD	(IX+7),L
        DEC	C
        LD	L,C
        LD	H,00H
        LD	A,0CH
        CALL	C45C4
        LD	C,L
        SLA	C
        LD	A,H
        ADD	A,A
        LD	E,A
        LD	D,0
        LD	HL,I4128
        ADD	HL,DE
        LD	A,10H-1
        ADD	A,B
        LD	E,(HL)                  ; F-number LSB
        INC	HL
        CALL	C4150                   ; write OPLL register
        LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        AND	20H                     ; leave sustain
        OR	(HL)                    ; F-number MSB
        OR	C                       ; octave block
        OR	10H                     ; key on
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        CALL	C4150                   ; write OPLL register
        POP	DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C45C4:	PUSH	BC
        LD	B,8
        OR	A
        LD	C,A
J45C9:	ADC	HL,HL
        LD	A,H
        JP	C,J45D3
        CP	C
        JP	C,J45D6
J45D3:	SUB	C
        LD	H,A
        OR	A
J45D6:	CCF
        DJNZ	J45C9
        RL	L
        POP	BC
        RET

J45DD:	AND	0FH
        LD	C,A
        LD	A,30H-1
        ADD	A,B                     ; channel volume/instrument register
        CALL	C416C                   ; read OPLL register
        AND	0F0H                    ; leave instrument, clear volume
        OR	C
        LD	E,A                     ; update volume
        LD	A,30H-1
        ADD	A,B                     ; channel volume/instrument register
        CALL	C4150                   ; write OPLL register
        JP	C44EA                   ; execute next instruction

J45F3:	AND	0FH
        RLCA
        RLCA
        RLCA
        RLCA
        LD	C,A
        LD	A,30H-1
        ADD	A,B                     ; channel volume/instrument register
        CALL	C416C                   ; read OPLL register
        AND	0FH                     ; leave volume, clear instrument
        OR	C
        LD	E,A
        LD	A,30H-1
        ADD	A,B                     ; channel volume/instrument register
        CALL	C4150                   ; write OPLL register
        JP	C44EA                   ; execute next instruction

J460D:	LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        OR	20H                     ; sustain on
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        CALL	C4150                   ; write OPLL register
        JP	C44EA                   ; execute next instruction

J461F:	LD	A,20H-1
        ADD	A,B
        CALL	C416C                   ; read OPLL register
        AND	0DFH                    ; sustain off
        LD	E,A
        LD	A,20H-1
        ADD	A,B
        CALL	C4150                   ; write OPLL register
        JP	C44EA                   ; execute next instruction

J4631:	LD	A,(HL)                  ; software instrument
        INC	HL
        AND	7FH                     ; force 0-63
        CALL	C463B                   ; initialize user defined voice
        JP	C44EA                   ; execute next instruction

;	  Subroutine initialize user defined voice
;	     Inputs  A = software instrument
;	     Outputs ________________________

C463B:	INC	A
        PUSH	HL
        LD	L,A
        LD	H,0
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL                   ; *8
        LD	DE,I4C00
        ADD	HL,DE
        LD	A,7
J4649:	DEC	HL
        LD	E,(HL)                  ; data
        CALL	C4150                   ; write OPLL register
        DEC	A
        JP	P,J4649                 ; next register
        POP	HL
        RET

J4654:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        PUSH	HL
        EX	DE,HL
        LD	C,8
        XOR	A
J465D:	LD	E,(HL)                  ; data
        INC	HL
        CALL	C4150                   ; write OPLL register
        INC	A
        DEC	C
        JP	NZ,J465D
        POP	HL
        JP	C44EA                   ; execute next instruction

J466B:	LD	A,(HL)
        INC	HL
        LD	(IX+8),A                ; Q value
        JP	C44EA                   ; execute next instruction

J4673:	LD	(IX+9),0FFH
        JP	C44EA                   ; execute next instruction

J467A:	LD	(IX+9),00H
        JP	C44EA                   ; execute next instruction

;	  Subroutine get new rhythm data
;	     Inputs  HL = pointer to
;	     Outputs DE = duration

C4681:	LD	A,(HL)
        INC	HL
        CP	0FFH                    ; end marker ?
        JP	Z,J4524                 ; yep,
        OR	A                       ; volume specified ?
        JP	P,J46EC                 ; nope, do rhythm

; do rhythm volume

        LD	D,A
        LD	A,(HL)                  ; volume byte
        INC	HL
        AND	0FH                     ; force 0-15
        LD	C,A                     ; volume low nibble
        RLA
        RLA
        RLA
        RLA
        LD	B,A                     ; volume high nibble
        RR	D                       ; HI-HAT ?
        JR	NC,J46A9                ; nope, skip
        LD	A,37H
        CALL	C416C                   ; read OPLL register
        AND	0FH
        OR	B
        LD	E,A
        LD	A,37H
        CALL	C4150                   ; write OPLL register
J46A9:	RR	D                       ; CYMBOLS ?
        JR	NC,J46BB                ; nope, skip
        LD	A,38H
        CALL	C416C                   ; read OPLL register
        AND	0F0H
        OR	C
        LD	E,A
        LD	A,38H
        CALL	C4150                   ; write OPLL register
J46BB:	RR	D                       ; TOM-TOM ?
        JR	NC,J46CD                ; nope, skip
        LD	A,38H
        CALL	C416C                   ; read OPLL register
        AND	0FH
        OR	B
        LD	E,A
        LD	A,38H
        CALL	C4150                   ; write OPLL register
J46CD:	RR	D                       ; SNARE-DRUM ?
        JR	NC,J46DF                ; nope, skip
        LD	A,37H
        CALL	C416C                   ; read OPLL register
        AND	0F0H
        OR	C
        LD	E,A
        LD	A,37H
        CALL	C4150                   ; write OPLL register
J46DF:	RR	D                       ; BASS-DRUM ?
        JR	NC,J46E9                ; nope, skip
        LD	A,36H
        LD	E,C
        CALL	C4150                   ; write OPLL register
J46E9:	JP	C4681                   ; get new rhythm data

; do rhythm

J46EC:	LD	C,A
        XOR	1FH                     ; only rhythm bits
        LD	E,A
        LD	A,14
        CALL	C416C                   ; read OPLL register
        AND	E
        LD	E,A
        LD	A,14
        CALL	C4150                   ; write OPLL register
        CALL	C416C                   ; read OPLL register
        LD	E,A
        LD	A,C
        OR	E
        LD	E,A
        LD	A,14
        CALL	C4150                   ; write OPLL register
        CALL	C4712                   ; retrieve duration
        LD	(IX+2),L
        LD	(IX+3),H                ; update pointer
        RET

;	  Subroutine retrieve duration
;	     Inputs  ________________________
;	     Outputs DE = duration

C4712:	LD	DE,0                    ; duration = 0
J4715:	LD	A,(HL)                  ; duration byte
        INC	HL
        CP	0FFH
        JR	NZ,J471F
        INC	D
        DEC	DE                      ; duration = duration + 255
        JR	J4715                   ; next duration byte

J471F:	ADD	A,E
        LD	E,A
        LD	A,D
        ADC	A,0
        LD	D,A                     ; duration = duration + duration byte
        RET

;	  Subroutine unknown purpose routine
;	     Inputs  A = song (0 = stop song)
;	     Outputs ________________________

I4726:	OR	A
        JP	Z,J43DA			; MSTOP
        DEC	A                       ; make 0 based
        ADD	A,A
        LD	D,0
        LD	E,A
        LD	HL,I$8010
        ADD	HL,DE
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; pointer to song data
        LD	A,B                     ; repeat count
        JP	J42CE			; MSTART

;	  Subroutine TSTBGM
;	     Inputs  ________________________
;	     Outputs ________________________

J473B:	PUSH	BC
        PUSH	HL
        LD	BC,4000H                ; page 1
        CALL	C41DC                   ; get SLTWRK entry
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        AND	0FEH
        LD	L,A                     ; pointer to work area
        LD	BC,58
        ADD	HL,BC
        LD	A,(HL)                  ; repeat count (<>0 is playing)
        POP	HL
        POP	BC
        RET

        DEFS	04C00H-$,0


; Table with 64 software instruments
; each entry has 8 bytes, these are the registervalues for OPLL register 7 - 0
; so register 7 is first stored and then downwards

I4C00:	DEFB	31H,11H,0EH,20H,0D9H,0B2H,11H,0F4H
	DEFB	30H,10H,0FH,20H,0D9H,0B2H,10H,0F3H
	DEFB	61H,61H,12H,20H,0B4H,56H,14H,17H
	DEFB	61H,31H,20H,20H,6CH,43H,18H,26H
	DEFB	0A2H,30H,0A0H,20H,88H,54H,14H,06H
	DEFB	31H,34H,20H,20H,72H,56H,0AH,1CH
	DEFB	31H,71H,16H,20H,51H,52H,26H,24H
	DEFB	34H,30H,37H,20H,50H,30H,76H,06H
	DEFB	17H,52H,18H,20H,88H,0D9H,66H,24H
	DEFB	0E1H,63H,0AH,20H,0FCH,0F8H,28H,29H
	DEFB	02H,41H,15H,20H,0A3H,0A3H,75H,05H
	DEFB	19H,53H,0CH,20H,0C7H,0F5H,11H,03H
	DEFB	23H,43H,09H,20H,0DDH,0BFH,4AH,05H
	DEFB	03H,09H,11H,20H,0D2H,0B4H,0F4H,0F5H
	DEFB	01H,00H,06H,20H,0A3H,0E2H,0F4H,0F4H
	DEFB	01H,01H,11H,20H,0C0H,0B4H,01H,0F6H
	DEFB	0F9H,0F1H,24H,20H,95H,0D1H,0E5H,0F2H
	DEFB	13H,11H,0CH,20H,0FCH,0D2H,33H,83H
	DEFB	01H,10H,0EH,20H,0CAH,0E6H,44H,24H
	DEFB	0E0H,0F4H,1BH,20H,11H,0F0H,04H,08H
	DEFB	0FFH,70H,19H,20H,50H,1FH,05H,01H
	DEFB	13H,11H,11H,20H,0FAH,0F2H,21H,0F4H
	DEFB	0A6H,42H,10H,20H,0FBH,0B9H,11H,02H
	DEFB	40H,31H,89H,20H,0C7H,0F9H,14H,04H
	DEFB	42H,44H,0BH,20H,94H,0B0H,33H,0F6H
	DEFB	01H,03H,0BH,20H,0BAH,0D9H,25H,06H
	DEFB	40H,00H,00H,20H,0FAH,0D9H,37H,04H
	DEFB	02H,03H,09H,20H,0CBH,0FFH,39H,06H
	DEFB	18H,11H,09H,20H,0F8H,0F5H,26H,26H
	DEFB	0BH,04H,09H,20H,0F0H,0F5H,01H,27H
	DEFB	40H,40H,07H,20H,0D0H,0D6H,01H,27H
	DEFB	00H,01H,07H,20H,0CBH,0E3H,36H,25H
	DEFB	11H,11H,08H,20H,0FAH,0B2H,20H,0F4H
	DEFB	11H,11H,11H,20H,0C0H,0B2H,01H,0F4H
	DEFB	19H,53H,15H,20H,0E7H,95H,21H,03H
	DEFB	30H,70H,19H,20H,42H,62H,26H,24H
	DEFB	62H,71H,25H,20H,64H,43H,12H,26H
	DEFB	21H,03H,0BH,20H,90H,0D4H,02H,0F5H
	DEFB	01H,03H,0AH,20H,90H,0A4H,03H,0F5H
	DEFB	43H,53H,0EH,20H,0B5H,0E9H,84H,04H
	DEFB	34H,30H,26H,20H,50H,30H,76H,06H
	DEFB	73H,33H,5AH,20H,99H,0F5H,14H,15H
	DEFB	73H,13H,16H,20H,0F9H,0F5H,33H,03H
	DEFB	61H,21H,15H,20H,76H,54H,23H,06H
	DEFB	63H,70H,1BH,20H,75H,4BH,45H,15H
	DEFB	61H,0A1H,0AH,20H,76H,54H,12H,07H
	DEFB	61H,78H,0DH,20H,85H,0F2H,14H,03H
	DEFB	31H,71H,15H,20H,0B6H,0F9H,03H,26H
	DEFB	61H,71H,0DH,20H,75H,0F2H,18H,03H
	DEFB	03H,0CH,14H,20H,0A7H,0FCH,13H,15H
	DEFB	13H,32H,80H,20H,20H,85H,03H,0AFH
	DEFB	0F1H,31H,17H,20H,23H,40H,14H,09H
	DEFB	0F0H,74H,17H,20H,5AH,43H,06H,0FCH
	DEFB	20H,71H,0DH,20H,0C1H,0D5H,56H,06H
	DEFB	30H,32H,06H,20H,40H,40H,04H,74H
	DEFB	30H,32H,03H,20H,40H,40H,04H,74H
	DEFB	01H,08H,0DH,20H,78H,0F8H,7FH,0F9H
	DEFB	0C8H,0C0H,0BH,20H,76H,0F7H,11H,0F9H
	DEFB	49H,40H,0BH,20H,0B4H,0F9H,0FFH,05H
	DEFB	0CDH,42H,0CH,20H,0A2H,0F0H,00H,01H
	DEFB	51H,42H,13H,20H,13H,10H,42H,01H
	DEFB	51H,42H,13H,20H,13H,10H,42H,01H
	DEFB	30H,34H,12H,20H,23H,70H,26H,02H
	DEFB	00H,00H,0FFH,20H,00H,00H,0FFH,0FFH

        DEFS	05000H-$,0

;	Jumptable, some sort of BIOS ?
;
;	+0	additional CALL statement handler
;	+3	timer interrupt handler
;	+6	stop background music (if MSX-MUSIC BASIC is initialized)
;	+9	enable and initialize OPLL

I5000:	JP	J50EB                   ; additional CALL statement handler
J5003:	JP	J605B                   ; timer interrupt handler
X5006:	JP	J5078                   ; stop background music (if MSX-MUSIC BASIC is initialized)

;	  Subroutine enable and initialize OPLL
;	     Inputs  ________________________
;	     Outputs ________________________

C5009:	LD	HL,C.F975
        LD	DE,C.F975+1
        LD	BC,0147H-1
        LD	(HL),0
        LDIR                            ; initialize MSX-MUSIC static work area
        LD	B,4                     ; 4 primairy slots
J5018:	PUSH	BC
        LD	A,4
        SUB	B
        LD	C,A                     ; current primairy slot
        LD	HL,EXPTBL
        CALL	C5486                   ; HL = HL + A
        LD	A,(HL)
        ADD	A,A                     ; expanded slot ?
        JR	NC,J5043                ; nope,
        LD	B,4                     ; 4 secundairy slots
J5029:	PUSH	BC
        LD	A,32+4
        SUB	B
        RLCA
        RLCA
        OR	C
        CALL	C5054                   ; internal MSX-MUSIC in slot ?
        POP	BC
        JR	Z,J5049                 ; yep,
        DJNZ	J5029                   ; next secundairy slot
J5038:	POP	BC
        DJNZ	J5018                   ; next primairy slot
        LD	HL,D7FF6
        SET	0,(HL)			; enable fmpac hardware
J5040:	JP	C6D61                   ; initialize OPLL

J5043:	LD	A,C                     ; primairy slot
        CALL	C5054                   ; internal MSX-MUSIC in slot ?
        JR	NZ,J5038                ; nope, next primairy slot
J5049:	POP	BC
        JR	J5040                   ; initialize OPLL

I504C:	DEFB	"APRLOPLL"

;	  Subroutine internal MSX-MUSIC in slot ?
;	     Inputs  A = slotid
;	     Outputs ________________________

C5054:	PUSH	BC
        LD	HL,I4018
        LD	DE,I504C
        LD	B,8
J505D:	PUSH	AF
        PUSH	BC
        PUSH	DE
        CALL	RDSLT
        EI
        POP	DE
        POP	BC
        LD	C,A
        LD	A,(DE)
        CP	C
        JR	NZ,J5073
        POP	AF
        INC	DE
        INC	HL
        DJNZ	J505D
        POP	BC
        XOR	A                       ; set found internal MSX-MUSIC flag
        RET

J5073:	POP	AF
        POP	BC
        XOR	A
        INC	A                       ; reset found internal MSX-MUSIC flag
        RET

;	  Subroutine stop background music (if MSX-MUSIC BASIC is initialized)
;	     Inputs  ________________________
;	     Outputs ________________________

J5078:	CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        RET	Z                       ; nope, quit
        JP	C658D                   ; stop background music

;	  Subroutine initialize MSX-MUSIC BASIC
;	     Inputs  ________________________
;	     Outputs ________________________

C507F:	DI
        CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        RET	NZ                      ; yep, quit
        CALL	C50BE                   ; set MSX-MUSIC BASIC initialized flag
        LD	HL,H.TIMI
        LD	DE,J.F9BB
        PUSH	HL
        CALL	C50AE                   ; copy hook content (save current timer interrupt handler)
        LD	HL,I50B9
        POP	DE
        CALL	C50AE                   ; copy hook content (install new timer interrupt handler)
        CALL	C554C                   ; get slotid of page 1
        LD	(D.F97C),A              ; store slotid fmpac
        LD	(H.TIMI+1),A
        LD	HL,I50B4
        LD	DE,H.PLAY
        CALL	C50AE                   ; copy hook content (install new PLAY statement handler)
        LD	(H.PLAY+1),A
        RET

;	  Subroutine copy hook content
;	     Inputs  ________________________
;	     Outputs ________________________

C50AE:	LD	BC,5
        LDIR
        RET

;	  Subroutine PLAY statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

I50B4:	RST	30H
        DEFB	0
        DEFW	C57A1
        RET

;	  Subroutine timer interrupt handler
;	     Inputs  ________________________
;	     Outputs ________________________

I50B9:	RST	30H
        DEFB	0
        DEFW	C7FED
        RET

;	  Subroutine set MSX-MUSIC BASIC initialized flag
;	     Inputs  ________________________
;	     Outputs ________________________

C50BE:	PUSH	HL
        CALL	C50CE                   ; get SLTWRK entry
        SET	0,(HL)
        POP	HL
        RET

;	  Subroutine MSX-MUSIC BASIC initialized ?
;	     Inputs  ________________________
;	     Outputs ________________________

C50C6:	PUSH	HL
        CALL	C50CE                   ; get SLTWRK entry
        BIT	0,(HL)
        POP	HL
        RET

;	  Subroutine get SLTWRK entry
;	     Inputs  ________________________
;	     Outputs ________________________

C50CE:	PUSH	AF
        PUSH	DE
        CALL	C554C                   ; get slotid of page 1
        AND	0FH
        LD	L,A
        RLCA
        RLCA
        RLCA
        RLCA
        AND	30H
        OR	L
        AND	3CH
        INC	A
        ADD	A,A
        LD	E,A
        LD	D,0
        LD	HL,SLTWRK
        ADD	HL,DE
        POP	DE
        POP	AF
        RET

;	  Subroutine additional CALL statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

J50EB:	EI
        PUSH	HL
        LD	HL,PROCNM
        CALL	C525A                   ; recognized statement ?
        POP	HL
        RET	C                       ; statement not recognized, quit
        PUSH	HL
        LD	HL,C52EC
        OR	A
        SBC	HL,DE                   ; _MUSIC ?
        POP	HL
        JR	Z,J5104                 ; yep, skip check
        CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        SCF
        RET	Z                       ; nope, quit with statement not recognized
J5104:	CALL	C510F                   ; check for free BASIC memory
        CALL	C510D                   ; execute handler
        EI
        OR	A
        RET

;	  Subroutine execute handler
;	     Inputs  DE = handler
;	     Outputs ________________________

C510D:	PUSH	DE
        RET

;	  Subroutine check for free BASIC memory
;	     Inputs  ________________________
;	     Outputs ________________________

C510F:	PUSH	HL
        PUSH	DE
        LD	HL,-768
        ADD	HL,SP
        JP	NC,J6779                ; out of memory
        LD	DE,(STREND)
        OR	A
        SBC	HL,DE
        JP	C,J6779                 ; out of memory
        POP	DE
        POP	HL
        RET

; statement offset table

I5125:	DEFB	I.ST_A-I513B		; A
        DEFB	I.ST_B-I513B		; B
        DEFB	I.ST_C-I513B		; C
        DEFB	I.ST__-I513B		; D
        DEFB	I.ST__-I513B		; E
        DEFB	I.ST__-I513B		; F
        DEFB	I.ST__-I513B		; G
        DEFB	I.ST__-I513B		; H
        DEFB	I.ST_I-I513B		; I
        DEFB	I.ST__-I513B		; J
        DEFB	I.ST_K-I513B		; K
        DEFB	I.ST_L-I513B		; L
        DEFB	I.ST_M-I513B		; M
        DEFB	I.ST__-I513B		; N
        DEFB	I.ST__-I513B		; O
        DEFB	I.ST_P-I513B		; P
        DEFB	I.ST__-I513B		; Q
        DEFB	I.ST_R-I513B		; R
        DEFB	I.ST_S-I513B		; S
        DEFB	I.ST_T-I513B		; T
        DEFB	I.ST__-I513B		; U
        DEFB	I.ST_V-I513B		; V

I513B:
I.ST_A:	KEYWRD	<AUDREG>,C5498
        KEYWRD	<APPEND MK>,C52B1       ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<APEEK>,C52B1           ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<APOKE>,C52B1           ; unsupported MSX-AUDIO statement, illegal function call
I.ST__:	DEFB	0FFH
I.ST_B:	KEYWRD	<BGM>,C5458
        DEFB	0FFH
I.ST_C:	KEYWRD	<CONT MK>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<COPY PCM>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<CONVP>,C52B1           ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<CONVA>,C52B1           ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_I:	KEYWRD	<INMK>,C52B1            ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_K:	KEYWRD	<KEY ON>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<KEY OFF>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_L:	KEYWRD	<LOAD PCM>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_M:	KEYWRD	<MK VOICE>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MK VEL>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MK VOL>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MK TEMPO>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MK STAT>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MK PCM>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<MUSIC>,C52EC
        DEFB	0FFH
I.ST_R:	KEYWRD	<REC MK>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<RECMOD>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<REC PCM>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_S:	KEYWRD	<STOPM>,C548B
        KEYWRD	<SET PCM>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<SAVE PCM>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<SYNTHE>,C52B1          ; unsupported MSX-AUDIO statement, illegal function call
        DEFB	0FFH
I.ST_T:	KEYWRD	<TRANSPOSE>,C5535
        KEYWRD	<TEMPER>,C5541
        DEFB	0FFH
I.ST_V:	KEYWRD	<VOICE>,C55EE
        KEYWRD	<VOICE COPY>,C567E
        DEFB	0FFH
I.ST_P:	KEYWRD	<PLAY>,C5746
        KEYWRD	<PLAY PCM>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<PCM FREQ>,C52B1        ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<PCM VOL>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<PLAY MK>,C52B1         ; unsupported MSX-AUDIO statement, illegal function call
        KEYWRD	<PITCH>,C5529
        DEFB	0FFH

;	  Subroutine recognized statement ?
;	     Inputs  ________________________
;	     Outputs ________________________

C525A:	LD	A,(HL)
        SUB	"A"                     ; valid starting letter ?
        RET	C                       ; nope, quit
        CP	"V"-"A"+1               ; valid starting letter ?
        CCF
        RET	C                       ; nope, quit
        INC	HL
        PUSH	HL
        LD	HL,I5125                ; statement offset table
        CALL	C5486                   ; HL = HL + A
        LD	A,(HL)                  ; offset
        LD	HL,I513B                ; statement table
        CALL	C5486                   ; HL = HL + A
        EX	DE,HL
        POP	HL
J5273:	PUSH	HL
        LD	A,(DE)
        INC	A                       ; end of table ?
        JR	Z,J5283                 ; yep, quit
        CALL	C5286                   ; compare statement name
        POP	HL
        JR	NZ,J5273                ; not equal, try next
        EX	DE,HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; statement handler
        RET

J5283:	SCF
        POP	HL
        RET

;	  Subroutine compare statement name
;	     Inputs  ________________________
;	     Outputs ________________________

C5286:	LD	A,(DE)
        LD	B,A
        AND	7FH                     ; ignore end of statement name flag
        CP	(HL)
        INC	DE
        INC	HL
        JR	NZ,J5297
        LD	A,B
        OR	A                       ; end of statement name flag ?
        JP	P,C5286                 ; nope, compare next character
        LD	A,(HL)
        OR	A                       ; end of statement name ?
        RET	Z                       ; yep, quit (statement name found)
J5297:	INC	B                       ; space allowed ?
        JR	NZ,J52A4                ; nope, skip to next statement name
        DEC	HL
J529B:	LD	A,(HL)
        CP	' '                     ; space ?
        INC	HL
        JR	Z,J529B                 ; yep, skip it
        DEC	HL
        JR	C5286                   ; compare next character

J52A4:	DEC	DE
J52A5:	LD	A,(DE)
        INC	DE
        INC	A
        JR	Z,J52A5
        DEC	A
        JP	P,J52A5
        INC	DE
        INC	DE
        RET

;	  Subroutine illegal CALL statement
;	     Inputs  ________________________
;	     Outputs ________________________

C52B1:	JP	C6770                   ; illegal function call error

;	  Subroutine check for ( and evaluate byte operand
;	     Inputs  ________________________
;	     Outputs ________________________

C52B4:	CALL	C55E4                   ; check for BASIC char "("
        JP	C67C1                   ; evaluate byte operand

; unused code, MSX-AUDIO left over

?52BA:	CALL	C54E7                   ; get BASIC char
        JP	NZ,J676D                ; not end of statement, syntax error
        RET

;	  Subroutine check for ( ,evaluate byte operand, check for )
;	     Inputs  ________________________
;	     Outputs ________________________

C52C1:	PUSH	BC
        CALL	C52B4                   ; check for ( and evaluate byte operand
        JR	J52DA

; unused code, MSX-AUDIO left over

?52C7:	PUSH	BC
        CALL	C55E4                   ; check for BASIC char "("
        JR	J52D7

; unused code, MSX-AUDIO left over

?52CD:	CALL	C55E4                   ; check for BASIC char "("
        CALL	C67BB                   ; evaluate address operand
        PUSH	DE
        CALL	C55DF                   ; check for BASIC char ","
J52D7:	CALL	C67BB                   ; evaluate address operand

J52DA:	CALL	C55E9                   ; check for BASIC char ")"
        POP	BC
        LD	A,E
        RET

; _MUSIC defaults

I52E0:	DEFB	3                       ; number of channels = 3
        DEFB	1                       ; drums
        DEFB	0                       ; keyboard
        DEFB	1,1,1,0,0,0,0,0,0       ; 1 FM channel on voice 0,1 and 2

S52E0   EQU     $-I52E0


;	  Subroutine _MUSIC
;	     Inputs  ________________________
;	     Outputs ________________________

C52EC:	PUSH	HL
        CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        CALL	Z,C5009                 ; nope, enable and initialize OPLL
        LD	HL,I52E0
        LD	DE,T.MUSI
        LD	BC,S52E0
        LDIR                            ; assume default channel definition
        POP	HL
        CALL	C54E7                   ; get BASIC char
        JR	Z,J536F                 ; end of statement, use default channel definition
        PUSH	HL
        LD	HL,T.MUSI
        LD	DE,T.MUSI+1
        LD	BC,S52E0-1
        LD	(HL),0
        LDIR                            ; clear channel definition
        POP	HL
        CALL	C55E4                   ; check for BASIC char "("
        CP	","                     ; drum parameter not specified ?
        JR	Z,J532A                 ; yep, drums disabled
        CALL	C67C1                   ; evaluate byte operand
        CP	1+1                     ; 0 or 1 ?
        JP	NC,C6770                ; nope, illegal function call
        LD	(T.MUSI+1),A            ; store drum parameter
        LD	A,(HL)
        CP	")"                     ; more parameters ?
        JR	Z,J5369                 ; nope,
J532A:	CALL	C55DF                   ; check for BASIC char ","
        CP	","                     ; keyboard parameter not specified ?
        JR	Z,J533F                 ; yep, keyboard disabled
        CALL	C67C1                   ; evaluate byte operand
        OR	A                       ; 0 ?
        JR	NZ,J5355                ; nope, illegal function call
        LD	(T.MUSI+2),A            ; store keyboard parameter
        LD	A,(HL)
        CP	")"                     ; more parameters ?
        JR	Z,J5369                 ; nope,
J533F:	LD	B,9
        PUSH	HL
        LD	HL,T.MUSI+3
        EX	(SP),HL
        LD	C,0                     ; number of voices = 0
J5348:	CALL	C55DF                   ; check for BASIC char ","
        PUSH	BC
        CALL	C67C1                   ; evaluate byte operand
        POP	BC
        OR	A                       ; 0 ?
        JR	Z,J5355                 ; yep, illegal function call
        CP	9+1                     ; valid number of channels ?
J5355:	JP	NC,C6770                ; nope, illegal function call
        EX	(SP),HL
        LD	(HL),A                  ; store number of channels
        INC	HL
        INC	C                       ; update voice
        EX	(SP),HL
        LD	A,(HL)
        CP	")"
        JR	Z,J5364
        DJNZ	J5348                   ; next voice
J5364:	LD	A,C
        LD	(T.MUSI+0),A            ; store number of voices
        POP	BC                      ; clean up stack
J5369:	CALL	C55E9                   ; check for BASIC char ")"
        JP	NZ,J676D                ; not end of statement, syntax error
J536F:	PUSH	HL
        LD	HL,T.MUSI+1
        LD	A,(HL)                  ; drum parameter
        AND	01H
        LD	D,A
        ADD	A,A
        ADD	A,D                     ; drum takes 3 channels
        INC	HL
        ADD	A,(HL)                  ; keyboard takes 1 channel
        INC	HL
        LD	D,A
        LD	A,(T.MUSI+0)
        LD	B,A                     ; number of voices
        OR	A                       ; no voices ?
        JR	Z,J5389                 ; yep, only drum and keyboard channels
        XOR	A
J5385:	ADD	A,(HL)
        INC	HL
        DJNZ	J5385                   ; calculate number of channels from voices
J5389:	ADD	A,D
        CP	9+1                     ; number of channels valid ?
        JR	NC,J5355                ; nope, illegal function call
        CALL	C67CD                   ; close all i/o channels
        LD	HL,(HIMEM)
        CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        JR	NZ,J53AF                ; yep, skip BASIC memory allocation
        LD	DE,S.VARW
        AND	A
        SBC	HL,DE
        LD	(HIMEM),HL              ; allocate BASIC memory
        LD	(D.F97D),HL             ; store start of MSX-MUSIC workarea
        LD	A,(H.PHYD)
        CP	0C9H                    ; MSX disk system initialized ?
        JR	Z,J53AF                 ; nope, skip
        LD	(DF349),HL              ; update MSX disk system bottom
J53AF:	POP	DE                      ; restore BASIC pointer
        LD	SP,HL                   ; initialize stackpointer
        PUSH	DE                      ; store BASIC pointer
        CALL	C5407                   ; initialize MSX-MUSIC BASIC
        LD	HL,(CURLIN)
        LD	(OLDLIN),HL             ; store current linenumber for CONT
        LD	HL,I53EC
        LD	DE,HOLD8
        LD	BC,S53EC
        LDIR                            ; basic statements in HOLD8
        LD	A,(MAXFIL)
        LD	(HOLD8+I53F1-I53EC),A   ; store number of user file channels
        POP	HL                      ; restore BASIC pointer
        LD	A,L
        LD	(HOLD8+I53F9-I53EC),A
        LD	A,H
        LD	(HOLD8+I5401-I53EC),A   ; store BASIC pointer for CONT
        XOR	A
        LD	(MAXFIL),A              ; number of user file channels = 0
        LD	HL,T.MUSI+0
        LD	(FILTAB),HL
        LD	HL,T.MUSI+2
        LD	(T.MUSI+0),HL
        LD	(HL),A                  ; fake file channel structure
        LD	HL,HOLD8
        JP	J67C7                   ; execute new statement

I53EC:  DEFB    ":"
        DEFB    0CDH                    ; MAX
        DEFB    0B7H                    ; FILES
        DEFB    0EFH                    ; =
        DEFB    00FH                    ; constant byte
I53F1:  DEFB    0
        DEFB    ":"
        DEFB    098H                    ; POKE
        DEFB    00CH                    ; constant word
        DEFW    OLDTXT+0
        DEFB    ","
        DEFB    00FH                    ; constant byte
I53F9:  DEFB    0
        DEFB    ":"
        DEFB    098H                    ; POKE
        DEFB    00CH                    ; constant word
        DEFW    OLDTXT+1
        DEFB    ","
        DEFB    00FH                    ; constant byte
I5401:  DEFB    0
        DEFB    ":"
        DEFB    099H                    ; CONT
        DEFB    0
        DEFW	0

S53EC   EQU     $-I53EC


;	  Subroutine initialize MSX-MUSIC BASIC
;	     Inputs  ________________________
;	     Outputs ________________________

C5407:	DI
        LD	HL,T.MUSI+0
        LD	A,(HL)                  ; number of voices
        LD	(D.F984),A              ; number of OPLL FM play voices
        INC	HL
        PUSH	HL
        INC	HL
        INC	HL
        LD	DE,I.F985
        LD	BC,9
        LDIR                            ; initialize number of FM channels per voice
        POP	HL
        LD	B,(HL)                  ; drum parameter
        INC	HL
        LD	A,(HL)                  ; keyboard parameter (MSX-AUDIO left over)
        LD	HL,0
        OR	A                       ; no keyboard ?
J5423:	JR	Z,J542D                 ; yep, continue
        SCF
        RR	H
        RR	L                       ; shift in 1
        DEC	A                       ; done ?
        JR	J5423

J542D:	ADD	HL,HL
        RL	A
        LD	L,H
        LD	H,A                     ; keyboard channel mask
        LD	A,B
        LD	(D.F98E),A              ; drum flag
        AND	01H                     ; in drum mode ?
        JR	Z,J5446                 ; nope,
        SRL	H
        RR	L
        SRL	H
        RR	L
        SRL	H
        RR	L			; remove 3 channels from the keyboard channel mask
J5446:	EX	DE,HL
        PUSH	DE                      ; store keyboard channel mask
        CALL	C6489                   ; initialize play voice enviorment variables
        CALL	C64EE                   ; initialize play voices
        CALL	C507F                   ; initialize MSX-MUSIC BASIC
        POP	DE                      ; restore keyboard channel mask
        CALL	C5584                   ; initialize OPLL, temperament, software instrument
        JP	C6556                   ; initialize rhythm volume

;	  Subroutine _BGM
;	     Inputs  ________________________
;	     Outputs ________________________

C5458:	CALL	C52C1                   ; check for ( ,evaluate byte operand, check for )
        CP	1+1                     ; valid mode ?
        JP	NC,C6770                ; nope, illegal function call
        DEC	A
        LD	(D.F998),A              ; store background music mode
        RET

;	  Subroutine evaluate (param1 <,param2>)
;	     Inputs  ________________________
;	     Outputs BC = param1, DE = param2

C5465:	CALL	C55E4                   ; check for BASIC char "("
        CALL	C67BB                   ; evaluate address operand
        LD	A,(HL)
        CP	")"                     ; no more parameters ?
        PUSH	DE                      ; store 1st parameter
        JR	Z,J5477                 ; yep, 2nd parameter = 1st parameter
        CALL	C55DF                   ; check for BASIC char ","
        CALL	C67BB                   ; evaluate address operand
J5477:	CALL	C55E9                   ; check for BASIC char ")"
        POP	BC                      ; restore 1st parameter
        LD	A,E
        RET

; unused code, MSX-AUDIO left over

?547D:	LD	A,D
        AND	A
        SCF
        RET	NZ
        LD	A,E
        CP	63+1
        CCF
        RET

;	  Subroutine HL = HL + A
;	     Inputs  ________________________
;	     Outputs ________________________

C5486:	ADD	A,L
        LD	L,A
        RET	NC
        INC	H
        RET

;	  Subroutine _STOPM
;	     Inputs  ________________________
;	     Outputs ________________________

C548B:	CALL	C54E7                   ; get BASIC char
        JP	NZ,J676D                ; not end of statement, syntax error
        PUSH	HL
        CALL	C658D                   ; stop background music
        POP	HL
        OR	A                       ; statement recognized
        RET

;	  Subroutine _AUDREG
;	     Inputs  ________________________
;	     Outputs ________________________

C5498:	CALL	C55E4                   ; check for BASIC char "("
        CALL	C67C1                   ; evaluate byte operand
        PUSH	DE
        CALL	C55DF                   ; check for BASIC char ","
        CALL	C67C1                   ; evaluate byte operand
        PUSH	DE
        LD	A,(HL)
        CP	")"                     ; nore more parameters ?
        LD	E,0                     ; assume first OPLL
        JR	Z,J54B3                 ; yep, use default
        CALL	C55DF                   ; check for BASIC char ","
        CALL	C67C1                   ; evaluate byte operand
J54B3:	CALL	C55E9                   ; check for BASIC char ")"
        LD	A,E
        OR	A                       ; first OPLL (MSX-AUDIO supports 2 sound chips) ?
        JP	NZ,C6770                ; nope, illegal function call
        POP	DE
        POP	BC
        LD	B,E
        CALL	C6DB5                   ; write OPLL register
        JP	C,C6770                 ; invalid register, illegal function call
        RET

;	  Subroutine search for array variable
;	     Inputs  ________________________
;	     Outputs ________________________

C54C5:	LD	A,1
        LD	(SUBFLG),A              ; variable search flag = arrayvariable
        CALL	C679B                   ; locate variable
        JP	NZ,C6770                ; not found, illegal function call
        LD	(SUBFLG),A              ; reset variable search flag
        LD	A,(VALTYP)
        CP	3                       ; string ?
        JP	Z,C6770                 ; yep, illegal function call
        EX	DE,HL
        ADD	HL,BC
        DEC	HL
        EX	DE,HL
        LD	A,(BC)
        SCF
        RLA
        ADD	A,C
        LD	C,A
        RET	NC
        INC	B
        RET

;	  Subroutine get BASIC char
;	     Inputs  ________________________
;	     Outputs ________________________

C54E7:	DEC	HL
        JP	C67AF                   ; get next BASIC char

;	  Subroutine assign integer value to variable, check for )
;	     Inputs  HL = value, DE = address variable
;	     Outputs ________________________

J54EB:	CALL	C54F3                   ; assign integer value to variable
        POP	HL                      ; restore BASIC pointer
        CALL	C55E9                   ; check for BASIC char ")"
        RET

;	  Subroutine assign integer value to variable
;	     Inputs  HL = value, DE = address variable
;	     Outputs ________________________

C54F3:	LD	(DAC+2),HL              ; store integer in DAC
        LD	HL,VALTYP
        LD	A,(HL)
        CP	2                       ; variable type = integer ?
        JR	Z,J551F                 ; yep, just copy
        CP	4                       ; variable type = single float ?
        JR	Z,J5511                 ; yep, convert integer to float and copy
        CP	8                       ; variable type = double float ?
        JP	NZ,J6773                ; nope, type mismatch
        LD	(HL),2                  ; DAC has a integer
        PUSH	DE
        CALL	C67A1                   ; convert DAC to other type (double float)
        LD	C,8
        JR	J5519                   ; copy double float

J5511:	LD	(HL),2
        PUSH	DE
        CALL	C67A1                   ; convert DAC to other type (single float)
        LD	C,4                     ; copy single float
J5519:	POP	DE
        LD	HL,DAC
        JR	J5524

J551F:	LD	HL,DAC+2
        LD	C,2
J5524:	LD	B,0
        LDIR
        RET

;	  Subroutine _PITCH
;	     Inputs  ________________________
;	     Outputs ________________________

C5529:	CALL	C5465                   ; evaluate (param1 <,param2>)
        PUSH	HL                      ; store BASIC pointer
        CALL	C6B50                   ; set pitch
        POP	HL                      ; restore BASIC pointer
        JP	C,C6770                 ; invalid pitch, illegal function call
        RET

;	  Subroutine _TRANSPOSE
;	     Inputs  ________________________
;	     Outputs ________________________

C5535:	CALL	C5465                   ; evaluate (param1 <,param2>)
        PUSH	HL                      ; store BASIC pointer
        CALL	C6BDA                   ; set transpose
        POP	HL                      ; restore BASIC pointer
        JP	C,C6770                 ; invalid transpose, illegal function call
        RET

;	  Subroutine _TEMPER
;	     Inputs  ________________________
;	     Outputs ________________________

C5541:	CALL	C52C1                   ; check for ( ,evaluate byte operand, check for )
        LD	C,A
        CALL	C6C9F                   ; set temperament
        JP	C,C6770                 ; invalid temperament, illegal function call
        RET

;	  Subroutine get slotid of page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C554C:	PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	B,1
        CALL	C5558                   ; get slotid of page
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine get slotid of page
;	     Inputs  B = page
;	     Outputs ________________________

C5558:	IN	A,(0A8H)
        CALL	C557A
        AND	03H
        LD	E,A
        LD	D,0
        LD	HL,EXPTBL
        ADD	HL,DE
        LD	A,(HL)
        AND	80H
        OR	E
        RET	P
        LD	E,A
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	A,(HL)
        RLCA
        RLCA
        CALL	C557A
        AND	0CH
        OR	E
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C557A:	INC	B
        DEC	B
        RET	Z
        PUSH	BC
J557E:	RRCA
        RRCA
        DJNZ	J557E
        POP	BC
        RET

;	  Subroutine initialize OPLL, temperament, software instrument
;	     Inputs  ________________________
;	     Outputs ________________________

C5584:	CALL	C6D61                   ; initialize OPLL
        LD	IX,I.FA27
        LD	BC,9*256+0
J558E:	LD	A,C
        ADD	A,10H
        LD	(IX+0),A                ; FM channel base register
        LD	(IX+1),4                ; base volume
        LD	(IX+2),0                ; offset volume
        LD	(IX+3),0
        LD	(IX+4),0                ; 'note'
        LD	(IX+5),0
        LD	(IX+6),0                ; 'transpose'
        LD	DE,16
        ADD	IX,DE
        INC	C
J55B2:	DJNZ	J558E
        LD	A,(D.F98E)
        AND	01H                     ; in drum mode ?
        CALL	NZ,C6D86                ; yep,
        LD	C,9                     ; default temperament
        CALL	C6C9F                   ; set temperament
        LD	IX,I.FA27
        LD	A,(D.F98E)
        AND	01H                     ; in drum mode ?
        LD	B,9
        JR	Z,J55D0                 ; nope, use 9 FM channels
        LD	B,6                     ; yep, use 6 FM channels
J55D0:	PUSH	BC
        LD	C,0                     ; Piano 1
        CALL	C68E1                   ; set software instrument
        POP	BC
        LD	DE,16
        ADD	IX,DE
        DJNZ	J55D0                   ; next channel
        RET

;	  Subroutine check for BASIC char ","
;	     Inputs  ________________________
;	     Outputs ________________________

C55DF:	CALL	C67A7                   ; check for BASIC char
        DEFB    ","
        RET

;	  Subroutine check for BASIC char "("
;	     Inputs  ________________________
;	     Outputs ________________________

C55E4:	CALL	C67A7                   ; check for BASIC char
        DEFB    "("
        RET

;	  Subroutine check for BASIC char ")"
;	     Inputs  ________________________
;	     Outputs ________________________

C55E9:	CALL	C67A7                   ; check for BASIC char
        DEFB    ")"
        RET

;	  Subroutine _VOICE
;	     Inputs  ________________________
;	     Outputs ________________________

C55EE:	CALL	C67A7                   ; check for BASIC char
        DEFB    "("
        LD      DE,T.VOIE
        LD	B,9                     ; 9 channels
J55F7:	LD	A,(HL)
        CP	","                     ; parameter not specified ?
        JR	Z,J561B                 ; yep, next channel
        PUSH	BC
        LD	A,9
        SUB	B
        LD	(DE),A                  ; channel
        INC	DE
        PUSH	DE
        LD	A,(HL)
J5604:	CALL	C56C5                   ; evaluate instrument operand
        LD	A,0
        JR	C,J560C                 ; instrument parameter,
        CPL                             ; array
J560C:	EX	(SP),HL
        LD	(HL),A                  ; array flag
        INC	HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; pointer to user defined instrument definition
        INC	HL
        EX	(SP),HL
        POP	DE
        POP	BC
        LD	A,(HL)
        CP	")"                     ; no more parameters ?
        JR	Z,J5621                 ; yep,
J561B:	CALL	C67A7                   ; check for BASIC char
        DEFB    ","
        DJNZ	J55F7                   ; next channel
J5621:	CALL	C67A7                   ; check for BASIC char
        DEFB    ")"
        JP	NZ,J676D                ; syntax error
        LD	A,0FFH
        LD	(DE),A                  ; end marker
        CALL	C5632                   ; set instruments of channels
        JP	C,C6770                 ; error, illegal function call
        RET

;	  Subroutine set instruments of channels
;	     Inputs  ________________________
;	     Outputs ________________________

C5632:	PUSH	HL                      ; store BASIC pointer
        LD	HL,T.VOIE
J5636:	LD	A,(HL)
        CP	0FFH                    ; end marker ?
        JR	Z,J5662                 ; yep, quit
        INC	HL
        CALL	C566D                   ; get pointer to FM channel data
        LD	A,(HL)                  ; user defined flag
        INC	HL
        OR	A                       ; user defined ?
        JR	Z,J5650                 ; nope,
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        PUSH	HL
        CALL	C68DA                   ; program instrument definition and set user definied instrument
        CALL	C5665                   ; update channel pointer
        JR	J565E                   ; next channel

J5650:	LD	C,(HL)
        LD	A,C
        CP	63+1                    ; valid software instrument ?
        CCF
        RET	C                       ; nope, quit
        INC	HL
        PUSH	HL
        CALL	C68E1                   ; set software instrument
        CALL	C5665                   ; update channel pointer
J565E:	POP	HL
        INC	HL
        JR	J5636                   ; next channel

J5662:	POP	HL                      ; restore BASIC pointer
        OR	A
        RET

;	  Subroutine update channel pointer
;	     Inputs  ________________________
;	     Outputs ________________________

C5665:	PUSH	BC
        LD	BC,16
        ADD	IX,BC
        POP	BC
        RET

;	  Subroutine get pointer to FM channel data
;	     Inputs  ________________________
;	     Outputs ________________________

C566D:	LD	IX,I.FA27
        OR	A                       ; FM channel 0 ?
        RET	Z                       ; yep, quit
        PUSH	BC
        LD	BC,16
J5677:	ADD	IX,BC
        DEC	A
        JR	NZ,J5677                ; calculate pointer to FM channel data
        POP	BC
        RET

;	  Subroutine _VOICE COPY
;	     Inputs  ________________________
;	     Outputs ________________________

C567E:	CALL	C67A7                   ; check for BASIC char
        DEFB    "("
        CALL    C56C5                   ; evaluate instrument operand
        CCF
        SBC	A,A
        LD	(T.VOIC+0),A            ; instrument flag (source)
        LD	(T.VOIC+1),DE
        LD	(T.VOIC+3),BC
        CALL	C67A7                   ; check for BASIC char
        DEFB    ","
        CALL	C56C5                   ; evaluate instrument operand
        CCF
        SBC	A,A
        LD	(T.VOIC+5),A            ; instrument flag (destination)
        LD	(T.VOIC+6),DE
        LD	(T.VOIC+8),BC
        JR	NZ,J56AD                ; instrument, skip
        LD	A,E
        CP	32                      ; array size > 31 ?
        JR	C,J56DE                 ; nope, illegal function call
J56AD:	CALL	C67A7                   ; check for BASIC char
        DEFB    ")"
        JP	NZ,J676D                ; not end of statement, syntax error
        PUSH	HL                      ; store BASIC pointer
        LD	HL,T.VOIC+0
        LD	A,(T.VOIC+5)
        AND	(HL)                    ; source and destination instruments ?
        JR	NZ,J56DE                ; yep, illegal function call
        CALL	C56F9                   ; voice copy
        JR	C,J56DE                 ; error, illegal function call
        POP	HL                      ; restore BASIC pointer
        RET

;	  Subroutine evaluate instrument operand
;	     Inputs  ________________________
;	     Outputs ________________________

C56C5:	CP	"@"
        JR	Z,J56D5                 ; yep, software instrument specified
        CP	0F3H                    ; * (MSX-AUDIO syntax for all instruments) ?
        JR	NZ,J56E1                ; nope, user definied instrument (array)
        CALL	C67AF                   ; get next BASIC char
        LD	DE,255                  ; all instruments
        SCF                             ; instrument parameter (Cx set)
        RET

J56D5:	CALL	C67AF                   ; get next BASIC char
        CALL	C67C1                   ; evaluate byte operand
        CP	63+1                    ; valid software instrument ?
        RET	C                       ; yep, quit (instrument parameter, Cx Set)
J56DE:	JP	C6770                   ; illegal function call

J56E1:	CALL	C56EF                   ; search for array variable, determine size
        LD	A,E
        AND	0E0H
        OR	D                       ; size > 31 ?
        JR	Z,J56DE                 ; nope, illegal function call
        PUSH	DE
        LD	E,C
        LD	D,B                     ; start of buffer
        POP	BC                      ; size
        RET                             ; array parameter (Cx reset)

;	  Subroutine search for array variable, determine size
;	     Inputs  ________________________
;	     Outputs ________________________

C56EF:	CALL	C54C5                   ; search for array variable
        EX	DE,HL
        OR	A
        SBC	HL,BC
        INC	HL
        EX	DE,HL
        RET

;	  Subroutine voice copy
;	     Inputs  ________________________
;	     Outputs ________________________

C56F9:	LD	A,(T.VOIC+5)
        LD	HL,(T.VOIC+6)
        OR	A                       ; destination = instrument ?
        JR	NZ,J570D                ; nope, array
        LD	A,L
        INC	A                       ; destination = all instruments ?
        SCF
        RET	Z                       ; yep, quit with error
        CP	63+1                    ; destination = user defined instrument ?
        SCF
        RET	NZ                      ; nope, quit with error
        LD	HL,I.F9F9               ; destination = user defined instrument
J570D:	PUSH	HL
        LD	A,(T.VOIC+0)
        LD	HL,(T.VOIC+1)
        OR	A                       ; source = instrument ?
        JR	NZ,J5725                ; nope, source = array
        LD	A,L
        CP	0FFH                    ; source = all instruments ?
        JR	Z,J572F                 ; yep, quit with error
        LD	C,A
        CALL	C690F                   ; translate software to hardware instrument
        JR	Z,J572F                 ; hardware, quit with error
        CALL	C5732                   ; get pointer to software instrument definition
J5725:	POP	DE
        LD	BC,32
        DI                              ; ?? why, MSX-AUDIO left over
        LDIR
        OR	A                       ; no error
        EI                              ; ?? why, MSX-AUDIO left over
        RET

J572F:	POP	HL
        SCF
        RET

;	  Subroutine get pointer to software instrument definition
;	     Inputs  L = software instrument
;	     Outputs ________________________

C5732:	LD	A,L
        CP	63                      ; user defined software instrument ?
        LD	HL,I.F9F9
        RET	Z                       ; yep,
        LD	L,A
        LD	H,00H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL                   ; *32
        LD	DE,I6E0C
        ADD	HL,DE
        RET

;	  Subroutine _PLAY
;	     Inputs  ________________________
;	     Outputs ________________________

C5746:	CALL	C52B4                   ; check for ( and evaluate byte operand
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        CP	E                       ; valid play voice number ?
        JP	C,C6770                 ; nope, illegal function call
        LD	A,E                     ; play voice
        PUSH	HL                      ; store BASIC pointer
        CALL	C5760                   ; return play voice status
        EX	(SP),HL                 ; store result, restore BASIC pointer
        CALL	C55DF                   ; check for BASIC char ","
        CALL	C679B                   ; locate variable
        EX	(SP),HL                 ; store BASIC pointer, restore result
        JP	J54EB                   ; assign integer value to variable, check for )

;	  Subroutine return play voice status
;	     Inputs  A = play voice (0 = any)
;	     Outputs ________________________

C5760:	LD	HL,(D.F995)             ; play voice status
        OR	A                       ; play voice 0 ?
        JR	NZ,J5771                ; nope,
        LD	A,H
        AND	1FH
        OR	L                       ; any play voice active ?
        JR	Z,J576E                 ; nope, return 0
        LD	A,0FFH                  ; return -1
J576E:	LD	L,A
	LD	H,A
        RET

J5771:	SRL	H
        RR	L                       ; shift in Cx
        DEC	A                       ; correct play voice ?
        JR	NZ,J5771                ; nope, next
        SBC	A,A
        JR	J576E                   ; return play voice status

; convert DAC to integer routine

I577B:	LD	A,(D.F97C)              ; slotid fmpac
        PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,(EXPTBL+0)
        LD	H,HIGH 4000H
        CALL	ENASLT                  ; enable BASIC on page 1
        POP	HL
        POP	DE
        POP	BC
        CALL	M2F8A                   ; convert DAC to integer
        POP	AF
        PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	H,HIGH 4000H
        CALL	ENASLT                  ; enable fmpac page 1
        POP	HL
        POP	DE
        POP	BC
        POP	AF
        EI
        RET

S577B   EQU     $-I577B

; default MCL string

I57A0:	DEFB	" "

;	  Subroutine PLAY statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

C57A1:	CALL	C510F                   ; check for free BASIC memory
        CALL	C57D9                   ; handle PLAY statement
        PUSH	HL                      ; store BASIC pointer
        LD	A,(D.F97C)              ; slotid fmpac
        DI
        ADD	A,A                     ; expanded slot ?
        LD	HL,8
        JR	NC,J57B4                ; nope,
        LD	L,8+8
J57B4:	ADD	HL,SP
        PUSH	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        LD	HL,M73E5+3
        OR	A
        SBC	HL,DE                   ; called by PLAY statement ?
        JP	NZ,J6764                ; nope, internal error
        POP	HL
        DEC	HL			; stack filled by CALLF
        LD	D,H
        LD	E,L
        INC	DE
        INC	DE
        LD	A,(D.F97C)              ; slotid fmpac
        ADD	A,A                     ; expanded slot ?
        LD	BC,8
        JR	NC,J57D3                ; nope,
        LD	C,8+8
J57D3:	LDDR				; move 1 word up
        EI
        POP	HL			; discharged returnadres
        POP	HL			; restore BASIC pointer
        RET

;	  Subroutine handle PLAY statement
;	     Inputs  ________________________
;	     Outputs ________________________

C57D9:	CP	"#"                     ; device specified ?
        JR	NZ,J57F8                ; nope, use PSG
        CALL	C67AF                   ; get next BASIC char
        CALL	C67C1                   ; evaluate byte operand
        PUSH	AF
        CALL	C55DF                   ; check for BASIC char ","
        POP	AF
        OR	A			; PLAY#0 ?
        JR	Z,J57F8 		; yep, use PSG
        DEC	A                       ; PLAY#1 (MIDI device) ?
        JR	Z,J57F2                 ; yep, illegal function call
        SUB	3                       ; PLAY#2 or PLAY#3 ?
        JR	C,J582B                 ; yep, use OPLL
J57F2:	JP	C6770                   ; illegal function call

; unused code, MSX-AUDIO left over

?57F5:	INC	A
        JR	J582C

; PLAY for PSG device

J57F8:	XOR	A
        LD	(D.F97F),A              ; PLAY device = OPLL/PSG
        PUSH	HL
        LD	A,(D.F992)
        OR	A                       ; no OPLL play voices ?
        JR	Z,J5821                 ; yep, skip
        LD	B,A                     ; number of OPLL play voices
J5804:	PUSH	BC
        LD	A,B
        DEC	A
        CALL	C67E0                   ; get pointer to string size in voice buffer
        LD	DE,I57A0
        LD	(HL),1                  ; size of MCL string = 1
        INC	HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; pointer to MCL string = default string (no operation)
        INC	HL
        LD	D,H
        LD	E,L
        LD	BC,33-5
        ADD	HL,BC
        EX	DE,HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; initialize play voice stack
        POP	BC
        DJNZ	J5804                   ; next OPLL play voice
J5821:	POP	HL
        XOR	A
        LD	(PRSCNT),A
        LD	A,(D.F992)              ; number of OPLL play voices
        JR	J5833

; PLAY for OPLL device

J582B:	XOR	A                       ; PLAY device = OPLL/PSG
J582C:	LD	(D.F97F),A              ; store PLAY device
        XOR	A
        LD	(PRSCNT),A
J5833:	PUSH	HL                      ; store BASIC pointer
        LD	HL,-10
        ADD	HL,SP
        LD	(SAVSP),HL
        POP	HL                      ; restore BASIC pointer
        PUSH	AF
J583D:	PUSH	HL                      ; store BASIC pointer
        LD	HL,I577B
        LD	DE,T.CDAC
        LD	BC,S577B
        LDIR                            ; install convert DAC to integer routine
        POP	HL                      ; restore BASIC pointer
        CALL	C67B5                   ; expression evaluator
        EX	(SP),HL
        PUSH	HL
        CALL	C67D3                   ; free temporary string with type check
        CALL	C6834                   ; get pointer to string and size of string
        LD	A,E
        OR	A                       ; empty string ?
        JR	NZ,J585E                ; nope,
        LD	DE,256*(LOW I57A0)+1
        LD	C,HIGH I57A0            ; use default string
J585E:	POP	AF
        PUSH	AF
        CALL	C5F02                   ; get pointer to play voice corrector
        XOR	A
        LD	(IX+0),A                ; corrector = 0
        POP	AF
        PUSH	AF
        CALL	C67E0                   ; get pointer to string size in voice buffer
        LD	(HL),E                  ; size of string
        INC	HL
        LD	(HL),D
        INC	HL
        LD	(HL),C                  ; pointer to string
        INC	HL
        LD	D,H
        LD	E,L
        LD	BC,33-5
        ADD	HL,BC
        EX	DE,HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; initalize play voice stack
        POP	BC
        POP	HL
        INC	B
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        DEC	A
        CP	B                       ; more play voices ?
        JR	C,J58A8                 ; nope, check if end of statement
        DEC	HL
        CALL	C67AF                   ; get next BASIC char
        JR	Z,J5892                 ; end of statement,
        PUSH	BC
        CALL	C55DF                   ; check for BASIC char ","
        JR	J583D                   ; next voice

J5892:	LD	A,B
        LD	(VOICEN),A              ; set current play voice
        PUSH	BC                      ; store current play voice
        PUSH	HL                      ; store BASIC pointer
        CALL	C59AF                   ; update PLAY device
        POP	HL                      ; restore BASIC pointer
        POP	BC                      ; restore current play voice
        CALL	C5995                   ; put end marker in current play voice queue
        INC	B                       ; update play voice
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        DEC	A
        CP	B                       ; more play voices ?
        JR	NC,J5892                ; yep, next voice
J58A8:	DEC	HL
        CALL	C67AF                   ; get next BASIC char
        JP	NZ,J676D                ; not end of statement, syntax error
        PUSH	HL                      ; store BASIC pointer

J58B0:	XOR	A                       ; play voice = 0
J58B1:	PUSH	AF                      ; store current play voice
        LD	(VOICEN),A              ; set current play voice
        LD	C,A
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        SUB	C
        SUB	4
        LD	HL,I59E2                ; MCL table PSG
        JR	C,J58D0
        LD	HL,I5C70                ; MCL table OPLL
        JR	NZ,J58D0
        LD	A,(D.F98E)
        AND	01H                     ; in drum mode ?
        JR	Z,J58D0                 ; nope,
        LD	HL,I5FA2                ; MCL table OPLL drums
J58D0:	LD	(MCLTAB),HL
        LD	A,C
        LD	B,A
        CALL	C59D5                   ; queue almost full ?
        JP	C,J5957                 ; yep,
        LD	A,B
        CALL	C67E0                   ; get pointer to string size in voice buffer
        LD	A,(HL)
        OR	A                       ; empty string ?
        JP	Z,J5957                 ; yep,
        LD	(MCLLEN),A
        INC	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; pointer to string
        INC	HL
        LD	(MCLPTR),DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; top of stack = start of source
        INC	HL
        PUSH	HL                      ; store pointer to queue length
        LD	L,36
        CALL	C67E4                   ; get pointer in current voice buffer
        PUSH	HL                      ; store pointer to
        LD	HL,(SAVSP)
        DEC	HL                      ; = end of destination
        POP	BC                      ; restore pointer to, = end of source
        DI
        CALL	C6827                   ; copy memory
        POP	DE                      ; restore pointer to queue length
        LD	H,B
        LD	L,C
        LD	SP,HL                   ; stackpointer = start of destination
        EI
        CALL	C59AF                   ; update PLAY device
        JP	J65C6                   ; continue MCL parsing

J590F:	LD	A,(MCLLEN)
        OR	A
        JR	NZ,J5918
J5915:	CALL	C5995                   ; put end marker in current play voice queue
J5918:	LD	A,(VOICEN)              ; current play voice
        CALL	C67E0                   ; get pointer to string size in voice buffer
        LD	A,(MCLLEN)
        LD	(HL),A                  ; size of string
        INC	HL
        LD	DE,(MCLPTR)
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; pointer to string
        LD	HL,0
        ADD	HL,SP
        EX	DE,HL                   ; store stack pointer
        LD	HL,(SAVSP)
        DI
        LD	SP,HL
        POP	BC
        POP	BC
        POP	BC
        PUSH	HL
        OR	A
        SBC	HL,DE
        JR	Z,J5955
        LD	A,0F0H
        AND	L
        OR	H
        JP	NZ,C6770                ; illegal function call
        LD	L,36
        CALL	C67E4                   ; get pointer in current voice buffer
        POP	BC
        DEC	BC
        CALL	C6827                   ; copy memory
        POP	HL
        DEC	HL
        LD	(HL),B
        DEC	HL
        LD	(HL),C
        JR	J5957

J5955:	POP	BC
        POP	BC
J5957:	EI
        POP	AF
        INC	A                       ; update play voice
        LD	HL,D.F991
        CP	(HL)                    ; more play voices ?
        JP	C,J58B1                 ; yep, next
        DI
        CALL	C63B1                   ; CTRL-STOP pressed ?
        JR	Z,J598F                 ; yep,
        LD	A,(PRSCNT)
        RLCA                            ; b7 set ?
        JR	C,J5978                 ; yep, skip
        LD	HL,D.F997
        INC	(HL)                    ; update queued count
        LD	A,(HL)
        LD	(PLYCNT),A
        CALL	C683D
J5978:	EI
        LD	HL,PRSCNT
        SET	7,(HL)                  ; set b7
        LD	A,(HL)
        LD	HL,D.F993
        CP	(HL)
        JP	NZ,J58B0
        LD	A,(D.F998)
        OR	A                       ; background music enabled ?
        CALL	NZ,C639D                ; nope, wait until music is finished
        JR	NC,J5993                ; not aborted, skip
J598F:	CALL	C658D                   ; stop background music
        EI
J5993:	POP	HL
        RET

;	  Subroutine put end marker in current play voice queue
;	     Inputs  ________________________
;	     Outputs ________________________

C5995:	LD	A,(PRSCNT)
        INC	A
        LD	(PRSCNT),A
        LD	E,0FFH                  ; special end marker

;	  Subroutine put byte in current play voice queue (EI)
;	     Inputs  ________________________
;	     Outputs ________________________

C599E:	PUSH	HL
        PUSH	BC
J59A0:	PUSH	DE
        LD	A,(VOICEN)              ; current play voice
        DI
        CALL	C66F9                   ; put in queue
        EI
        POP	DE
        JR	Z,J59A0
J59AC:	POP	BC
        POP	HL
        RET

;	  Subroutine update PLAY device
;	     Inputs  ________________________
;	     Outputs ________________________

C59AF:	LD	HL,VOICEN
        LD	A,(D.F992)              ; number of OPLL play voices
        DEC	A
        CP	(HL)                    ; current play voice
        RET	NZ
        LD	A,(D.F97F)              ; PLAY device
        LD	HL,D.F980
        CP	(HL)                    ; same as current device ?
        RET	Z                       ; yep, quit
        LD	(HL),A                  ; update current device
        LD	A,88H
        OR	(HL)
        LD	E,A

;	  Subroutine put byte in queue (DI)
;	     Inputs  ________________________
;	     Outputs ________________________

C59C5:	PUSH	HL
        PUSH	BC
J59C7:	PUSH	DE
        LD	A,(VOICEN)              ; current play voice
        DI
        CALL	C66F9                   ; put in queue
        POP	DE
        JR	NZ,J59AC
        EI
        JR	J59C7

;	  Subroutine queue almost full ?
;	     Inputs  ________________________
;	     Outputs ________________________

C59D5:	LD	A,(VOICEN)              ; current play voice
        PUSH	BC
        DI
        CALL	C6741
        EI
        POP	BC
        CP	8
        RET

; MCL table PSG

I59E2:  DEFB    "A"
        DEFW    C5B1D
        DEFB    "M"+128
        DEFW    C5A54
        DEFB    "V"+128
        DEFW    C5A3D
        DEFB    "S"+128
        DEFW    C5A76
        DEFB    "N"+128
        DEFW    C5ADA
        DEFB    "O"+128
        DEFW    C5AA6
        DEFB    "R"+128
        DEFW    C5AB5
        DEFB    "T"+128
        DEFW    C5A99
        DEFB    "L"+128
        DEFW    C5A80
        DEFB    "X"
        DEFW    C66DB
        DEFB    ">"
        DEFW    C5DAB
        DEFB    "<"
        DEFW    C5DB8
        DEFB    "Y"+128
        DEFW    C5C04
        DEFB    "Q"+128
        DEFW    C5C1A
        DEFB    "@"
        DEFW    C5C29
        DEFB    "&"
        DEFW    C5C03
        DEFB    "Z"+128
        DEFW    C5C25
        DEFB    0

I5A16:  DEFB    8*2                     ; A-
        DEFB    9*2                     ; A
        DEFB    10*2                    ; A+,B-
        DEFB    11*2                    ; B,C-
        DEFB    0*2                     ; B+
        DEFB    0*2                     ; C
        DEFB    1*2                     ; C+,D-
        DEFB    2*2                     ; D
        DEFB    3*2                     ; D+,E-
        DEFB    4*2                     ; E,F-
        DEFB    5*2                     ; E+
        DEFB    5*2                     ; F
        DEFB    6*2                     ; F+,G-
        DEFB    7*2                     ; G
        DEFB    8*2                     ; G+

I5A25:	DEFW	3421
        DEFW    3228
        DEFW    3047
        DEFW    2876
        DEFW    2715
        DEFW    2562
        DEFW	2419
        DEFW    2283
        DEFW    2155
        DEFW    2034
        DEFW    1920
        DEFW    1812

;	  Subroutine PSG PLAY "V"
;	     Inputs  ________________________
;	     Outputs ________________________

C5A3D:  JR	C,J5A41
        LD	E,8
J5A41:	LD	A,15
        CP	E
        JR	C,J5A96                 ; illegal function call
J5A46:	CALL	C5C41                   ; check for < 256
        LD	L,18                    ; offset = volume
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,40H
        AND	(HL)                    ; leave envelope period flag, clear volume
        OR	E
        LD	(HL),A                  ; update volume
        RET

;	  Subroutine PSG PLAY "M"
;	     Inputs  ________________________
;	     Outputs ________________________

C5A54:	LD	A,E
        JR	C,J5A5A
        CPL
        INC	A
        LD	E,A
J5A5A:	OR	D
        JR	Z,J5A96                 ; illegal function call
        LD	L,19                    ; offset = envelope period
        CALL	C67E4                   ; get pointer in current voice buffer
        PUSH	HL                      ; store pointer to envelope period
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; current envelope period
        CALL	C68D4                   ; compare HL with DE
        POP	HL                      ; restore pointer to envelope period
        RET	Z                       ; equal, quit
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; update envelope period
        DEC	HL
        DEC	HL
        LD	A,40H
        OR	(HL)
        LD	(HL),A                  ; set envelope period flag
        RET

;	  Subroutine PSG PLAY "S"
;	     Inputs  ________________________
;	     Outputs ________________________

C5A76:	LD	A,E
        CP	15+1                    ; valid envelope shape ?
        JR	NC,J5A96                ; nope, illegal function call
        OR	10H                     ; set envelope shape flag
        LD	E,A
        JR	J5A46                   ; set envelope shape

;	  Subroutine PLAY "L"
;	     Inputs  ________________________
;	     Outputs ________________________

C5A80:	JR	C,J5A84
        LD	E,4                     ; use default tone length = 4/4
J5A84:	LD	A,E
        CP	64+1                    ; valid tone length ?
        JR	NC,J5A96                ; nope, illegal function call
        LD	L,16                    ; offset = tone length
J5A8B:	CALL	C67E4                   ; get pointer in current voice buffer
        CALL	C5C41                   ; check for < 256
        OR	E                       ; length = 0 ?
        JR	Z,J5A96                 ; yep, illegal function call
        LD	(HL),A                  ; update length
        RET

J5A96:	JP	C6770                   ; illegal function call

;	  Subroutine PLAY "T"
;	     Inputs  ________________________
;	     Outputs ________________________

C5A99:	JR	C,J5A9D
        LD	E,120                   ; use default tempo = 120
J5A9D:	LD	A,E
        CP	32                      ; valid tempo ?
        JR	C,J5A96                 ; nope, illegal function call
        LD	L,17                    ; offset = tempo
        JR	J5A8B

;	  Subroutine PLAY "O"
;	     Inputs  ________________________
;	     Outputs ________________________

C5AA6:	JR	C,J5AAA
        LD	E,4                     ; use default octave = 4
J5AAA:	LD	A,E
        CP	8+1                     ; valid octave ?
        JR	NC,J5A96                ; nope, illegal function call
        LD	L,15                    ; offset = octave
        JR	J5A8B

J5AB3:	XOR	A
        LD	D,A

;	  Subroutine PSG PLAY "R"
;	     Inputs  ________________________
;	     Outputs ________________________

C5AB5:	JR	C,J5AB9
        LD	E,4                     ; use default rest = 4
J5AB9:	XOR	A
        OR	D                       ; valid rest (<255) ?
        JR	NZ,J5A96                ; nope, illegal function call
        OR	E                       ; valid rest (<>0) ?
        JR	Z,J5A96                 ; nope, illegal function call
        CP	64+1                    ; valid rest (<=64) ?
        JR	NC,J5A96                ; nope, illegal function call
J5AC4:	LD	HL,0
        PUSH	HL
        LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer
        PUSH	HL                      ; store pointer to length
        INC	HL
        INC	HL
        LD	A,(HL)                  ; current volume
        LD	(SAVVOL),A              ; store current volume
        LD	(HL),80H                ; volume 0, set force volume flag
        DEC	HL
        DEC	HL
        JR	J5B58                   ; continue with note handling

;	  Subroutine PSG PLAY "N"
;	     Inputs  ________________________
;	     Outputs ________________________

C5ADA:	JR	NC,J5A96                ; illegal function call
        CALL	C5C41                   ; check for < 256
        OR	E                       ; note raise = 0 ?
        JR	Z,J5AC4                 ; yep,
        CP	96+1
        JR	NC,J5A96                ; illegal function call
        LD	A,E
        LD	B,0
        LD	E,B
J5AEA:	SUB	12
        INC	E
        JR	NC,J5AEA
        ADD	A,12
        ADD	A,A
        LD	C,A
        JP	J5B2D

;	  Subroutine translate note letter to number
;	     Inputs  ________________________
;	     Outputs ________________________

C5AF6:	LD	B,C                     ; store note letter
        LD	A,C
        SUB	'A'-1
        ADD	A,A
        LD	C,A                     ; assume major
        CALL	C661A                   ; get next MCL character
        JR	Z,J5B1B                 ; none, make normal and quit
        CP	'#'                     ; major ?
        RET	Z                       ; yep, quit
        CP	'+'                     ; major ?
        RET	Z                       ; yep, quit
        CP	'-'                     ; flat ?
        JR	Z,J5B10                 ; make flat and quit
        CALL	C6640                   ; put back MCL character
        JR	J5B1B                   ; make normal and quit

J5B10:	DEC	C
        LD	A,B                     ; note letter
        CP	"C"
        JR	Z,J5B1A
        CP	"F"
        JR	NZ,J5B1B
J5B1A:	DEC	C
J5B1B:	DEC	C
        RET

; PSG PLAY "A"

C5B1D:	CALL	C5AF6                   ; translate note letter to number
        LD	L,15                    ; offset = octave
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	E,(HL)                  ; octave
        LD	B,0
        LD	HL,I5A16
        ADD	HL,BC
        LD	C,(HL)                  ; translate note number to offset in PSG divider table
J5B2D:	LD	HL,I5A25
        ADD	HL,BC
        LD	A,E                     ; octave
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; PSG divider
J5B35:	DEC	A
        JR	Z,J5B41
        SRL	D
        RR	E                       ; divide for each octave
        JR	J5B35

J5B3E:	CALL	C6770                   ; illegal function call, ?? a bit wierd: why CALL instead of JP

J5B41:	ADC	A,E
        LD	E,A
        ADC	A,D
        SUB	E
        LD	D,A
        PUSH	DE                      ; store PSG tone frequency value
        LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	C,(HL)                  ; length
        PUSH	HL                      ; store pointer to length
        CALL	C661A                   ; get next MCL character
        JR	Z,J5B64                 ; none, use current length
        PUSH	BC                      ; store current length
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        POP	BC                      ; restore current length

J5B58:	LD	A,63+1
        CP	E                       ; length valid ?
        JR	C,J5B3E                 ; nope, illegal function call
        CALL	C5C41                   ; check for < 256
        OR	E                       ; length not specified ?
        JR	Z,J5B64                 ; yep, use current length
        LD	C,E                     ; use specified length
J5B64:	POP	HL                      ; restore pointer to length
        INC	HL
        PUSH	HL                      ; store pointer to tempo
        CALL	C5EB0                   ; calculate duration counter
        EX	DE,HL
        LD	BC,8-17
        POP	HL                      ; restore pointer to tempo
        PUSH	HL                      ; store pointer to tempo
        ADD	HL,BC
        LD	(HL),D
        INC	HL
        LD	(HL),E                  ; set duration counter
        INC	HL
        LD	C,2                     ; size music packet = 2
        EX	(SP),HL                 ; restore pointer to tempo, store pointer in music packet
        INC	HL
        LD	E,(HL)                  ; volume + envelope period flag
        LD	A,E
        AND	0BFH
        LD	(HL),A                  ; without envelope period flag
        EX	(SP),HL                 ; restore pointer in music packet, store pointer to volume
        LD	A,80H                   ; set volume/envelope specified flag
        OR	E                       ; + volume/envelope + envelope period flag
        LD	(HL),A                  ; music packet byte
        INC	HL
        INC	C                       ; size music packet +1
        EX	(SP),HL                 ; restore pointer to volume, pointer in music packet
        LD	A,E
        AND	40H                     ; envelope period flag ?
        JR	Z,J5B97                 ; nope, skip
        INC	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; envelope period
        POP	HL                      ; restore pointer in music packet
        LD	(HL),D
        INC	HL
        LD	(HL),E                  ; envelope period in music packet
        INC	HL
        INC	C
        INC	C                       ; size music packet +2
        DEFB    0FEH                    ; CP x (skip next instrunction)
J5B97:	POP     HL                      ; restore pointer in music packet
        POP	DE                      ; restore PSG tone frequency value
        LD	A,D
        OR	E                       ; rest ?
        JR	Z,J5BA2                 ; yep, skip tone in music packet
        LD	(HL),D
        INC	HL
        LD	(HL),E                  ; tone in music paket
        INC	C
        INC	C                       ; size music packet +2
J5BA2:	LD	L,7                     ; offset = size music packet
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	(HL),C                  ; store size music packet
        LD	A,C
        SUB	2                       ; size music packet without duration
        RRCA
        RRCA
        RRCA
        INC	HL
        OR	(HL)                    ; in b15-b13
        LD	(HL),A                  ; of duration counter
        DEC	HL
        LD	A,D
        OR	E                       ; rest ?
        JR	NZ,J5BC2                ; nope,
        PUSH	HL                      ; store pointer to size of music packet
        LD	A,(SAVVOL)
        OR	80H
        LD	BC,11
        ADD	HL,BC
        LD	(HL),A                  ; restore volume and set force volume flag
        POP	HL                      ; restore pointer to size of music packet
J5BC2:	POP	DE
        LD	B,(HL)                  ; size of music packet
        INC	HL
J5BC5:	LD	E,(HL)                  ; get data
        INC	HL
        CALL	C599E                   ; put byte in current play voice queue (EI)
        DJNZ	J5BC5                   ; next byte
        CALL	C59D5                   ; queue almost full ?
        JP	C,J590F                 ; yep,
        JP	J65C6                   ; nope, continue MCL parsing

;	  Subroutine divide
;	     Inputs  DE = value, HL = divider
;	     Outputs DE = result, HL = remainer

C5BD5:	LD	B,H
        LD	C,L
        XOR	A
        LD	H,A
        LD	L,A
        PUSH	HL
        SBC	HL,BC
        EX	DE,HL
        ADD	HL,HL
        LD	A,H
        LD	C,L
        POP	HL
        LD	B,16
J5BE4:	ADC	HL,HL
        ADD	HL,DE
        JR	C,J5BEB
        SBC	HL,DE
J5BEB:	RL	C
        RLA
        DJNZ	J5BE4
        LD	D,A
        LD	E,C
        RET

;	  Subroutine multiply
;	     Inputs  A = operand1, BC = operand2
;	     Outputs HL = result

C5BF3:	LD	E,8
        LD	HL,0
J5BF8:	ADD	HL,HL
        RLA
        JR	NC,J5BFF
        ADD	HL,BC
        ADC	A,0
J5BFF:	DEC	E
        JP	NZ,J5BF8
C5C03:  RET

;	  Subroutine PSG PLAY "Y"
;	     Inputs  ________________________
;	     Outputs ________________________

C5C04:	JR	NC,J5C44                ; illegal function call
        LD	A,E
        CP	0C9H
        JR	NC,J5C44                ; illegal function call
        CALL	C5C41                   ; check for < 256
        CALL	C661A                   ; get next MCL character
        CP	','
        JR	NZ,J5C44                ; illegal function call
        CALL	C664E                   ; get numeric value from MCL string
        JR	C5C41                   ; check for < 256

;	  Subroutine PSG PLAY "Q"
;	     Inputs  ________________________
;	     Outputs ________________________

C5C1A:	JR	C,J5C1E
        LD	E,8
J5C1E:	LD	A,E
        CP	8+1
        JR	NC,J5C44                ; illegal function call
        JR	C5C41                   ; check for < 256

;	  Subroutine PSG PLAY "Z"
;	     Inputs  ________________________
;	     Outputs ________________________

C5C25:	JR	NC,J5C44                ; illegal function call
        JR	C5C41                   ; check for < 256

;	  Subroutine PSG PLAY "@"
;	     Inputs  ________________________
;	     Outputs ________________________

C5C29:	CALL	C6614                   ; get next MCL character (with error)
        CP	"V"
        JR	Z,J5C47                 ; @V, volume (fine)
        CP	"W"
        JR	Z,J5C5A                 ; @W, length (fine)
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5C44                 ; nope, illegal function call
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        LD	A,E
        CP	63+1
        JR	NC,J5C44                ; illegal function call

;	  Subroutine check for < 256
;	     Inputs  ________________________
;	     Outputs ________________________

C5C41:	LD	A,D
        OR	A                       ; > 255 ?
        RET	Z                       ; nope, quit
J5C44:	JP	C6770                   ; illegal function call

J5C47:	CALL	C661A                   ; get next MCL character
        RET	Z                       ; none, quit
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5C44                 ; nope, illegal function call
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        LD	A,E
        CP	127+1
        JR	NC,J5C44                ; illegal function call
        JR	C5C41                   ; check for < 256

J5C5A:	CALL	C661A                   ; get next MCL character
        JR	Z,J5C6D                 ; none,
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5C6A                 ; nope,
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        JP	J5AB9

J5C6A:	CALL	C6640                   ; put back MCL character
J5C6D:	JP	J5AB3

; MCL table OPLL

I5C70:  DEFB	"A"
        DEFW	C5DED
        DEFB	"&"
        DEFW	C5F11
        DEFB	"{"
        DEFW	C5F1A
        DEFB	"}"+128
        DEFW	C5F96
        DEFB	"Y"+128
        DEFW	C5D37
        DEFB	"L"+128
        DEFW	C5A80
        DEFB	"Q"+128
        DEFW	C5D9D
        DEFB	"V"+128
        DEFW	C5D64
        DEFB	"O"+128
        DEFW	C5AA6
        DEFB	">"
        DEFW	C5DAB
        DEFB	"<"
        DEFW	C5DB8
        DEFB	"Z"+128
        DEFW	C5D61
        DEFB	"X"
        DEFW	C66DB
        DEFB	"R"+128
        DEFW	C5DC3
        DEFB	"N"+128
        DEFW	C5DE0
        DEFB	"T"+128
        DEFW	C5A99
        DEFB	"@"
        DEFW	C5CAA
        DEFB	"M"+128
        DEFW	C5D8E
        DEFB	"S"+128
        DEFW	C5D95
        DEFB	0

;	  Subroutine OPLL PLAY "@"
;	     Inputs  ________________________
;	     Outputs ________________________

C5CAA:  CALL	C6614                   ; get next MCL character (with error)
        CP	"V"
        JR	Z,J5CDD                 ; @V, fine graded volume
        CP	"W"
        JR	Z,J5CFD                 ; @W, length (fine)
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5D06                 ; nope, illegal function call
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        CALL	C5C41                   ; check for < 256
        LD	A,E
        CP	63+1
        JR	NC,J5D06                ; illegal function call
        LD	C,A
        LD	A,(VOICEN)              ; current play voice
        CALL	C619F                   ; get play voice type
        JR	NC,J5CD3                ; fm voice,
        LD	A,C
        CP	15+1                    ; valid sample number ?
        JR	NC,J5D06                ; nope, illegal function call
J5CD3:	LD	E,84H                   ; voice
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,C
        POP	BC
        JP	J5E75                   ; put byte in queue

; @V (fine graded volume)

J5CDD:	CALL	C6614                   ; get next MCL character (with error)
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5D06                 ; nope, illegal function call
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        LD	A,127
        SUB	E                       ; valid fine graded volume ?
        JP	M,J5D06                 ; nope, illegal function call
        RRA
        LD	C,A
        CALL	C5C41                   ; check for < 256
        LD	E,85H
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,C
        POP	BC
        JP	J5E75                   ; put byte in queue

; @W (duration)

J5CFD:	POP	DE
        CALL	C5D09                   ; determine duration (OPLL)
        LD	E,83H                   ; duration operation
        JP	J5E6D                   ; put 3 bytes in queue

J5D06:	JP	C6770                   ; illegal function call

;	  Subroutine determine duration (OPLL)
;	     Inputs  ________________________
;	     Outputs HL = duration

C5D09:	CALL	C5E82                   ; get default note length (with combine mode)
        PUSH	HL                      ; store pointer to length
        CALL	C661A                   ; get next MCL character
        JR	Z,J5D23                 ; none, use default note length
        PUSH	BC
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        POP	BC
        LD	A,63+1
        CP	E                       ; valid note length ?
        JR	C,J5D06                 ; nope, illegal function call
        CALL	C5C41                   ; check for < 256
        OR	E                       ; length not specified ?
        JR	Z,J5D06                 ; yep, illegal function call
        LD	C,E
J5D23:	POP	HL                      ; restore pointer to length
        JP	J5EAF                   ; calculate duration counter and quit

;	  Subroutine start of numeric expression ?
;	     Inputs  ________________________
;	     Outputs ________________________

C5D27:	CP	'+'
        RET	Z
        CP	'-'
        RET	Z
        CP	'='
        RET	Z
        CP	'0'
        RET	C
        CP	'9'+1
        CCF
        RET

;	  Subroutine PLAY "Y"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D37:	JR	NC,C5D61                ; illegal function call
        LD	A,E
        CALL	C6DF3                   ; validate OPLL registernumber
        JR	C,C5D61                 ; invalid, illegal function call
        CALL	C5C41                   ; check for < 256
        PUSH	DE
        CALL	C6614                   ; get next MCL character (with error)
        CP	","
        JR	NZ,C5D61                ; illegal function call
        CALL	C664E                   ; get numeric value from MCL string
        CALL	C5C41                   ; check for < 256
        PUSH	DE                      ; store value
        LD	E,82H                   ; write OPLL register
        CALL	C59C5                   ; put byte in queue (DI)
        POP	HL                      ; restore value
        EX	(SP),HL
        LD	E,L
        CALL	C59C5                   ; put byte in queue (DI)
        POP	DE
        POP	BC
        JP	J5E75                   ; put byte in queue

C5D61:	JP	C6770                   ; illegal function call

;	  Subroutine OPLL PLAY "V"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D64:	JR	C,J5D68
        LD	E,8
J5D68:	CALL	C5C41                   ; check for < 256
        LD	A,E
        CP	15+1
        JR	NC,J5D92                ; illegal function call
J5D70:	LD	C,A
        LD	E,81H
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,C
        POP	BC
        JP	J5E75                   ; put byte in queue

;	  Subroutine OPLL drums PLAY "V"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D7B:	JR	C,J5D7F
        LD	E,8
J5D7F:	CALL	C5C41                   ; check for < 256
        LD	A,E
        CP	15+1
        JR	NC,J5D92                ; illegal function call
        LD	A,15
        SUB	E
        ADD	A,A
        LD	E,A
        JR	J5D70

;	  Subroutine OPLL PLAY "M"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D8E:	RET	NC
        LD	A,E
        OR	D
        RET	NZ
J5D92:	JP	C6770                   ; illegal function call

;	  Subroutine OPLL PLAY "S"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D95:	LD	A,E
        CP	15+1
        JR	NC,J5D92                ; illegal function call
        JP	C5C41                   ; check for < 256

;	  Subroutine OPLL PLAY "Q"
;	     Inputs  ________________________
;	     Outputs ________________________

C5D9D:	JR	C,J5DA1
        LD	E,8
J5DA1:	LD	A,E
        CP	09H	; 9 
        JR	NC,J5D92                ; illegal function call
        LD	L,38                    ; offset = division value
        JP	J5A8B

;	  Subroutine PLAY ">"
;	     Inputs  ________________________
;	     Outputs ________________________

C5DAB:	LD	L,15                    ; offset = octave
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,(HL)                  ; octave
        INC	A                       ; increase octave
        CP	8+1                     ; valid octave ?
        JR	NC,J5D92                ; nope, illegal function call
        LD	(HL),A                  ; update octave
        RET

;	  Subroutine PLAY "<"
;	     Inputs  ________________________
;	     Outputs ________________________

C5DB8:	LD	L,15                    ; offset = octave
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,(HL)                  ; octave
        DEC	A                       ; decrease octave
        JR	Z,J5D92                 ; invalid octave, illegal function call
        LD	(HL),A                  ; update octave
        RET

;	  Subroutine PLAY "R"
;	     Inputs  ________________________
;	     Outputs ________________________

C5DC3:	JR	C,J5DC7                 ; rest length specified,
        LD	E,4                     ; use default length 4
J5DC7:	CALL	C5C41                   ; check for < 256
        OR	E                       ; length = 0 ?
        JR	Z,J5D92                 ; yep, illegal function call
        CP	64+1                    ; valid length ?
        JR	NC,J5D92                ; nope, illegal function call
        XOR	A
        PUSH	AF
        LD	HL,I5E11
        PUSH	HL
        LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer
        PUSH	HL
        JP	J5EA2

;	  Subroutine OPLL PLAY "N"
;	     Inputs  ________________________
;	     Outputs ________________________

C5DE0:	JR	NC,J5D92                ; note number not specified, illegal function call
        CALL	C5C41                   ; check for < 256
        LD	A,E
        CP	96+1                    ; valid note number ?
        JR	C,J5E07                 ; yep,
        JP	C6770                   ; illegal function call

;	  Subroutine OPLL PLAY "A"
;	     Inputs  ________________________
;	     Outputs ________________________

C5DED:	CALL	C5AF6                   ; translate note letter to number
        LD	L,15                    ; offset = octave
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	D,12
        LD	B,(HL)                  ; octave
        LD	A,-12
J5DFA:	ADD	A,D
        DJNZ	J5DFA
        LD	D,A
        LD	B,0
        LD	HL,I5A16
        ADD	HL,BC
        LD	A,(HL)                  ; translate note number to offset
        RRCA
        ADD	A,D                     ; translate to note number

J5E07:	ADD	A,12
        LD	D,A
        CALL	C6C82                   ; calculate OPLL frequency value
        PUSH	DE                      ; store OPLL frequency value
        CALL	C5E94                   ; determine note duration (OPLL)
I5E11:	PUSH	HL                      ; store duration
        CALL	C661A                   ; get next MCL character
        JR	Z,J5E20                 ; none,
        CP	'&'
        PUSH	AF                      ; store flag
        CALL	C6640                   ; put back MCL character
        POP	AF                      ; restore flag
        JR	Z,J5E61
J5E20:	LD	L,38                    ; offset = division value
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,(HL)                  ; division value
        CP	8
        JR	Z,J5E61
        POP	DE                      ; restore duration
        PUSH	DE                      ; store duration
        LD	B,A
        LD	HL,0
J5E30:	ADD	HL,DE
        DJNZ	J5E30
        SRL	H
        RR	L
        SRL	H
        RR	L
        SRL	H
        RR	L
        POP	DE                      ; restore duration
        EX	DE,HL
        OR	A
        SBC	HL,DE
        EX	DE,HL
        JR	Z,J5E62
        POP	BC
        POP	AF
        PUSH	DE
        LD	E,B
        CALL	C59C5                   ; put byte in queue (DI)
        LD	A,B
        OR	A
        LD	E,C
        CALL	NZ,C59C5                ; put byte in queue (DI)
        LD	E,L
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,H
        CALL	C59C5                   ; put byte in queue (DI)
        POP	HL
        LD	E,0
        JR	J5E6D                   ; put 3 bytes in queue

J5E61:	POP	HL                      ; restore duration
J5E62:	POP	BC                      ; restore OPLL frequency value
        POP	DE
        LD	E,B
        CALL	C59C5                   ; put byte in queue (DI)
        LD	A,B
        OR	A
        JR	Z,J5E70
        LD	E,C
J5E6D:	CALL	C59C5                   ; put byte in queue (DI)
J5E70:	LD	E,L
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,H
J5E75:	CALL	C59C5                   ; put byte in queue (DI)
        CALL	C59D5                   ; queue almost full ?
        EI
        JP	C,J590F                 ; yep,
        JP	J65C6                   ; nope, continue MCL parsing

;	  Subroutine get default note length (with combine mode)
;	     Inputs  ________________________
;	     Outputs ________________________

C5E82:	LD	L,9
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	C,(HL)
        LD	A,C
        OR	A                       ; in combine mode ?
        PUSH	AF                      ; store combine mode flag
        LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer
        POP	AF                      ; restore combine mode flag
        RET	NZ                      ; in combine mode, return combine mode length
        LD	C,(HL)                  ; length
        RET

;	  Subroutine determine note duration (OPLL)
;	     Inputs  ________________________
;	     Outputs HL = duration

C5E94:	CALL	C5E82                   ; get default note length (with combine mode)
        PUSH	HL                      ; store pointer to length
        CALL	C661A                   ; get next MCL character
        JR	Z,J5EAE                 ; none, use default note length
        PUSH	BC
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        POP	BC
J5EA2:	LD	A,63+1
	CP	E                       ; valid note length ?
        JR	C,J5F17                 ; nope, illegal function call
        CALL	C5C41                   ; check for < 256
        OR	E                       ; length = 0 ?
        JR	Z,J5EAE                 ; yep, use default length
        LD	C,E                     ; use specified length
J5EAE:	POP	HL                      ; restore pointer to length
J5EAF:	INC	HL

;	  Subroutine calculate duration counter
;	     Inputs  C = length
;	     Outputs ________________________

C5EB0:	LD	A,(HL)                  ; tempo
        LD	B,0
        CALL	C5BF3                   ; multiply (tempo * length)
        PUSH	HL                      ; store tempo * length
        LD	DE,(D.F97A)             ; (number of interrupts for tempo 120, length 4)/2
        CALL	C5BD5                   ; divide
        EX	DE,HL
        EX	(SP),HL                 ; restore tempo * length, store count
        LD	B,5
J5EC2:	SRL	H
        RR	L
        DJNZ	J5EC2                   ; /32
        CALL	C5BD5                   ; divide
        CALL	C5F02                   ; get pointer to play voice corrector
        LD	L,(IX+0)
        LD	H,0                     ; current corrector
        ADD	HL,DE
        LD	(IX+0),L                ; update corrector
        LD	DE,-32
        ADD	HL,DE                   ; corrector < 32 ?
        JR	NC,J5EE3                ; yep,
        LD	(IX+0),L                ; update corrector
        POP	HL                      ; restore count
        INC	HL                      ; increase count
        PUSH	HL                      ; store count
J5EE3:	POP	DE                      ; restore count
        LD	H,D
        LD	L,E                     ; count
J5EE6:	CALL	C661A                   ; get next MCL character
        JR	Z,J5F01                 ; none, quit
        CP	"."
        JR	NZ,J5EFE
        SRL	D
        RR	E
        ADC	HL,DE                   ; count = count * 1.5
        LD	A,0E0H
        AND	H
        JR	Z,J5EE6
        XOR	H
        LD	H,A
        JR	J5F01                   ; quit

J5EFE:	CALL	C6640                   ; put back MCL character
J5F01:	RET

;	  Subroutine get pointer to play voice corrector
;	     Inputs  ________________________
;	     Outputs ________________________

C5F02:	PUSH	BC
        LD	A,(VOICEN)
        LD	C,A
        LD	B,0                     ; current play voice
        LD	IX,I$FA19
        ADD	IX,BC
        POP	BC
        RET

;	  Subroutine OPLL PLAY "&"
;	     Inputs  ________________________
;	     Outputs ________________________

C5F11:	LD	E,87H
        POP	BC
        JP	J5E75                   ; put byte in queue

J5F17:	JP	C6770                   ; illegal function call

;	  Subroutine OPLL PLAY "{"
;	     Inputs  ________________________
;	     Outputs ________________________

C5F1A:	LD	L,9
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,(HL)                  ; already in combine mode ?
        JR	NZ,J5F17                ; yep, illegal function call
        LD	C,0
        LD	HL,(MCLPTR)
        PUSH	HL
        LD	A,(MCLLEN)
        PUSH	AF
J5F2C:	CALL	C6614                   ; get next MCL character (with error)
J5F2F:	CP	"N"
        JR	Z,J5F3F
        CP	"R"
        JR	Z,J5F3F
        CP	"A"
        JR	C,J5F42
        CP	"G"+1
        JR	NC,J5F42
J5F3F:	INC	C
        JR	J5F2C

J5F42:	CP	"}"
        JR	Z,J5F55
        CP	"{"
        JR	Z,J5F17                 ; illegal function call
        CP	"="
        JR	NZ,J5F2C
        PUSH	BC
        CALL	C66A4
        POP	BC
        JR	J5F2F

J5F55:	LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	E,(HL)                  ; length
        LD	D,0
        CALL	C661A                   ; get next MCL character
        JR	Z,J5F6F                 ; none,
        CALL	C6640                   ; put back MCL character
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J5F6F                 ; nope, use current length
        PUSH	BC
        CALL	C664E                   ; get numeric value from MCL string
        POP	BC
J5F6F:	LD	A,63+1
        CP	E
        JR	C,J5F17                 ; illegal function call
        CALL	C5C41                   ; check for < 256
        LD	A,C
        LD	B,D
        LD	C,E                     ; BC = length
        CALL	C5BF3                   ; multiply
        OR	H
        JR	NZ,J5F17                ; illegal function call
        LD	A,L
        CP	64+1
        JR	NC,J5F17                ; illegal function call
        PUSH	AF
        LD	L,9
        CALL	C67E4                   ; get pointer in current voice buffer
        POP	AF
        LD	(HL),A                  ; combine mode length
        POP	AF
        LD	(MCLLEN),A
        POP	HL
        LD	(MCLPTR),HL
        RET

;	  Subroutine OPLL PLAY "}"
;	     Inputs  ________________________
;	     Outputs ________________________

C5F96:	LD	L,9
        CALL	C67E4                   ; get pointer in current voice buffer
        LD	A,(HL)
        OR	A                       ; in combine mode ?
        JR	Z,J5FCE                 ; nope, illegal function call
        LD	(HL),0                  ; leave combine mode
        RET

; MCL table OPLL drums

I5FA2:  DEFB    "B"
        DEFW    C5FD1
        DEFB    "S"
        DEFW    C5FD1
        DEFB    "M"
        DEFW    C5FD1
        DEFB    "C"
        DEFW    C5FD1
        DEFB    "H"
        DEFW    C5FD1
        DEFB    "R"+128
        DEFW    C5DC3
        DEFB    "@"
        DEFW    C602A
        DEFB    "T"+128
        DEFW    C5A99
        DEFB    "Y"+128
        DEFW    C5D37
        DEFB    "V"+128
        DEFW    C5D7B
        DEFB    "X"
        DEFW    C66DB
        DEFB    0

I5FC4:  DEFB    "B"
        DEFB    "S"
        DEFB    "M"
        DEFB    "C"
        DEFB    "H"

        DEFB    10H
        DEFB    08H
        DEFB    04H
        DEFB    02H
        DEFB    01H

J5FCE:  JP      C6770                   ; illegal function call

C5FD1:  LD	BC,0
        CALL	C6640                   ; put back MCL character
J5FD7:	CALL	C6614                   ; get next MCL character (with error)
        CALL	C5D27                   ; start of numeric expression ?
        JR	NC,J6003                ; yep,
        PUSH	BC
        LD	HL,I5FC4
        LD	BC,5
        CPIR
        JR	NZ,J5FCE                ; illegal function call
        LD	C,4
        ADD	HL,BC
        LD	D,(HL)
        POP	BC
        CALL	C6614                   ; get next MCL character (with error)
        CP	"!"
        PUSH	AF
        CALL	NZ,C6640                ; nope, put back MCL character
        POP	AF
        JR	NZ,J5FFE                ; nope,
        LD	A,D
        OR	B
        LD	B,A
J5FFE:	LD	A,D
        OR	C
        LD	C,A
        JR	J5FD7

J6003:	INC	C
        DEC	C
        JR	Z,J5FCE                 ; illegal function call
        LD	A,0C0H
        OR	C
        PUSH	AF
        PUSH	BC
        LD	HL,I601F
        PUSH	HL
        LD	L,16                    ; offset = length
        CALL	C67E4                   ; get pointer in current voice buffer

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6015:	PUSH	HL
        CALL	C6640                   ; put back MCL character
        CALL	C664E                   ; get numeric value from MCL string
        JP	J5EA2

I601F:	POP	BC
        POP	AF
        POP	DE
        LD	E,A
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,B
        JP	J5E6D                   ; put 3 bytes in queue

;	  Subroutine OPLL drums PLAY "@"
;	     Inputs  ________________________
;	     Outputs ________________________

C602A:	CALL	C6614                   ; get next MCL character (with error)
        CP	"V"
        JP	Z,J5CDD                 ; @V, fine graded volume
        CP	"A"                     ; @A ?
        JR	NZ,J5FCE                ; nope, illegal function call

; @A (accented volume)

        CALL	C6614                   ; get next MCL character (with error)
        CALL	C5D27                   ; start of numeric expression ?
        JR	C,J6058                 ; nope, illegal function call
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        CALL	C5C41                   ; check for < 256
        LD	A,E
        CP	15+1                    ; valid volume ?
        JR	NC,J6058                ; nope, illegal function call
        LD	A,15
        SUB	E
        ADD	A,A
        LD	C,A
        LD	E,86H                   ; operation = rhythm
        CALL	C59C5                   ; put byte in queue (DI)
        LD	E,C
        POP	BC
        JP	J5E75                   ; put byte in queue

J6058:	JP	C6770                   ; illegal function call

;	  Subroutine timer interrupt handler
;	     Inputs  ________________________
;	     Outputs ________________________

J605B:	PUSH	AF                      ; store vdp status register
        DI
        LD	HL,D.F999
        LD	A,(D.F983)
        OR	A                       ; already in MSX-MUSIC timer interrupt handler ?
        JR	NZ,J6082                ; yep, skip
J6066:	CPL
        LD	(D.F983),A              ; in MSX-MUSIC timer interrupt handler
        PUSH	HL
J606B:	XOR	A
        LD	(D.FA26),A              ; assume no more service
        CALL	C6087                   ; music service handler
        LD	A,(D.FA26)
        OR	A                       ; need more service ?
        JR	NZ,J606B                ; yep, do some more
        POP	HL
        DI
        XOR	A
        LD	(D.F983),A              ; leave MSX-MUSIC timer interrupt handler
        DEC	(HL)                    ; skipped some interrupts ?
        JP	P,J6066                 ; yep, do some more
J6082:	INC	(HL)
        POP	AF                      ; restore vdp status register
        JP	J.F9BB                  ; old H.TIMI handler

;	  Subroutine music service handler
;	     Inputs  ________________________
;	     Outputs ________________________

C6087:	LD	A,(MUSICF)
        OR	A                       ; PSG voice active or CTRL-STOP check flag = enabled ?
        JR	Z,J6097                 ; nope, skip CTRL-STOP check
        CALL	C63B1                   ; CTRL-STOP pressed ?
        JR	NZ,J60A4                ; nope,
        LD	A,(MUSICF)
        AND	7FH                     ; ignore CTRL-STOP check flag, any PSG play voice active ?
J6097:	LD	HL,(D.F995)             ; play voice status
        OR	L
        OR	H                       ; any play voice active ?
        LD	HL,D.F997
        OR	(HL)                    ; or queued count > 0 ?
        CALL	NZ,C658D                ; yep, stop background music
        RET

J60A4:	LD	BC,(D.F995)             ; play voice status
        LD	A,B
        OR	C                       ; any play voice active ?
        JR	Z,J60CA                 ; nope, quit
        LD	L,C
        LD	H,B
        LD	A,(D.F991)
        LD	B,A                     ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        LD	A,16
        SUB	B
        LD	B,A
J60B6:	ADD	HL,HL
        DJNZ	J60B6
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
J60BC:	DEC	A                       ; all voices done ?
        JP	M,J60CA                 ; yep, quit
        ADD	HL,HL                   ; service this voice ?
        PUSH	AF
        PUSH	HL
        CALL	C,C60CB                 ; yep, service voice
        POP	HL
        POP	AF
        JR	J60BC                   ; next voice

J60CA:	RET

;	  Subroutine service voice
;	     Inputs  ________________________
;	     Outputs ________________________

C60CB:	LD	(D.F99A),A              ; set current play voice
        DI
        LD	L,0                     ; offset = timer
        CALL	C67E7                   ; get pointer in voice buffer
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; timer
        LD	A,D
        OR	E                       ; timer finished ?
        JR	Z,J60E3                 ; yep, skip update
        DEC	DE
        LD	(HL),D
        DEC	HL
        LD	(HL),E                  ; update timer
        LD	A,D
        OR	E                       ; timer finished ?
        RET	NZ                      ; nope, quit
        INC	HL
J60E3:	LD	A,(D.F992)
        LD	B,A                     ; number of OPLL play voices
        LD	A,(D.F99A)              ; current play voice
        CP	B                       ; FM voice ?
        JP	NC,J63FC                ; nope, service PSG voice

; service FM voice

J60EE:	CALL	C6388                   ; get from current play voice queue
        RET	Z                       ; queue empty, quit
J60F2:	INC	A                       ; end marker ?
        JP	Z,J6208                 ; yep,
        DEC	A                       ; special operation ?
        JP	M,J6235                 ; yep, handle
        PUSH	HL                      ; store pointer to duration counter high byte
        LD	D,A
        LD	E,A                     ; assume rest
        JR	Z,J6103                 ; rest, skip note high byte
        CALL	C6388                   ; get from current play voice queue
        LD	E,A
J6103:	LD	L,13
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; set note
        POP	HL                      ; restore pointer to duration counter high byte
        CALL	C6388                   ; get from current play voice queue
        LD	C,A
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        DEC	HL
        LD	(HL),C                  ; set duration counter
        LD	A,D
        OR	A                       ; rest ?
        JP	Z,C6177                 ; yep, note off and quit
        CALL	C61DA                   ; get pointer to channel and number of channels
        LD	L,18                    ; offset = volume
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	C,(HL)                  ; volume
        CALL	C613F                   ; use MIDI ?
        JP	NZ,J63BD                ; yep, MIDI note on
        CALL	C619C                   ; get current play voice type
        JP	C,J6172                 ; sample voice, return sample number
J6130:	PUSH	BC
        PUSH	DE
        CALL	C6A4A                   ; play note
        LD	BC,16
        ADD	IX,BC
        POP	DE
        POP	BC
        DJNZ	J6130                   ; next channel
        RET

;	  Subroutine use MIDI ?
;	     Inputs  ________________________
;	     Outputs ________________________

C613F:	PUSH	HL
        LD	HL,D.F981
        BIT	0,(HL)
        POP	HL
        RET

; 087H, "&"

C6147:	CALL	C6388                   ; get from current play voice queue
        RET	Z                       ; queue empty, quit
        OR	A
        JP	M,J60F2                 ; special operation,
        JR	Z,J60F2                 ; 0,
        LD	D,A
        CALL	C6388                   ; get from current play voice queue
        LD	E,A
        PUSH	HL
        LD	L,13
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	A,E
        CP	(HL)
        JR	NZ,J6163
        INC	HL
        LD	A,D
        CP	(HL)
J6163:	JP	NZ,J6103
        POP	HL
        CALL	C6388                   ; get from current play voice queue
        LD	C,A
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        DEC	HL
        LD	(HL),C                  ; set duration
        RET

J6172:	LD	A,(D.F982)              ; sample number
        RET

J6176:	RET

;	  Subroutine note off
;	     Inputs  ________________________
;	     Outputs ________________________

C6177:	CALL	C619C                   ; get current play voice type
        JR	NC,J6186                ; fm channel,
        RET	NZ                      ; drums channel, quit
        CALL	C613F                   ; use MIDI ?
        JP	NZ,J63C8                ; yep, MIDI note off
        JP	J6176                   ; stop playing sample (quit)

J6186:	CALL	C613F                   ; use MIDI ?
        JP	NZ,J63C8                ; yep, MIDI note off
        CALL	C61DA                   ; get pointer to channel and number of channels
J618F:	PUSH	BC
        CALL	C6C58                   ; key off
        LD	BC,16
        ADD	IX,BC
        POP	BC
        DJNZ	J618F                   ; next
        RET

;	  Subroutine get current play voice type
;	     Inputs  ________________________
;	     Outputs ________________________

C619C:	LD	A,(D.F99A)              ; current play voice

;	  Subroutine get play voice type
;	     Inputs  A = voice
;	     Outputs Cx reset = FM voice, Cx set and Zx set = sample voice, Cx set and Zx reset = drum voice

C619F:	LD	HL,D.F984               ; number of OPLL FM play voices
        CP	(HL)
        CCF
        RET	NC                      ; FM voice, quit (Cx reset)
        PUSH	AF
        LD	A,(D.F98E)
        DEC	A                       ; in drum mode ?
        JR	Z,J61AE                 ; yep,
        POP	AF
        RET

J61AE:	POP	AF
        ADC	A,A
        RRA                             ; Cx set, Zx reset
        RET

;	  Subroutine set instrument
;	     Inputs  C = instrument
;	     Outputs ________________________

C61B2:	CALL	C613F                   ; use MIDI ?
        JP	NZ,J63CC                ; yep, MIDI program change
        CALL	C619C                   ; get current play voice type
        JR	NC,J61C2                ; fm voice,
        LD	A,C
        LD	(D.F982),A              ; set sample number
        RET

J61C2:	PUSH	BC
        CALL	C61DA                   ; get pointer to channel and number of channels
        POP	DE
        LD	C,E                     ; instrument
J61C8:	PUSH	BC
        CALL	C6A47                   ; key off
        POP	BC
        PUSH	BC
        CALL	C68E1                   ; set software instrument
        LD	BC,16
        ADD	IX,BC
        POP	BC
        DJNZ	J61C8                   ; next channel
        RET

;	  Subroutine get pointer to channel and number of channels
;	     Inputs  ________________________
;	     Outputs ________________________

C61DA:	LD	A,(D.F99A)              ; current play voice
        CALL	C619F                   ; get play voice type
        JR	NC,J61EB                ; fm voice,
        JR	Z,J61EB                 ; sample voice,
        LD	IX,I.FA27+6*16          ; drum channel
        LD	B,3                     ; 3 channels
        RET

J61EB:	LD	HL,I.F985
        OR	A                       ; voice 0 ?
        JR	Z,J61F7                 ; yep,
        LD	B,A
        XOR	A
J61F3:	ADD	A,(HL)
        INC	HL
        DJNZ	J61F3                   ; calculate FM channel
J61F7:	LD	IX,I.FA27
        OR	A                       ; FM channel 0 ?
        JR	Z,J6206                 ; yep,
        LD	BC,16
J6201:	ADD	IX,BC
        DEC	A
        JR	NZ,J6201                ; calculate pointer to FM channel data
J6206:	LD	B,(HL)                  ; number of channels
        RET

J6208:	CALL	C6177                   ; note off
        LD	L,13
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	(HL),0
        INC	HL
        LD	(HL),0                  ; envelope period = 0

; update active flag all voices

J6215:	LD	A,(D.F99A)              ; current play voice
        LD	HL,1
        LD	B,A
        OR	A                       ; voice 0 ?
        JR	Z,J6222                 ; yep,
J621F:	ADD	HL,HL
        DJNZ	J621F
J6222:	EX	DE,HL
        DI
        LD	HL,(D.F995)             ; play voice status
        LD	A,E
        AND	L
        XOR	L
        LD	L,A
        LD	A,D
        AND	H
        XOR	H
        LD	H,A                     ; flip active flag
        LD	(D.F995),HL             ; update play voice status
        JP	C683D

J6235:	LD	E,A
        AND	0C0H
        CP	0C0H                    ; b7 and b6 set ?
        JP	Z,J6341                 ; yep,
        LD	A,E
        ADD	A,A
        EX	DE,HL
        ADD	A,LOW I624E
        LD	L,A
        LD	A,0
        ADC	A,HIGH I624E
        LD	H,A
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        EX	DE,HL
        PUSH	BC
        RET

I624E:	DEFW	C626E			; 080H, note off
        DEFW	C6271			; 081H, volume
        DEFW	C629E			; 082H, register
        DEFW	C62AC			; 083H, duration
        DEFW	C62B7			; 084H, voice
        DEFW	C62C1			; 085H, volume
        DEFW	C6318			; 086H, rhythm
        DEFW	C6147			; 087H, "&"
        DEFW	C6264			; 088H, use OPLL/PSG
        DEFW	C6266			; 089H, use MIDI
        DEFW	C63F4			; 08AH, raw MIDI data

; 088H, use OPLL/PSG

C6264:  XOR     A                       ; use OPLL/PSG
        DEFB    1

; 089H, use MIDI

C6266:  LD      A,1                     ; use MIDI
        LD	(D.F981),A              ; update MIDI flag
        JP	J60EE                   ; service FM voice

; 080H, note off

C626E:	JP	C6177                   ; note off

; 081H, volume

C6271:	PUSH	HL                      ; store pointer to duration counter high byte
        CALL	C619C                   ; get current play voice type
        POP	HL                      ; restore pointer to duration counter high byte
        JR	NC,J627D                ; fm voice,
        JP	NZ,J6300                ; drums voice,
        JR	J628B                   ; sample voice

J627D:	PUSH	HL                      ; store pointer to duration counter high byte
        LD	L,18                    ; offset = volume
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
J6287:	POP	HL                      ; restore pointer to duration counter high byte
        JP	J60EE                   ; service FM voice

J628B:	PUSH	HL                      ; store pointer to duration counter high byte
        LD	L,18                    ; offset = volume
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        ADD	A,A
        ADD	A,A
        ADD	A,3
        CALL	C62F9
        JR	J6287                   ; restore pointer and service FM voice

; 082H, write OPLL register

C629E:	PUSH	HL                      ; store pointer to duration counter high byte
        CALL	C6388                   ; get from current play voice queue
        LD	C,A
        CALL	C6388                   ; get from current play voice queue
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        JR	J6287                   ; restore pointer and service FM voice

; 083H, duration

C62AC:	CALL	C6388                   ; get from current play voice queue
        LD	C,A
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        DEC	HL
        LD	(HL),C                  ; set duration
        RET

; 084H, instrument

C62B7:	PUSH	HL                      ; store pointer to duration counter high byte
        CALL	C6388                   ; get from current play voice queue
        LD	C,A                     ; instrument
        CALL	C61B2                   ; set instrument
        JR	J6287                   ; restore pointer and service FM voice

; 085H, volume

C62C1:	CALL	C613F                   ; use MIDI ?
        JP	NZ,J63D1                ; yep, MIDI volume
        PUSH	HL                      ; store pointer to duration counter high byte
        CALL	C619C                   ; get current play voice type
        JR	NC,J62D6                ; fm voice,
        JR	Z,J62ED                 ; sample voice,
        CALL	C61DA                   ; get pointer to channel and number of channels
        LD	B,1                     ; 1 (drum) channel
        JR	J62D9

J62D6:	CALL	C61DA                   ; get pointer to channel and number of channels
J62D9:	CALL	C6388                   ; get from current play voice queue
        LD	E,A
J62DD:	PUSH	BC
        PUSH	DE
        CALL	C69CC
        LD	BC,16
        ADD	IX,BC
        POP	DE
        POP	BC
        DJNZ	J62DD
        JR	J6287                   ; restore pointer and service FM voice

J62ED:	CALL	C6388                   ; get from current play voice queue
        LD	E,A
        LD	A,63
        SUB	E
        CALL	C62F9
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C62F9:	LD	C,A
        LD	B,0
        LD	E,A
        LD	D,0
        RET

J6300:	PUSH	HL                      ; store pointer to duration counter high byte
        LD	L,10
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A                  ; tone
        LD	E,A
        LD	L,8
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	A,(HL)
        CPL
        CALL	C632F                   ; update rhythm volumes
        JP	J6287                   ; restore pointer and service FM voice

; 086H, rhythm

C6318:	PUSH	HL                      ; store pointer to duration counter high byte
        LD	L,12
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        LD	E,A
        LD	L,8
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	A,(HL)
        CALL	C632F                   ; update rhythm volumes
        JP	J6287                   ; restore pointer and service FM voice

;	  Subroutine update rhythm volumes
;	     Inputs  C = rhythm instrument, E = new volume
;	     Outputs ________________________

C632F:	AND	1FH                     ; no rhythm instrument specified ?
        RET	Z                       ; yep, quit
        CALL	C613F                   ; use MIDI ?
        JP	NZ,J63E4                ; yep, MIDI rhythm velocity
        PUSH	BC
        PUSH	DE
        LD	C,A                     ; rhythm instrument bit pattern
        CALL	C69DB                   ; update OPLL rhythm volumes
        POP	DE
        POP	BC
        RET

J6341:	CALL	C6388                   ; get from current play voice queue
        LD	D,A
        CALL	C6388                   ; get from current play voice queue
        LD	C,A
        CALL	C6388                   ; get from current play voice queue
        LD	(HL),A
        DEC	HL
        LD	(HL),C
        PUSH	HL
        LD	L,8
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	A,D
        XOR	(HL)
        JR	Z,J6379
        LD	(HL),D
        PUSH	DE
        PUSH	AF
        AND	D
        PUSH	AF
        LD	L,12
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	E,(HL)
        POP	AF
        CALL	C632F                   ; update rhythm volumes
        LD	A,D
        CPL
        LD	D,A
        POP	AF
        AND	D
        PUSH	AF
        LD	L,10
        CALL	C6396                   ; get pointer in current play voice buffer (DI)
        LD	E,(HL)                  ; tone
        POP	AF
        CALL	C632F                   ; update rhythm volumes
        POP	DE
J6379:	POP	HL
        LD	A,E
        AND	3FH
        LD	C,A
        CALL	C613F                   ; use MIDI ?
        JP	NZ,J63EF                ; yep, MIDI rhythm operation
        CALL	C6C68
        RET

;	  Subroutine get from current play voice queue
;	     Inputs  ________________________
;	     Outputs Zx set if queue is empty, A = byte (if Zx reset)

C6388:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	A,(D.F99A)              ; current play voice
        DI
        CALL	C6714                   ; get from queue
        POP	BC
        POP	DE
        POP	HL
        RET

;	  Subroutine get pointer in current play voice buffer (DI)
;	     Inputs  L = offset
;	     Outputs ________________________

C6396:	LD	A,(D.F99A)              ; current play voice
        DI
        JP	C67E7                   ; get pointer in voice buffer

;	  Subroutine wait until music is finished
;	     Inputs  ________________________
;	     Outputs ________________________

C639D:	EI
        CALL	C63B1                   ; CTRL-STOP pressed ?
        SCF
        RET	Z                       ; yep,
        DI
        LD	HL,(D.F995)             ; play voice status
        LD	A,L
        OR	H                       ; any play voice active ?
        LD	HL,D.F997
        OR	(HL)                    ; and queued count > 0 ?
        JR	NZ,C639D                ; yep, next
        EI
        RET

;	  Subroutine CTRL-STOP pressed ?
;	     Inputs  ________________________
;	     Outputs ________________________

C63B1:	LD	A,(BASROM)
        OR	A                       ; executing BASIC ROM ?
        RET	NZ                      ; yep, quit (CTRL-STOP disabled)
        LD	A,(INTFLG)
        SUB	3                       ; CTRL-STOP pressed ?
        OR	A                       ; ??
        RET

;	  Subroutine MIDI note on
;	     Inputs  ________________________
;	     Outputs ________________________

J63BD:	LD	B,0                     ; MIDI: NOTE ON

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C63BF:	LD	A,(D.F99A)              ; current play voice
        PUSH	HL
        CALL	C.F975                  ; MIDI hook
        POP	HL
        RET

;	  Subroutine MIDI note off
;	     Inputs  ________________________
;	     Outputs ________________________

J63C8:	LD	B,1                     ; MIDI: NOTE OFF
        JR	C63BF

;	  Subroutine MIDI program change
;	     Inputs  ________________________
;	     Outputs ________________________

J63CC:	LD	B,2                     ; MIDI: PROGRAM CHANGE
        LD	D,C
        JR	C63BF

;	  Subroutine MIDI volume
;	     Inputs  ________________________
;	     Outputs ________________________

J63D1:	CALL	C6388                   ; get from current play voice queue
        LD	D,A
        PUSH	HL
        CALL	C619C                   ; get current play voice type
        POP	HL
        LD	B,3                     ; MIDI: VOLUME CHANGE
        JR	NC,C63BF                ; fm voice,
        JR	Z,C63BF                 ; sample voice,
        LD	B,4                     ; MIDI: VOLUME CHANGE
        JR	C63BF

;	  Subroutine MIDI rhythm velocity
;	     Inputs  ________________________
;	     Outputs ________________________

J63E4:	PUSH	BC
        PUSH	DE
        LD	D,A
        LD	B,5                     ; MIDI: RHYTHM VELOCITY
        CALL	C63BF
        POP	DE
        POP	BC
        RET

;	  Subroutine MIDI rhythm operation
;	     Inputs  ________________________
;	     Outputs ________________________

J63EF:	LD	B,6                     ; MIDI: RHYTHM OPERATION
        LD	D,C
        JR	C63BF

; 08AH, raw MIDI data

C63F4:	CALL	C6388                   ; get from current play voice queue
        LD	D,A
        LD	B,7                     ; MIDI: RAW DATA
        JR	C63BF

; service PSG voice

J63FC:	LD	A,(D.F992)
        LD	B,A                     ; number of OPLL play voices
        LD	A,(D.F99A)              ; current play voice
        SUB	B
        LD	B,A                     ; PSG voice
        CALL	C6388                   ; get from current play voice queue
        RET	Z                       ; queue empty, quit
        CP	0FFH                    ; end marker ?
        JR	Z,J6468                 ; yep, handle end
        LD	D,A
        AND	0E0H
        RLCA
        RLCA
        RLCA
        LD	C,A                     ; b7-b5 = size of music packet (without duration counter)
        LD	A,D
        AND	1FH                     ; b4-b0
        LD	(HL),A                  ; set duration counter high byte
        CALL	C6388                   ; get from current play voice queue
        DEC	HL
        LD	(HL),A                  ; set duration counter low byte
        INC	C
J641E:	DEC	C                       ; music packet finished ?
        RET	Z                       ; yep, quit
        CALL	C6388                   ; get from current play voice queue
        LD	D,A
        AND	0C0H                    ; tone byte ?
        JR	NZ,J6439                ; nope,
        CALL	C6388                   ; get from current play voice queue
        LD	E,A
        LD	A,B                     ; PSG voice
        RLCA                            ; PSG register = *2, tone generator
        CALL	C6480                   ; write PSG register
        INC	A
        LD	E,D
        CALL	C6480                   ; write PSG register
        DEC	C
        JR	J641E                   ; next music packet byte

J6439:	LD	H,A
        AND	80H                     ; volume/envelope and envelope shape specified ?
        JR	Z,J644D                 ; nope, skip volume and envelope shape
        LD	E,D
        LD	A,B                     ; PSG voice
        ADD	A,8                     ; PSG register, volume/shape
        CALL	C6480                   ; write PSG register
        LD	A,E                     ; data
        AND	10H                     ; envelope shape ?
        LD	A,13                    ; envelope shape register
        CALL	NZ,C6480                ; yep, write PSG register
J644D:	LD	A,H
        AND	40H                     ; envelope period specified ?
        JR	Z,J641E                 ; nope, next music packet byte
        CALL	C6388                   ; get from current play voice queue
        LD	D,A
        CALL	C6388                   ; get from current play voice queue
        LD	E,A
        LD	A,11                    ; envelope period register
        CALL	C6480                   ; write PSG register
        INC	A
        LD	E,D
        CALL	C6480                   ; write PSG register
        DEC	C
        DEC	C
        JR	J641E                   ; next music packet byte

J6468:	LD	A,B                     ; PSG voice
        ADD	A,8                     ; PSG volume register
        LD	E,0                     ; volume 0
        CALL	C6480                   ; write PSG register
        INC	B
        DI
        LD	HL,MUSICF
        XOR	A
        SCF
J6477:	RLA
        DJNZ	J6477                   ; calculate voice bit mask
        AND	(HL)
        XOR	(HL)                    ; flip PSG play voice active flag
        LD	(HL),A                  ; update active flags PSG voices
        JP	J6215                   ; update active flags all voices

;	  Subroutine write PSG register
;	     Inputs  ________________________
;	     Outputs ________________________

C6480:	DI
        OUT	(0A0H),A
        PUSH	AF
        LD	A,E
        OUT	(0A1H),A
        POP	AF
        RET

;	  Subroutine initialize play voice enviorment variables
;	     Inputs  ________________________
;	     Outputs ________________________

C6489:	XOR	A
        LD	(D.F998),A              ; background music = enabled
        LD	A,(D.F984)              ; number of OPLL FM play voices
        LD	HL,D.F98E
        BIT	0,(HL)                  ; in drum mode ?
        JR	Z,J6498                 ; nope,
        INC	A
J6498:	BIT	1,(HL)                  ; in sample mode ? (MSX-AUDIO left over)
        JR	Z,J649D                 ; nope,
        INC	A
J649D:	LD	(D.F992),A              ; number of OPLL play voices
        ADD	A,3                     ; 3 PSG play voices
        LD	(D.F991),A              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        LD	B,A
        OR	80H
        LD	(D.F993),A
        LD	HL,0
J64AE:	SCF
        ADC	HL,HL
        DJNZ	J64AE
        LD	(D.F98F),HL             ; update play voice mask
        LD	A,(D.F992)              ; number of OPLL play voices
        LD	HL,I64E4
        CALL	C5486                   ; HL = HL + A
        LD	A,(HL)
        LD	(D.F994),A              ; queue size
        LD	HL,(D.F97D)             ; start of MSX-MUSIC workarea
        LD	DE,V.OFFI
        ADD	HL,DE
        LD	(D.F99B),HL             ; set pointer to play queue info blocks
        LD	A,(EXPTBL+0)
        LD	HL,IDBYT0
        CALL	RDSLT
        AND	80H                     ; VDP interrupt frequency
        LD	HL,0+(60*120*4)/2
        JR	Z,J64E0                 ; 60 Hz,
        LD	HL,0+(50*120*4)/2
J64E0:	LD	(D.F97A),HL             ; (number of interrupts for tempo 120, length 4)/2
        RET

I64E4:  DEFB    128-1                   ; queue size 3 PSG voices, 0 OPLL voices
        DEFB    64-1                    ; queue size 3 PSG voices, 1 OPLL voice
        DEFB    64-1                    ; queue size 3 PSG voices, 2 OPLL voices
        DEFB    64-1                    ; queue size 3 PSG voices, 3 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 4 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 5 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 6 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 7 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 8 OPLL voices
        DEFB    32-1                    ; queue size 3 PSG voices, 9 OPLL voices

;	  Subroutine initialize play voices
;	     Inputs  ________________________
;	     Outputs ________________________

C64EE:	CALL	C6789                   ; initialize PSG play voices
        DI
        XOR	A
        LD	(D.F999),A              ; number of unhandled interrupts = 0
        LD	(D.F997),A              ; queued count = 0
        LD	(D.F983),A              ; not in MSX-MUSIC timer interrupt handler
        LD	(D.F97F),A              ; PLAY device = OPLL/PSG
        LD	(D.F980),A              ; current device = OPLL/PSG
        LD	(D.F981),A              ; use OPLL/PSG
        LD	(D.F982),A              ; sample number = 0 (MSX-AUDIO left over)
        LD	L,A
        LD	H,A
        LD	(D.F995),HL             ; play voice status = no play voice active
        LD	A,(D.F991)
        LD	B,A                     ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        LD	HL,(D.F97D)             ; start of MSX-MUSIC workarea
        LD	DE,V.OFFQ
        ADD	HL,DE
        EX	DE,HL                   ; pointer to play voice queue
J6519:	PUSH	BC
        PUSH	DE
        LD	A,(D.F991)
        SUB	B
        LD	(D.F99A),A              ; set current play voice
        LD	HL,D.F994
        LD	B,(HL)                  ; queue size
        CALL	C6730                   ; initialize queue
        POP	DE
        POP	BC
        LD	A,(D.F994)              ; queue size
        INC	A                       ; +1
        LD	L,A
        LD	H,0
        ADD	HL,DE
        EX	DE,HL
        DJNZ	J6519                   ; next play voice
        LD	A,(D.F992)
        OR	A                       ; no OPLL play voices ?
        JR	Z,J6551                 ; yep,
        LD	B,A                     ; number of OPLL play voices
J653D:	PUSH	BC
        LD	A,B
        DEC	A
        LD	L,0                     ; offset = 0
        CALL	C67E7                   ; get pointer in voice buffer
        EX	DE,HL
        LD	HL,I6566
        LD	BC,S6566
        LDIR                            ; initialize voice buffer
        POP	BC
        DJNZ	J653D
J6551:	XOR	A
        LD	(MUSICF),A              ; no PSG play voice active, CTRL-STOP check flag = disabled
        RET

;	  Subroutine initialize rhythm volume
;	     Inputs  ________________________
;	     Outputs ________________________

C6556:	LD	A,(D.F98E)
        AND	01H                     ; in drum mode ?
        RET	Z                       ; nope, quit
        LD	A,(I6566+10)
        LD	E,A                     ; default rhythm volume
        LD	A,1FH                   ; all rhythm instruments
        CALL	C632F                   ; update rhythm volumes
        RET

I6566:	DEFW	0			; +0 , timer
        DEFB	0			; +2 , size string
        DEFW	0			; +3 , pointer to string
        DEFW	0			; +5 , stackdata
        DEFB	0			; +7 , size music packet
        DEFW	0		        ; +8 , music packet
        DEFB    14                      ; +10
        DEFS    4,0                     ; +11
        DEFB	4			; +15, octave = 4
        DEFB	4			; +16, length = 4
        DEFB	120			; +17, tempo = 120
        DEFB	8			; +18, volume = 8
        DEFW	0			; +19, envelope period
        DEFS	16,0			; +21, stack
        DEFB	0			; +37, ?
        DEFB	8			; +38, division value

S6566   EQU     $-I6566


;	  Subroutine stop background music
;	     Inputs  ________________________
;	     Outputs ________________________

C658D:	CALL	C64EE                   ; initialize play voices
        CALL	C6556                   ; initialize rhythm volume
        LD	A,(D.F992)              ; number of OPLL play voices
        CALL	C659A                   ; note off on all OPLL play voices
        RET

;	  Subroutine note off on all OPLL play voices
;	     Inputs  ________________________
;	     Outputs ________________________

C659A:	DEC	A                       ; done all OPLL play voices ?
        RET	M                       ; yep, quit
        LD	(D.F99A),A              ; set current play voice
        PUSH	AF
        CALL	C6177                   ; note off
        POP	AF
        JR	C659A                   ; next voice

J65A6:	CALL	C67D3                   ; free temporary string with type check
        CALL	C6834                   ; get pointer to string and size of string
        LD	B,C
        LD	C,D                     ; pointer to string
        LD	D,E                     ; size of string
        LD	A,B
        OR	C                       ; null pointer ?
        JR	Z,J65B9                 ; yep, skip
        LD	A,D
        OR	A                       ; empty string ?
        JR	Z,J65B9                 ; yep, skip
        PUSH	BC                      ; store pointer to string
        PUSH	DE                      ; store size of string
J65B9:	POP	AF
        LD	(MCLLEN),A              ; store size of string
        POP	HL
        LD	A,H
        OR	L                       ; null pointer ?
        JP	Z,J5915                 ; yep,
        LD	(MCLPTR),HL

J65C6:	CALL	C661A                   ; get next MCL character
        JR	Z,J65B9                 ; none,
        LD	HL,(MCLTAB)
        CP	'A'                     ; note ?
        JR	C,J65D6                 ; nope,
        CP	'G'+1                   ; note ?
        JR	C,J65E6                 ; yep,
J65D6:	ADD	A,A                     ; ignore b7
        LD	C,A
J65D8:	LD	A,(HL)
        ADD	A,A                     ; ignore b7

J65DA:	CALL	Z,C6770                 ; end of table, illegal function call, ?? a bit wierd: why CALL instead of JP

        CP	C                       ; found entry ?
        JR	Z,J65E5                 ; yep,
        INC	HL
        INC	HL
        INC	HL
        JR	J65D8                   ; next entry

J65E5:	LD	A,(HL)
J65E6:	LD	BC,J65C6
        PUSH	BC                      ; after this, continue MCL parsing
        LD	C,A
        ADD	A,A                     ; b7 set ?
        JR	NC,J660E                ; nope, call handler
        OR	A
        RRA
        LD	C,A                     ; character with b7 cleared
        PUSH	BC
        PUSH	HL
        CALL	C661A                   ; get next MCL character
        LD	DE,1
        JP	Z,J660B                 ; none, use numeric value 1 and call handler
        CALL	C68AE                   ; special character ?
        JP	NC,J6608                ; yep, put it back and call handler
        CALL	C6651                   ; get numeric value from MCL string (first character fetched)
        SCF                             ; numeric value specified
        JR	J660C                   ; call handler

J6608:	CALL	C6640                   ; put back MCL character
J660B:	OR	A                       ; clear Cx
J660C:	POP	HL
        POP	BC
J660E:	INC	HL
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A
        JP	(HL)

;	  Subroutine get next MCL character (with error)
;	     Inputs  ________________________
;	     Outputs ________________________

C6614:	CALL	C661A                   ; get next MCL character
        JR	Z,J65DA                 ; none, illegal function call
        RET

;	  Subroutine get next MCL charcter
;	     Inputs  ________________________
;	     Outputs Zx set if none

C661A:	PUSH	HL
J661B:	LD	HL,MCLLEN
        LD	A,(HL)
        OR	A                       ; any left ?
        JR	Z,J664C                 ; nope, quit (Zx set)
        DEC	(HL)
        LD	HL,(MCLPTR)
        LD	A,(HL)
        INC	HL
        LD	(MCLPTR),HL
        CP	' '
        JR	Z,J661B
        POP	HL
        CALL	C6637                   ; to upper
        SCF
        ADC	A,A                     ; force ASCII ??
        RRA                             ; Zx reset, Cx set
        RET

;	  Subroutine to upper
;	     Inputs  ________________________
;	     Outputs ________________________

C6637:	CP	'a'
        RET	C
        CP	'z'+1
        RET	NC
        SUB	20H
        RET

;	  Subroutine put back MCL character
;	     Inputs  ________________________
;	     Outputs ________________________

C6640:	PUSH	HL
        LD	HL,MCLLEN
        INC	(HL)
        LD	HL,(MCLPTR)
        DEC	HL
        LD	(MCLPTR),HL
J664C:	POP	HL
        RET

;	  Subroutine get numeric value from MCL string
;	     Inputs  ________________________
;	     Outputs ________________________

C664E:	CALL	C6614                   ; get next MCL character (with error)

;	  Subroutine get numeric value from MCL string (first character fetched)
;	     Inputs  ________________________
;	     Outputs ________________________

C6651:	CP	"="
        JP	Z,J66D3                 ; get value from variable
        CP	"+"
        JR	Z,C664E                 ; again
        CP	"-"
        JR	NZ,J6664
        LD	DE,C66F2
        PUSH	DE                      ; after this, negate
        JR	C664E

J6664:	LD	DE,0                    ; value = 0
J6667:	CP	","
        JR	Z,C6640                 ; yep, put back MCL character
        CP	";"                     ; seperator ?
        RET	Z                       ; yep, quit
        CP	'9'+1
        JR	NC,C6640                ; nope, put back MCL character
        CP	'0'
        JR	C,C6640                 ; nope, put back MCL character
        LD	HL,0
        LD	B,10
J667B:	ADD	HL,DE
        JR	C,J66CC                 ; illegal function call
        DJNZ	J667B
        SUB	'0'
        LD	E,A
        LD	D,0
        ADD	HL,DE
        JR	C,J66CC                 ; overflow, illegal function call
        EX	DE,HL
        CALL	C661A                   ; get next MCL character
        JR	NZ,J6667                ; succes, next digit
        RET

;	  Subroutine is upper case letter ?
;	     Inputs  ________________________
;	     Outputs ________________________

C668F:	CP	'A'
        RET	C
        CP	'Z'+1
        CCF
        RET

;	  Subroutine is variable type specifier ?
;	     Inputs  ________________________
;	     Outputs ________________________

C6696:	CP	"%"
        RET	Z
        CP	"!"
        RET	Z
        CP	"#"
        RET	Z
        CP	"$"
        RET	Z
        SCF
        RET

;	  Subroutine MCL variable specifier
;	     Inputs  ________________________
;	     Outputs ________________________

C66A4:	CALL	C6614                   ; get next MCL character (with error)
        LD	DE,T.MCLV
        PUSH	DE
        LD	B,40
        CALL	C668F                   ; is upper case letter ?
        JR	C,J66CC                 ; nope, illegal function call
J66B2:	LD	(DE),A
        INC	DE
        CALL	C6696                   ; is variable type specifier ?
        JR	C,J66C3                 ; nope,
        CALL	C6614                   ; get next MCL character (with error)
        CP	";"                     ; is seperator ?
        JR	NZ,J66CA                ; yep, continue
        LD	(DE),A
        JR	J66CF

J66C3:	CP	";"
        JR	Z,J66CF
        CALL	C6614                   ; get next MCL character (with error)
J66CA:	DJNZ	J66B2                   ; next variable character

J66CC:	CALL	C6770                   ; illegal function call, ?? a bit wierd: why CALL instead of JP

J66CF:	POP	HL
        JP	J678F                   ; get variable value

J66D3:	CALL	C66A4                   ; handle MCL variable specifier
        CALL	T.CDAC                  ; convert DAC to integer
        EX	DE,HL
        RET

;	  Subroutine PLAY "X"
;	     Inputs  ________________________
;	     Outputs ________________________

C66DB:	CALL	C66A4
        LD	A,(MCLLEN)
        OR	A
        JP	NZ,C6770                ; illegal function call
        LD	HL,(MCLPTR)
        EX	(SP),HL                 ; store pointer to string, restore BASIC pointer
        PUSH	AF
        LD	C,2                     ; 2 words
        CALL	C6894                   ; check for BASIC stack space
        JP	J65A6

;	  Subroutine negate
;	     Inputs  ________________________
;	     Outputs ________________________

C66F2:	XOR	A
        SUB	E
        LD	E,A
        SBC	A,D
        SUB	E
        LD	D,A
        RET

;	  Subroutine put in queue
;	     Inputs  ________________________
;	     Outputs ________________________

C66F9:	CALL	C6750                   ; get play queue info
        LD	A,B                     ; PUT offset
        INC	A
        INC	HL
        AND	(HL)                    ; warp around queue size
        CP	C                       ; queue full ?
        RET	Z                       ; yep, quit
        DEC	HL
        DEC	HL
        DEC	HL
        LD	(HL),A                  ; update PUT offset
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	C,A
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; pointer to queue
        LD	B,0
        ADD	HL,BC
        LD	(HL),E                  ; put byte in queue
        RET

;	  Subroutine get from queue
;	     Inputs  A = play voice
;	     Outputs ________________________

C6714:	CALL	C6750                   ; get play queue info
        LD	A,C
        CP	B                       ; buffer empty ?
        RET	Z                       ; yep, quit
        INC	HL
        INC	A
        AND	(HL)                    ; warp around buffer size
        DEC	HL
        DEC	HL
        LD	(HL),A                  ; update GET offset
        INC	HL
        INC	HL
        INC	HL
        LD	C,A
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; pointer to queue
        LD	B,0
        ADD	HL,BC
        LD	A,(HL)                  ; get byte from queue
        SCF
        ADC	A,A
        RRA                             ; Zx reset (even if byte = 0)
        RET

;	  Subroutine initialize queue
;	     Inputs  B = queue size (must be a power of 2 -1), DE = pointer to queue
;	     Outputs ________________________

C6730:	PUSH	BC
        CALL	C6758                   ; get pointer to play queue info block
        LD	(HL),B                  ; PUT offset = 0
        INC	HL
        LD	(HL),B                  ; GET offset = 0
        INC	HL
        LD	(HL),B                  ; clear backup flag
        INC	HL
        POP	AF
        LD	(HL),A                  ; queue size
        INC	HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; pointer to queue
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6741:	CALL	C6750                   ; get play queue info
        LD	A,B
        INC	A
        INC	HL
        AND	(HL)
        LD	B,A
        LD	A,C
        SUB	B
        AND	(HL)
        LD	L,A
        LD	H,0
        RET

;	  Subroutine get play queue info
;	     Inputs  A = queue
;	     Outputs ________________________

C6750:	CALL	C6758                   ; get pointer to play queue info block
        LD	B,(HL)
        INC	HL
        LD	C,(HL)
        INC	HL
        RET

;	  Subroutine get pointer to play queue info block
;	     Inputs  A = queue
;	     Outputs ________________________

C6758:	LD	HL,(D.F99B)             ; pointer to play queue info blocks
        ADD	A,A                     ; *2
        LD	B,A
        ADD	A,A                     ; *4
        ADD	A,B                     ; *6
        LD	C,A
        LD	B,0
        ADD	HL,BC
        RET

;	  Subroutine internal error
;	     Inputs  ________________________
;	     Outputs ________________________

J6764:	LD	E,51
        DEFB    1

;	  Subroutine file not found
;	     Inputs  ________________________
;	     Outputs ________________________
;            Remark  unused code, MSX-AUDIO left over

        LD      E,53
        DEFB    1

;	  Subroutine bad file name
;	     Inputs  ________________________
;	     Outputs ________________________
;            Remark  unused code, MSX-AUDIO left over

        LD      E,56
        DEFB    1

;	  Subroutine syntax error
;	     Inputs  ________________________
;	     Outputs ________________________

J676D:	LD      E,2
        DEFB    1

;	  Subroutine illegal function call
;	     Inputs  ________________________
;	     Outputs ________________________

C6770:	LD      E,5
        DEFB    1

;	  Subroutine type mismatch
;	     Inputs  ________________________
;	     Outputs ________________________

J6773:	LD      E,13
        DEFB    1

;	  Subroutine overflow
;	     Inputs  ________________________
;	     Outputs ________________________
;            Remark  unused code, MSX-AUDIO left over

        LD      E,6
        DEFB    1

;	  Subroutine out of memory
;	     Inputs  ________________________
;	     Outputs ________________________

J6779:	LD      E,7
        CALL	C50C6                   ; MSX-MUSIC BASIC initialized ?
        PUSH	DE
        CALL	NZ,C658D                ; yep, stop background music
        POP	DE
        LD	IX,M406F
        JR	J67D7                   ; BASIC error

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6789:	LD	IX,GICINI
        JR	J67D7

;	  Subroutine get variable value
;	     Inputs  ________________________
;	     Outputs ________________________

J678F:	LD	IX,M4E9B
        JR	J67D7

;	  Subroutine evaluate filespecification
;	     Inputs  ________________________
;	     Outputs ________________________
;            Remark  unused code, MSX-AUDIO left over

?6795:	LD	IX,M6A0E
        JR	J67D7

;	  Subroutine locate variable
;	     Inputs  ________________________
;	     Outputs ________________________

C679B:	LD	IX,M5EA4
        JR	J67D7

;	  Subroutine convert DAC to other type
;	     Inputs  ________________________
;	     Outputs ________________________

C67A1:	LD	IX,M517A
        JR	J67D7

;	  Subroutine check for BASIC char
;	     Inputs  ________________________
;	     Outputs ________________________

C67A7:	LD	A,(HL)
        EX	(SP),HL
        CP	(HL)
        JP	NZ,J676D
        INC	HL
        EX	(SP),HL

;	  Subroutine get next BASIC char
;	     Inputs  ________________________
;	     Outputs ________________________

C67AF:	LD	IX,M4666
        JR	J67D7

;	  Subroutine expression evaluator
;	     Inputs  ________________________
;	     Outputs ________________________

C67B5:	LD	IX,M4C64
        JR	J67D7

;	  Subroutine evaluate address operand
;	     Inputs  ________________________
;	     Outputs ________________________

C67BB:	LD	IX,M542F
        JR	J67D7

;	  Subroutine evaluate byte operand
;	     Inputs  ________________________
;	     Outputs ________________________

C67C1:	LD	IX,M521C
        JR	J67D7

;	  Subroutine execute new statement
;	     Inputs  ________________________
;	     Outputs ________________________

J67C7:	LD	IX,M4601
        JR	J67D7

;	  Subroutine close all i/o channels
;	     Inputs  ________________________
;	     Outputs ________________________

C67CD:	LD	IX,M6C1C
        JR	J67D7

;	  Subroutine free temporary string with type check
;	     Inputs  ________________________
;	     Outputs ________________________

C67D3:	LD	IX,M67D0
J67D7:	LD	IY,(EXPTBL+0-1)
        CALL	CALSLT
        EI
        RET

;	  Subroutine get pointer to string size in voice buffer
;	     Inputs  A = voice
;	     Outputs ________________________

C67E0:	LD	L,2                     ; offset 2 (MCLLEN)
        JR	C67E7                   ; get pointer in voice buffer

;	  Subroutine get pointer in current voice buffer
;	     Inputs  L = offset
;	     Outputs ________________________

C67E4:	LD	A,(VOICEN)              ; current play voice

;	  Subroutine get pointer in voice buffer
;	     Inputs  A = voice, L = offset
;	     Outputs ________________________

C67E7:	LD	H,0
        PUSH	DE
        LD	E,A                     ; voice
        LD	A,(D.F991)              ; number of play voices (OPLL+OPLL drum+SAMPLE+PSG)
        SUB	E
        SUB	4
        JR	C,J6805
        LD	A,E
        LD	DE,V.OFFV
        ADD	HL,DE
        LD	DE,(D.F97D)             ; start of MSX-MUSIC workarea
        ADD	HL,DE
        OR	A                       ; voice 0 ?
        JR	Z,J6825                 ; yep, quit
        LD	DE,39                   ; size of OPLL VCB
        JR	J6821                   ; calculate VCB pointer

J6805:	CPL
        EX	AF,AF'
        LD	A,L
        OR	A                       ; offset = timer ?
        JR	NZ,J6816                ; nope, use PSG VCB
        EX	AF,AF'
        LD	HL,D.F9AF
        ADD	A,A
        CALL	C5486                   ; HL = HL + A
        POP	DE
        XOR	A
        RET

J6816:	EX	AF,AF'
        LD	DE,VCBA
        ADD	HL,DE
        OR	A                       ; voice 0 ?
        JR	Z,J6825                 ; yep, quit
        LD	DE,37                   ; size of PSG VCB
J6821:	ADD	HL,DE
        DEC	A
        JR	NZ,J6821
J6825:	POP	DE
        RET

;	  Subroutine copy memory
;	     Inputs  HL = end of destination, BC = end of source, DE = start of source
;	     Outputs BC = start of destination

C6827:	PUSH	BC
        EX	(SP),HL
        POP	BC
J682A:	CALL	C68D4                   ; compare HL with DE
        LD	A,(HL)
        LD	(BC),A
        RET	Z                       ; equal, quit
        DEC	BC
        DEC	HL
        JR	J682A                   ; next

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6834:	LD	E,(HL)                  ; size of string
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	C,(HL)                  ; pointer to string
        INC	HL
        LD	B,(HL)                  ; ??
        INC	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C683D:	DI
        LD	HL,(D.F995)             ; play voice status
        LD	A,L
        OR	H                       ; any play voice active ?
        RET	NZ                      ; yep, quit
        LD	HL,PLYCNT
        OR	(HL)                    ; play count already = 0 ?
        JR	Z,J6867                 ; yep, skip
        DEC	(HL)                    ; update play count
        LD	HL,0FFFFH
        LD	(VCBA+0),HL             ; timer VCB PSG voice 0 = -1 (invalid, not used)
        LD	(VCBB+0),HL             ; timer VCB PSG voice 1 = -1 (invalid, not used)
        LD	(VCBC+0),HL             ; timer VCB PSG voice 2 = -1 (invalid, not used)
        INC	HL
        INC	HL
        LD	(D.F9AF),HL             ; timer VCB PSG voice 0 = 1
        LD	(D$F9B1),HL             ; timer VCB PSG voice 1 = 1
        LD	(D$F9B3),HL             ; timer VCB PSG voice 2 = 1
        LD	A,87H
        LD	(MUSICF),A              ; all PSG play voices active, CTRL-STOP check flag = enabled
J6867:	LD	HL,D.F997
        LD	A,(HL)
        OR	A                       ; queued count ?
        RET	Z                       ; nope, quit
        DEC	(HL)                    ; update queued count
        LD	A,(D.F992)
        OR	A                       ; no OPLL play voices ?
        JR	Z,J6888                 ; yep, skip
        LD	B,A
        LD	HL,(D.F97D)             ; start of MSX-MUSIC workarea
        LD	DE,V.OFFV
        ADD	HL,DE                   ; OPLL VCB
        LD	DE,39
J687F:	LD	(HL),1
        INC	HL
        LD	(HL),0                  ; duration = 1
        DEC	HL
        ADD	HL,DE
        DJNZ	J687F
J6888:	LD	HL,(D.F98F)             ; play voice mask
        LD	(D.F995),HL             ; update play voice status
        LD	A,0FFH
        LD	(D.FA26),A              ; request service
        RET

;	  Subroutine check for BASIC stack space
;	     Inputs  ________________________
;	     Outputs ________________________

C6894:	PUSH	HL
        LD	HL,(STREND)
        LD	B,0
        ADD	HL,BC
        ADD	HL,BC
        DEFB    03EH                    ; skip next instruction
        PUSH    HL
        LD	A,LOW -120
        SUB	L
        LD	L,A
        LD	A,HIGH -120
        SBC	A,H
        LD	H,A
        JR	C,J68AB
        ADD	HL,SP
        POP	HL
        RET	C
J68AB:	JP	J6779                   ; out of memory

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C68AE:	CP	'{'
        RET	Z
        CP	'}'
        RET	Z
        CP	'>'
        RET	Z
        CP	'<'
        RET	Z
        CP	'&'
        RET	Z
        CP	'@'
        RET	C
        CP	'Z'+1
        CCF
        RET

;	  Subroutine local GETYPR
;	     Inputs  ________________________
;	     Outputs ________________________
;            Remark  unused code, MSX-AUDIO left over

?68C4:	LD	A,(VALTYP)
        CP	8
        JR	NC,J68D0
        SUB	3
        OR	A
        SCF
        RET

J68D0:	SUB	3
        OR	A
        RET

;	  Subroutine compare HL with DE
;	     Inputs  ________________________
;	     Outputs ________________________

C68D4:	LD	A,H
        SUB	D
        RET	NZ
        LD	A,L
        SUB	E
        RET

;	  Subroutine program instrument definition and set user definied instrument
;	     Inputs  ________________________
;	     Outputs ________________________

C68DA:	LD	L,C
        LD	H,B
        CALL	C6942                   ; program instrument definition
        JR	J68F3

;	  Subroutine set software instrument
;	     Inputs  C = software instrument
;	     Outputs ________________________

C68E1:	LD	A,C
        CP	63+1                    ; valid software instrument ?
        RET	NC                      ; nope, quit
        CALL	C690F                   ; translate software to hardware instrument
        LD	(IX+7),0
        LD	(IX+8),0
        CALL	NZ,C6938                ; software, program instrument
J68F3:	PUSH	BC
        LD	A,(IX+0)                ; FM channel base register
        ADD	A,30H-10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        AND	0FH                     ; clear instrument, leave volume
        LD	B,A
        POP	DE
        LD	A,E
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        OR	B                       ; set instrument
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        CALL	C6A78
        RET

;	  Subroutine translate software to hardware instrument
;	     Inputs  ________________________
;	     Outputs ________________________

C690F:	PUSH	BC
        PUSH	HL
        LD	HL,I6928
        LD	A,C
        LD	BC,16
        CPIR
        JR	Z,J691F
        POP	HL
        POP	BC
        RET

J691F:	LD	A,16
        SUB	C
        DEC	A
        POP	HL
        POP	BC
        LD	C,A
        XOR	A
        RET

I6928:	DEFB	0FFH                    ; = 0 (Original)
        DEFB	002H                    ; = 1 (Violin)
        DEFB	00AH                    ; = 2 (Guitar)
        DEFB	000H                    ; = 3 (Piano)
        DEFB	003H                    ; = 4 (Flute)
        DEFB	004H                    ; = 5 (Clarinet)
        DEFB	005H                    ; = 6 (Oboe)
        DEFB	006H                    ; = 7 (Trumpet)
        DEFB	009H                    ; = 8 (Organ)
        DEFB	030H                    ; = 9 (Horn)
        DEFB	018H                    ; =10 (Synthesizer)
        DEFB	00EH                    ; =11 (Harpsichord)
        DEFB	010H                    ; =12 (Vibraphone)
        DEFB	017H                    ; =13 (Synthesizer Bass)
        DEFB	021H                    ; =14 (Acoustic Bass)
        DEFB	00CH                    ; =15 (Electric Guitar)

;	  Subroutine program instrument
;	     Inputs  ________________________
;	     Outputs ________________________

C6938:	PUSH    HL
        LD	L,C
        CALL	C5732                   ; get pointer to software instrument definition
        CALL	C6942                   ; program instrument definition
        POP	HL
        RET

;	  Subroutine program instrument definition
;	     Inputs  ________________________
;	     Outputs ________________________

C6942:	LD	DE,8
        ADD	HL,DE                   ; offset 8
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	(IX+7),E
        LD	(IX+8),D
        PUSH	IX
        LD	IX,I.FA27
        LD	B,9
J6958:	PUSH	BC
        LD	A,(IX+0)                ; FM channel base register
        ADD	A,30H-10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        RRCA
        RRCA
        RRCA
        RRCA
        AND	0FH                     ; instrument
        JR	NZ,J6970                ; hardware instrument,
        LD	(IX+7),E
        LD	(IX+8),D
J6970:	LD	BC,16
        ADD	IX,BC
        POP	BC
        DJNZ	J6958                   ; next channel
        POP	IX
        LD	A,(HL)                  ; offset 10
        LD	DE,6
        ADD	HL,DE                   ; offset 16
        AND	0EH
        RRCA
        LD	D,A
        LD	B,(HL)
        LD	C,0
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	B,(HL)
        LD	C,2
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	B,(HL)
        LD	C,4
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	B,(HL)
        LD	C,6
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        INC	HL                      ; offset 24
        LD	B,(HL)
        LD	C,1
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	A,(HL)
        AND	0C0H
        OR	D
        LD	D,A
        LD	C,3
        CALL	C6DE0                   ; read OPLL register
        AND	18H
        OR	D
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	B,(HL)
        LD	C,5
        CALL	C6DB5                   ; write OPLL register
        INC	HL
        LD	B,(HL)
        LD	C,7
        CALL	C6DB5                   ; write OPLL register
        LD	C,0                     ; hardware instrument 0
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C69CC:	LD	A,E
        RRCA
        RRCA
        RRCA
        AND	07H
        LD	(IX+2),A
        PUSH	HL
        CALL	C69FC                   ; set rhythm volumes
        POP	HL
        RET

;	  Subroutine update OPLL rhythm volumes
;	     Inputs  C = rhythm instrument, E = new volume
;	     Outputs ________________________

C69DB:	LD	A,C
        AND	1FH                     ; no rhythm instrument specified ?
        RET	Z                       ; yep, quit
        PUSH	HL
        PUSH	BC
        LD	HL,I.FAB7
        LD	D,A
        LD	A,E
        RRCA
        RRCA
        RRCA
        AND	07H
        LD	E,A
        LD	B,5                     ; 5 rhythm instruments
J69EE:	RR	D
        JR	NC,J69F3
        LD	(HL),E                  ; update volume
J69F3:	INC	HL
        DJNZ	J69EE
        CALL	C69FC                   ; set rhythm volumes
        POP	BC
        POP	HL
        RET

;	  Subroutine set rhythm volumes
;	     Inputs  ________________________
;	     Outputs ________________________

C69FC:	LD	HL,I.FAB7
        LD	A,(I.FA27+6*16+2)
        LD	D,A                     ; drum volume
        ADD	A,(HL)                  ; HI-HATE volume offset
        INC	HL
        RLCA
        RLCA
        RLCA
        RLCA
        LD	B,A
        LD	C,37H
        CALL	C6A36                   ; update high nibble OPLL register
        LD	A,D
        ADD	A,(HL)                  ; CYMBOLS volume offset
        INC	HL
        LD	B,A
        LD	C,38H
        CALL	C6A40                   ; update low nibble OPLL register
        LD	A,D
        ADD	A,(HL)                  ; TOM-TOM volume offset
        INC	HL
        RLCA
        RLCA
        RLCA
        RLCA
        LD	B,A
        CALL	C6A36                   ; update high nibble OPLL register
        LD	A,D
        ADD	A,(HL)                  ; SNARE-DRUM volume offset
        INC	HL
        LD	B,A
        LD	C,37H
        CALL	C6A40                   ; update low nibble OPLL register
        LD	A,D
        ADD	A,(HL)                  ; BASS-DRUM volume offset
        INC	HL
        LD	B,A
        LD	C,36H
        CALL	C6A40                   ; update low nibble OPLL register
        RET

;	  Subroutine update high nibble OPLL register
;	     Inputs  C = register, B = high nibble
;	     Outputs ________________________

C6A36:	CALL	C6DE0                   ; read OPLL register
        AND	0FH
J6A3B:	OR	B
        LD	B,A
        JP	C6DB5                   ; write OPLL register

;	  Subroutine update low nibble OPLL register
;	     Inputs  C = register, B = low nibble
;	     Outputs ________________________

C6A40:	CALL	C6DE0                   ; read OPLL register
        AND	0F0H
        JR	J6A3B

;	  Subroutine key off
;	     Inputs  ________________________
;	     Outputs ________________________

C6A47:	JP	C6C58                   ; key off

;	  Subroutine play note
;	     Inputs  C = volume, DE = 
;	     Outputs ________________________

C6A4A:	PUSH	BC
        PUSH	DE
        CALL	C6C58                   ; key off
        POP	DE
        POP	BC
        LD	A,15
        SUB	C
        RRCA
        AND	07H
        LD	(IX+1),A
        RES	7,D
        LD	(IX+3),E
        LD	(IX+4),D
        CALL	C6A78
        CALL	C6C3A                   ; calculate and set volume
        LD	A,(IX+0)                ; FM channel base register
        ADD	A,20H-10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        OR	10H                     ; key on
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6A78:	LD	L,(IX+5)
        LD	H,(IX+6)
        LD	E,(IX+3)
        LD	D,(IX+4)
        ADD	HL,DE
        LD	E,(IX+7)
        LD	D,(IX+8)
        ADD	HL,DE
        LD	DE,0529H
        ADD	HL,DE
        LD	A,H
        AND	A
        JP	P,J6AA5
        CP	0C4H
        JR	NC,J6AA0
J6A99:	SUB	0CH
        JP	M,J6A99
        JR	J6AA5

J6AA0:	ADD	A,0CH
        JP	M,J6AA0
J6AA5:	LD	H,A
        LD	C,L
        LD	L,00H
        LD	DE,0F404H
        SUB	3CH
        JR	C,J6AB3
        LD	H,A
        LD	L,14H
J6AB3:	ADD	HL,DE
        JP	C,J6AB3
        SBC	HL,DE
        LD	B,L
        LD	A,H
        ADD	A,H
        ADD	A,H
        LD	HL,I6B2C
        CALL	C5486                   ; HL = HL + A
        LD	A,B
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,00H
        LD	B,L
        ADD	HL,HL
        JR	NC,J6AD0
        ADD	HL,BC
J6AD0:	ADD	HL,HL
        JR	NC,J6AD4
        ADD	HL,BC
J6AD4:	ADD	HL,HL
        JR	NC,J6AD8
        ADD	HL,BC
J6AD8:	ADD	HL,HL
        JR	NC,J6ADC
        ADD	HL,BC
J6ADC:	ADD	HL,HL
        JR	NC,J6AE0
        ADD	HL,BC
J6AE0:	ADD	HL,HL
        JR	NC,J6AE4
        ADD	HL,BC
J6AE4:	ADD	HL,HL
        JR	NC,J6AE8
        ADD	HL,BC
J6AE8:	ADD	HL,HL
        JR	NC,J6AEC
        ADD	HL,BC
J6AEC:	LD	L,H
        LD	H,B
        ADD	HL,DE
        SRL	H
        RR	L
        SRL	H
        RR	L
        JR	NC,J6AFF
        INC	HL
        BIT	2,H
        JR	Z,J6AFF
        DEC	HL
J6AFF:	SUB	08H
        JR	NC,J6B0B
J6B03:	SRL	H
        RR	L
        ADD	A,04H
        JR	NZ,J6B03
J6B0B:	CP	20H
        JR	C,J6B11
        LD	A,1CH
J6B11:	OR	H
        RRA
        LD	H,A
        RR	L
        LD	C,(IX+0)                ; FM channel base register
        LD	B,L
        CALL	C6DB5                   ; write OPLL register
        LD	A,C
        ADD	A,10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        AND	30H
        OR	H
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        RET

I6B2C:	DEFB	000H,008H,079H
        DEFB	079H,008H,081H
        DEFB	0FAH,008H,089H
        DEFB	083H,009H,091H
        DEFB	014H,00AH,099H
        DEFB	0ADH,00AH,0A3H
        DEFB	050H,00BH,0ACH
        DEFB	0FCH,00BH,0B6H
        DEFB	0B2H,00CH,0C2H
        DEFB	074H,00DH,0CDH
        DEFB	041H,00EH,0D9H
        DEFB	01AH,00FH,0E6H

;	  Subroutine set pitch
;	     Inputs  BC = pitch
;	     Outputs ________________________

C6B50:	LD      D,B
        LD	E,C
        CALL	C6B62                   ; validate pitch
        RET	C                       ; invalid pitch, quit
        LD	(D.F99D),DE             ; store pitch
        LD	HL,(D.F99F)
        ADD	HL,DE
        EX	DE,HL
        JP	J6BE9

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6B62:	LD	HL,0FE34H
        ADD	HL,DE
        RET	C
        LD	HL,0FE66H
        ADD	HL,DE
        CCF
        RET	C
        ADD	HL,HL
        LD	DE,I6B76
        ADD	HL,DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        RET

I6B76:	DEFW	0FEC7H
        DEFW	0FED2H
        DEFW	0FEDDH
        DEFW	0FEE7H
        DEFW	0FEF2H
        DEFW	0FEFDH
        DEFW	0FF07H
        DEFW	0FF12H
        DEFW	0FF1DH
        DEFW	0FF27H
        DEFW	0FF32H
        DEFW	0FF3CH
        DEFW	0FF47H
        DEFW	0FF51H
        DEFW	0FF5CH
        DEFW	0FF66H
        DEFW	0FF71H
        DEFW	0FF7BH
        DEFW	0FF85H
        DEFW	0FF90H
        DEFW	0FF9AH
        DEFW	0FFA4H
        DEFW	0FFAFH
        DEFW	0FFB9H
        DEFW	0FFC3H
        DEFW	0FFCDH
        DEFW	0FFD8H
        DEFW	0FFE2H
        DEFW	0FFECH
        DEFW	0FFF6H
        DEFW	0000H
        DEFW	000AH
        DEFW	0014H
        DEFW	001EH
        DEFW	0028H
        DEFW	0032H
        DEFW	003CH
        DEFW	0046H
        DEFW	0050H
        DEFW	005AH
        DEFW	0064H
        DEFW	006DH
        DEFW	0077H
        DEFW	0081H
        DEFW	008BH
        DEFW	0095H
        DEFW	009EH
        DEFW	00A8H
        DEFW	00B2H
        DEFW	00BBH

;	  Subroutine set transpose
;	     Inputs  BC = transpose
;	     Outputs ________________________

C6BDA:	LD	D,B
        LD	E,C
        CALL	C6C0F                   ; validate transpose
        RET	C                       ; invalid transpose, quit
        LD	(D.F99F),DE             ; store transpose
        LD	HL,(D.F99D)
        ADD	HL,DE
        EX	DE,HL
J6BE9:	LD	IX,I.FA27
        LD	B,9                     ; 9 FM channels
        LD	C,14
        CALL	C6DE0                   ; read OPLL register
        AND	20H                     ; rhythm enabled ?
        JR	Z,J6BFA                 ; nope,
        LD	B,6                     ; 6 FM channels
J6BFA:	PUSH	BC
        PUSH	DE
        LD	(IX+5),E
        LD	(IX+6),D
        CALL	C6A78
        LD	BC,16
        ADD	IX,BC
        POP	DE
        POP	BC
        DJNZ	J6BFA
        RET

;	  Subroutine validate transpose
;	     Inputs  ________________________
;	     Outputs ________________________

C6C0F:	LD	A,D
        AND	A
        PUSH	AF
        CALL	M,C6C32
        LD	A,D
        LD	H,E
        LD	L,0
        LD	DE,0640FH
	ADD	HL,HL
        RLA
        CP	D
        JR	C,J6C24
        POP	AF
        SCF
        RET

J6C24:	ADD	HL,HL
        RLA
        CP	D
        JR	C,J6C2B
        SUB	D
        INC	L
J6C2B:	DEC	E
        JP	NZ,J6C24
        EX	DE,HL
        POP	AF
        RET	P

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6C32:	XOR	A
        LD	H,A
        LD	L,A
        SBC	HL,DE
        EX	DE,HL
        AND	A
        RET

;	  Subroutine calculate and set volume
;	     Inputs  ________________________
;	     Outputs ________________________

C6C3A:	LD	A,(IX+2)
        ADD	A,(IX+1)
        CP	15+1                    ; valid volume ?
        JR	C,J6C46
        LD	A,15                    ; nope, use max volume
J6C46:	LD	B,A
        LD	A,(IX+0)                ; FM channel base register
        ADD	A,30H-10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        AND	0F0H
        OR	B
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        RET

;	  Subroutine key off
;	     Inputs  ________________________
;	     Outputs ________________________

C6C58:	LD	A,(IX+0)                ; FM channel base register
        ADD	A,20H-10H
        LD	C,A
        CALL	C6DE0                   ; read OPLL register
        AND	2FH                     ; key off
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6C68:	PUSH	HL
        LD	A,C
        AND	1FH
        LD	D,A                     ; on mask
        CPL
        LD	E,A                     ; off mask
        LD	C,14
        CALL	C6DE0                   ; read OPLL register
        LD	L,A
        AND	E                       ; rhythm instruments off
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        LD	A,L
        OR	D                       ; rhythm instruments on
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        POP	HL
        RET

;	  Subroutine calculate OPLL frequency value
;	     Inputs  D = note number
;	     Outputs ________________________

C6C82:	PUSH	HL
        LD	A,D
        SUB	60
        LD	H,12
        JR	C,J6C8E
J6C8A:	SUB	H
        JP	NC,J6C8A
J6C8E:	ADD	A,H
        JP	NC,J6C8E
        LD	HL,(D.F9A1)
        CALL	C5486                   ; HL = HL + A
        LD	E,(HL)                  ; byte
        POP	HL
        BIT	7,E                     ; b7 set ?
        RET	Z                       ; nope, quit
        DEC	D
        RET

;	  Subroutine set temperament
;	     Inputs  C = temperament
;	     Outputs ________________________

C6C9F:	LD	A,C
        CP	21+1                    ; valid temperament ?
        CCF
        RET	C                       ; nope, quit
        PUSH	HL
        CP	9+1                     ; < 10 ?
        JR	C,J6CAD                 ; yep,
        ADD	A,I6D4A-I6CD2-10
        JR	J6CB2

J6CAD:	ADD	A,A
        ADD	A,A                     ; *4
        LD	H,A
        ADD	A,A
        ADD	A,H                     ; *12
J6CB2:	LD	HL,I6CD2
        CALL	C5486                   ; HL = HL + A
        LD	DE,9
        ADD	HL,DE
        LD	C,(HL)
        SBC	HL,DE
        LD	DE,I$F9A3
        LD	(D.F9A1),DE
        LD	B,12
J6CC8:	LD	A,(HL)
        SUB	C
        LD	(DE),A
        INC	HL
        INC	DE
        DJNZ	J6CC8                   ; initialize ? table
        POP	HL
        AND	A
        RET

I6CD2:	DEFB	0F1H,014H,0FBH,0E2H,005H,0ECH,00FH,0F6H,019H,000H,0E7H,00AH
        DEFB	01AH,0DDH,009H,035H,0F7H,023H,0E6H,012H,0D4H,000H,02CH,0EEH
        DEFB	01EH,005H,00AH,00FH,005H,019H,000H,014H,00AH,000H,014H,00AH
        DEFB	01EH,005H,00AH,00FH,005H,019H,000H,014H,00AH,000H,014H,0FBH
        DEFB	000H,0F6H,00AH,000H,0F6H,00AH,000H,005H,0ECH,000H,005H,0FBH
        DEFB	01AH,001H,009H,00BH,0F7H,015H,001H,012H,006H,000H,010H,0FCH
        DEFB	01AH,001H,009H,00BH,005H,015H,001H,012H,006H,000H,010H,00AH
        DEFB	00FH,000H,005H,00AH,0FBH,014H,0FBH,00AH,005H,000H,00FH,0F6H
        DEFB	01AH,0F8H,009H,027H,0F7H,023H,0F3H,012H,0FDH,000H,02CH,0EEH
        DEFB	000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H,000H

I6D4A:  DEFB	029H,0DCH,033H,052H,005H,024H,0D7H,02EH
        DEFB	0E1H,000H,056H,00AH,029H,0DCH,033H,052H
        DEFB	005H,024H,0D7H,02EH,0E1H,000H,056H

;	  Subroutine initialize OPLL
;	     Inputs  ________________________
;	     Outputs ________________________

C6D61:	XOR	A
        LD	C,0
        LD	B,8
        CALL	C6D7B
J6D69:	LD	C,14
        LD	B,11
        CALL	C6D7B
        LD	C,32
        LD	B,9
        CALL	C6D7B
        LD	C,48
        LD	B,9

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6D7B:	PUSH	BC
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        EI
        POP	BC
        INC	C
        DJNZ	C6D7B
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C6D86:	LD	C,14
        CALL	C6DE0                   ; read OPLL register
        OR	20H                     ; enable rhythm
        LD	B,A
        CALL	C6DB5                   ; write OPLL register
        LD	HL,I6DA3
        LD	B,9
J6D96:	PUSH	BC
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        INC	HL
        CALL	C6DB5                   ; write OPLL register
        EI
        POP	BC
        DJNZ	J6D96
        RET

I6DA3:	DEFB	016H,020H
        DEFB	017H,050H
        DEFB	018H,0C0H
        DEFB	026H,005H
        DEFB	027H,005H
        DEFB	028H,001H
        DEFB	036H,0
        DEFB	037H,0
        DEFB	038H,0

;	  Subroutine write OPLL register
;	     Inputs  C = register, B = data
;	     Outputs ________________________

C6DB5:	PUSH	AF
        LD	A,C
        CALL	C6DF3                   ; validate OPLL registernumber
        JR	C,J6DDD                 ; invalid,
        PUSH	HL
        LD	HL,I.F9C0
        ADD	A,L
        LD	L,A
        LD	A,0
        ADC	A,H
        LD	H,A
        DI
        LD	(HL),B
        LD	A,C
        OUT	(7CH),A
        EX	(SP),HL
        EX	(SP),HL
        LD	A,B
        OUT	(7DH),A
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        POP	HL
        POP	AF
        SCF
        CCF
        RET

J6DDD:	POP	AF
        SCF
        RET

;	  Subroutine read OPLL register
;	     Inputs  C = register
;	     Outputs ________________________

C6DE0:	LD	A,C
        CALL	C6DF3                   ; validate OPLL registernumber
        RET	C                       ; invalid, quit
        PUSH	HL
        LD	HL,I.F9C0
        LD	A,C
        ADD	A,L
        LD	L,A
        LD	A,0
        ADC	A,H
        LD	H,A
        LD	A,(HL)
        POP	HL
        RET

;	  Subroutine validate OPLL registernumber
;	     Inputs  ________________________
;	     Outputs ________________________

C6DF3:	CP	08H
        CCF
        RET	NC
        CP	0EH
        RET	C
        CP	19H
        CCF
        RET	NC
        CP	20H
        RET	C
        CP	29H
        CCF
        RET	NC
        CP	30H
        RET	C
        CP	39H
        CCF
        RET

I6E0C:	DEFM	'Piano 1 ',00H
        DEFB	00H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',0EH
        DEFM	'Y'+80H
        DEFB	11H
        DEFM	'0',00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'2'+80H
        DEFM	't'+80H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Piano 2 ',00H
        DEFB	0CH
        DEFB	08H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',0FH
        DEFM	'Y'+80H
        DEFB	10H
        DEFM	'0',00H
        DEFB	00H
        DEFB	00H
        DEFB	10H
        DEFB	00H
        DEFM	'2'+80H
        DEFM	's'+80H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Violin  '
        DEFB	00H
        DEFB	0CH
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',12H
        DEFM	'4'+80H
        DEFB	14H
        DEFB	10H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',00H
        DEFM	'V',17H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Flute   ',00H
        DEFB	0CH
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a l',18H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',03H
        DEFM	'C&',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Clarinet',00H
        DEFB	0CH
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'"'+80H
        DEFM	' '+80H
        DEFB	88H
        DEFB	14H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',00H
        DEFM	'T',06H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Oboe    '
        DEFB	00H
        DEFB	00H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'1 r',0AH
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'4',01H
        DEFM	'V',1CH
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Trumpet ',00H
        DEFB	00H
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',16H
        DEFM	'Q&@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'q',03H
        DEFM	'R$`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'PipeOrgn',01H
        DEFB	00H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'47Pv0',00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',00H
        DEFM	'0',06H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Xylophon'
        DEFB	00H
        DEFB	00H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	17H
        DEFB	18H
        DEFB	88H
        DEFM	'f',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'R',00H
        DEFM	'Y'+80H
        DEFM	'$',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Organ   ',00H
        DEFB	00H
        DEFM	'm'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a'+80H
        DEFB	0AH
        DEFM	'|'+80H
        DEFM	'(p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'c',05H
        DEFM	'x'+80H
        DEFM	')p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Guitar  ',00H
        DEFB	00H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	02H
        DEFB	15H
        DEFM	'#'+80H
        DEFM	'u ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'A',00H
        DEFM	'#'+80H
        DEFB	05H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Santool '
        DEFB	00H
        DEFM	'y'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	19H
        DEFB	0CH
        DEFM	'G'+80H
        DEFB	11H
        DEFB	10H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'S',03H
        DEFM	'u'+80H
        DEFB	03H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Elecpian',00H
        DEFM	'm'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'#',0FH
        DEFM	']'+80H
        DEFM	'J ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'C',00H
        DEFM	'?'+80H
        DEFB	05H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Clavicod',00H
        DEFM	'm'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	11H
        DEFM	'R'+80H
        DEFM	't'+80H
        DEFM	' ',00H
        DEFB	00H
        DEFB	00H
        DEFB	09H
        DEFB	08H
        DEFM	'4'+80H
        DEFM	'u'+80H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Harpsicd'
        DEFB	00H
        DEFB	0CH
        DEFB	0DH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	06H
        DEFM	'#'+80H
        DEFM	't'+80H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	19H
        DEFM	'b'+80H
        DEFM	't'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Harpscd2',00H
        DEFB	00H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	11H
        DEFM	'@'+80H
        DEFB	01H
        DEFM	' ',00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	08H
        DEFM	'4'+80H
        DEFM	'v'+80H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Vibraphn',00H
        DEFB	00H
        DEFM	'l'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'y'+80H
        DEFM	'$',95H
        DEFM	'e'+80H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'q'+80H
        DEFB	00H
        DEFM	'Q'+80H
        DEFM	'r'+80H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Koto    '
        DEFB	00H
        DEFB	00H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	13H
        DEFB	0CH
        DEFM	'|'+80H
        DEFM	'30',00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'R'+80H
        DEFB	83H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Taiko   ',00H
        DEFM	't'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	0EH
        DEFM	'J'+80H
        DEFM	'D ',00H
        DEFB	00H
        DEFB	00H
        DEFB	10H
        DEFB	00H
        DEFM	'f'+80H
        DEFM	'$',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Engine  ',00H
        DEFM	'h'+80H
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'`'+80H
        DEFB	1BH
        DEFB	11H
        DEFB	04H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	't'+80H
        DEFB	80H
        DEFM	'p'+80H
        DEFB	08H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'UFO     '
        DEFB	00H
        DEFB	0CH
        DEFM	'n'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	0FFH
        DEFB	19H
        DEFM	'P',05H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'p',00H
        DEFB	1FH
        DEFB	01H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynBell ',00H
        DEFB	00H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	13H
        DEFB	11H
        DEFM	'z'+80H
        DEFM	'!0',00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'r'+80H
        DEFM	't'+80H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Chime   ',00H
        DEFB	00H
        DEFM	'j'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'&'+80H
        DEFB	10H
        DEFM	'{'+80H
        DEFB	11H
        DEFM	' ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'B',0BH
        DEFM	'9'+80H
        DEFB	02H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynBass '
        DEFM	'x'+80H
        DEFM	's'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'@',89H
        DEFM	'G'+80H
        DEFB	14H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',00H
        DEFM	'y'+80H
        DEFB	04H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Synthsiz',00H
        DEFM	'h'+80H
        DEFM	'l',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'B',0BH
        DEFB	94H
        DEFM	'3',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'D',05H
        DEFM	'0'+80H
        DEFM	'v'+80H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynPercu',00H
        DEFM	't'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	0BH
        DEFM	':'+80H
        DEFM	'%`',00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	00H
        DEFM	'Y'+80H
        DEFB	06H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynRhyth'
        DEFB	00H
        DEFB	0CH
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'@',00H
        DEFM	'z'+80H
        DEFM	'7@',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Y'+80H
        DEFB	04H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'HarmDrum',00H
        DEFM	'a'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	02H
        DEFB	09H
        DEFM	'K'+80H
        DEFM	'9`',00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	00H
        DEFB	0FFH
        DEFB	06H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Cowbell ',00H
        DEFM	't'+80H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	18H
        DEFB	09H
        DEFM	'x'+80H
        DEFM	'& ',00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'u'+80H
        DEFM	'&`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'ClseHiht'
        DEFB	00H
        DEFB	18H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	0BH
        DEFB	09H
        DEFM	'p'+80H
        DEFB	01H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	04H
        DEFB	00H
        DEFM	'u'+80H
        DEFM	'''',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SnareDrm',00H
        DEFB	00H
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'@',07H
        DEFM	'P'+80H
        DEFB	01H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'@',00H
        DEFM	'V'+80H
        DEFM	'''',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'BassDrum',00H
        DEFM	't'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	07H
        DEFM	'K'+80H
        DEFM	'6@',00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	00H
        DEFM	'c'+80H
        DEFM	'%',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Piano 3 '
        DEFB	00H
        DEFB	00H
        DEFB	08H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	08H
        DEFM	'z'+80H
        DEFM	' 0',00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'2'+80H
        DEFM	't'+80H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Elecpia2',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	11H
        DEFM	'@'+80H
        DEFB	01H
        DEFB	10H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	11H
        DEFB	00H
        DEFM	'2'+80H
        DEFM	't'+80H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Santool2',00H
        DEFM	'm'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	19H
        DEFB	15H
        DEFM	'g'+80H
        DEFM	'!',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'S',03H
        DEFB	95H
        DEFB	03H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Brass   '
        DEFB	00H
        DEFB	00H
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',19H
        DEFM	'B&@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'p',00H
        DEFM	'b$`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Flute 2 ',00H
        DEFB	0CH
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'b%d',12H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'q',03H
        DEFM	'C&',80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Clavicd2',00H
        DEFB	0CH
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'!',0BH
        DEFB	90H
        DEFB	02H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	03H
        DEFM	'T'+80H
        DEFM	'u'+80H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Clavicd3'
        DEFB	00H
        DEFB	0CH
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	0AH
        DEFB	90H
        DEFB	03H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	03H
        DEFM	'$'+80H
        DEFM	'u'+80H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Koto 2  ',00H
        DEFM	'm'+80H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'C',0EH
        DEFM	'5'+80H
        DEFB	84H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'S',81H
        DEFM	'i'+80H
        DEFB	04H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'PipeOrg2',00H
        DEFB	00H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'4&Pv0',00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',00H
        DEFM	'0',06H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'PohdsPLA'
        DEFB	00H
        DEFM	'm'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'sZ',99H
        DEFB	14H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'3',00H
        DEFM	'u'+80H
        DEFB	15H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'RohdsPRA',00H
        DEFM	'm'+80H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	's',16H
        DEFM	'y'+80H
        DEFM	'3`',00H
        DEFB	00H
        DEFB	00H
        DEFB	13H
        DEFB	00H
        DEFM	'u'+80H
        DEFB	03H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Orch L  ',00H
        DEFB	0CH
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',15H
        DEFM	'v#@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'!',00H
        DEFM	'T',06H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Orch R  '
        DEFB	00H
        DEFB	00H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'c',1BH
        DEFM	'uE`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'p',00H
        DEFM	'K',15H
        DEFM	'p',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynViol ',00H
        DEFB	0CH
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',0AH
        DEFM	'v',12H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'!'+80H
        DEFB	02H
        DEFM	'T',07H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynOrgan',00H
        DEFM	't'+80H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',0DH
        DEFB	85H
        DEFB	14H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'x',08H
        DEFM	'r'+80H
        DEFB	03H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SynBrass'
        DEFB	00H
        DEFM	't'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',15H
        DEFM	'6'+80H
        DEFB	03H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'q',00H
        DEFM	'y'+80H
        DEFM	'&`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Tube    ',00H
        DEFM	't'+80H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'a',0DH
        DEFM	'u',18H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'q',00H
        DEFM	'r'+80H
        DEFB	03H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Shamisen',00H
        DEFM	'm'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	03H
        DEFB	14H
        DEFM	''''+80H
        DEFB	13H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFB	0CH
        DEFB	03H
        DEFM	'|'+80H
        DEFB	15H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Magical '
        DEFB	00H
        DEFM	't'+80H
        DEFB	06H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	13H
        DEFB	80H
        DEFM	' ',03H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'2',00H
        DEFB	85H
        DEFM	'/'+80H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Huwawa  ',00H
        DEFB	00H
        DEFB	0AH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'q'+80H
        DEFB	17H
        DEFM	'#',14H
        DEFM	' ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'1',00H
        DEFM	'@',09H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'WnderFlt',00H
        DEFB	00H
        DEFM	'n'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'p'+80H
        DEFB	17H
        DEFM	'Z',06H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	't@C','|'+80H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Hardrock'
        DEFB	00H
        DEFB	00H
        DEFM	'l',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	' ',0DH
        DEFM	'A'+80H
        DEFM	'V ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'q',02H
        DEFM	'U'+80H
        DEFB	06H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Machine ',00H
        DEFM	't'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',06H
        DEFM	'@',04H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'2',00H
        DEFM	'@t0',00H
        DEFB	00H
        DEFB	00H
        DEFM	'MachineV',00H
        DEFM	't'+80H
        DEFB	06H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',03H
        DEFM	'@',04H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'2',00H
        DEFM	'@t0',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Comic   '
        DEFB	00H
        DEFM	't'+80H
        DEFB	0EH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	01H
        DEFB	0DH
        DEFM	'x',7FH
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFB	08H
        DEFB	00H
        DEFM	'x'+80H
        DEFM	'y'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SE_Comic',00H
        DEFM	'h'+80H
        DEFM	'j',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'H'+80H
        DEFB	0BH
        DEFM	'v',11H
        DEFM	'@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'@'+80H
        DEFB	00H
        DEFM	'w'+80H
        DEFM	'y'+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SE_Laser',00H
        DEFM	'0n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'I',0BH
        DEFM	'4'+80H
        DEFB	0FFH
        DEFM	' ',00H
        DEFB	00H
        DEFB	00H
        DEFM	'@',00H
        DEFM	'y'+80H
        DEFB	05H
        DEFM	'`',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SE_Noise'
        DEFB	00H
        DEFM	'$',','+80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'M'+80H
        DEFB	0CH
        DEFM	'"'+80H
        DEFB	00H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'B',00H
        DEFM	'p'+80H
        DEFB	01H
        DEFB	80H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'SE_Star ',00H
        DEFB	00H
        DEFM	'n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Q',13H
        DEFB	13H
        DEFM	'B@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'B',00H
        DEFB	10H
        DEFB	01H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'SE_Star2',00H
        DEFM	'$n',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'Q',13H
        DEFB	13H
        DEFM	'B@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'B',00H
        DEFB	10H
        DEFB	01H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Engine 2'
        DEFB	00H
        DEFM	'h'+80H
        DEFB	0CH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFM	'0',12H
        DEFM	'#&@',00H
        DEFB	00H
        DEFB	00H
        DEFM	'4',07H
        DEFM	'p',02H
        DEFM	'P',00H
        DEFB	00H
        DEFB	00H
        DEFM	'Silence ',00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	0FFH
        DEFB	00H
        DEFB	0FFH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	0FFH
        DEFB	00H
        DEFB	0FFH
        DEFB	00H
        DEFB	00H
        DEFB	00H
        DEFB	00H

        DEFS	07FEDH-$,0

;	  Subroutine timer interrupt handler
;	     Inputs  ________________________
;	     Outputs ________________________

C7FED:	JP	J5003

        DEFS	07FF6H-$,0

D7FF6:	DEFB	0                       ; enable MSX-MUSIC I/O ports
D7FF7:	DEFB	0                       ; FMPAC bank switch

        DEFS	08000H-$,0

        END
