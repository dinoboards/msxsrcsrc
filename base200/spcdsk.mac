; SPCDSK.MAC

; BASIC file statements, MSX 1 version (version 1.0)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        ORG     6A0EH


        INCLUDE MSX.INC


CHGET   EQU     009FH
CKCNTC  EQU     00BDH
ISFLIO  EQU     014AH

PRTFLG  EQU     0F416H
MAXFIL  EQU     0F85FH
FILTAB  EQU     0F860H
PTRFIL  EQU     0F864H
FILNAM  EQU     0F866H
NLONLY  EQU     0F87CH

H.GETP  EQU     0FE4EH
H.SETF  EQU     0FE53H
H.NOFO  EQU     0FE58H
H.NULO  EQU     0FE5DH
H.NTFL  EQU     0FE62H
H.MERG  EQU     0FE67H
H.SAVE  EQU     0FE6CH
H.BINS  EQU     0FE71H
H.BINL  EQU     0FE76H
H.FILE  EQU     0FE7BH
H.DGET  EQU     0FE80H
H.FILO  EQU     0FE85H
H.INDS  EQU     0FE8AH
H.RSLF  EQU     0FE8FH
H.SAVD  EQU     0FE94H
H.LOC   EQU     0FE99H
H.LOF   EQU     0FE9EH
H.EOF   EQU     0FEA3H
H.FPOS  EQU     0FEA8H


        PUBLIC  FILEVL
        PUBLIC  CLSALL
        PUBLIC  INDSKC
        PUBLIC  CLSFIL
        PUBLIC  FILIDX
        PUBLIC  GETPUT
        PUBLIC  SETFIL
        PUBLIC  ISDDEV
        PUBLIC  POPHR2
        PUBLIC  DIRDO
        PUBLIC  OPEN
        PUBLIC  LRUN
        PUBLIC  LOAD
        PUBLIC  MERGE
        PUBLIC  SAVE
        PUBLIC  CLOSE
        PUBLIC  FIXINP
        PUBLIC  LFILES
        PUBLIC  FILES
        PUBLIC  LOC
        PUBLIC  LOF
        PUBLIC  EOF
        PUBLIC  FPOS
	PUBLIC	FILOUT

        EXTRN   DERNMF
        EXTRN   ERRFDR
        EXTRN   DERFNO
        EXTRN   DERBFN
        EXTRN   DERRPE
        EXTRN   FCERR
        EXTRN   SNERR
        EXTRN   DERFAO
        EXTRN   FRMEVL
        EXTRN   GETBYT
        EXTRN   CONINT
        EXTRN   FRESTR
        EXTRN   SCRTCH
        EXTRN   STRINI
        EXTRN   DERIER
        EXTRN   PUTNEW
        EXTRN   GENDSP
        EXTRN   FINPRT
        EXTRN   PARDEV
        EXTRN   MAIN
        EXTRN   LIST
        EXTRN   GONE
        EXTRN   POPAL2
        EXTRN   POPAL3
        EXTRN   SYNCHR
        EXTRN   CHRGTR
        EXTRN   OUTDO
        EXTRN   DCOMPR
        EXTRN   GETYPR
        EXTRN   CALLF


_RST    MACRO   X
        IFIDN   <X>,<SYNCHR>
        RST     08H
        ENDIF
        IFIDN   <X>,<CHRGTR>
        RST     10H
        ENDIF
        IFIDN   <X>,<OUTDO>
        RST     18H
        ENDIF
        IFIDN   <X>,<DCOMPR>
        RST     20H
        ENDIF
        IFIDN   <X>,<GETYPR>
        RST     28H
        ENDIF
        IFIDN   <X>,<CALLF>
        RST     30H
        ENDIF
        ENDM

_MSXCP	MACRO	X,Y
	X EQU $
	IF2
	IF	($ NE Y)
	.PRINTX	"ERROR: MSX incompatible, subroutine &X not aligned to &Y"
	ENDIF
	ENDIF
	ENDM


; START SUBTTL  SPCDSK

        SUBTTL  SPCDSK

;       Subroutine      evaluate file specification
;       Inputs          ________________________
;       Outputs         ________________________

	_MSXCP	FILEVL,6A0EH

C6A0E:  CALL    FRMEVL                  ; evaluate expression
        PUSH    HL			; store BASIC pointer
        CALL    FRESTR                  ; free temporary string with type check
        LD      A,(HL)
        OR      A                       ; empty string ?
        JR      Z,J6A47                 ; yep, bad filename error
        INC     HL
        LD      E,(HL)
        INC     HL
        LD      H,(HL)
        LD      L,E                     ; pointer to string
        LD      E,A                     ; size of string
        CALL    PARDEV                  ; parse device name
        PUSH    AF                      ; store device code
        LD      BC,FILNAM
        LD      D,8+3
        INC     E
J6A29:  DEC     E                       ; end of file specification string ?
        JR      Z,J6A61                 ; yep, fill remaining FILNAM with spaces
        LD      A,(HL)
        CP      20H                     ; control character ?
        JR      C,J6A47                 ; yep, bad filename error
        CP      '.'                     ; file name/extension seperator ?
        JR      Z,J6A4D                 ; yep, handle extension
        LD      (BC),A
        INC     BC
        INC     HL
        DEC     D                       ; FILNAM full ?
        JR      NZ,J6A29                ; nope, next
J6A3B:  POP     AF			; restore device code
        PUSH    AF			; store device code
        LD      D,A                     ; device code
        LD      A,(FILNAM+0)
        INC     A                       ; first character FILNAM charactercode 255 ?
        JR      Z,J6A47                 ; yep, bad filename error (because this is internally used as run flag)
        POP     AF			; restore device code
        POP     HL			; restore BASIC pointer
        RET

J6A47:  JP      DERNMF                  ; bad filename

J6A4A:  INC     HL
        JR      J6A29

J6A4D:  LD      A,D
        CP      8+3			; empty file name ?
        JP      Z,J6A47			; yep, bad file name error
        CP      3			; size file name > 8 ?
        JP      C,J6A47			; yep, bad file name error
        JR      Z,J6A4A			; size file name = 8, skip over seperator and continue with file extension
        LD      A,' '
        LD      (BC),A
        INC     BC
        DEC     D			; add space
        JR      J6A4D			; next

J6A61:  LD      A,' '
        LD      (BC),A
        INC     BC
        DEC     D
        JR      NZ,J6A61		; next
        JR      J6A3B			; finish

;       Subroutine      get pointer to i/o channel (DAC)
;       Inputs          (DAC) = i/o channel number
;       Outputs         HL = i/o channel pointer

C6A6A:  CALL    CONINT                  ; check for byte value

;       Subroutine      get pointer to i/o channel
;       Inputs          A = i/o channel number
;       Outputs         HL = i/o channel pointer

	_MSXCP	FILIDX,6A6DH

C6A6D:  LD      L,A			; store i/o channel number
        LD      A,(MAXFIL)
        CP      L			; i/o channel number valid ?
        JP      C,DERBFN                ; nope, bad filenumber error
        LD      H,0
        ADD     HL,HL
        EX      DE,HL
        LD      HL,(FILTAB)		; table with i/o channel pointers
        ADD     HL,DE
        LD      A,(HL)
        INC     HL
        LD      H,(HL)
        LD      L,A			; pointer to i/o channel
        LD      A,(NLONLY)
        INC     A                       ; NLONLY 0FFH ?
        RET     Z                       ; yep, quit
        LD      A,(HL)
        OR      A                       ; i/o channel open ?
        RET     Z                       ; nope, quit
        PUSH    HL			; store pointer to i/o channel
        LD      DE,4
        ADD     HL,DE			; +4
        LD      A,(HL)			; device code
        CP      9                       ; device = disk drive ?
        JR      NC,J6A99                ; nope, not a disk drive device
        CALL    H.GETP                  ; hook for disk
        JP      DERIER                  ; internal error (should not return to here)

J6A99:  POP     HL			; restore pointer to i/o channel
        LD      A,(HL)
        OR      A			; Zx reset (i/o channel is open)
        SCF				; i/o channel device is not a disk drive
        RET

;       Subroutine      evaluate i/o channel operand and set current i/o channel, store BASIC pointer on stack
;       Inputs          ________________________
;       Outputs         ________________________

C6A9E:  DEC     HL
        _RST    CHRGTR                  ; get next BASIC character
        CP      '#'
        CALL    Z,CHRGTR                ; yep, get next BASIC character
        CALL    GETBYT                  ; evaluate byte operand
        EX      (SP),HL                 ; store BASIC pointer, restore return address
        PUSH    HL                      ; store return address

;       Subroutine      redirect interpreter input/output to file
;       Inputs          A = i/o channel number
;       Outputs         ________________________

SETFIL:
C6AAA:  CALL    FILIDX                  ; get pointer to i/o channel
        JP      Z,DERFNO                ; i/o channel not open, file not open error
        LD      (PTRFIL),HL             ; redir interpreter input/output device to i/o channel
        CALL    H.SETF
        RET

;       Subroutine      OPEN statement
;       Inputs          ________________________
;       Outputs         ________________________

OPEN:
C6AB7:  LD      BC,FINPRT
        PUSH    BC
        CALL    FILEVL                  ; evaluate file specification
        LD      A,(HL)
        CP      82H                     ; FOR token ?
        LD      E,4                     ; random i/o mode
        JR      NZ,J6AE4                ; nope, open in random i/o mode
        _RST    CHRGTR                  ; get next BASIC character
        CP      85H                     ; INPUT token ?
        LD      E,1                     ; input file mode
        JR      Z,J6AE3                 ; yep, open in input mode
        CP      9CH                     ; OUT token ?
        JR      Z,J6ADC                 ; yep, may be OUTPUT
        _RST    SYNCHR
        DEFB    'A'
        _RST    SYNCHR
        DEFB    'P'
        _RST    SYNCHR
        DEFB    'P'
        _RST    SYNCHR
        DEFB    081H                    ; check for APPEND
        LD      E,8                     ; append file mode
        JR      J6AE4                   ; open in append mode

J6ADC:  _RST    CHRGTR                  ; get next BASIC character
        _RST    SYNCHR
        DEFB    0B3H                    ; check for PUT token
        LD      E,2                     ; output file mode
        JR      J6AE4                   ; open in output mode

J6AE3:  _RST    CHRGTR                  ; get next BASIC character
J6AE4:  _RST    SYNCHR
        DEFB    'A'
        _RST    SYNCHR
        DEFB    'S'                     ; check for AS
        PUSH    DE
        LD      A,(HL)
        CP      '#'
        CALL    Z,CHRGTR                ; yep, get next BASIC character
        CALL    GETBYT                  ; evaluate byte operand
        OR      A                       ; i/o channel 0 ?
        JP      Z,DERBFN                ; yep, bad file number
        CALL    H.NOFO                  ; open statement extension hook
        DEFB    01EH                    ; LD E,xx, trick to skip next instruction

;       Subroutine      open i/o channel
;       Inputs          A = i/o channel number, D = device code, E = file mode, HL = BASIC pointer
;       Outputs         ________________________

	_MSXCP	OPNFIL,6AFAH

C6AFA:  PUSH    DE			; store device code and file mode
        DEC     HL
        LD      E,A			; store i/o channel number
        _RST    CHRGTR                  ; end of statement ?
        JP      NZ,SNERR                ; nope, syntax error
        EX      (SP),HL			; store BASIC pointer, restore device code and file mode
        LD      A,E			; i/o channel number
        PUSH    AF			; store i/o channel number
        PUSH    HL			; store device code and file mode
        CALL    FILIDX                  ; get pointer to i/o channel
        JP      NZ,DERFAO               ; i/o channel already open, file already open
        POP     DE			; restore device code and file mode
        LD      A,D
        CP      9                       ; disk drive device ?
        CALL    H.NULO                  ; open for disk hook
        JP      C,DERIER                ; internal error
        PUSH    HL			; store pointer to i/o channel
        LD      BC,4
        ADD     HL,BC			; +4
        LD      (HL),D			; update device code
        LD      A,0                     ; function open
        POP     HL			; restore pointer to i/o channel
        CALL    GENDSP                  ; i/o function dispatcher
        POP     AF			; restore i/o channel number
        POP     HL			; restore BASIC pointer
        RET

;       Subroutine      close i/o channel
;       Inputs          A = i/o channel number
;       Outputs         ________________________

	_MSXCP	CLSFIL,6B24H

C6B24:  PUSH    HL			; store HL
        OR      A                       ; i/o channel 0 (system) ?
        JR      NZ,J6B30                ; nope, skip check
        LD      A,(NLONLY)
        AND     01H                     ; loading BASIC program ?
        JP      NZ,POPHR2               ; yep, quit
J6B30:  CALL    FILIDX                  ; get pointer to i/o channel
        JR      Z,J6B4A                 ; i/o channel not open, skip close i/o channel
        LD      (PTRFIL),HL             ; interpreter input/output device = i/o channel (only temporary)
        PUSH    HL			; store pointer to i/o channel
        JR      C,J6B41                 ; not a disk drive device, use i/o function dispatcher
        CALL    H.NTFL                  ; close for disk hook
        JP      DERIER                  ; internal error (should not return to here)

J6B41:  LD      A,2                     ; function close
        CALL    GENDSP                  ; i/o function dispatcher
        CALL    C6CEA			; clear buffer of interpreter i/o channel
        POP     HL			; restore pointer to i/o channel
J6B4A:  PUSH    HL			; store pointer to i/o channel
        LD      DE,7
        ADD     HL,DE			; +7
        LD      (HL),A			; clear i/o channel flags
        LD      H,A
        LD      L,A
        LD      (PTRFIL),HL             ; interpreter input/output device = keyboard/screen
        POP     HL			; restore pointer to i/o channel
        ADD     A,(HL)			; file mode, Zx set if i/o channel already closed, Zx reset if i/o channel closed
        LD      (HL),0			; i/o channel closed
        POP     HL			; restore HL
        RET

;       Subroutine      RUN statement (with file specification)
;       Inputs          Zx reset
;       Outputs         ________________________

LRUN:
J6B5B:  SCF                             ; Cx=1 (RUN flag set)
        DEFB    011H                    ; LD DE,xxxx, skip to 6B5F

;       Subroutine      LOAD statement
;       Inputs          ________________________
;       Outputs         ________________________

LOAD:
C6B5D:  DEFB    0F6H                    ; OR 0AFH, so A<>0 and Cx=0 (RUN flag not set)

;       Subroutine      MERGE statement
;       Inputs          ________________________
;       Outputs         ________________________

MERGE:
C6B5E:  XOR     A                       ; A=0 and Cx=0 (RUN flag not set)
        PUSH    AF                      ; store flags
        CALL    FILEVL                  ; evaluate file specification
        CALL    H.MERG
        POP     AF			; restore flags
        PUSH    AF			; store flags
        JR      Z,J6B76                 ; MERGE statement, skip ,R option check, close user i/o channels
        LD      A,(HL)
        SUB     ','			; extra operand ?
        OR      A
        JR      NZ,J6B76                ; nope, close user i/o channels
        _RST    CHRGTR                  ; get next BASIC character
        _RST    SYNCHR
        DEFB    'R'                     ; check for R
        POP     AF			; restore flags
        SCF                             ; set RUN flag, do not close i/o channels = true
        PUSH    AF                      ; store flags
J6B76:  PUSH    AF			; store close i/o channels flag
        XOR     A                       ; i/o channel 0 (system)
        LD      E,1                     ; input file mode
        CALL    C6AFA                   ; open i/o channel
        LD      HL,(PTRFIL)		; pointer to i/o channel
        LD      BC,7
        ADD     HL,BC			; +7
        POP     AF			; restore close user i/o channels flag
        SBC     A,A
        AND     80H                     ; if do not close user i/o channels flag, set do not close i/o channels flag
        OR      01H                     ; set BASIC program loading flag
        LD      (NLONLY),A
        POP     AF			; restore flags
        PUSH    AF			; store flags
        SBC     A,A
        LD      (FILNAM+0),A            ; 000H for LOAD only, 0FFH for LOAD and RUN
        LD      A,(HL)			; i/o channel flags
        OR      A                       ; load binairy BASIC file ?
        JP      M,J6BD4                 ; yep,
        POP     AF			; restore flags
        CALL    NZ,SCRTCH               ; LOAD or RUN, clear basic program
	XOR     A			; i/o channel 0 (system)
        CALL    SETFIL                  ; redirect interpreter input/output to i/o channel
        JP      MAIN                    ; mainloop

;       Subroutine      SAVE statement
;       Inputs          ________________________
;       Outputs         ________________________

SAVE:
C6BA3:  CALL    FILEVL                  ; evaluate file specification
        CALL    H.SAVE
        DEC     HL
        _RST    CHRGTR                  ; end of statement ?
        LD      E,80H
        SCF
        JR      Z,J6BB7                 ; yep (no ,A option), use binairy save
        _RST    SYNCHR
        DEFB    ','
        _RST    SYNCHR
        DEFB    'A'                     ; check for ,A
        OR      A
        LD      E,2                     ; use ascii save
J6BB7:  PUSH    AF
        LD      A,D
        CP      9                       ; disk drive device ?
        JR      C,J6BC2                 ; yep,
        LD      E,2                     ; output file mode
        POP     AF
        XOR     A                       ; use ascii save
        PUSH    AF
J6BC2:  XOR     A                       ; i/o channel 0 (system)
        CALL    C6AFA                   ; open i/o channel
        POP     AF
        JR      C,J6BCE                 ; binairy save,
        DEC     HL
        _RST    CHRGTR                  ; get next BASIC character
        JP      LIST                    ; list statement

J6BCE:  CALL    H.BINS
        JP      DERNMF                  ; bad filename

J6BD4:  CALL    H.BINL
        JP      DERNMF                  ; bad filename

;       Subroutine      get i/o channel device
;       Inputs          (PTRFIL) = pointer to i/o channel
;       Outputs         ________________________
;       Unused Code     Not called from anywhere, leftover from a early Microsoft BASIC ?

?6BDA:  PUSH    HL
        PUSH    DE
        LD      HL,(PTRFIL)
        LD      DE,4
        ADD     HL,DE			; +4
        LD      A,(HL)			; device code
        POP     DE
        POP     HL
        RET

;       Subroutine      close i/o channel(s)
;       Inputs          ________________________
;       Outputs         ________________________

	IF	OPTM EQ 0

RTALLR:
J6BE7:  JR      NZ,J6C02                ; not end of statement, close specified i/o channels

; close all i/o channels

J6BE9:  PUSH    HL                      ; store BASIC pointer
J6BEA:  PUSH    BC			; store subroutine
        PUSH    AF			; store i/o channel number
        LD      DE,I6BF3
        PUSH    DE			; continue here
        PUSH    BC			; store subroutine
        OR      A			; ??
        RET                             ; execute subroutine

; continue close all i/o channels

I6BF3:  POP     AF			; restore i/o channel number
        POP     BC			; restore subroutine
        DEC     A
        JP      P,J6BEA                 ; next channel
        POP     HL                      ; restore BASIC pointer
        RET

; continue close specified i/o channels

I6BFB:  POP     BC                      ; restore subroutine
        POP     HL                      ; restore BASIC pointer
        LD      A,(HL)
        CP      ','			; more operands ?
        RET     NZ			; nope, quit
        _RST    CHRGTR                  ; get next BASIC character

; close specified i/o channels

J6C02:  PUSH    BC			; store subroutine
        LD      A,(HL)
        CP      '#'			; i/o channel indicator ?
        CALL    Z,CHRGTR                ; yep, get next BASIC character
        CALL    GETBYT                  ; evaluate byte operand
        EX      (SP),HL			; store BASIC pointer, restore subroutine
        PUSH    HL			; store subroutine
        LD      DE,I6BFB
        PUSH    DE			; continue here
        SCF				; ??
        JP      (HL)                    ; execute subroutine

	ELSE

; close all i/o channels

J6BE7:  PUSH    HL                      ; store BASIC pointer
	LD	A,(MAXFIL)		; highest i/o channel number
J6BE8:  PUSH    AF			; store i/o channel number
	CALL	CLSFIL			; close i/o channel
	POP     AF			; restore i/o channel number
        DEC     A
        JP      P,J6BE8                 ; next channel
        POP     HL                      ; restore BASIC pointer
        RET

; close specified i/o channels

J6C02:  LD      A,(HL)
        CP      '#'			; i/o channel indicator ?
        CALL    Z,CHRGTR                ; yep, get next BASIC character
        CALL    GETBYT                  ; evaluate byte operand
        PUSH    HL			; store BASIC pointer
	CALL	CLSFIL			; close i/o channel
	POP	HL			; restore BASIC pointer
        LD      A,(HL)
        CP      ','			; more operands ?
        RET     NZ			; nope, quit
        _RST    CHRGTR                  ; get next BASIC character
	JR	J6C02			; next operand
	
	DEFS	6C14H-$,0		; keep CLOSE at same entry point

	ENDIF


;       Subroutine      CLOSE statement
;       Inputs          ________________________
;       Outputs         ________________________

CLOSE:
C6C14:
	IF	OPTM EQ 0
	LD      BC,CLSFIL               ; close i/o channel routine
        LD      A,(MAXFIL)              ; default = all i/o channels
        JR      J6BE7                   ; close i/o channel(s)
	ELSE
	JR	NZ,J6C02		; close specific i/o channels
	JR	J6BE7			; close all i/o channels

	DEFS	6C1CH-$,0		; keep CLSALL at same entry point

	ENDIF


;       Subroutine      close all i/o channels
;       Inputs          ________________________
;       Outputs         ________________________

	_MSXCP	CLSALL,6C1CH

C6C1C:  LD      A,(NLONLY)
        OR      A                       ; do not close i/o channels ?
        RET     M                       ; yep, quit doing nothing

	IF	OPTM EQ 0
        LD      BC,CLSFIL               ; close i/o channel routine
        XOR     A                       ; 'end of statement' flag
        LD      A,(MAXFIL)              ; all i/o channels
        JR      J6BE7                   ; close i/o channels
	ELSE
	JR	J6BE7			; close all i/o channels

	DEFS	6C2AH-$,0		; keep LFILES at same entry point

	ENDIF


;       Subroutine      LFILES statement
;       Inputs          ________________________
;       Outputs         ________________________

LFILES:
C6C2A:  LD      A,1
        LD      (PRTFLG),A              ; interpreter output to printer

;       Subroutine      FILES statement
;       Inputs          ________________________
;       Outputs         ________________________

FILES:
C6C2F:  CALL    H.FILE                  ; FILES hook
        JP      FCERR                   ; illegal function call

;       Subroutine      do random input/output
;       Inputs          HL = BASIC pointer, A = GET/PUT flag
;       Outputs         ________________________

GETPUT:
J6C35:  PUSH    AF                      ; store GET/PUT flag
        CALL    C6A9E			; evaluate i/o channel operand and set current i/o channel, store BASIC pointer on stack
        JR      C,J6C41			; device is not a disk drive,
        CALL    H.DGET                  ; GET/PUT for disk hook
        JP      DERNMF                  ; bad filename

J6C41:	POP     DE                      ; restore BASIC pointer
        POP     BC                      ; restore GET/PUT flag
        LD      A,4                     ; function random i/o
        JP      GENDSP                  ; i/o function dispatcher

;       Subroutine      do sequential output
;       Inputs          A = character
;       Outputs         ________________________

FILOUT:
C6C48:  PUSH    HL
        PUSH    DE
        PUSH    BC
        PUSH    AF
        CALL    ISDDEV                  ; current i/o channel a disk drive device ?
        JR      NC,J6C57                ; nope,
        CALL    H.FILO                  ; sequential output for disk hook
        JP      DERNMF                  ; bad filename

J6C57:  POP     AF
        PUSH    AF
        LD      C,A			; character
        LD      A,6                     ; function sequential output
        CALL    GENDSP                  ; i/o function dispatcher
        JP      POPAL2			; pop registers and quit

;       Subroutine      current i/o channel a disk drive device ?
;       Inputs          ________________________
;       Outputs         HL = pointer to i/o channel, A = device code, Cx set if disk drive device

ISDDEV:
C6C62:  PUSH    DE			; store DE
        LD      HL,(PTRFIL)
        EX      DE,HL
        LD      HL,4
        ADD     HL,DE			; +4
        LD      A,(HL)			; device code
        EX      DE,HL
        POP     DE			; restore DE
        CP      9			; is a disk drive device ?
        RET

;       Subroutine      get sequential input
;       Inputs          ________________________
;       Outputs         ________________________

INDSKC:
C6C71:  PUSH    HL
J6C72:  PUSH    DE
        PUSH    BC
        CALL    ISDDEV                  ; current i/o channel a disk drive device ?
        JR      NC,J6C7F                ; nope,
I6C79:  CALL    H.INDS                  ; sequential input for disk hook
        JP      DERIER                  ; internal error (should not return to here)

J6C7F:  LD      A,8                     ; function sequential input
        CALL    GENDSP                  ; i/o function dispatcher
        JP      POPAL3			; pop registers and quit

;       Subroutine      INPUT$ function
;       Inputs          ________________________
;       Outputs         ________________________

FIXINP:
J6C87:  _RST    CHRGTR                  ; get next BASIC character
        _RST    SYNCHR
        DEFB    '$'
        _RST    SYNCHR
        DEFB    '('                     ; check for $(
        PUSH    HL                      ; store BASIC pointer
        LD      HL,(PTRFIL)
        PUSH    HL                      ; store interpreter input/output device
        LD      HL,0
        LD      (PTRFIL),HL             ; interpreter input/output device = keyboard/screen
        POP     HL                      ; restore interpreter input/output device
        EX      (SP),HL                 ; store interpreter input/output device, restore BASIC pointer
        CALL    GETBYT                  ; evaluate byte operand
        PUSH    DE                      ; store string size
        LD      A,(HL)
        CP      ','                     ; operand seperator ?
        JR      NZ,J6CB3                ; nope, skip i/o channel operand, use keyboard
        _RST    CHRGTR                  ; get next BASIC character
        CALL    C6A9E			; evaluate i/o channel operand and set current i/o channel, store BASIC pointer on stack
        CP      1			; sequential input mode ?
        JP      Z,J6CB0			; yep,
        CP      4			; random i/o mode ?
        JP      NZ,DERRPE		; nope, input past end error
J6CB0:  POP     HL                      ; restore BASIC pointer
        XOR     A                       ; clear keyboard flag
        LD      A,(HL)
J6CB3:  PUSH    AF                      ; store keyboard flag
        _RST    SYNCHR
        DEFB    ')'                     ; check for )
        POP     AF                      ; restore keyboard flag
        EX      (SP),HL                 ; store BASIC pointer, restore string size
        PUSH    AF                      ; store keyboard flag
        LD      A,L
        OR      A                       ; string size = 0 ?
        JP      Z,FCERR                 ; yep, illegal function call
        PUSH    HL                      ; store string size
        CALL    STRINI                  ; allocate temporary string
        EX      DE,HL
        POP     BC                      ; restore string size
J6CC4:  POP     AF                      ; restore keyboard flag
        PUSH    AF                      ; store keyboard flag
        JR      Z,J6CE2                 ; input from i/o channel,
        CALL    CHGET                   ; get character from keyboard
        PUSH    AF                      ; store character
        CALL    CKCNTC                  ; handle CTRL/STOP or STOP pressed, no resume
        POP     AF                      ; restore character
J6CD0:  LD      (HL),A                  ; store character in string
        INC     HL
        DEC     C                       ; finished string ?
        JR      NZ,J6CC4                ; nope, next character
        POP     AF                      ; restore keyboard flag
        POP     BC                      ; restore BASIC pointer
        POP     HL                      ; restore interpreter input/output device
        CALL    H.RSLF
        LD      (PTRFIL),HL             ; restore interpreter input/output device
        PUSH    BC                      ; store BASIC pointer
        JP      PUTNEW                  ; push temporary descriptor to temporary descriptor heap and quit

J6CE2:  CALL    INDSKC                  ; get sequential input
        JP      C,DERRPE                ; error, input past end error
        JR      J6CD0                   ; continue

;       Subroutine      clear buffer of interpreter i/o channel
;       Inputs          HL = pointer to i/o channel
;       Outputs         ________________________

C6CEA:  CALL    C6CFB			; get pointer to buffer of interpreter i/o channel
        PUSH    HL                      ; store pointer to channel buffer
        LD      B,0                     ; 256 bytes
        CALL    C6CF5			; clear i/o channel buffer
POPHR2: POP     HL                      ; restore pointer to channel buffer
        RET

;       Subroutine      clear i/o channel buffer
;       Inputs          HL = pointer to channel buffer, B = number of bytes to clear
;       Outputs         ________________________

C6CF5:  XOR     A
J6CF6:  LD      (HL),A
        INC     HL
        DJNZ    J6CF6
        RET

;       Subroutine      get pointer to buffer of interpreter i/o channel
;       Inputs          ________________________
;       Outputs         HL = pointer to i/o channel buffer

C6CFB:  LD      HL,(PTRFIL)
        LD      DE,9
        ADD     HL,DE			; +9
        RET

;       Subroutine      LOC function
;       Inputs          ________________________
;       Outputs         ________________________

LOC:
C6D03:  CALL    H.SAVD
        CALL    C6A6A                   ; get pointer to i/o channel (DAC)
        JR      Z,J6D2B                 ; i/o channel not open, file not open
        LD      A,10                    ; function loc
        JR      C,J6D30                 ; not a disk drive device, i/o function dispatcher and quit
        CALL    H.LOC                   ; LOC for disk
        JR      J6D36                   ; internal error (should not return to here)

;       Subroutine      LOF function
;       Inputs          ________________________
;       Outputs         ________________________

LOF:
C6D14:  CALL    H.SAVD
        CALL    C6A6A                   ; get pointer to i/o channel (DAC)
        JR      Z,J6D2B                 ; i/o channel not open, file not open
        LD      A,12                    ; function lof
        JR      C,J6D30                 ; not a disk drive device, i/o function dispatcher and quit
        CALL    H.LOF                   ; LOF for disk
        JR      J6D36                   ; internal error (should not return to here)

;       Subroutine      EOF function
;       Inputs          ________________________
;       Outputs         ________________________

EOF:
C6D25:  CALL    H.SAVD
        CALL    C6A6A                   ; get pointer to i/o channel (DAC)
J6D2B:  JP      Z,DERFNO                ; i/o channel not open, file not open
        LD      A,14                    ; function eof
J6D30:  JP      C,GENDSP                ; not a disk drive device, i/o function dispatcher and quit
        CALL    H.EOF                   ; EOF for disk
J6D36:  JP      DERIER                  ; internal error (should not return to here)

;       Subroutine      FPOS function
;       Inputs          ________________________
;       Outputs         ________________________

FPOS:
C6D39:  CALL    H.SAVD
        CALL    C6A6A                   ; get pointer to i/o channel (DAC)
        LD      A,16                    ; function fpos
        JR      C,J6D30                 ; i/o channel open AND not a disk drive device, i/o function dispatcher and quit
        CALL    H.FPOS                  ; FPOS for disk
        JR      J6D36                   ; internal error (should not return to here)

;       Subroutine      direct statement
;       Inputs          ________________________
;       Outputs         ________________________

DIRDO:
J6D48:  CALL    ISFLIO                  ; interpreter input/output redirected to i/o channel ?
        JP      Z,GONE                  ; nope, execute direct statement
        XOR     A			; i/o channel = 0 (system)
        CALL    CLSFIL                  ; close i/o channel
        JP      ERRFDR                  ; direct statement in file error

; END   SUBTTL  SPCDSK

        END

