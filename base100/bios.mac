; BIOS.MAC

; MSX BIOS ROM, MSX 1 version (version 1.0)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        org     00000H

        INCLUDE MSX.INC

M409B   EQU     409BH   ; Warm start msx basic
M4666   EQU     4666H   ; CHRGTR routine in basicrom
M558C   EQU     558CH   ; SYNCHR routine in basicrom
M5597   EQU     5597H   ; GETYPR routine in basicrom
M63E6   EQU     63E6H   ; STOP statement in basicrom
M6C48   EQU     6C48H   ; file I/O output
M73B2   EQU     73B2H   ; device I/O error
M7C76   EQU     7C76H   ; init code msx basic
M7FBE   EQU     7FBEH   ; helper routine RDSLT in basicrom
M7FC4   EQU     7FC4H   ; helper routine WRSLT in basicrom

VARWRK  EQU     0F380H
RDPRIM  equ     0F380H
WRPRIM  equ     0F385H
CLPRIM  equ     0F38CH
LINL40  equ     0F3AEH
LINL32  equ     0F3AFH
LINLEN  equ     0F3B0H
CRTCNT  equ     0F3B1H
TXTNAM  equ     0F3B3H
TXTCGP  equ     0F3B7H
T32NAM  equ     0F3BDH
T32COL  equ     0F3BFH
T32CGP  equ     0F3C1H
T32ATR  equ     0F3C3H
T32PAT  equ     0F3C5H
GRPNAM  equ     0F3C7H
GRPCOL  equ     0F3C9H
GRPCGP  equ     0F3CBH
GRPATR  equ     0F3CDH
GRPPAT  equ     0F3CFH
MLTNAM  equ     0F3D1H
MLTCGP  equ     0F3D5H
MLTATR  equ     0F3D7H
MLTPAT  equ     0F3D9H
CLIKSW  equ     0F3DBH
CSRY    equ     0F3DCH
CSRX    equ     0F3DDH
CNSDFG  equ     0F3DEH
RG0SAV  equ     0F3DFH
RG1SAV  equ     0F3E0H
STATFL  equ     0F3E7H
TRGFLG  equ     0F3E8H
FORCLR  equ     0F3E9H
BAKCLR  equ     0F3EAH
BDRCLR  equ     0F3EBH
ATRBYT  equ     0F3F2H
QUEUES  equ     0F3F3H
SCNCNT  equ     0F3F6H
REPCNT  equ     0F3F7H
PUTPNT  equ     0F3F8H
GETPNT  equ     0F3FAH
LOW.    equ     0F406H
HIGH.   equ     0F408H
HEADER  equ     0F40AH
ASPCT1  equ     0F40BH
ASPCT2  equ     0F40DH
LPTPOS  equ     0F415H
PRTFLG  equ     0F416H
NTMSXP  equ     0F417H
RAWPRT  equ     0F418H
CURLIN  equ     0F41CH
BUFMIN  equ     0F55DH
BUF     equ     0F55EH
TTYPOS  equ     0F661H
AUTFLG  equ     0F6AAH
SAVSTK  equ     0F6B1H
PTRFIL  equ     0F864H
FILNAM  equ     0F866H
FNKSTR  equ     0F87FH
CGPNT   equ     0F91FH
NAMBAS  equ     0F922H
CGPBAS  equ     0F924H
PATBAS  equ     0F926H
ATRBAS  equ     0F928H
CLOC    equ     0F92AH
CMASK   equ     0F92CH
CSAVEA  equ     0F942H
CSAVEM  equ     0F944H
QUEBAK  equ     0F971H
VOICAQ  equ     0F975H
VOICEN  equ     0FB38H
QUEUEN  equ     0FB3EH
MUSICF  equ     0FB3FH
PLYCNT  equ     0FB40H
VCBA    equ     0FB41H
VCBB    equ     0FB66H
VCBC    equ     0FB8BH
ENSTOP  equ     0FBB0H
BASROM  equ     0FBB1H
LINTTB  equ     0FBB2H
FSTPOS  equ     0FBCAH
CURSAV  equ     0FBCCH
FNKSWI  equ     0FBCDH
FNKFLG  equ     0FBCEH
ONGSBF  equ     0FBD8H
CLIKFL  equ     0FBD9H
OLDKEY  equ     0FBDAH
NEWKEY  equ     0FBE5H
KEYBUF  equ     0FBF0H
LINWRK  equ     0FC18H
PATWRK  equ     0FC40H
TRPTBL  equ     0FC4CH
INTFLG  equ     0FC9BH
PADY    equ     0FC9CH
PADX    equ     0FC9DH
JIFFY   equ     0FC9EH
INTVAL  equ     0FCA0H
INTCNT  equ     0FCA2H
LOWLIM  equ     0FCA4H
WINWID  equ     0FCA5H
GRPHED  equ     0FCA6H
ESCCNT  equ     0FCA7H
INSFLG  equ     0FCA8H
CSRSR   equ     0FCA9H
CSTYLE  equ     0FCAAH
CAPST   equ     0FCABH
KANAST  equ     0FCACH
KANAMD  equ     0FCADH
SCRMOD  equ     0FCAFH
OLDSCR  equ     0FCB0H
BRDATR  equ     0FCB2H
GRPACX  equ     0FCB7H
GRPACY  equ     0FCB9H
EXPTBL  equ     0FCC1H
SLTTBL  equ     0FCC5H

H.KEYI  equ     0FD9AH
H.TIMI  equ     0FD9FH
H.CHPU  equ     0FDA4H
H.DSPC  equ     0FDA9H
H.ERAC  equ     0FDAEH
H.DSPF  equ     0FDB3H
H.ERAF  equ     0FDB8H
H.TOTE  equ     0FDBDH
H.CHGE  equ     0FDC2H
H.INIP  equ     0FDC7H
H.KEYC  equ     0FDCCH
H.KEYA  equ     0FDD1H
H.NMI   equ     0FDD6H
H.PINL  equ     0FDDBH
H.QINL  equ     0FDE0H
H.INLI  equ     0FDE5H
H.ISFL  equ     0FEDFH
H.OUTD  equ     0FEE4H
H.PHYD  equ     0FFA7H
H.FORM  equ     0FFACH
H.LPTO  equ     0FFB6H
H.LPTS  equ     0FFBBH
D.FFFF  equ     0FFFFH

CHKRAM: di
        jp      A02D7

CGTABL: defw    T1BBF
VDP.DR: defb    098H
VDP.DW: defb    098H

SYNCHR: jp      A2683

        defs    0000CH-$,0

RDSLT:  jp      A01B6

        defs    00010H-$,0

CHRGTR: jp      A2686

        defs    00014H-$,0

WRSLT:  jp      A01D1

        defs    00018H-$,0

OUTDO:  jp      A1B45

        defs    0001CH-$,0

CALSLT: jp      A0217

        defs    00020H-$,0

DCOMPR: jp      A146A

        defs    00024H-$,0

ENASLT: jp      A025E

        defs    00028H-$,0

GETYPR: jp      A2689
;
IDBYT0:
        IF      INTHZ EQ 60
        DEFB    CHRGEN+16*DATFMT
        ELSE
        DEFB    CHRGEN+16*DATFMT+128
        ENDIF
IDBYT1: DEFB    KEYTYP+16*BASVER
IDBYT2: DEFB    MSXVER                  ; MSX version 0 = MSX1
        DEFB    0

        DEFS    00030H-$

CALLF:  jp      A0205
;
        DEFS    00034H-$

;       The next bytes are used by the diskrom, to initialize the double byte header char
;       table (0F30FH). I have not seen a MSX with anything other than four zero's, meaning
;       no double byte chars.

D0034:  defb    0,0
        defb    0,0

KEYINT: jp      A0C3C
INITIO: jp      A049D
INIFNK: jp      A139D
DISSCR: jp      A0577
ENASCR: jp      A0570
WRTVDP: jp      A057F
RDVRM:  jp      A07D7
WRTVRM: jp      A07CD
SETRD:  jp      A07EC
SETWRT: jp      A07DF
FILVRM: jp      A0815
LDIRMV: jp      A070F
LDIRVM: jp      A0744
CHGMOD: jp      A084F
CHGCLR: jp      A07F7

        defs    00066H-$,0              ; align to Z80 NMI entry at 0066H

NMI:    jp      A1398
CLRSPR: jp      A06A8
INITXT: jp      A050E
INIT32: jp      A0538
INIGRP: jp      A05D2
INIMLT: jp      A061F
SETTXT: jp      A0594
SETT32: jp      A05B4
SETGRP: jp      A0602
SETMLT: jp      A0659
CALPAT: jp      A06E4
CALATR: jp      A06F9
GSPSIZ: jp      A0704
GRPPRT: jp      A1510
GICINI: jp      A04BD
WRTPSG: jp      A1102
RDPSG:  jp      A110E
STRTMS: jp      A11C4
CHSNS:  jp      A0D6A
CHGET:  jp      A10CB
CHPUT:  jp      A08BC
LPTOUT: jp      A085D
LPTSTT: jp      A0884
CNVCHR: jp      A089D
PINLIN: jp      A23BF
INLIN:  jp      A23D5
QINLIN: jp      A23CC
BREAKX: jp      A046F
ISCNTC: jp      A03FB
CKCNTC: jp      A10F9
BEEP:   jp      A1113
CLS:    jp      A0848
POSIT:  jp      A088E
FNKSB:  jp      A0B26
ERAFNK: jp      A0B15
DSPFNK: jp      A0B2B
TOTEXT: jp      A083B
GTSTCK: jp      A11EE
GTTRIG: jp      A1253
GTPAD:  jp      A12AC
GTPDL:  jp      A1273
TAPION: jp      A1A63
TAPIN:  jp      A1ABC
TAPIOF: jp      A19E9
TAPOON: jp      A19F1
TAPOUT: jp      A1A19
TAPOOF: jp      A19DD
STMOTR: jp      A1384
LFTQ:   jp      A14EB
PUTQ:   jp      A1492
RIGHTC: jp      A16C5
LEFTC:  jp      A16EE
UPC:    jp      A175D
TUPC:   jp      A173C
DOWNC:  jp      A172A
TDOWNC: jp      A170A
SCALXY: jp      A1599
MAPXYC: jp      A15DF
FETCHC: jp      A1639
STOREC: jp      A1640
SETATR: jp      A1676
READC:  jp      A1647
SETC:   jp      A167E
NSETCX: jp      A1809
GTASPC: jp      A18C7
PNTINI: jp      A18CF
SCANR:  jp      A18E4
SCANL:  jp      A197A
CHGCAP: JP      J0F3D
CHGSND: JP      J0F7A
RSLREG: jp      A144C
WSLREG: jp      A144F
RDVDP:  jp      A1449
SNSMAT: jp      A1452
PHYDIO: jp      A148A
FORMAT: jp      A148E
ISFLIO: jp      A145F
OUTDLP: jp      A1B63
GETVCP: jp      A1470
GETVC2: jp      A1474
KILBUF: jp      A0468
CALBAS: jp      A01FF

        IFNDEF  SLOTFIX

        defs    001B6H-$,0

        ELSE
        
        defs    0016FH-$,0

C016F:  CALL    C01AD
        JR      NZ,A01C6
        PUSH    HL
        CALL    C0199
        EX      (SP),HL
        CALL    M7FBE
        JR      J018D

C017E:  CALL    C01AD
        JP      NZ,A01E1
        POP     DE
        PUSH    HL
        CALL    C0199
        EX      (SP),HL
        CALL    M7FC4
J018D:  EX      (SP),HL
        PUSH    AF
        LD      A,L
        OUT     (0A8H),A
        LD      A,H
        LD      (D.FFFF),A
        POP     AF
        POP     HL
        RET

C0199:  PUSH    AF
        LD      A,(D.FFFF)
        CPL
        LD      H,A
        AND     0F3H
        LD      (D.FFFF),A
        IN      A,(0A8H)
        LD      L,A
        AND     0F3H
        OUT     (0A8H),A
        POP     AF
        RET

C01AD:  INC     D
        DEC     D
        RET     NZ
        LD      B,A
        LD      A,E
        CP      3
        LD      A,B
        RET
        ENDIF

;       Subroutine      RDSLT
;       Inputs          ________________________
;       Outputs         ________________________

A01B6:  call    A027E                   ; calculate masks

        IFDEF   SLOTFIX
        jp      m,C016F
        ELSE
        jp      m,A01C6                 ; expanded slot, handle
        ENDIF

        in      a,(0A8H)
        ld      d,a
        and     c                       ; clear slot of page
        or      b                       ; set new slot
        call    RDPRIM                  ; read byte
        ld      a,e
        ret
;
A01C6:  push    hl
        call    A02A3                   ; change sec. slotregister
        ex      (sp),hl
        push    bc
        call    A01B6                   ; do a RDSLT for primary slot
        jr      A01EC

;       Subroutine      WRSLT
;       Inputs          ________________________
;       Outputs         ________________________

A01D1:  push    de
        call    A027E                   ; calculate masks

        IFDEF   SLOTFIX
        jp      m,C017E
        ELSE
        jp      m,A01E1                 ; expanded slot, handle
        ENDIF

        pop     de
        in      a,(0A8H)
        ld      d,a
        and     c                       ; clear slot of page
        or      b                       ; set new slot
        jp      WRPRIM                  ; write byte
;
A01E1:  ex      (sp),hl
        push    hl
        call    A02A3                   ; change sec. slotregister
        pop     de
        ex      (sp),hl
        push    bc
        call    A01D1                   ; do a WRSLT for primairy slot
A01EC:  pop     bc
        ex      (sp),hl
        push    af
        ld      a,b
        and     03FH
        or      c                       ; slot of sec. slotreg
        out     (0A8H),a
        ld      a,l
        ld      (D.FFFF),a              ; restore register
        ld      a,b
        out     (0A8H),a                ; restore prim. slotreg
        pop     af
        pop     hl
        ret

;       Subroutine      CALBAS
;       Inputs          ________________________
;       Outputs         ________________________

A01FF:  ld      iy,(EXPTBL+0-1)         ; slotid mainrom
        jr      A0217                   ; CALSLT

;       Subroutine      CALLF
;       Inputs          ________________________
;       Outputs         ________________________

A0205:  ex      (sp),hl
        push    af
        push    de
        ld      a,(hl)
        push    af
        pop     iy                      ; slotid
        inc     hl
        ld      e,(hl)
        inc     hl
        ld      d,(hl)
        inc     hl
        push    de
        pop     ix                      ; adres
        pop     de
        pop     af
        ex      (sp),hl

;       Subroutine      CALSLT
;       Inputs          ________________________
;       Outputs         ________________________

A0217:  exx
        ex      af,af'                  ; alternative set
        push    iy
        pop     af
        push    ix
        pop     hl
        call    A027E                   ; calculate masks
        jp      m,A022E                 ; expanded slot, handle
        in      a,(0A8H)
        push    af
        and     c
        or      b
        exx
        jp      CLPRIM
;
A022E:  call    A02A3
        push    af
        pop     iy
        push    hl
        push    bc
        ld      c,a
        ld      b,0
        ld      a,l
        and     h
        or      d
        ld      hl,SLTTBL
        add     hl,bc
        ld      (hl),a
        push    hl
        ex      af,af'
        exx
        call    A0217                   ; do a CALSLT with primairy slot
        exx
        ex      af,af'
        pop     hl
        pop     bc
        pop     de
        ld      a,b
        and     03FH
        or      c
        di
        out     (0A8H),a
        ld      a,e
        ld      (D.FFFF),a
        ld      a,b
        out     (0A8H),a
        ld      (hl),e
        ex      af,af'
        exx
        ret

;       Subroutine      ENASLT
;       Inputs          ________________________
;       Outputs         ________________________

A025E:  call    A027E                   ; calculate masks
        jp      m,A026B                 ; expanded slot, handle
        in      a,(0A8H)
        and     c
        or      b
        out     (0A8H),a
        ret
;
A026B:  push    hl
        call    A02A3
        ld      c,a
        ld      b,0
        ld      a,l
        and     h
        or      d
        ld      hl,SLTTBL
        add     hl,bc
        ld      (hl),a
        pop     hl
        ld      a,c
        jr      A025E                   ; ENASLT for primairy slot

;       Subroutine      calculate masks
;       Inputs          A=slotid, HL=adres
;       Outputs         P set if expanded slot, A=slotid, D=PPPPPPPP, E=page select mask
;                       B=primairy slot OR mask, C=page clear mask

A027E:  di
        push    af
        ld      a,h
        rlca
        rlca
        and     003H                    ; page
        ld      e,a
        ld      a,0C0H
A0288:  rlca
        rlca
        dec     e
        jp      p,A0288
        ld      e,a                     ; e = page select mask
        cpl
        ld      c,a                     ; c = page clear mask
        pop     af
        push    af
        and     003H                    ; primairy slot
        inc     a                       ; +1
        ld      b,a
        ld      a,0-01010101b
A0299:  add     a,01010101b
        djnz    A0299
        ld      d,a                     ; d = slot set mask
        and     e
        ld      b,a                     ; b = slot set mask
        pop     af
        and     a                       ; flag expanded slot
        ret

;       Subroutine      Adjust secundairy slotregister
;       Inputs          A=slotid, D=, E=
;       Outputs         A=slotid primairy slot

A02A3:  push    af
        ld      a,d
        and     0C0H
        ld      c,a                     ; page set mask for page 3
        pop     af
        push    af
        ld      d,a
        in      a,(0A8H)
        ld      b,a
        and     03FH                    ; clear slot of page 3
        or      c                       ; set page 3 for sec. slotreg
        out     (0A8H),a                ; invoke
        ld      a,d
        rrca
        rrca
        and     003H                    ; secundairy slot
        ld      d,a
        ld      a,0-01010101b
A02BB:  add     a,01010101b
        dec     d
        jp      p,A02BB                 ; slot set mask
        and     e
        ld      d,a                     ; slot set (page) mask
        ld      a,e
        cpl
        ld      h,a                     ; page clear mask
        ld      a,(D.FFFF)
        cpl
        ld      l,a                     ; old sec. slotreg
        and     h                       ; clear page
        or      d                       ; set new slot
        ld      (D.FFFF),a
        ld      a,b
        out     (0A8H),a                ; restore primairy slot on page 3
        pop     af
        and     003H
        ret
;
A02D7:  ld      a,082H
        out     (0ABH),a                ; initialize PPI (active, group A mode 0, group A output, upper port C output, group B mode 0, group B input, lower port C output)
        xor     a
        out     (0A8H),a                ; select primairy slot 0 on all pages
        ld      a,050H
        out     (0AAH),a                ; CAPS off, motor off, keyboard row 0
        ld      de,0FFFFH               ; initialize lowest RAM address found (page 2)
        xor     a                       ; start with primairy slot 0
        ld      c,a                     ; initialize expanded slot flags
A02E7:  out     (0A8H),a                ; select primairy slot on page 2 and 3
        sla     c                       ; shift expanded slot flags
        ld      b,0                     ; assume not expanded slot
        ld      hl,0FFFFH
        ld      (hl),0F0H
        ld      a,(hl)
        sub     00FH                    ; is slot expanded (writen value readback inverted) ?
        jr      nz,A0302                ; nope,
        ld      (hl),a
        ld      a,(hl)
        inc     a                       ; is slot expanded (writen value readback inverted) ?
        jr      nz,A0302                ; nope,
        inc     b
        set     0,c                     ; flag slot expanded
A02FF:  ld      (D.FFFF),a
A0302:  ld      hl,0C000H-256           ; page 2
A0305:  ld      a,(hl)
        cpl
        ld      (hl),a
        cp      (hl)                    ; RAM found (write inverted correctly read back) ?
        cpl
        ld      (hl),a                  ; restore orginal value
        jr      nz,A0314                ; no RAM
        inc     l
        jr      nz,A0305
        dec     h
        jp      m,A0305
A0314:  ld      l,0
        inc     h                       ; round up 256 bytes boundary
        ld      a,l
        sub     e
        ld      a,h
        sbc     a,d                     ; page 2 with more RAM ?
        jr      nc,A0327                ; nope,
        ex      de,hl                   ; new lowest RAM address found
        ld      a,(D.FFFF)
        cpl
        ld      l,a
        in      a,(0A8H)
        ld      h,a
        ld      sp,hl                   ; save primairy and secundairy slotregister of lowest RAM address found (page 2)
A0327:  ld      a,b
        and     a                       ; slot expanded ?
        jr      z,A0335                 ; nope, next primary slot
        ld      a,(D.FFFF)
        cpl
        add     a,010H                  ; next secundairy slot page 2
        cp      040H                    ; all secundairy slots done ?
        jr      c,A02FF                 ; nope, next
A0335:  in      a,(0A8H)
        add     a,050H                  ; next primary slot page 2 and 3
        jr      nc,A02E7                ; all primary slots done ? nope, next
        ld      hl,0
        add     hl,sp
        ld      a,h
        out     (0A8H),a
        ld      a,l
        ld      (D.FFFF),a              ; select slot with lowest RAM address found (page 2)
        ld      a,c
        rlca
        rlca
        rlca
        rlca
        ld      c,a                     ; expanded slot flags in b7-b4
        ld      de,0FFFFH               ; initialize lowest RAM address found (page 3)
        in      a,(0A8H)
        and     03FH                    ; primairy slot 0 in page 3
A0353:  out     (0A8H),a                ; select new primairy slot in page 3
        ld      b,0
        rlc     c                       ; slot expanded ?
        jr      nc,A0365                ; nope,
        inc     b                       ; flag slot expanded
        ld      a,(D.FFFF)
        cpl
        and     03FH                    ; secundairy slot 0 in page 3
A0362:  ld      (D.FFFF),a              ; select new secundairy slot in page 3
A0365:  ld      hl,0FF00H-256           ; page 3 (leave upper 256 bytes out for secundairy slot register)
A0368:  ld      a,(hl)
        cpl
        ld      (hl),a
        cp      (hl)                    ; RAM found (write inverted correctly read back) ?
        cpl
        ld      (hl),a                  ; restore orginal value
        jr      nz,A0379                ; no RAM
        inc     l
        jr      nz,A0368
        dec     h
        ld      a,h
        cp      0C0H
        jr      nc,A0368
A0379:  ld      l,0
        inc     h                       ; round up 256 bytes boundary
        ld      a,l
        sub     e
        ld      a,h
        sbc     a,d                     ; page 3 with more RAM ?
        jr      nc,A038C                ; nope,
        ex      de,hl                   ; new lowest RAM address found
        ld      a,(D.FFFF)
        cpl
        ld      l,a
        in      a,(0A8H)
        ld      h,a
        ld      sp,hl                   ; save primairy and secundairy slotregister of lowest RAM address found (page 3)
A038C:  ld      a,b
        and     a                       ; slot expanded ?
        jr      z,A0398                 ; nope,
        ld      a,(D.FFFF)
        cpl
        add     a,040H                  ; next secundairy slot page 3
        jr      nc,A0362                ; all secundairy slots done ? nope, next
A0398:  in      a,(0A8H)
        add     a,040H                  ; next primairy slot page 3
        jr      nc,A0353                ; all primary slots done ? nope, next
        ld      hl,0
        add     hl,sp
        ld      a,h
        out     (0A8H),a
        ld      a,l
        ld      (D.FFFF),a              ; select slot with lowest RAM address found (page 3)
        ld      a,c
        ld      bc,0C49H
        ld      de,VARWRK+1
        ld      hl,VARWRK
        ld      (hl),0
        ldir                            ; clear system variable area
        ld      c,a
        ld      b,4
        ld      hl,EXPTBL+3
A03BD:  rr      c
        sbc     a,a
        and     080H
        ld      (hl),a                  ; initialize slot expanded flag
        dec     hl
        djnz    A03BD
        in      a,(0A8H)
        ld      c,a                     ; save current primairy slot register
        xor     a
        out     (0A8H),a                ; select primairy slot 0 in page 0,1,2,3
        ld      a,(D.FFFF)
        cpl
        ld      l,a                     ; save current secundairy slot register slot 0
        ld      a,040H
        out     (0A8H),a                ; select primairy slot 0 in page 0,1,2 slot 1 in page 3
        ld      a,(D.FFFF)
        cpl
        ld      h,a                     ; save current secundairy slot register slot 1
        ld      a,080H
        out     (0A8H),a                ; select primairy slot 0 in page 0,1,2 slot 2 in page 3
        ld      a,(D.FFFF)
        cpl
        ld      e,a                     ; save current secundairy slot register slot 2
        ld      a,0C0H
        out     (0A8H),a                ; select primairy slot 0 in page 0,1,2 slot 3 in page 3
        ld      a,(D.FFFF)
        cpl
        ld      d,a                     ; save current secundairy slot register slot 3
        ld      a,c
        out     (0A8H),a                ; restore primairy slot register
        ld      (SLTTBL+0),hl
        ex      de,hl
        ld      (SLTTBL+2),hl           ; current secundairy slot registers saved in SLTTBL
        im      1                       ; Z80 interrupt mode 1 (RST 38H on INT)
        jp      A2680                   ; part 2 of init

;       Subroutine      ISCNTC
;       Inputs          ________________________
;       Outputs         ________________________

A03FB:  ld      a,(BASROM)
        and     a                       ; executing basicrom ?
        ret     nz                      ; yep, quit
        push    hl
        ld      hl,INTFLG
        di                              ; INTFLG can not change
        ld      a,(hl)
        ld      (hl),0                  ; reset
        pop     hl
        ei
        and     a                       ; STOP or CTRL/STOP ?
        ret     z                       ; nop, quit
        cp      003H
        jr      z,A042C                 ; it is CTRL/STOP
        push    hl
        push    de
        push    bc
        call    A09DA                   ; cursor on
        ld      hl,INTFLG
A0419:  di                              ; INTFLG can not change
        ld      a,(hl)
        ld      (hl),0                  ; reset
        ei
        and     a                       ; STOP or CTRL/STOP ?
        jr      z,A0419                 ; nop, try again
        push    af
        call    A0A27                   ; cursor off
        pop     af
        pop     bc
        pop     de
        pop     hl
        cp      003H                    ; CTRL/STOP ?
        ret     nz                      ; nop, just quit
A042C:  push    hl
        call    A0468                   ; KILBUF (clear keyboard buffer)
        call    A0454
        jr      nc,A043F
        ld      hl,TRPTBL+10*3
        di
        call    C0EF1                   ; raise CTRL-STOP trap
        ei
        pop     hl
        ret
;
A043F:  call    A083B                   ; TOTEXT (force text screenmode)
        ld      a,(EXPTBL+0)
        ld      h,040H
        call    A025E                   ; ENASLT (enable BASIC ROM in page 1)
        pop     hl
        xor     a
        ld      sp,(SAVSTK)
        push    bc
        jp      M63E6
;
A0454:  ld      a,(TRPTBL+10*3+0)
        rrca                            ; CTRL-STOP trap enabled ?
        ret     nc                      ; nope, quit
        ld      hl,(TRPTBL+10*3+1)
        ld      a,h
        or      l                       ; CTRL-STOP trap handler definied ?
        ret     z                       ; nope, quit
        ld      hl,(CURLIN)
        inc     hl
        ld      a,h
        or      l                       ; in direct mode ?
        ret     z                       ; yep, quit
        scf
        ret

;       Subroutine      KILBUF
;       Inputs          ________________________
;       Outputs         ________________________

A0468:  ld      hl,(PUTPNT)
        ld      (GETPNT),hl
        ret

;       Subroutine      BREAKX
;       Inputs          ________________________
;       Outputs         ________________________

A046F:  in      a,(0AAH)
        and     0F0H
        or      007H
        out     (0AAH),a
        in      a,(0A9H)
        and     010H
        ret     nz
        in      a,(0AAH)
        dec     a
        out     (0AAH),a
        in      a,(0A9H)
        and     002H
        ret     nz
        push    hl
        ld      hl,(PUTPNT)
        ld      (GETPNT),hl
        pop     hl
        ld      a,(OLDKEY+7)
        and     0EFH
        ld      (OLDKEY+7),a
        LD      A,13
        ld      (REPCNT),a
        scf
        ret

;       Subroutine      INITIO
;       Inputs          ________________________
;       Outputs         ________________________

A049D:  ld      a,7
        ld      e,080H
        call    A1102                   ; WRTPSG
        ld      a,15
        ld      e,0CFH
        call    A1102                   ; WRTPSG
        ld      a,11
        ld      e,a
        call    A1102                   ; WRTPSG
        call    A110C
        and     040H
        ld      (KANAMD),a
        ld      a,0FFH
        out     (090H),a

;       Subroutine      GICINI
;       Inputs          ________________________
;       Outputs         ________________________

A04BD:  push    hl
        push    de
        push    bc
        push    af
        ld      hl,MUSICF
        ld      b,1+1+3*37
        xor     a
A04C7:  ld      (hl),a
        inc     hl
        djnz    A04C7			; clear MUSICF, PLYCNT, VCBA, VCBB and VCBC
        ld      de,VOICAQ
        ld      b,07FH
        ld      hl,128
A04D3:  push    hl
        push    de
        push    bc
        push    af
        call    A14DA
        pop     af
        add     a,8
        ld      e,0
        call    A1102                   ; WRTPSG
        sub     008H
        push    af
        ld      l,00FH
        call    A1477
        ex      de,hl
        ld      hl,T0508
        ld      bc,6
        ldir
        pop     af
        pop     bc
        pop     hl
        pop     de
        add     hl,de
        ex      de,hl
        inc     a
        cp      003H
        jr      c,A04D3
        ld      a,7
        ld      e,0B8H
        call    A1102                   ; WRTPSG
        jp      A08DA
;
T0508:  defb    4
        defb    4
        defb    120
        defb    8+128
        defw    255

;       Subroutine      INITXT
;       Inputs          ________________________
;       Outputs         ________________________

A050E:  call    A0577                   ; DISSCR
        xor     a
        ld      (SCRMOD),a
        ld      (OLDSCR),a
        ld      a,(LINL40)
        ld      (LINLEN),a
        ld      hl,(TXTNAM)
        ld      (NAMBAS),hl
        ld      hl,(TXTCGP)
        ld      (CGPBAS),hl
        call    A07F7                   ; CHGCLR
        call    A077E                   ; clear text screen
        call    A071E
        call    A0594                   ; SETTXT
        jr      A0570                   ; ENASCR

;       Subroutine      INIT32
;       Inputs          ________________________
;       Outputs         ________________________

A0538:  call    A0577                   ; DISSCR
        ld      a,1
        ld      (SCRMOD),a
        ld      (OLDSCR),a
        ld      a,(LINL32)
        ld      (LINLEN),a
        ld      hl,(T32NAM)
        ld      (NAMBAS),hl
        ld      hl,(T32CGP)
        ld      (CGPBAS),hl
        ld      hl,(T32PAT)
        ld      (PATBAS),hl
        ld      hl,(T32ATR)
        ld      (ATRBAS),hl
        call    A07F7                   ; CHGCLR
        call    A077E                   ; clear text screen
        call    A071E
        call    A06BB
        call    A05B4                   ; SETT32

;       Subroutine      ENASCR
;       Inputs          ________________________
;       Outputs         ________________________

A0570:  ld      a,(RG1SAV)
        or      040H
        jr      A057C

;       Subroutine      DISSCR
;       Inputs          ________________________
;       Outputs         ________________________

A0577:  ld      a,(RG1SAV)
        and     0BFH
A057C:  ld      b,a
        ld      c,1

;       Subroutine      WRTVDP
;       Inputs          ________________________
;       Outputs         ________________________

A057F:  ld      a,b
        di
        out     (099H),a
        ld      a,c
        or      080H
        out     (099H),a
        ei
        push    hl
        ld      a,b
        ld      b,0
        ld      hl,RG0SAV
        add     hl,bc
        ld      (hl),a
        pop     hl
        ret

;       Subroutine      SETTXT
;       Inputs          ________________________
;       Outputs         ________________________

A0594:  ld      a,(RG0SAV)
        and     001H
        ld      b,a
        ld      c,0
        call    A057F                   ; WRTVDP
        ld      a,(RG1SAV)
        and     0E7H
        or      010H
        ld      b,a
        inc     c
        call    A057F                   ; WRTVDP
        ld      hl,TXTNAM
        ld      de,00000H
        jp      A0677

;       Subroutine      SETT32
;       Inputs          ________________________
;       Outputs         ________________________

A05B4:  ld      a,(RG0SAV)
        and     001H
        ld      b,a
        ld      c,0
        call    A057F                   ; WRTVDP
        ld      a,(RG1SAV)
        and     0E7H
        ld      b,a
        inc     c
        call    A057F                   ; WRTVDP
        ld      hl,T32NAM
        ld      de,00000H
        jp      A0677

;       Subroutine      INIGRP
;       Inputs          ________________________
;       Outputs         ________________________

A05D2:  call    A0577                   ; DISSCR
        ld      a,2
        ld      (SCRMOD),a
        ld      hl,(GRPPAT)
        ld      (PATBAS),hl
        ld      hl,(GRPATR)
        ld      (ATRBAS),hl
        ld      hl,(GRPNAM)
        call    A07DF                   ; SETWRT
        xor     a
        ld      b,3
A05EF:  out     (098H),a
        inc     a
        jr      nz,A05EF
        djnz    A05EF
        call    A07A1
        call    A06BB
        call    A0602                   ; SETGRP
        jp      A0570                   ; ENASCR

;       Subroutine      SETGRP
;       Inputs          ________________________
;       Outputs         ________________________

A0602:  ld      a,(RG0SAV)
        or      002H
        ld      b,a
        ld      c,0
        call    A057F                   ; WRTVDP
        ld      a,(RG1SAV)
        and     0E7H
        ld      b,a
        inc     c
        call    A057F                   ; WRTVDP
        ld      hl,GRPNAM
        ld      de,07F03H
        jr      A0677

;       Subroutine      INIMLT
;       Inputs          ________________________
;       Outputs         ________________________

A061F:  call    A0577                   ; DISSCR
        ld      a,3
        ld      (SCRMOD),a
        ld      hl,(MLTPAT)
        ld      (PATBAS),hl
        ld      hl,(MLTATR)
        ld      (ATRBAS),hl
        ld      hl,(MLTNAM)
        call    A07DF                   ; SETWRT
        ld      de,6
A063C:  ld      c,4
A063E:  ld      a,d
        ld      b,32
A0641:  out     (098H),a
        inc     a
        djnz    A0641
        dec     c
        jr      nz,A063E
        ld      d,a
        dec     e
        jr      nz,A063C
        call    A07B9
        call    A06BB
        call    A0659                   ; SETMLT
        jp      A0570                   ; ENASCR

;       Subroutine      SETMLT
;       Inputs          ________________________
;       Outputs         ________________________

A0659:  ld      a,(RG0SAV)
        and     001H
        ld      b,a
        ld      c,0
        call    A057F                   ; WRTVDP
        ld      a,(RG1SAV)
        and     0E7H
        or      008H
        ld      b,a
        ld      c,1
        call    A057F                   ; WRTVDP
        ld      hl,MLTNAM
        ld      de,00000H

A0677:  ld      bc,6*256+2
        call    A0690
        ld      b,10
        ld      a,d
        call    A0691
        ld      b,5
        ld      a,e
        call    A0691
        ld      b,9
        call    A0690
        ld      b,5

A0690:  xor     a

A0691:  push    hl
        push    af
        ld      a,(hl)
        inc     hl
        ld      h,(hl)
        ld      l,a
        xor     a
A0698:  add     hl,hl
        adc     a,a
        djnz    A0698
        ld      l,a
        pop     af
        or      l
        ld      b,a
        call    A057F                   ; WRTVDP
        pop     hl
        inc     hl
        inc     hl
        inc     c
        ret

;       Subroutine      CLRSPR
;       Inputs          ________________________
;       Outputs         ________________________

A06A8:  ld      a,(RG1SAV)
        ld      b,a
        ld      c,1
        call    A057F                   ; WRTVDP
        ld      hl,(PATBAS)
        ld      bc,8*256
        xor     a
        call    A0815                   ; FILVRM
A06BB:  ld      a,(FORCLR)
        ld      e,a
        ld      hl,(ATRBAS)
        ld      bc,32*256+0
A06C5:  ld      a,0D1H
        call    A07CD
        inc     hl
        inc     hl
        ld      a,c
        call    A07CD
        inc     hl
        inc     c
        ld      a,(RG1SAV)
        rrca
        rrca
        jr      nc,A06DC
        inc     c
        inc     c
        inc     c
A06DC:  ld      a,e
        call    A07CD
        inc     hl
        djnz    A06C5
        ret

;       Subroutine      CALPAT
;       Inputs          ________________________
;       Outputs         ________________________

A06E4:  ld      l,a
        ld      h,0
        add     hl,hl
        add     hl,hl
        add     hl,hl
        call    A0704                   ; GSPSIZ
        cp      008H
        jr      z,A06F3
        add     hl,hl
        add     hl,hl
A06F3:  ex      de,hl
        ld      hl,(PATBAS)
        add     hl,de
        ret

;       Subroutine      CALATR
;       Inputs          ________________________
;       Outputs         ________________________

A06F9:  ld      l,a
        ld      h,0
        add     hl,hl
        add     hl,hl
        ex      de,hl
        ld      hl,(ATRBAS)
        add     hl,de
        ret

;       Subroutine      GSPSIZ
;       Inputs          ________________________
;       Outputs         ________________________

A0704:  ld      a,(RG1SAV)
        rrca
        rrca
        ld      a,8
        ret     nc
        ld      a,32
        ret

;       Subroutine      LDIRMV
;       Inputs          ________________________
;       Outputs         ________________________

A070F:  call    A07EC                   ; SETRD
        ex      (sp),hl
        ex      (sp),hl
A0714:  in      a,(098H)
        ld      (de),a
        inc     de
        dec     bc
        ld      a,c
        or      b
        jr      nz,A0714
        ret
;
A071E:  call    H.INIP
        ld      hl,(CGPBAS)
        call    A07DF                   ; SETWRT
        ld      a,(CGPNT+0)
        ld      hl,(CGPNT+1)
        ld      bc,8*256
        push    af
A0731:  pop     af
        push    af
        push    bc
        di
        call    A01B6                   ; RDSLT
        ei
        pop     bc
        out     (098H),a
        inc     hl
        dec     bc
        ld      a,c
        or      b
        jr      nz,A0731
        pop     af
        ret

;       Subroutine      LDIRVM
;       Inputs          ________________________
;       Outputs         ________________________

A0744:  ex      de,hl
        call    A07DF                   ; SETWRT
A0748:  ld      a,(de)
        out     (098H),a
        inc     de
        dec     bc
        ld      a,c
        or      b
        jr      nz,A0748
        ret
;
A0752:  ld      h,0
        ld      l,a
        add     hl,hl
        add     hl,hl
        add     hl,hl
        ex      de,hl
        ld      hl,(CGPNT+1)
        add     hl,de
        ld      de,PATWRK
        ld      b,8
        ld      a,(CGPNT+0)
A0765:  push    af
        push    hl
        push    de
        push    bc
        call    A01B6                   ; RDSLT
        ei
        pop     bc
        pop     de
        pop     hl
        ld      (de),a
        inc     de
        inc     hl
        pop     af
        djnz    A0765
        ret
;
A0777:  call    A0B9F                   ; grafic mode ?
        jr      z,A07A1                 ; yep, screen 2
        jr      nc,A07B9                ; yep, screen 3

A077E:  ld      a,(SCRMOD)
        and     a
        ld      hl,(NAMBAS)
        ld      bc,24*40
        jr      z,A078D
        ld      bc,24*32
A078D:  ld      a,020H
        call    A0815                   ; FILVRM
        call    A0A7F                   ; cursor home
        ld      hl,LINTTB
        ld      b,018H
A079A:  ld      (hl),b
        inc     hl
        djnz    A079A
        jp      A0B26                   ; FNKSB
;
A07A1:  call    A0832
        ld      bc,256/8*192
        push    bc
        ld      hl,(GRPCOL)
        ld      a,(BAKCLR)
        call    A0815                   ; FILVRM
        ld      hl,(GRPCGP)
        pop     bc
        xor     a
A07B6:  jp      A0815                   ; FILVRM
;
A07B9:  call    A0832
        ld      hl,BAKCLR
        ld      a,(hl)
        add     a,a
        add     a,a
        add     a,a
        add     a,a
        or      (hl)
        ld      hl,(MLTCGP)
        ld      bc,00600H
        jr      A07B6                   ; FILVRM

;       Subroutine      WRTVRM
;       Inputs          ________________________
;       Outputs         ________________________

A07CD:  push    af
        call    A07DF                   ; SETWRT
        ex      (sp),hl
        ex      (sp),hl
        pop     af
        out     (098H),a
        ret

;       Subroutine      RDVRM
;       Inputs          ________________________
;       Outputs         ________________________

A07D7:  call    A07EC                   ; SETRD
        ex      (sp),hl
        ex      (sp),hl
        in      a,(098H)
        ret

;       Subroutine      SETWRT
;       Inputs          ________________________
;       Outputs         ________________________

A07DF:  ld      a,l
        di
        out     (099H),a
        ld      a,h
        and     03FH
        or      040H
        out     (099H),a
        ei
        ret

;       Subroutine      SETRD
;       Inputs          ________________________
;       Outputs         ________________________

A07EC:  ld      a,l
        di
        out     (099H),a
        ld      a,h
        and     03FH
        out     (099H),a
        ei
        ret

;       Subroutine      CHGCLR
;       Inputs          ________________________
;       Outputs         ________________________

A07F7:  ld      a,(SCRMOD)
        dec     a
        jp      m,A0824
        push    af
        call    A0832
        pop     af
        ret     nz
        ld      a,(FORCLR)
        add     a,a
        add     a,a
        add     a,a
        add     a,a
        ld      hl,BAKCLR
        or      (hl)
        ld      hl,(T32COL)
        ld      bc,32

;       Subroutine      FILVRM
;       Inputs          ________________________
;       Outputs         ________________________

A0815:  push    af
        call    A07DF                   ; SETWRT
A0819:  pop     af
        out     (098H),a
        push    af
        dec     bc
        ld      a,c
        or      b
        jr      nz,A0819
        pop     af
        ret
;
A0824:  ld      a,(FORCLR)
        add     a,a
        add     a,a
        add     a,a
        add     a,a
        ld      hl,BAKCLR
        or      (hl)
        ld      b,a
        jr      A0835
;
A0832:  ld      a,(BDRCLR)
A0835:  ld      b,a
        ld      c,7
        jp      A057F                   ; WRTVDP

;       Subroutine      TOTEXT
;       Inputs          ________________________
;       Outputs         ________________________

A083B:  call    A0B9F                   ; grafic mode ?
        ret     c                       ; nop, quit
        ld      a,(OLDSCR)
        call    H.TOTE
        jp      A084F                   ; CHGMOD

;       Subroutine      CLS
;       Inputs          ________________________
;       Outputs         ________________________

A0848:  ret     nz
        push    hl
        call    A0777
        pop     hl
        ret

;       Subroutine      CHGMOD
;       Inputs          ________________________
;       Outputs         ________________________

A084F:  dec     a
        jp      m,A050E                 ; INITXT
        jp      z,A0538                 ; INIT32
        dec     a
        jp      z,A05D2                 ; INIGRP
        jp      A061F                   ; INIMLT

;       Subroutine      LPTOUT
;       Inputs          ________________________
;       Outputs         ________________________

A085D:  call    H.LPTO
        push    af
A0861:  call    A046F                   ; BREAKX
        jr      c,A0878
        call    A0884                   ; LPTSTT
        jr      z,A0861
        pop     af
A086C:  push    af
        out     (091H),a
        xor     a
        out     (090H),a
        dec     a
        out     (090H),a
        pop     af
        and     a
        ret
;
A0878:  xor     a
        ld      (LPTPOS),a
        ld      a,00DH
        call    A086C
        pop     af
        scf
        ret

;       Subroutine      LPTSTT
;       Inputs          ________________________
;       Outputs         ________________________

A0884:  call    H.LPTS
        in      a,(090H)
        rrca
        rrca
        ccf
        sbc     a,a
        ret

;       Subroutine      POSIT
;       Inputs          ________________________
;       Outputs         ________________________

A088E:  ld      a,01BH
        rst     OUTDO
        ld      a,059H
        rst     OUTDO
        ld      a,l
        add     a,01FH
        rst     OUTDO
        ld      a,h
        add     a,01FH
        rst     OUTDO
        ret

;       Subroutine      CNVCHR
;       Inputs          ________________________
;       Outputs         ________________________

A089D:  push    hl
        push    af
        ld      hl,GRPHED
        xor     a
        cp      (hl)
        ld      (hl),a
        jr      z,A08B4
        pop     af
        sub     040H
        cp      020H
        jr      c,A08B2
        add     a,040H
A08B0:  cp      a
        scf
A08B2:  pop     hl
        ret
;
A08B4:  pop     af
        cp      001H
        jr      nz,A08B0
        ld      (hl),a
        pop     hl
        ret

;       Subroutine      CHPUT
;       Inputs          ________________________
;       Outputs         ________________________

A08BC:  push    hl
        push    de
        push    bc
        push    af
        call    H.CHPU
        call    A0B9F                   ; grafic mode ?
        jr      nc,A08DA                ; yep, quit
        call    A0A2E                   ; cursor off
        pop     af
        push    af
        call    A08DF                   ; decode char
        call    A09E1                   ; cursor on
        ld      a,(CSRX)
        dec     a
        ld      (TTYPOS),a              ; set TTYPOS
A08DA:  pop     af
A08DB:  pop     bc
        pop     de
        pop     hl
        ret
;
A08DF:  call    A089D                   ; CNVCHR (is grafic header ?)
        ret     nc                      ; yep, quit
        ld      c,a
        jr      nz,A08F3                ; grafic char
        ld      hl,ESCCNT
        ld      a,(hl)
        and     a                       ; in ESC sequence ?
        jp      nz,A098F                ; yep, handle
        ld      a,c
        cp      020H                    ; control char ?
        jr      c,A0914                 ; yep, handle
A08F3:  ld      hl,(CSRY)               ; cursor position
        cp      07FH
        jp      z,A0AE3                 ; DEL, handle
        call    A0BE6                   ; 'print' char
        call    A0A44                   ; cursor right if possible
        ret     nz                      ; not at end, quit
        xor     a
        call    A0C2B                   ; expand logical line
        ld      h,1                     ; at begin of line

A0908:  call    A0A61                   ; cursor down if possible
        ret     nz                      ; no scroll needed, quit
        call    A0A69                   ; update cursor position
        ld      l,1
        jp      A0A88                   ; clear line
;
A0914:  ld      hl,T092F-2
        ld      c,12
A0919:  inc     hl
        inc     hl
        and     a
        dec     c
        ret     m
        cp      (hl)
        inc     hl
        jr      nz,A0919
        ld      c,(hl)
        inc     hl
        ld      b,(hl)
        ld      hl,(CSRY)               ; cursor position
        call    A092D                   ; execute function
        xor     a
        ret
;
A092D:  push    bc
        ret
;
T092F:  defb    007H
        defw    A1113                   ; BEEP
        defb    008H
        defw    A0A4C                   ; BS, cursor left with warp
        defb    009H
        defw    A0A71                   ; TAB,
        defb    00AH
        defw    A0908                   ; LF,
        defb    00BH
        defw    A0A7F                   ; HOME, cursor home
        defb    00CH
        defw    A077E                   ; CLS, clear text screen
        defb    00DH
        defw    A0A81                   ; CR, cursor to start of line
        defb    01BH
        defw    A0989                   ; ESC, start ESC sequence
        defb    01CH
        defw    A0A5B                   ; CURSOR RIGHT, cursor right
        defb    01DH
        defw    A0A4C                   ; CURSOR LEFT, cursor left with warp
        defb    01EH
        defw    A0A57                   ; CURSOR UP, cursor up if possible
        defb    01FH
        defw    A0A61                   ; CURSOR DOWN, cursor down if possible

T0953:  defb    'j'
        defw    A077E                   ; clear text screen
        defb    'E'
        defw    A077E                   ; clear text screen
        defb    'K'
        defw    A0AEE                   ; clear to end of line
        defb    'J'
        defw    A0B05                   ; clear to end of screen
        defb    'l'
        defw    A0AEC                   ; clear line
        defb    'L'
        defw    A0AB4                   ; insert line
        defb    'M'
        defw    A0A85                   ; delete line
        defb    'Y'
        defw    A0986                   ; locate cursor
        defb    'A'
        defw    A0A57                   ; cursor up if possible
        defb    'B'
        defw    A0A61                   ; cursor down if possible
        defb    'C'
        defw    A0A44                   ; cursor right if possible
        defb    'D'
        defw    A0A55                   ; cursor left if possible
        defb    'H'
        defw    A0A7F                   ; cursor home
        defb    'x'
        defw    A0980
        defb    'y'
        defw    A0983

; ESC x sequence

A0980:  ld      a,1
        defb    001H                    ; LD BC,xxxx (trick to skip the next instruction)

; ESC y sequence

A0983:  ld      a,2
        defb    001H                    ; LD BC,xxxx (trick to skip the next instruction)

; ESC Y sequence

A0986:  ld      a,4
        defb    001H                    ; LD BC,xxxx (trick to skip the next instruction)

; start of ESC sequence

A0989:  ld      a,0FFH
        ld      (ESCCNT),a
        ret

; in ESC sequence

A098F:  jp      p,A099D                 ; handle long ESC sequences
        ld      (hl),0                  ; next is no ESC anymore
        ld      a,c
        ld      hl,T0953-2
        ld      c,15
        jp      A0919                   ; handle function
;
A099D:  dec     a
        jr      z,A09BE                 ; ESC "x"
        dec     a
        jr      z,A09C8                 ; ESC "y"
        dec     a
        ld      (hl),a                  ; ESC "Y" ends ?
        ld      a,(LINLEN)              ; max kol
        ld      de,CSRX
        jr      z,A09B3
        ld      (hl),3
        call    A0C32                   ; get max. linenumber
        dec     de
A09B3:  ld      b,a
        ld      a,c
        sub     32
        cp      b
        inc     a
        ld      (de),a
        ret     c
        ld      a,b
        ld      (de),a
        ret
;
A09BE:  ld      (hl),a
        ld      a,c
        sub     '4'
        jr      z,A09CF                 ; ESC "x4", block cursor
        dec     a
        jr      z,A09D6                 ; ESC "x5", cursor invisable
        ret
;
A09C8:  ld      (hl),a
        ld      a,c
        sub     '4'
        jr      nz,A09D3
        inc     a                       ; ESC "y4", stripe cursor
A09CF:  ld      (CSTYLE),a
        ret
;
A09D3:  dec     a
        ret     nz
        inc     a                       ; ESC "y5", cursor visable
A09D6:  ld      (CSRSR),a
        ret
;
A09DA:  ld      a,(CSRSR)
        and     a                       ; cursor visable ?
        ret     nz                      ; yep, quit
        jr      A09E6
;
A09E1:  ld      a,(CSRSR)
        and     a                       ; cursor visable ?
        ret     z                       ; nop, quit
A09E6:  call    H.DSPC
        call    A0B9F                   ; grafic mode ?
        ret     nc                      ; yep, quit
        ld      hl,(CSRY)
        push    hl
        call    A0BD8                   ; get char at cursorposition
        ld      (CURSAV),a              ; save
        ld      l,a
        ld      h,0
        add     hl,hl
        add     hl,hl
        add     hl,hl
        ex      de,hl
        ld      hl,(CGPBAS)
        push    hl
        add     hl,de
        call    A0BA5                   ; copy char patern to LINWRK
        ld      hl,LINWRK+7
        ld      b,8
        ld      a,(CSTYLE)
        and     a                       ; block cursor ?
        jr      z,A0A13                 ; yep,
        ld      b,3
A0A13:  ld      a,(hl)
        cpl
        ld      (hl),a
        dec     hl
        djnz    A0A13
        pop     hl
        ld      bc,255*8
        add     hl,bc                   ; vramadres cursor patern
        call    A0BBE                   ; copy LINWRK to vram
        pop     hl
        ld      c,0FFH
        jp      A0BE6                   ; put cursor on screen
;
A0A27:  ld      a,(CSRSR)
        and     a                       ; cursor visable ?
        ret     nz                      ; yep, quit
        jr      A0A33
;
A0A2E:  ld      a,(CSRSR)
        and     a                       ; cursor visable ?
        ret     z                       ; nop, quit
A0A33:  call    H.ERAC
        call    A0B9F                   ; grafic mode ?
        ret     nc                      ; yep, quit
        ld      hl,(CSRY)
        ld      a,(CURSAV)
        ld      c,a
        jp      A0BE6                   ; put orginal char on screen

; cursor right if possible

A0A44:  ld      a,(LINLEN)
        cp      h
        ret     z
        inc     h
        jr      A0A69                   ; update cursor position and quit

; cursor left with warp

A0A4C:  call    A0A55                   ; cursor left if possible
        ret     nz
        ld      a,(LINLEN)
        ld      h,a
        defb    011H                    ; LD DE,xx: a trick to skip the next 2 lines
A0A55:  dec     h
        defb    03EH                    ; LD A,xx: a trick to skip the next line

; cursor up if possible

A0A57:  dec     l
        ret     z
        jr      A0A69                   ; update cursor position and quit

; cursor right

A0A5B:  call    A0A44                   ; cursor right if possible
        ret     nz
        ld      h,1

; cursor down if possible

A0A61:  call    A0C32                   ; get max. linenumber
        cp      l                       ; at last linenumber ?
        ret     z                       ; yep, quit
        jr      c,A0A6D
        inc     l
A0A69:  ld      (CSRY),hl
        ret
;
A0A6D:  dec     l
        xor     a
        jr      A0A69                   ; update cursor position and quit
;
A0A71:  ld      a,' '
        call    A08DF
        ld      a,(CSRX)
        dec     a
        and     007H
        jr      nz,A0A71
        ret
;
A0A7F:  ld      l,1
A0A81:  ld      h,1
        jr      A0A69                   ; update cursor position and quit

; delete line

A0A85:  call    A0A81                   ; cursor to start of line
A0A88:  call    A0C32                   ; get max. linenumber
        sub     l
        ret     c
        jp      z,A0AEC                 ; clear line
        push    hl
        push    af
        ld      c,a
        ld      b,0
        call    A0C1D
        ld      l,e
        ld      h,d
        inc     hl
        ldir
        ld      hl,FSTPOS
        dec     (hl)
        pop     af
        pop     hl
A0AA3:  push    af
        inc     l
        call    A0BAA
        dec     l
        call    A0BC3
        inc     l
        pop     af
        dec     a
        jr      nz,A0AA3
        jp      A0AEC                   ; clear line

; insert line

A0AB4:  call    A0A81                   ; cursor to start of line
A0AB7:  call    A0C32                   ; get max. linenumber
        ld      h,a
        sub     l
        ret     c
        jp      z,A0AEC                 ; clear line
        ld      l,h
        push    hl
        push    af
        ld      c,a
        ld      b,0
        call    A0C1D
        ld      l,e
        ld      h,d
        push    hl
        dec     hl
        lddr
        pop     hl
        ld      (hl),h
        pop     af
        pop     hl
A0AD3:  push    af
        dec     l
        call    A0BAA
        inc     l
        call    A0BC3
        dec     l
        pop     af
        dec     a
        jr      nz,A0AD3
        jr      A0AEC                   ; clear line
;
A0AE3:  call    A0A4C                   ; cursor left with warp
        ret     z
        ld      c,020H
        jp      A0BE6

; clear line

A0AEC:  ld      h,1

; clear to end of line

A0AEE:  call    A0C29
        push    hl
        call    A0BF2
        call    A07DF                   ; SETWRT
        pop     hl
A0AF9:  ld      a,020H
        out     (098H),a
        inc     h
        ld      a,(LINLEN)
        cp      h
        jr      nc,A0AF9
        ret

; clear to end of screen

A0B05:  push    hl
        call    A0AEE                   ; clear to end of line
        pop     hl
        call    A0C32                   ; get max. linenumber
        cp      l
        ret     c
        ret     z
        ld      h,1
        inc     l
        jr      A0B05

;       Subroutine      ERAFNK
;       Inputs          ________________________
;       Outputs         ________________________

A0B15:  call    H.ERAF
        xor     a
        call    A0B9C
        ret     nc
        push    hl
        ld      hl,(CRTCNT)
        call    A0AEC                   ; clear line
        pop     hl
        ret

;       Subroutine      FNKSB
;       Inputs          ________________________
;       Outputs         ________________________

A0B26:  ld      a,(CNSDFG)
        and     a
        ret     z

;       Subroutine      DSPFNK
;       Inputs          ________________________
;       Outputs         ________________________

A0B2B:  call    H.DSPF
        ld      a,0FFH
        call    A0B9C
        ret     nc
        push    hl
        ld      a,(CSRY)
        ld      hl,CRTCNT
        cp      (hl)
        ld      a,00AH
        jr      nz,A0B41
        rst     OUTDO
A0B41:  ld      a,(NEWKEY+6)
        rrca
        ld      hl,FNKSTR+0*16
        ld      a,1
        jr      c,A0B50
        ld      hl,FNKSTR+5*16
        xor     a
A0B50:  ld      (FNKSWI),a
        ld      de,LINWRK
        push    de
        ld      b,028H
        ld      a,020H
A0B5B:  ld      (de),a
        inc     de
        djnz    A0B5B
        pop     de
        ld      c,005H
        ld      a,(LINLEN)
        sub     004H
        jr      c,A0B94
        ld      b,0FFH
A0B6B:  inc     b
        sub     005H
        jr      nc,A0B6B
        ld      a,b
        and     a
        jr      z,A0B94
        defb    03EH                    ; LD A,xx: a trick to skip the next line
A0B75:  inc     de
        push    bc
        ld      c,0
A0B79:  ld      a,(hl)
        inc     hl
        inc     c
        call    A089D                   ; CNVCHR (is grafic header ?)
        jr      nc,A0B79
        jr      nz,A0B87
        cp      020H
        jr      c,A0B88
A0B87:  ld      (de),a
A0B88:  inc     de
        djnz    A0B79
        ld      a,010H
        sub     c
        ld      c,a
        add     hl,bc
        pop     bc
        dec     c
        jr      nz,A0B75
A0B94:  ld      hl,(CRTCNT)
        call    A0BC3
        pop     hl
        ret
;
A0B9C:  ld      (CNSDFG),a
A0B9F:  ld      a,(SCRMOD)
        cp      002H
        ret
;
A0BA5:  push    hl
        ld      c,008H
        jr      A0BB4
;
A0BAA:  push    hl
        ld      h,1
        call    A0BF2
        ld      a,(LINLEN)
        ld      c,a
A0BB4:  ld      b,0
        ld      de,LINWRK
        call    A070F                   ; LDIRMV
        pop     hl
        ret
;
A0BBE:  push    hl
        ld      c,008H
        jr      A0BCD
;
A0BC3:  push    hl
        ld      h,1
        call    A0BF2
        ld      a,(LINLEN)
        ld      c,a
A0BCD:  ld      b,0
        ex      de,hl
        ld      hl,LINWRK
        call    A0744                   ; LDIRVM
        pop     hl
        ret
;
A0BD8:  push    hl
        call    A0BF2
        call    A07EC                   ; SETRD
        ex      (sp),hl
        ex      (sp),hl
        in      a,(098H)
        ld      c,a
        pop     hl
        ret
;
A0BE6:  push    hl
        call    A0BF2
        call    A07DF                   ; SETWRT
        ld      a,c
        out     (098H),a
        pop     hl
        ret
;
A0BF2:  push    bc
        ld      e,h
        ld      h,0
        ld      d,h
        dec     l
        add     hl,hl
        add     hl,hl
        add     hl,hl
        ld      c,l
        ld      b,h
        add     hl,hl
        add     hl,hl
        add     hl,de
        ld      a,(SCRMOD)
        and     a
        ld      a,(LINLEN)
        jr      z,A0C0D
        sub     022H
        jr      A0C10
;
A0C0D:  add     hl,bc
        sub     02AH
A0C10:  cpl
        and     a
        rra
        ld      e,a
        add     hl,de
        ex      de,hl
        ld      hl,(NAMBAS)
        add     hl,de
        dec     hl
        pop     bc
        ret
;
A0C1D:  push    hl
        ld      de,LINTTB-1
        ld      h,0
        add     hl,de
        ld      a,(hl)
        ex      de,hl
        pop     hl
        and     a
        ret
;
A0C29:  defb    03EH                    ; LD A,xx: a trick to skip the next line
A0C2A:  xor     a
A0C2B:  push    af
        call    A0C1D
        pop     af
        ld      (de),a
        ret

;       Subroutine      get max. linenumber
;       Inputs          ________________________
;       Outputs         ________________________

A0C32:  ld      a,(CNSDFG)
        push    hl
        ld      hl,CRTCNT
        add     a,(hl)
        pop     hl
        ret

;       Subroutine      KEYINT
;       Inputs          ________________________
;       Outputs         ________________________

A0C3C:  push    hl
        push    de
        push    bc
        push    af
        exx
        ex      af,af'
        push    hl
        push    de
        push    bc
        push    af
        push    iy
        push    ix
        call    H.KEYI
        in      a,(099H)
        and     a                       ; vdp interrupt ?
        jp      p,A0D02                 ; nop, quit KEYINT
        call    H.TIMI
        ei
        ld      (STATFL),a              ; save statusregister
        and     020H                    ; sprite collisionflag set ?
        ld      hl,TRPTBL+11*3
        call    nz,C0EF1                ; yep, raise SPRITE trap
        ld      hl,(INTCNT)
        dec     hl
        ld      a,h
        or      l                       ; intervaltime passed ?
        jr      nz,A0C73                ; nop, skip
        ld      hl,TRPTBL+17*3
        call    C0EF1                   ; raise INTERVAL trap
        ld      hl,(INTVAL)             ; reload INTCNT
A0C73:  ld      (INTCNT),hl
        ld      hl,(JIFFY)
        inc     hl
        ld      (JIFFY),hl              ; timecounter
        ld      a,(MUSICF)
        ld      c,a
        xor     a                       ; playchannel
A0C82:  rr      c                       ; handle this channel ?
        push    af
        push    bc
        call    c,A113B                 ; yep, do it
        pop     bc
        pop     af
        inc     a
        cp      3
        jr      c,A0C82                 ; all 3 channels
        ld      hl,SCNCNT
        dec     (hl)                    ; do i have to scan ?
        jr      nz,A0D02                ; nop, quit KEYINT

        IF      KEYBFIX EQ 1
        ld      (hl),1                  ; next scan after 1 ints
        ELSE
        ld      (hl),3                  ; next scan after 3 ints
        ENDIF

        xor     a
        call    A120C                   ; read joystick 0
        and     030H                    ; only firebuttons
        push    af
        ld      a,1
        call    A120C                   ; read joystick 1
        and     030H                    ; only firebuttons
        rlca
        rlca
        pop     bc
        or      b
        push    af
        call    A1226                   ; read keyboard row 8
        and     001H                    ; only spacebar
        pop     bc
        or      b
        ld      c,a
        ld      hl,TRGFLG
        xor     (hl)
        and     (hl)
        ld      (hl),c                  ; save triggerflag
        ld      c,a
        rrca                            ; spacebar being pressed ?
        ld      hl,TRPTBL+12*3
        call    c,C0EF1                 ; yep, raise STRIG0 trap
        rl      c                       ; firebutton 2 B being pressed ?
        ld      hl,TRPTBL+16*3
        call    c,C0EF1                 ; yep, raise STRIG4 trap
        rl      c
        ld      hl,TRPTBL+14*3
        call    c,C0EF1                 ; yep, raise STRIG2 trap
        rl      c
        ld      hl,TRPTBL+15*3
        call    c,C0EF1                 ; yep, raise STRIG3 trap
        rl      c
        ld      hl,TRPTBL+13*3
        call    c,C0EF1                 ; yep, raise STRIG1 trap
        xor     a
        ld      (CLIKFL),a
        call    A0D12                   ; scan keyboard
        jr      nz,A0D02                ; buffer not empty, quit KEYINT
        ld      hl,REPCNT
        dec     (hl)
        jr      nz,A0D02

        IF      KEYBFIX EQ 1
        ld      (hl),3
        ELSE
        ld      (hl),1
        ENDIF

        ld      hl,OLDKEY
        ld      de,OLDKEY+1
        ld      bc,11-1
        ld      (hl),0FFH
        ldir                            ; create a being pressed
        call    A0D4E
A0D02:  pop     ix
        pop     iy
        pop     af
        pop     bc
        pop     de
        pop     hl
        ex      af,af'
        exx
        pop     af
        pop     bc
        pop     de
        pop     hl
        ei
        ret
;
A0D12:  in      a,(0AAH)
        and     0F0H
        ld      c,a
        ld      b,11
        ld      hl,NEWKEY
A0D1C:  ld      a,c
        out     (0AAH),a
        in      a,(0A9H)
        ld      (hl),a
        inc     c
        inc     hl
        djnz    A0D1C                   ; scan keyboard & put in NEWKEY
        ld      a,(ENSTOP)
        and     a                       ; Hot break possible ?
        jr      z,A0D3A                 ; nop, quit
        ld      a,(NEWKEY+6)
        cp      11101000b               ; CODE+GRAPH+CTRL+SHIFT pressed ?
        jr      nz,A0D3A                ; nop, quit
        ld      ix,M409B                ; start headloop
        jp      A01FF                   ; CALBAS
;
A0D3A:  ld      de,OLDKEY+11
        ld      b,11
A0D3F:  dec     de
        dec     hl
        ld      a,(de)
        cp      (hl)                    ; changed ?
        jr      nz,A0D49                ; yep, reload REPCNT
        djnz    A0D3F
        jr      A0D4E
;
A0D49:
        IF      KEYBFIX EQ 1
        ld      a,39
        ELSE
        ld      a,13
        ENDIF

        ld      (REPCNT),a
A0D4E:  ld      b,11
        ld      hl,OLDKEY
        ld      de,NEWKEY
A0D56:  ld      a,(de)
        ld      c,a
        xor     (hl)
        and     (hl)                    ; key being pressed ?
        ld      (hl),c                  ; OLDKEY renewed
        call    nz,A0D89                ; yep, handle
        inc     de
        inc     hl
        djnz    A0D56                   ; next row
A0D62:  ld      hl,(GETPNT)
        ld      a,(PUTPNT)
        sub     l                       ; flag buffer empty
        ret

;       Subroutine      CHSNS
;       Inputs          ________________________
;       Outputs         ________________________

A0D6A:  ei
        push    hl
        push    de
        push    bc
        call    A0B9F                   ; graphic mode ?
        jr      nc,A0D82                ; yep, skip functionkeys
        ld      a,(FNKSWI)
        ld      hl,NEWKEY+6
        xor     (hl)                    ; SHIFT changed ?
        ld      hl,CNSDFG
        and     (hl)                    ; display functionkeys ?
        rrca
        call    c,A0B2B                 ; yep, DSPFNK
A0D82:  call    A0D62                   ; flag KEYBUF is empty
        pop     bc
        pop     de
        pop     hl
        ret
;
A0D89:  push    hl
        push    de
        push    bc
        push    af
        ld      a,11
        sub     b                       ; row
        add     a,a
        add     a,a
        add     a,a                     ; *8
        ld      c,a
        ld      b,8
        pop     af
A0D97:  rra                             ; this key being pressed ?
        push    bc
        push    af
        call    c,K.HAND                ; yep, handle key
        pop     af
        pop     bc
        inc     c
        djnz    A0D97                   ; next key in row
        jp      A08defb                 ; quit


        IF      KEYTYP EQ 0

        INCLUDE KEYJAP.MAC

        ENDIF


        IF      KEYTYP EQ 1

        INCLUDE KEYINT.MAC

        ENDIF


        IF      KEYTYP EQ 2

        INCLUDE KEYFR.MAC

        ENDIF


        IF      KEYTYP EQ 3

        INCLUDE KEYUK.MAC

        ENDIF


        IF      KEYTYP EQ 4

        INCLUDE KEYGER.MAC

        ENDIF


        IF      KEYTYP EQ 5

        INCLUDE KEYRUS.MAC

        ENDIF


        IF      KEYTYP EQ 6

        INCLUDE KEYSPA.MAC

        ENDIF


        ORG     00EF1H

;       Subroutine      raise trap
;       Inputs          ________________________
;       Outputs         ________________________
;       Remark          code identical among keyboard layout versions

C0EF1:  LD      A,(HL)
        AND     01H                     ; trap enabled ?
        RET     Z                       ; nope, quit
        LD      A,(HL)
        OR      04H
        CP      (HL)                    ; trap already raised ?
        RET     Z                       ; yep, quit
        LD      (HL),A                  ; raise trap
        XOR     05H                     ; trap paused ?
        RET     NZ                      ; yep, quit
        LD      A,(ONGSBF)
        INC     A
        LD      (ONGSBF),A              ; increase trap counter
        RET


        ORG     00F3DH

;       Subroutine      CHGCAP
;       Inputs          ________________________
;       Outputs         ________________________
;       Remark          code identical among keyboard layout versions

J0F3D:  AND     A
        LD      A,0CH
        JR      Z,J0F43
        INC     A
J0F43:  OUT     (0ABH),A
        RET     


        ORG     00F64H

;       Subroutine      make keyclick
;       Inputs          -
;       Outputs         ________________________
;       Remark          code identical among keyboard layout versions

J0F64:  LD      A,(CLIKSW)
        AND     A                       ; keyclicks enabled ?
        RET     Z                       ; nope, quit
        LD      A,(CLIKFL)
        AND     A                       ; keyclick already done (only one click for multiple keys) ?
        RET     NZ                      ; yep, quit
        LD      A,0FH
        LD      (CLIKFL),A              ; no keyclick until the next scan
        OUT     (0ABH),A                ; set click bit
        LD      A,10
J0F77:  DEC     A
        JR      NZ,J0F77                ; wait
                                        ; reset click bit

;       Subroutine      change click bit
;       Inputs          A = 0, A <> 0
;       Outputs         ________________________
;       Remark          code identical among keyboard layout versions

J0F7A:  AND     A
        LD      A,0EH
        JR      Z,J0F80
        INC     A
J0F80:  OUT     (0ABH),A
        RET     


        ORG     010C2H

C10C2:  inc     hl
        ld      a,l
        cp      LOW (KEYBUF+40)
        ret     nz
        ld      hl,KEYBUF
        ret

;       Subroutine      CHGET
;       Inputs          ________________________
;       Outputs         ________________________

A10CB:  push    hl
        push    de
        push    bc
        call    H.CHGE
        call    A0D6A                   ; CHSNS
        jr      nz,A10E1
        call    A09DA
A10D9:  call    A0D6A                   ; CHSNS
        jr      z,A10D9
        call    A0A27
A10E1:  ld      hl,INTFLG
        ld      a,(hl)
        cp      004H
        jr      nz,A10EB
        ld      (hl),0
A10EB:  ld      hl,(GETPNT)
        ld      c,(hl)
        call    C10C2
        ld      (GETPNT),hl
        ld      a,c
        jp      A08DB

;       Subroutine      CKCNTC
;       Inputs          ________________________
;       Outputs         ________________________

A10F9:  push    hl
        ld      hl,0
        call    A03FB                   ; ISCNTC
        pop     hl
        ret

;       Subroutine      WRTPSG
;       Inputs          ________________________
;       Outputs         ________________________

A1102:  di
        out     (0A0H),a
        push    af
        ld      a,e
        out     (0A1H),a
        ei
        pop     af
        ret
;
A110C:  ld      a,14

;       Subroutine      RDPSG
;       Inputs          ________________________
;       Outputs         ________________________

A110E:  out     (0A0H),a
        in      a,(0A2H)
        ret

;       Subroutine      BEEP
;       Inputs          ________________________
;       Outputs         ________________________

A1113:  xor     a
        ld      e,055H
        call    A1102                   ; WRTPSG
        ld      e,a
        inc     a
        call    A1102                   ; WRTPSG
        ld      e,0BEH
        ld      a,7
        call    A1102                   ; WRTPSG
        ld      e,a
        inc     a
        call    A1102                   ; WRTPSG
        ld      bc,2000
        call    A1133
        jp      A04BD                   ; GICINI
;
A1133:  dec     bc
        ex      (sp),hl
        ex      (sp),hl
        ld      a,b
        or      c
        jr      nz,A1133
        ret
;
A113B:  ld      b,a                     ; channel
        call    A1470                   ; GETVCP (get voice pointer)
        dec     hl
        ld      d,(hl)
        dec     hl
        ld      e,(hl)
        dec     de
        ld      (hl),e
        inc     hl
        ld      (hl),d                  ; decrease voice counter
        ld      a,d
        or      e                       ; counter expires ?
        ret     nz                      ; nop, quit
        ld      a,b
        ld      (QUEUEN),a
        call    A11E2                   ; get byte
        cp      0FFH
        jr      z,A11B0                 ; end byte,
        ld      d,a
        and     0E0H
        rlca
        rlca
        rlca
        ld      c,a                     ; length of packet
        ld      a,d
        and     01FH
        ld      (hl),a                  ; MSB of counter
        call    A11E2                   ; get byte
        dec     hl
        ld      (hl),a                  ; LSB of counter
        inc     c
A1166:  dec     c                       ; packet ends ?
        ret     z                       ; yep, quit
        call    A11E2                   ; get byte
        ld      d,a
        and     0C0H
        jr      nz,A1181                ; not a freqency packet
        call    A11E2                   ; get byte
        ld      e,a
        ld      a,b
        rlca                            ; freqency register
        call    A1102                   ; WRTPSG
        inc     a
        ld      e,d
        call    A1102                   ; WRTPSG
        dec     c
        jr      A1166                   ; next
;
A1181:  ld      h,a
        and     080H
        jr      z,A1195                 ; not a amplitude packet
        ld      e,d
        ld      a,b
        add     a,8                     ; amplitude register
        call    A1102                   ; WRTPSG
        ld      a,e
        and     010H                    ; modulate ?
        ld      a,13
        call    nz,A1102                ; yep, WRTPSG
A1195:  ld      a,h
        and     040H
        jr      z,A1166                 ; there is no envelope packet, next
        call    A11E2                   ; get byte
        ld      d,a
        call    A11E2                   ; get byte
        ld      e,a
        ld      a,11
        call    A1102                   ; WRTPSG
        inc     a
        ld      e,d
        call    A1102                   ; WRTPSG
        dec     c
        dec     c
        jr      A1166                   ; next
;
A11B0:  ld      a,b
        add     a,8                     ; amplitude register
        ld      e,0
        call    A1102                   ; WRTPSG
        inc     b
        ld      hl,MUSICF
        xor     a
        scf
A11BE:  rla
        djnz    A11BE
        and     (hl)
        xor     (hl)
        ld      (hl),a                  ; channel not active

;       Subroutine      STRTMS
;       Inputs          ________________________
;       Outputs         ________________________

A11C4:  ld      a,(MUSICF)
        or      a                       ; no channel active ?
        ret     nz                      ; nop, quit
        ld      hl,PLYCNT
        ld      a,(hl)
        or      a                       ; strings left ?
        ret     z                       ; nop, quit
        dec     (hl)
        ld      hl,1
        ld      (VCBA+0),hl
        ld      (VCBB+0),hl
        ld      (VCBC+0),hl
        ld      a,111B
        ld      (MUSICF),a
        ret
;
A11E2:  ld      a,(QUEUEN)
        push    hl
        push    de
        push    bc
        call    A14AD
        jp      A08DB

;       Subroutine      GTSTCK
;       Inputs          ________________________
;       Outputs         ________________________

A11EE:  dec     a
        jp      m,A1200
        call    A120C
        ld      hl,T1233
A11F8:  and     00FH
        ld      e,a
        ld      d,0
        add     hl,de
        ld      a,(hl)
        ret
;
A1200:  call    A1226
        rrca
        rrca
        rrca
        rrca
        ld      hl,T1243
        jr      A11F8
;
A120C:  ld      b,a
        ld      a,15
        di
        call    A110E                   ; RDPSG
        djnz    A121B
        and     0DFH
        or      04CH
        jr      A121F
;
A121B:  and     0AFH
        or      003H
A121F:  out     (0A1H),a
        call    A110C
        ei
        ret
;
A1226:  di
        in      a,(0AAH)
        and     0F0H
        add     a,008H
        out     (0AAH),a
        in      a,(0A9H)
        ei
        ret
;
T1233:  defb    0,5,1,0,3,4,2,3,7,6,8,7,0,5,1,0

T1243:  defb    0,3,5,4,1,2,0,3,7,0,6,5,8,1,7,0

;       Subroutine      GTTRIG
;       Inputs          ________________________
;       Outputs         ________________________

A1253:  dec     a
        jp      m,A126C
        push    af
        and     001H
        call    A120C
        pop     bc
        dec     b
        dec     b
        ld      b,010H
        jp      m,A1267
        ld      b,020H
A1267:  and     b
A1268:  sub     001H
        sbc     a,a
        ret
;
A126C:  call    A1226
        and     001H
        jr      A1268

;       Subroutine      GTPDL
;       Inputs          ________________________
;       Outputs         ________________________

A1273:  inc     a
        and     a
        rra
        push    af
        ld      b,a
        xor     a
        scf
A127A:  rla
        djnz    A127A
        ld      b,a
        pop     af
        ld      c,010H
        ld      de,003AFH
        jr      nc,A128B
        ld      c,020H
        ld      de,04C9FH
A128B:  ld      a,15
        di
        call    A110E                   ; RDPSG
        and     e
        or      d
        or      c
        out     (0A1H),a
        xor     c
        out     (0A1H),a
        ld      a,00EH
        out     (0A0H),a
        ld      c,0
A129F:  in      a,(0A2H)
        and     b
        jr      z,A12A9
        inc     c
        jp      nz,A129F
        dec     c
A12A9:  ei
        ld      a,c
        ret

;       Subroutine      GTPAD
;       Inputs          ________________________
;       Outputs         ________________________

A12AC:  cp      004H
        ld      de,00CECH
        jr      c,A12B8
        ld      de,003D3H
        sub     004H
A12B8:  dec     a
        jp      m,A12C5
        dec     a
        ld      a,(PADX)
        ret     m
        ld      a,(PADY)
        ret     z
A12C5:  push    af
        ex      de,hl
        ld      (FILNAM+0),hl
        sbc     a,a
        cpl
        and     040H
        ld      c,a
        ld      a,15
        di
        call    A110E                   ; RDPSG
        and     0BFH
        or      c
        out     (0A1H),a
        pop     af
        jp      m,A12E8
        call    A110C
        ei
        and     008H
        sub     001H
        sbc     a,a
        ret
;
A12E8:  ld      c,0
        call    A1332
        call    A1332
        jr      c,A131A
        call    A1320
        jr      c,A131A
        push    de
        call    A1320
        pop     bc
        jr      c,A131A
        ld      a,b
        sub     d
        jr      nc,A1304
        cpl
        inc     a
A1304:  cp      005H
        jr      nc,A12E8
        ld      a,c
        sub     e
        jr      nc,A130E
        cpl
        inc     a
A130E:  cp      005H
        jr      nc,A12E8
        ld      a,d
        ld      (PADX),a
        ld      a,e
        ld      (PADY),a
A131A:  ei
        ld      a,h
        sub     001H
        sbc     a,a
        ret
;
A1320:  ld      c,00AH
        call    A1332
        ret     c
        ld      d,l
        push    de
        ld      c,0
        call    A1332
        pop     de
        ld      e,l
        xor     a
        ld      h,a
        ret
;
A1332:  call    A135B
        ld      b,008H
        ld      d,c
A1338:  res     0,d
        res     2,d
        call    A136D
        call    A110C
        ld      h,a
        rra
        rra
        rra
        rl      l
        set     0,d
        set     2,d
        call    A136D
        djnz    A1338
        set     4,d
        set     5,d
        call    A136D
        ld      a,h
        rra
        ret
;
A135B:  ld      a,035H
        or      c
        ld      d,a
        call    A136D
A1362:  call    A110C
        and     002H
        jr      z,A1362
        res     4,d
        res     5,d
A136D:  push    hl
        push    de
        ld      hl,(FILNAM+0)
        ld      a,l
        cpl
        and     d
        ld      d,a
        ld      a,00FH
        out     (0A0H),a
        in      a,(0A2H)
        and     l
        or      d
        or      h
        out     (0A1H),a
        pop     de
        pop     hl
        ret

;       Subroutine      STMOTR
;       Inputs          ________________________
;       Outputs         ________________________

A1384:  and     a
        jp      m,A1392
A1388:  jr      nz,A138D
        ld      a,009H
        defb    0C2H                    ; LD JP NZ,xx: a trick to skip the next line
A138D:  ld      a,008H
        out     (0ABH),a
        ret
;
A1392:  in      a,(0AAH)
        and     010H
        jr      A1388

;       Subroutine      NMI
;       Inputs          ________________________
;       Outputs         ________________________

A1398:  call    H.NMI
        retn

;       Subroutine      INIFNK
;       Inputs          ________________________
;       Outputs         ________________________

A139D:  ld      bc,10*16
        ld      de,FNKSTR
        ld      hl,T13A9
        ldir
        ret
;
T13A9:  defb    "color ",0
        defs    16-7,0
        defb    "auto ",0
        defs    16-6,0
        defb    "goto ",0
        defs    16-6,0
        defb    "list ",0
        defs    16-6,0
        defb    "run",13,0
        defs    16-5,0

        IF BASVER EQ 0
        defb    'color 15,4,7',13,0
        defs    16-14,0
        ELSE
        defb    'color 15,4,4',13,0
        defs    16-14,0
        ENDIF
        defb    'cload"',0
        defs    16-7,0
        defb    "cont",13,0
        defs    16-6,0
        defb    "list.",13,30,30,0
        defs    16-9,0
        defb    12,"run",13,0
        defs    16-6,0

;       Subroutine      RDVDP
;       Inputs          ________________________
;       Outputs         ________________________

A1449:  in      a,(099H)
        ret

;       Subroutine      RSLREG
;       Inputs          ________________________
;       Outputs         ________________________

A144C:  in      a,(0A8H)
        ret

;       Subroutine      WSLREG
;       Inputs          ________________________
;       Outputs         ________________________

A144F:  out     (0A8H),a
        ret

;       Subroutine      SNSMAT
;       Inputs          ________________________
;       Outputs         ________________________

A1452:  ld      c,a
        di
        in      a,(0AAH)
        and     0F0H
        add     a,c
        out     (0AAH),a
        in      a,(0A9H)
        ei
        ret

;       Subroutine      ISFLIO
;       Inputs          ________________________
;       Outputs         ________________________

A145F:  call    H.ISFL
        push    hl
        ld      hl,(PTRFIL)
        ld      a,l
        or      h
        pop     hl
        ret

;       Subroutine      DCOMPR
;       Inputs          ________________________
;       Outputs         ________________________

A146A:  ld      a,h
        sub     d
        ret     nz
        ld      a,l
        sub     e
        ret

;       Subroutine      GETVCP
;       Inputs          ________________________
;       Outputs         ________________________

A1470:  ld      l,2
        jr      A1477

;       Subroutine      GETVC2
;       Inputs          ________________________
;       Outputs         ________________________

A1474:  ld      a,(VOICEN)
A1477:  push    de
        ld      de,VCBA
        ld      h,0
        add     hl,de
        or      a
        jr      z,A1488
        ld      de,37
A1484:  add     hl,de
        dec     a
        jr      nz,A1484
A1488:  pop     de
        ret

;       Subroutine      PHYDIO
;       Inputs          ________________________
;       Outputs         ________________________

A148A:  call    H.PHYD
        ret

;       Subroutine      FORMAT
;       Inputs          ________________________
;       Outputs         ________________________

A148E:  call    H.FORM
        ret

;       Subroutine      PUTQ
;       Inputs          ________________________
;       Outputs         ________________________

A1492:  call    A14FA
        ld      a,b
        inc     a
        inc     hl
        and     (hl)
        cp      c
        ret     z
        push    hl
        dec     hl
        dec     hl
        dec     hl
        ex      (sp),hl
        inc     hl
        ld      c,a
        ld      a,(hl)
        inc     hl
        ld      h,(hl)
        ld      l,a
        ld      b,0
        add     hl,bc
        ld      (hl),e
        pop     hl
        ld      (hl),c
        ret
;
A14AD:  call    A14FA
        ld      (hl),0
        jr      nz,A14D1
        ld      a,c
        cp      b
        ret     z
        inc     hl
        inc     a
        and     (hl)
        dec     hl
        dec     hl
        push    hl
        inc     hl
        inc     hl
        inc     hl
        ld      c,a
        ld      a,(hl)
        inc     hl
        ld      h,(hl)
        ld      l,a
        ld      b,0
        add     hl,bc
        ld      a,(hl)
        pop     hl
        ld      (hl),c
        or      a
        ret     nz
        inc     a
        ld      a,0
        ret
;
A14D1:  ld      c,a
        ld      b,0
        ld      hl,QUEBAK-1
        add     hl,bc
        ld      a,(hl)
        ret
;
A14DA:  push    bc
        call    A1504
        ld      (hl),b
        inc     hl
        ld      (hl),b
        inc     hl
        ld      (hl),b
        inc     hl
        pop     af
        ld      (hl),a
        inc     hl
        ld      (hl),e
        inc     hl
        ld      (hl),d
        ret

;       Subroutine      LFTQ
;       Inputs          ________________________
;       Outputs         ________________________

A14EB:  call    A14FA
        ld      a,b
        inc     a
        inc     hl
        and     (hl)
        ld      b,a
        ld      a,c
        sub     b
        and     (hl)
        ld      l,a
        ld      h,0
        ret
;
A14FA:  call    A1504
        ld      b,(hl)
        inc     hl
        ld      c,(hl)
        inc     hl
        ld      a,(hl)
        or      a
        ret
;
A1504:  rlca
        ld      b,a
        rlca
        add     a,b
        ld      c,a
        ld      b,0
        ld      hl,(QUEUES)
        add     hl,bc
        ret

;       Subroutine      GRPPRT
;       Inputs          ________________________
;       Outputs         ________________________

A1510:  push    hl
        push    de
        push    bc
        push    af
        call    A089D                   ; CNVCHR (is grafic header ?)
        jr      nc,A157B
        jr      nz,A1523
        cp      00DH
        jr      z,A157E
        cp      020H
        jr      c,A157B
A1523:  call    A0752
        ld      a,(FORCLR)
        ld      (ATRBYT),a
        ld      hl,(GRPACY)
        ex      de,hl
        ld      bc,(GRPACX)
        call    A1599                   ; SCALXY
        jr      nc,A157B
        call    A15DF                   ; MAPXYC
        ld      de,PATWRK
        ld      c,008H
A1541:  ld      b,008H
        call    A1639                   ; FETCHC
        push    hl
        push    af
        ld      a,(de)
A1549:  add     a,a
        push    af
        call    c,A167E                 ; SETC
        call    A16AC
        pop     hl
        jr      c,A1558
        push    hl
        pop     af
        djnz    A1549
A1558:  pop     af
        pop     hl
        call    A1640                   ; STOREC
        call    A170A                   ; TDOWNC
        jr      c,A1566
        inc     de
        dec     c
        jr      nz,A1541
A1566:  call    A15D9
        ld      a,(GRPACX)
        jr      z,A1574
        add     a,020H
        jr      c,A157E
        jr      A1578
;
A1574:  add     a,008H
        jr      c,A157E
A1578:  ld      (GRPACX),a
A157B:  jp      A08DA
;
A157E:  xor     a
        ld      (GRPACX),a
        call    A15D9
        ld      a,(GRPACY)
        jr      z,A158D
        add     a,020H
        defb    001H
A158D:  add     a,008H
        cp      0C0H
        jr      c,A1594
        xor     a
A1594:  ld      (GRPACY),a
        jr      A157B

;       Subroutine      SCALXY
;       Inputs          ________________________
;       Outputs         ________________________

A1599:  push    hl
        push    bc
        ld      b,1
        ex      de,hl
        ld      a,h
        add     a,a
        jr      nc,A15A7
        ld      hl,0
        jr      A15AF
;
A15A7:  ld      de,192
        rst     DCOMPR
        jr      c,A15B1
        ex      de,hl
        dec     hl
A15AF:  ld      b,0
A15B1:  ex      (sp),hl
        ld      a,h
        add     a,a
        jr      nc,A15BB
        ld      hl,0
        jr      A15C3
;
A15BB:  ld      de,256
        rst     DCOMPR
        jr      c,A15C5
        ex      de,hl
        dec     hl
A15C3:  ld      b,0
A15C5:  pop     de
        call    A15D9
        jr      z,A15D3
        srl     l
        srl     l
        srl     e
        srl     e
A15D3:  ld      a,b
        rrca
        ld      b,h
        ld      c,l
        pop     hl
        ret
;
A15D9:  ld      a,(SCRMOD)
        sub     002H
        ret

;       Subroutine      MAPXYC
;       Inputs          ________________________
;       Outputs         ________________________

A15DF:  push    bc
        call    A15D9
        jr      nz,A1613
        ld      d,c
        ld      a,c
        and     007H
        ld      c,a
        ld      hl,T160B
        add     hl,bc
        ld      a,(hl)
        ld      (CMASK),a
        ld      a,e
        rrca
        rrca
        rrca
        and     01FH
        ld      b,a
        ld      a,d
        and     0F8H
        ld      c,a
        ld      a,e
        and     007H
        or      c
        ld      c,a
        ld      hl,(GRPCGP)
        add     hl,bc
        ld      (CLOC),hl
        pop     bc
        ret
;
T160B:  defb    10000000b
        defb    01000000b
        defb    00100000b
        defb    00010000b
        defb    00001000b
        defb    00000100b
        defb    00000010b
        defb    00000001b

A1613:  ld      a,c
        rrca
        ld      a,0F0H
        jr      nc,A161B
        ld      a,00FH
A161B:  ld      (CMASK),a
        ld      a,c
        add     a,a
        add     a,a
        and     0F8H
        ld      c,a
        ld      a,e
        and     007H
        or      c
        ld      c,a
        ld      a,e
        rrca
        rrca
        rrca
        and     007H
        ld      b,a
        ld      hl,(MLTCGP)
        add     hl,bc
        ld      (CLOC),hl
        pop     bc
        ret

;       Subroutine      FETCHC
;       Inputs          ________________________
;       Outputs         ________________________

A1639:  ld      a,(CMASK)
        ld      hl,(CLOC)
        ret

;       Subroutine      STOREC
;       Inputs          ________________________
;       Outputs         ________________________

A1640:  ld      (CMASK),a
        ld      (CLOC),hl
        ret

;       Subroutine      READC
;       Inputs          ________________________
;       Outputs         ________________________

A1647:  push    bc
        push    hl
        call    A1639                   ; FETCHC
        ld      b,a
        call    A15D9
        jr      nz,A166C
        call    A07D7                   ; RDVRM
        and     b
        push    af
        ld      bc,02000H
        add     hl,bc
        call    A07D7                   ; RDVRM
        ld      b,a
        pop     af
        ld      a,b
        jr      z,A1667
A1663:  rrca
        rrca
        rrca
        rrca
A1667:  and     00FH
        pop     hl
        pop     bc
        ret
;
A166C:  call    A07D7                   ; RDVRM
        inc     b
        dec     b
        jp      p,A1667
        jr      A1663

;       Subroutine      SETATR
;       Inputs          ________________________
;       Outputs         ________________________

A1676:  cp      010H
        ccf
        ret     c
        ld      (ATRBYT),a
        ret

;       Subroutine      SETC
;       Inputs          ________________________
;       Outputs         ________________________

A167E:  push    hl
        push    bc
        call    A15D9
        call    A1639                   ; FETCHC
        jr      nz,A1690
        push    de
        call    A186C
        pop     de
        pop     bc
        pop     hl
        ret
;
A1690:  ld      b,a
        call    A07D7                   ; RDVRM
        ld      c,a
        ld      a,b
        cpl
        and     c
        ld      c,a
        ld      a,(ATRBYT)
        inc     b
        dec     b
        jp      p,A16A5
        add     a,a
        add     a,a
        add     a,a
        add     a,a
A16A5:  or      c
        call    A07CD                   ; WRTVRM
        pop     bc
        pop     hl
        ret
;
A16AC:  push    hl
        call    A15D9
        jp      nz,A1779
        call    A1639                   ; FETCHC
        rrca
        jr      nc,A1704
        ld      a,l
        and     0F8H
        cp      0F8H
        ld      a,080H
        jr      nz,A16D2
        jp      A175A

;       Subroutine      RIGHTC
;       Inputs          ________________________
;       Outputs         ________________________

A16C5:  push    hl
        call    A15D9
        jp      nz,A178B
        call    A1639                   ; FETCHC
        rrca
        jr      nc,A1704
A16D2:  push    de
        ld      de,8
        jr      A16FF
;
A16D8:  push    hl
        call    A15D9
        jp      nz,A179C
        call    A1639                   ; FETCHC
        rlca
        jr      nc,A1704
        ld      a,l
        and     0F8H
        ld      a,1
        jr      nz,A16FB
        jr      A175A

;       Subroutine      LEFTC
;       Inputs          ________________________
;       Outputs         ________________________

A16EE:  push    hl
        call    A15D9
        jp      nz,A17AC
        call    A1639                   ; FETCHC
        rlca
        jr      nc,A1704
A16FB:  push    de
        ld      de,-8
A16FF:  add     hl,de
        ld      (CLOC),hl
        pop     de
A1704:  ld      (CMASK),a
        and     a
        pop     hl
        ret

;       Subroutine      TDOWNC
;       Inputs          ________________________
;       Outputs         ________________________

A170A:  push    hl
        push    de
        ld      hl,(CLOC)
        call    A15D9
        jp      nz,A17C6
        push    hl
        ld      hl,(GRPCGP)
        ld      de,256*24-256
        add     hl,de
        ex      de,hl
        pop     hl
        rst     DCOMPR
        jr      c,A1735
        ld      a,l
        inc     a
        and     007H
        jr      nz,A1735
        jr      A1759

;       Subroutine      DOWNC
;       Inputs          ________________________
;       Outputs         ________________________

A172A:  push    hl
        push    de
        ld      hl,(CLOC)
        call    A15D9
        jp      nz,A17DC
A1735:  inc     hl
        ld      a,l
        ld      de,248
        jr      A176D

;       Subroutine      TUPC
;       Inputs          ________________________
;       Outputs         ________________________

A173C:  push    hl
        push    de
        ld      hl,(CLOC)
        call    A15D9
        jp      nz,A17E3
        push    hl
        ld      hl,(GRPCGP)
        ld      de,256
        add     hl,de
        ex      de,hl
        pop     hl
        rst     DCOMPR
        jr      nc,A1768
        ld      a,l
        and     007H
        jr      nz,A1768
A1759:  pop     de
A175A:  scf
        pop     hl
        ret

;       Subroutine      UPC
;       Inputs          ________________________
;       Outputs         ________________________

A175D:  push    hl
        push    de
        ld      hl,(CLOC)
        call    A15D9
        jp      nz,A17F8
A1768:  ld      a,l
        dec     hl
        ld      de,-248
A176D:  and     007H
        jr      nz,A1772
        add     hl,de
A1772:  ld      (CLOC),hl
        and     a
        pop     de
        pop     hl
        ret
;
A1779:  call    A1639                   ; FETCHC
        and     a
        ld      a,00FH
        jp      m,A17C0
        ld      a,l
        and     0F8H
        cp      0F8H
        jr      nz,A1794
        jr      A175A
;
A178B:  call    A1639                   ; FETCHC
        and     a
        ld      a,00FH
        jp      m,A17C0
A1794:  push    de
        ld      de,8
        ld      a,0F0H
        jr      A17BB
;
A179C:  call    A1639                   ; FETCHC
        and     a
        ld      a,0F0H
        jp      p,A17C0
        ld      a,l
        and     0F8H
        jr      nz,A17B5
        jr      A175A
;
A17AC:  call    A1639                   ; FETCHC
        and     a
        ld      a,0F0H
        jp      p,A17C0
A17B5:  push    de
        ld      de,-8
        ld      a,00FH
A17BB:  add     hl,de
        ld      (CLOC),hl
        pop     de
A17C0:  ld      (CMASK),a
        and     a
        pop     hl
        ret
;
A17C6:  push    hl
        ld      hl,(MLTCGP)
        ld      de,64*24-256
        add     hl,de
        pop     hl
        rst     DCOMPR
        jr      c,A17DC
        ld      a,l
        inc     a
        and     007H
        jr      nz,A17DC
        scf
        pop     de
        pop     hl
        ret
;
A17DC:  inc     hl
        ld      a,l
        ld      de,248
        jr      A17FD
;
A17E3:  push    hl
        ld      hl,(MLTCGP)
        ld      de,256
        add     hl,de
        pop     hl
        rst     DCOMPR
        jr      nc,A17F8
        ld      a,l
        and     007H
        jr      nz,A17F8
        scf
        pop     de
        pop     hl
        ret
;
A17F8:  ld      a,l
        dec     hl
        ld      de,-248
A17FD:  and     007H
        jr      nz,A1802
        add     hl,de
A1802:  ld      (CLOC),hl
        and     a
        pop     de
        pop     hl
        ret

;       Subroutine      NSETCX
;       Inputs          ________________________
;       Outputs         ________________________

A1809:  call    A15D9
        jp      nz,A18BB
        push    hl
        call    A1639                   ; FETCHC
        ex      (sp),hl
        add     a,a
        jr      c,A182F
        push    af
        ld      bc,-1
        rrca
A181C:  add     hl,bc
        jr      nc,A1864
        rrca
        jr      nc,A181C
        pop     af
        dec     a
        ex      (sp),hl
        push    hl
        call    A186C
        pop     hl
        ld      de,8
        add     hl,de
        ex      (sp),hl
A182F:  ld      a,l
        and     007H
        ld      c,a
        ld      a,h
        rrca
        ld      a,l
        rra
        rrca
        rrca
        and     03FH
        pop     hl
        ld      b,a
        jr      z,A1853
A183F:  xor     a
        call    A07CD                   ; WRTVRM
        ld      de,02000H
        add     hl,de
        ld      a,(ATRBYT)
        call    A07CD                   ; WRTVRM
        ld      de,02008H
        add     hl,de
        djnz    A183F
A1853:  dec     c
        ret     m
        push    hl
        ld      hl,T185D
        add     hl,bc
        ld      a,(hl)
        jr      A186B
;
T185D:  defb    10000000b
        defb    11000000b
        defb    11100000b
        defb    11110000b
        defb    11111000b
        defb    11111100b
        defb    11111110b

A1864:  add     a,a
        dec     a
        cpl
        ld      b,a
        pop     af
        dec     a
        and     b
A186B:  pop     hl
A186C:  ld      b,a
        call    A07D7                   ; RDVRM
        ld      c,a
        ld      de,02000H
        add     hl,de
        call    A07D7                   ; RDVRM
        push    af
        and     00FH
        ld      e,a
        pop     af
        sub     e
        ld      d,a
        ld      a,(ATRBYT)
        cp      e
        jr      z,A189E
        add     a,a
        add     a,a
        add     a,a
        add     a,a
        cp      d
        jr      z,A18A2
        push    af
        ld      a,b
        or      c
        cp      0FFH
        jr      z,A18AA
        push    hl
        push    de
        call    A18A2
        pop     de
        pop     hl
        pop     af
        or      e
        jr      A18B8
;
A189E:  ld      a,b
        cpl
        and     c
        defb    011H
A18A2:  ld      a,b
        or      c
A18A4:  ld      de,02000H
        add     hl,de
        jr      A18B8
;
A18AA:  pop     af
        ld      a,b
        cpl
        push    hl
        push    de
        call    A18A4
        pop     de
        pop     hl
        ld      a,(ATRBYT)
        or      d
A18B8:  jp      A07CD                   ; WRTVRM
;
A18BB:  push    hl
        call    A167E                   ; SETC
        call    A16C5                   ; RIGHTC
        pop     hl
        dec     l
        jr      nz,A18BB
        ret

;       Subroutine      GTASPC
;       Inputs          ________________________
;       Outputs         ________________________

A18C7:  ld      hl,(ASPCT1)
        ex      de,hl
        ld      hl,(ASPCT2)
        ret

;       Subroutine      PNTINI
;       Inputs          ________________________
;       Outputs         ________________________

A18CF:  push    af
        call    A15D9
        jr      z,A18DB
        pop     af
        cp      010H
        ccf
        jr      A18E0
;
A18DB:  pop     af
        ld      a,(ATRBYT)
        and     a
A18E0:  ld      (BRDATR),a
        ret

;       Subroutine      SCANR
;       Inputs          ________________________
;       Outputs         ________________________

A18E4:  ld      hl,0
        ld      c,l
        call    A15D9                   ; grafic mode ?
        jr      nz,A1951                ; nop
        ld      a,b
        ld      (FILNAM+0),a
        xor     a
        ld      (FILNAM+3),a
        ld      a,(BRDATR)
        ld      b,a
A18F9:  call    A1647                   ; READC (get color of pixel)
        cp      b                       ; is border color ?
        jr      nz,A190C                ; nop,
        dec     de
        ld      a,d
        or      e                       ; skipped all ?
        ret     z                       ; yep, quit
        call    A16AC                   ; move right
        jr      nc,A18F9                ; not out of screen, cont
        ld      de,0
        ret
;
A190C:  call    A19AE
        push    de
        call    A1639                   ; FETCHC (get pixel adres & mask)
        ld      (CSAVEA),hl
        ld      (CSAVEM),a              ; save it
        ld      de,0
A191C:  inc     de
        call    A16AC                   ; move right
        jr      c,A192D                 ; out of screen,
        call    A1647                   ; READC (get pixel color)
        cp      b                       ; is border color ?
        jr      z,A192D                 ; yep,
        call    A19AE
        jr      A191C
;
A192D:  push    de
        call    A1639                   ; FETCHC (get pixel adres & mask)
        push    hl
        push    af                      ; save
        ld      hl,(CSAVEA)
        ld      a,(CSAVEM)
        call    A1640                   ; STOREC (set pixel adres & mask)
        ex      de,hl
        ld      (FILNAM+1),hl
        ld      a,(FILNAM+0)
        and     a
        call    nz,A1809                ; NSETCX
        pop     af
        pop     hl
        call    A1640                   ; STOREC
        pop     hl
        pop     de
        jp      A19A9
;
A1951:  call    A19C7
        jr      nc,A1963
        dec     de
        ld      a,d
        or      e
        ret     z
        call    A16AC
        jr      nc,A1951
        ld      de,0
        ret
;
A1963:  call    A1639                   ; FETCHC
        ld      (CSAVEA),hl
        ld      (CSAVEM),a
        ld      hl,0
A196F:  inc     hl
        call    A16AC
        ret     c
        call    A19C7
        jr      nc,A196F
        ret

;       Subroutine      SCANL
;       Inputs          ________________________
;       Outputs         ________________________

A197A:  ld      hl,0
        ld      c,l
        call    A15D9
        jr      nz,A19BA
        xor     a
        ld      (FILNAM+3),a
        ld      a,(BRDATR)
        ld      b,a
A198B:  call    A16D8
        jr      c,A199F
        call    A1647                   ; READC
        cp      b
        jr      z,A199C
        call    A19AE
        inc     hl
        jr      A198B
;
A199C:  call    A16C5                   ; RIGHTC
A199F:  push    hl
        ld      de,(FILNAM+1)
        add     hl,de
        call    A1809                   ; NSETCX
        pop     hl
A19A9:  ld      a,(FILNAM+3)
        ld      c,a
        ret
;
A19AE:  push    hl
        ld      hl,ATRBYT
        cp      (hl)
        pop     hl
        ret     z
        inc     a
        ld      (FILNAM+3),a
        ret
;
A19BA:  call    A16D8
        ret     c
        call    A19C7
        jp      c,A16C5                 ; RIGHTC
        inc     hl
        jr      A19BA
;
A19C7:  call    A1647                   ; READC
        ld      b,a
        ld      a,(BRDATR)
        sub     b
        scf
        ret     z
        ld      a,(ATRBYT)
        cp      b
        ret     z
        call    A167E                   ; SETC
        ld      c,1
        and     a
        ret

;       Subroutine      TAPOOF
;       Inputs          ________________________
;       Outputs         ________________________

A19DD:  push    bc
        push    af
        ld      bc,0
A19E2:  dec     bc
        ld      a,b
        or      c
        jr      nz,A19E2                ; wait 550 msec
        pop     af
        pop     bc                      ; cassettemotor off

;       Subroutine      TAPIOF
;       Inputs          ________________________
;       Outputs         ________________________

A19E9:  push    af
        ld      a,009H
        out     (0ABH),a
        pop     af
        ei
        ret

;       Subroutine      TAPOON
;       Inputs          ________________________
;       Outputs         ________________________

A19F1:  or      a
        push    af                      ; flag for headerlength
        ld      a,008H
        out     (0ABH),a                ; cassettemotor on
        ld      hl,0
A19FA:  dec     hl
        ld      a,h
        or      l
        jr      nz,A19FA                ; wait 550 msec
        pop     af
        ld      a,(HEADER)              ; headerlength
        jr      z,A1A07                 ; short header
        add     a,a
        add     a,a                     ; *4 for long header
A1A07:  ld      b,a
        ld      c,0                     ; *256 = # of cycli
        di
A1A0B:  call    A1A4D                   ; high cycle
        call    A1A3F                   ; wait
        dec     bc
        ld      a,b
        or      c
        jr      nz,A1A0B                ; next cyclus
        jp      A046F                   ; quit with BREAKX

;       Subroutine      TAPOUT
;       Inputs          ________________________
;       Outputs         ________________________

A1A19:  ld      hl,(LOW.)               ; size of low cycle
        push    af
        ld      a,l
        sub     00EH
        ld      l,a                     ; 14 units shorter
        call    A1A50                   ; low cycle (start bit)
        pop     af
        ld      b,8                     ; 8 bits data
A1A27:  rrca
        call    c,A1A40                 ; 1, write mark
        call    nc,A1A39                ; 0, write space
        djnz    A1A27                   ; next bit
        call    A1A40
        call    A1A40                   ; write 2 marks (stopbits)
        jp      A046F                   ; quit with BREAKX
;
A1A39:  ld      hl,(LOW.)               ; low cycle size
        call    A1A50                   ; write low cycle
A1A3F:  ret
;
A1A40:  call    A1A4D                   ; write high cycle
        ex      (sp),hl
        ex      (sp),hl
        nop
        nop
        nop
        nop                             ; wait
        call    A1A4D                   ; write high cycle
        ret
;
A1A4D:  ld      hl,(HIGH.)              ; length of high cycle
A1A50:  push    af
A1A51:  dec     l
        jp      nz,A1A51                ; wait low part
        ld      a,00BH
        out     (0ABH),a                ; high
A1A59:  dec     h
        jp      nz,A1A59                ; wait high part
        ld      a,00AH
        out     (0ABH),a                ; low
        pop     af
        ret

;       Subroutine      TAPION
;       Inputs          ________________________
;       Outputs         ________________________

A1A63:  ld      a,008H
        out     (0ABH),a                ; cassettemotor on
        di
        ld      a,00EH
        out     (0A0H),a                ; select register 14 of PSG
A1A6C:  ld      hl,1111
A1A6F:  ld      d,c
        call    A1B34                   ; count length of cycle
        ret     c                       ; break, quit
        ld      a,c
        cp      222
        jr      nc,A1A6C                ; illegal, start again
        cp      4+1
        jr      c,A1A6C                 ; illegal, start again
        sub     d                       ; compare with previous cycle
        jr      nc,A1A82
        cpl
        inc     a
A1A82:  cp      4                       ; difer less then 35 �sec ?
        jr      nc,A1A6C                ; nop, start again
        dec     hl
        ld      a,h
        or      l                       ; all 1111 cycles tollerant ?
        jr      nz,A1A6F                ; nop, cont
        ld      hl,0
        ld      b,l
        ld      d,l                     ; 256
A1A90:  call    A1B34                   ; count length of cycle
        ret     c                       ; break, quit
        add     hl,bc                   ; add to total
        dec     d
        jp      nz,A1A90                ; next cycle
        ld      bc,1710
        add     hl,bc                   ; add extra for calc
        ld      a,h
        rra
        and     07FH
        ld      d,a                     ; /2
        add     hl,hl                   ; *2
        ld      a,h
        sub     d                       ; = 1.5*
        ld      d,a
        sub     6                       ; - extra
        ld      (LOWLIM),a              ; min. size of startbit
        ld      a,d
        add     a,a
        ld      b,0
A1AAF:  sub     3
        inc     b
        jr      nc,A1AAF
        ld      a,b
        sub     3
        ld      (WINWID),a
        or      a
        ret

;       Subroutine      TAPIN
;       Inputs          ________________________
;       Outputs         ________________________

A1ABC:  ld      a,(LOWLIM)
        ld      d,a                     ; min. size of startbit
A1AC0:  call    A046F                   ; BREAKX
        ret     c                       ; break, quit
        in      a,(0A2H)
        rlca
        jr      nc,A1AC0                ; wait for high
A1AC9:  call    A046F                   ; BREAKX
        ret     c                       ; break, quit
        in      a,(0A2H)
        rlca
        jr      c,A1AC9                 ; wait for low
        ld      e,0
        call    A1B1F                   ; count length of cycle
A1AD7:  ld      b,c
        call    A1B1F                   ; count length of cycle
        ret     c                       ; break, quit
        ld      a,b
        add     a,c                     ; size of two cycles
        jp      c,A1AD7                 ; illegal, try again
        cp      d                       ; > as LOWLIM ?
        jr      c,A1AD7                 ; nop, try again
        ld      l,8                     ; 8 bits
A1AE6:  call    A1B03                   ; count transitions
        cp      4
        ccf
        ret     c                       ; illegal, quit
        cp      2
        ccf                             ; databit
        rr      d
        ld      a,c
        rrca                            ; even transitions ?
        call    nc,A1B23                ; yep, skip 1 transitions
        call    A1B1F                   ; skip 1 transitions
        dec     l
        jp      nz,A1AE6                ; next bit
        call    A046F                   ; BREAKX
        ld      a,d
        ret
;
A1B03:  ld      a,(WINWID)
        ld      b,a
        ld      c,0
A1B09:  in      a,(0A2H)
        xor     e
        jp      p,A1B17
        ld      a,e
        cpl
        ld      e,a
        inc     c
        djnz    A1B09
        ld      a,c
        ret
;
A1B17:  nop
        nop
        nop
        nop
A1B1B:  djnz    A1B09
        ld      a,c
        ret
;
A1B1F:  call    A046F                   ; BREAKX
        ret     c
A1B23:  ld      c,0
A1B25:  inc     c
        jr      z,A1B32
        in      a,(0A2H)
        xor     e
        jp      p,A1B25
        ld      a,e
        cpl
        ld      e,a
        ret
;
A1B32:  dec     c
        ret
;
A1B34:  call    A046F                   ; BREAKX
        ret     c                       ; break, quit
        in      a,(0A2H)
        rlca
        jr      c,A1B34                 ; wait until casinput = 0
        ld      e,0
        call    A1B23                   ; count to high input
        jp      A1B25                   ; add count to low input

;       Subroutine      OUTDO
;       Inputs          ________________________
;       Outputs         ________________________

A1B45:  push    af
        call    H.OUTD
        call    A145F                   ; ISFLIO (is file output ?)
        jr      z,A1B56                 ; nop,
        pop     af
        ld      ix,M6C48                ; seq. output
        jp      A01FF                   ; CALBAS
;
A1B56:  ld      a,(PRTFLG)
        or      a                       ; output to printer ?
        jr      z,A1BBB                 ; nope, output to screen
        ld      a,(RAWPRT)
        and     a                       ; data raw to printer ?
        jr      nz,A1BAB                ; yep, to printer
        pop     af

;       Subroutine      OUTDLP
;       Inputs          ________________________
;       Outputs         ________________________

A1B63:  push    af
        cp      009H                    ; tab ?
        jr      nz,A1B76                ; nop
A1B68:  ld      a,020H
        call    A1B63                   ; OUTDLP
        ld      a,(LPTPOS)
        and     007H
        jr      nz,A1B68                ; print spaces
        pop     af
        ret
;
A1B76:  sub     00DH
        jr      z,A1B84                 ; cr, LPTPOS = 0
        jr      c,A1B87
        cp      013H
        jr      c,A1B87                 ; control char, don't increase
        ld      a,(LPTPOS)
        inc     a                       ; increase LPTPOS
A1B84:  ld      (LPTPOS),a
A1B87:  ld      a,(NTMSXP)
        and     a                       ; MSX printer ?
        jr      z,A1BAB                 ; yep, to printer
        pop     af
        call    A089D                   ; CNVCHR (is grafic header ?)
        ret     nc                      ; header, quit
        jr      nz,J1BB7                ; grafic char, print space

; *************************************
; *************************************

        IF      KEYTYP EQ 0

        AND     A
        JP      P,J1BAC                 ; plain ascii, print
        CP      86H
        JR      C,J1BB7                 ; 80H-85H, print space
        CP      0A0H                    ; 86H-9FH ?
        JR      NC,J1BA4                ; nope,
        ADD     A,20H
        JR      J1BAC                   ; adjust to A6H-BFH and print

J1BA4:  CP      0E0H                    ; E0H-FFH ?
        JR      C,J1BAC                 ; nope, print
        SUB     20H                     ; adjust to C0H-DFH
        DEFB    038H                    ; JR C,xx a trick to skip the next line (because Cx is always reset at this point)

        ELSE

        JR      J1BAC

        ENDIF

; *************************************
; *************************************

        ORG     01BABH

A1BAB:  pop     af
J1BAC:  call    A085D                   ; LPTOUT
        ret     nc                      ; no break, quit
        ld      ix,M73B2                ; Device I/O error
        jp      A01FF                   ; CALBAS
;
J1BB7:  ld      a,020H
        jr      J1BAC
;
A1BBB:  pop     af
        jp      A08BC                   ; CHPUT

T1BBF:  


        IF      CNTRY EQ 9
 
        INCLUDE CHRKOR
 
        ENDIF
 
 
        IF      CNTRY EQ 0
 
        INCLUDE CHRJAPV2
 
        ENDIF
 
 
        IF      CNTRY EQ 10
 
        INCLUDE CHRRUS
 
        ENDIF
 
 
        IF      CNTRY EQ 5
 
        INCLUDE CHRGER
 
        ENDIF
 
 
        IF      (CNTRY NE 9) AND (CNTRY NE 0) AND (CNTRY NE 10) AND (CNTRY NE 5)
 
        INCLUDE CHRINT
 
        ENDIF

;       Subroutine      PINLIN
;       Inputs          ________________________
;       Outputs         ________________________

A23BF:  call    H.PINL
        ld      a,(AUTFLG)
        and     a
        jr      nz,A23D5
        ld      l,0
        jr      A23E0

;       Subroutine      QINLIN
;       Inputs          ________________________
;       Outputs         ________________________

A23CC:  call    H.QINL
        ld      a,'?'
        rst     OUTDO
        ld      a,' '
        rst     OUTDO

;       Subroutine      INLIN
;       Inputs          ________________________
;       Outputs         ________________________

A23D5:  call    H.INLI
        ld      hl,(CSRY)
        dec     l
        call    nz,A0C29                ; no extend on next line
        inc     l
A23E0:  ld      (FSTPOS),hl
        xor     a
        ld      (INTFLG),a
A23E7:  call    A10CB                   ; CHGET
        ld      hl,T2439-2
        ld      c,00BH
        call    A0919
        push    af
        call    nz,A23FF
        pop     af
        jr      nc,A23E7
        ld      hl,BUFMIN
        ret     z
        ccf
A23FE:  ret
;
A23FF:  push    af
        cp      009H
        jr      nz,A2413
        pop     af
A2405:  ld      a,020H
        call    A23FF
        ld      a,(CSRX)
        dec     a
        and     007H
        jr      nz,A2405
        ret
;
A2413:  pop     af
        ld      hl,INSFLG
        cp      001H
        jr      z,A2426
        cp      020H
        jr      c,A2428
        push    af
        ld      a,(hl)
        and     a
        call    nz,A24F2
        pop     af
A2426:  rst     OUTDO
        ret
;
A2428:  ld      (hl),0
        rst     OUTDO
        defb    03EH                    ; LD A,xx: a trick to skip the next line
A242C:  defb    03EH                    ; LD A,xx: a trick to skip the next line
A242D:  xor     a
        push    af
        call    A0A2E                   ; cursor off
        pop     af
        ld      (CSTYLE),a
        jp      A09E1                   ; cursor on
;
T2439:  defb    008H
        defw    A2561
        defb    012H
        defw    A24E5
        defb    01BH
        defw    A23FE
        defb    002H
        defw    A260E
        defb    006H
        defw    A25F8
        defb    00EH
        defw    A25D7
        defb    005H
        defw    A25B9
        defb    003H
        defw    A24C5
        defb    00DH
        defw    A245A
        defb    015H
        defw    A25AE
        defb    07FH
        defw    A2550

A245A:  call    A266C
        ld      a,(AUTFLG)
        and     a
        jr      z,A2465
        ld      h,1
A2465:  push    hl
        call    A0A2E                   ; cursor off
        pop     hl
        ld      de,BUF
        ld      b,254
        dec     l
A2470:  inc     l
A2471:  push    de
        push    bc
        call    A0BD8                   ; read char from VRAM
        pop     bc
        pop     de
        and     a
        jr      z,A248F
        cp      020H
        jr      nc,A248A
        dec     b
        jr      z,A249F
        ld      c,a
        ld      a,1
        ld      (de),a
        inc     de
        ld      a,c
        add     a,040H
A248A:  ld      (de),a
        inc     de
        dec     b
        jr      z,A249F
A248F:  inc     h
        ld      a,(LINLEN)
        cp      h
        jr      nc,A2471
        push    de
        call    A0C1D                   ; extend at next line ?
        pop     de
        ld      h,1
        jr      z,A2470
A249F:  dec     de
        ld      a,(de)
        cp      020H
        jr      z,A249F
        push    hl
        push    de
        call    A09E1                   ; cursor on
        pop     de
        pop     hl
        inc     de
        xor     a
        ld      (de),a
A24AF:  ld      a,00DH
        and     a
A24B2:  push    af
        call    A0C29                   ; no extend on next line
        call    A088E                   ; POSIT
        ld      a,00AH
        rst     OUTDO
        xor     a
        ld      (INSFLG),a
        pop     af
        scf
        pop     hl
        ret
;
A24C4:  inc     l
A24C5:  call    A0C1D                   ; extends in next line ?
        jr      z,A24C4
        call    A242D
        xor     a
        ld      (BUF),a
        ld      h,1
        push    hl
        call    A04BD                   ; GICINI
        call    A0454
        pop     hl
        jr      c,A24AF
        ld      a,(BASROM)
        and     a
        jr      nz,A24AF
        jr      A24B2

A24E5:  ld      hl,INSFLG
        ld      a,(hl)
        xor     0FFH
        ld      (hl),a
        jp      z,A242D
        jp      A242C
;
A24F2:  call    A0A2E                   ; cursor off
        ld      hl,(CSRY)
        ld      c,020H
A24FA:  push    hl
A24FB:  push    bc
        call    A0BD8                   ; read char from VRAM
        pop     de
        push    bc
        ld      c,e
        call    A0BE6                   ; calc VRAM adres
        pop     bc
        ld      a,(LINLEN)
        inc     h
        cp      h
        ld      a,d
        jr      nc,A24FB
        pop     hl
        call    A0C1D                   ; extend in next line ?
        jr      z,A254B
        ld      a,c
        cp      020H
        push    af
        jr      nz,A2524
        ld      a,(LINLEN)
        cp      h
        jr      z,A2524
        pop     af
        jp      A09E1                   ; cursor on
;
A2524:  call    A0C2A                   ; extend on next line
        inc     l
        push    bc
        push    hl
        call    A0C32                   ; get max. linenumber
        cp      l
        jr      c,A2535
        call    A0AB7
        jr      A2544
;
A2535:  ld      hl,CSRY
        dec     (hl)
        jr      nz,A253C
        inc     (hl)
A253C:  ld      l,1
        call    A0A88
        pop     hl
        dec     l
        push    hl
A2544:  pop     hl
        pop     bc
        pop     af
        jp      z,A09E1                 ; cursor on
        dec     l
A254B:  inc     l
        ld      h,1
        jr      A24FA

A2550:  ld      a,(LINLEN)
        cp      h
        jr      nz,A255B
        call    A0C1D                   ; extend in next line ?
        jr      nz,A2595
A255B:  ld      a,01CH
        rst     OUTDO
        ld      hl,(CSRY)
A2561:  push    hl
        call    A0A2E                   ; cursor off
        pop     hl
        dec     h
        jp      nz,A257A
        inc     h
        push    hl
        dec     l
        jr      z,A2579
        ld      a,(LINLEN)
        ld      h,a
        call    A0C1D                   ; extend on next line ?
        jr      nz,A2579
        ex      (sp),hl
A2579:  pop     hl
A257A:  ld      (CSRY),hl
A257D:  ld      a,(LINLEN)
        cp      h
        jr      z,A2595
        inc     h
A2584:  call    A0BD8                   ; read char from VRAM
        dec     h
        call    A0BE6                   ; calc VRAM adres
        inc     h
        inc     h
        ld      a,(LINLEN)
        inc     a
        cp      h
        jr      nz,A2584
        dec     h
A2595:  ld      c,020H
        call    A0BE6                   ; calc VRAM adres
        call    A0C1D                   ; extend on next line ?
        jp      nz,A09E1                ; cursor on
        push    hl
        inc     l
        ld      h,1
        call    A0BD8                   ; read char from VRAM
        ex      (sp),hl
        call    A0BE6                   ; calc VRAM adres
        pop     hl
        jr      A257D

A25AE:  call    A0A2E                   ; cursor off
        call    A266C
        ld      (CSRY),hl
        jr      A25BE

A25B9:  push    hl
        call    A0A2E                   ; cursor off
        pop     hl
A25BE:  call    A0C1D                   ; extend on next line ?
        push    af
        call    A0AEE                   ; clear to end of line
        pop     af
        jr      nz,A25CD
        ld      h,1
        inc     l
        jr      A25BE
;
A25CD:  call    A09E1                   ; cursor on
        xor     a
        ld      (INSFLG),a
        jp      A242D

A25D7:  call    A0A2E                   ; cursor off
        ld      hl,(CSRY)
        dec     l
A25DE:  inc     l
        call    A0C1D                   ; extend on next line ?
        jr      z,A25DE
        ld      a,(LINLEN)
        ld      h,a
        inc     h
A25E9:  dec     h
        jr      z,A25F3
        call    A0BD8                   ; read char from VRAM
        cp      020H
        jr      z,A25E9
A25F3:  call    A0A5B                   ; cursor right
        jr      A25CD

A25F8:  call    A0A2E                   ; cursor off
        call    A2634
A25FE:  call    A2624
        jr      z,A25CD
        jr      c,A25FE
A2605:  call    A2624
        jr      z,A25CD
        jr      nc,A2605
        jr      A25CD

A260E:  call    A0A2E                   ; cursor off
A2611:  call    A2634
        jr      z,A25CD
        jr      nc,A2611
A2618:  call    A2634
        jr      z,A25CD
        jr      c,A2618
        call    A0A5B                   ; cursor right
        jr      A25CD
;
A2624:  ld      hl,(CSRY)
        call    A0A5B                   ; cursor right
        call    A0C32                   ; get max. linenumber
        ld      e,a
        ld      a,(LINLEN)
        ld      d,a
        jr      A263D
;
A2634:  ld      hl,(CSRY)
        call    A0A4C                   ; cursor left with warp
        ld      de,1*256+1
A263D:  ld      hl,(CSRY)
        rst     DCOMPR
        ret     z
        ld      de,A2668
        push    de
        call    A0BD8                   ; read char from VRAM
        cp      "0"
        ccf
        ret     nc
        cp      "9"+1
        ret     c
        cp      "A"
        ccf
        ret     nc
        cp      "Z"+1
        ret     c
        cp      "a"
        ccf
        ret     nc
        cp      "z"+1
        ret     c
        cp      086H
        ccf
        ret     nc
        cp      0A0H
        ret     c
        cp      0A6H
        ccf
A2668:  ld      a,0
        inc     a
        ret

;       Subroutine      __________________________
;       Inputs          ________________________
;       Outputs         ________________________

A266C:  dec     l
        jr      z,A2674
        call    A0C1D                   ; extend on next line ?
        jr      z,A266C
A2674:  inc     l
        ld      a,(FSTPOS)
        cp      l
        ld      h,1
        ret     nz
        ld      hl,(FSTPOS)
        ret


; Some sort of jumptable for routines in basicrom


; entrypoint for 2nd part of the init routine

A2680:  jp      M7C76

; entrypoint for SYNCHR

A2683:  jp      M558C

; entrypoint for CHRGTR

A2686:  jp      M4666

; entrypoint for GETYPR

A2689:  jp      M5597

        end
