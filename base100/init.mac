; INIT.MAC

; BASIC INIT, MSX 1 version (version 1.0)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        ORG     07C76H

        INCLUDE MSX.INC


CGTABL          EQU     0004H
SYNCHR          EQU     0008H
RDSLT           EQU     000CH
CHRGTR          EQU     0010H
OUTDO           EQU     0018H
CALSLT          EQU     001CH
DCOMPR          EQU     0020H
ENASLT          EQU     0024H
GETYPR          EQU     0028H
INITIO          EQU     003BH
INIFNK          EQU     003EH
WRTVDP          EQU     0047H
WRTVRM          EQU     004DH
RDVRM           EQU     004AH
FILVRM          EQU     0056H
LDIRMV          EQU     0059H
LDIRVM          EQU     005CH
CHGMOD          EQU     005FH
CHGCLR          EQU     0062H
CLRSPR          EQU     0069H
INITXT          EQU     006CH
INIT32          EQU     006FH
SETTXT          EQU     0078H
SETGRP          EQU     007EH
SETMLT          EQU     0081H
CALPAT          EQU     0084H
CALATR          EQU     0087H
GSPSIZ          EQU     008AH
GRPPRT          EQU     008DH
GICINI          EQU     0090H
WRTPSG          EQU     0093H
STRTMS          EQU     0099H
CHSNS           EQU     009CH
CHGET           EQU     009FH
CHPUT           EQU     00A2H
LPTOUT          EQU     00A5H
CNVCHR          EQU     00ABH
PINLIN          EQU     00AEH
INLIN           EQU     00B1H
QINLIN          EQU     00B4H
ISCNTC          EQU     00BAH
CKCNTC          EQU     00BDH
BEEP            EQU     00C0H
CLS             EQU     00C3H
POSIT           EQU     00C6H
FNKSB           EQU     00C9H
ERAFNK          EQU     00CCH
DSPFNK          EQU     00CFH
TOTEXT          EQU     00D2H
GTSTCK          EQU     00D5H
GTTRIG          EQU     00D8H
GTPAD           EQU     00DBH
GTPDL           EQU     00DEH
TAPION          equ     00E1H
TAPIN           equ     00E4H
TAPIOF          equ     00E7H
TAPOON          equ     00EAH
TAPOUT          equ     00EDH
TAPOOF          equ     00F0H
STMOTR          equ     00F3H
LFTQ            EQU     00F6H
PUTQ            EQU     00F9H
LEFTC           EQU     00FFH
TUPC            EQU     0105H
DOWNC           EQU     0108H
TDOWNC          EQU     010BH
SCALXY          EQU     010EH
MAPXYC          EQU     0111H
FETCHC          EQU     0114H
STOREC          EQU     0117H
SETATR          EQU     011AH
READC           EQU     011DH
SETC            EQU     0120H
NSETCX          EQU     0123H
GTASPC          EQU     0126H
PNTINI          EQU     0129H
SCANR           EQU     012CH
SCANL           EQU     012FH
ISFLIO          EQU     014AH
OUTDLP          EQU     014DH
GETVCP          EQU     0150H
GETVC2          EQU     0153H

VARWRK          EQU     0F380H
LOW.            EQU     0F406h
ERRFLG          EQU     0F414H
LPTPOS          EQU     0F415H
PRTFLG          EQU     0F416H
NTMSXP          EQU     0F417H
VLZADR          EQU     0F419H
VLZDAT          EQU     0F41BH
CURLIN          EQU     0F41CH
KBFMIN          EQU     0F41EH
KBUF            EQU     0F41FH
BUFMIN          EQU     0F55DH
BUF             EQU     0F55EH
ENDBUF          EQU     0F660H
TTYPOS          EQU     0F661H
DIMFLG          EQU     0F662H
VALTYP          EQU     0F663H
DORES           EQU     0F664H
DONUM           EQU     0F665H
CONTXT          EQU     0F666H
CONSAV          EQU     0F668H
CONTYP          EQU     0F669H
CONLO           EQU     0F66AH
MEMSIZ          EQU     0F672H
STKTOP          EQU     0F674H
TXTTAB          EQU     0F676H
TEMPPT          EQU     0F678H
TEMPST          EQU     0F67AH
DSCTMP          EQU     0F698H
FRETOP          EQU     0F69BH
TEMP3           EQU     0F69DH
TEMP8           EQU     0F69FH
ENDFOR          EQU     0F6A1H
DATLIN          EQU     0F6A3H
SUBFLG          EQU     0F6A5H
FLGINP          EQU     0F6A6H
TEMP            EQU     0F6A7H
PTRFLG          EQU     0F6A9H
AUTFLG          EQU     0F6AAH
AUTLIN          EQU     0F6ABH
AUTINC          EQU     0F6ADH
SAVTXT          EQU     0F6AFH
SAVSTK          EQU     0F6B1H
ERRLIN          EQU     0F6B3H
DOT             EQU     0F6B5H
ERRTXT          EQU     0F6B7H
ONELIN          EQU     0F6B9H
ONEFLG          EQU     0F6BBH
TEMP2           EQU     0F6BCH
OLDLIN          EQU     0F6BEH
OLDTXT          EQU     0F6C0H
VARTAB          EQU     0F6C2H
ARYTAB          EQU     0F6C4H
STREND          EQU     0F6C6H
DATPTR          EQU     0F6C8H
DEFTBL          EQU     0F6CAH
PRMSTK          EQU     0F6E4H
PRMLEN          EQU     0F6E6H
PARM1           EQU     0F6E8H
PRMPRV          EQU     0F74CH
PRMLN2          EQU     0F74EH
PARM2           EQU     0F750H
PRMFLG          EQU     0F7B4H
ARYTA2          EQU     0F7B5H
NOFUNS          EQU     0F7B7H
TEMP9           EQU     0F7B8H
FUNACT          EQU     0F7BAH
SWPTMP          EQU     0F7BCH
TRCFLG          EQU     0F7C4H
DAC             EQU     0F7F6H
ARG             EQU     0F847H
MAXFIL          EQU     0F85FH
FILTAB          EQU     0F860H
NULBUF          EQU     0F862H
PTRFIL          EQU     0F864H
FILNAM          EQU     0F866H
FILNM2          EQU     0F871H
NLONLY          EQU     0F87CH
SAVEND          EQU     0F87DH
FNKSTR          EQU     0F87FH
CGPNT           EQU     0F91FH
MINDEL          EQU     0F92DH
MAXDEL          EQU     0F92FH
ASPECT          EQU     0F931H
CENCNT          EQU     0F933H
CLINEF          EQU     0F935H
CNPNTS          EQU     0F936H
CPLOTF          EQU     0F938H
CPCNT           EQU     0F939H
CPCNT8          EQU     0F93BH
CRCSUM          EQU     0F93DH
CSTCNT          EQU     0F93FH
CSCLXY          EQU     0F941H
CSAVEA          EQU     0F942H
CSAVEM          EQU     0F944H
CXOFF           EQU     0F945H
CYOFF           EQU     0F947H
LOHMSK          EQU     0F949H
LOHDIR          EQU     0F94AH
LOHADR          EQU     0F94BH
LOHCNT          EQU     0F94DH
SKPCNT          EQU     0F94FH
MOVCNT          EQU     0F951H
PDIREC          EQU     0F953H
LFPROG          EQU     0F954H
RTPROG          EQU     0F955H
MCLTAB          EQU     0F956H
MCLFLG          EQU     0F958H
QUETAB          EQU     0F959H
PRSCNT          EQU     0FB35H
SAVSP           EQU     0FB36H
VOICEN          EQU     0FB38H
SAVVOL          EQU     0FB39H
MCLLEN          EQU     0FB3BH
MCLPTR          EQU     0FB3CH
MUSICF          EQU     0FB3FH
PLYCNT          EQU     0FB40H
BASROM          EQU     0FBB1H
FNKFLG          EQU     0FBCEH
ONGSBF          EQU     0FBD8H
KEYBUF          EQU     0FBF0H
BOTTOM          EQU     0FC48H
HIMEM           EQU     0FC4AH
TRPTBL          EQU     0FC4CH
INTFLG          EQU     0FC9BH
JIFFY           EQU     0FC9EH
INTVAL          EQU     0FCA0H
INTCNT          EQU     0FCA2H
FLBMEM          EQU     0FCAEH
SCRMOD          EQU     0FCAFH
OLDSCR          EQU     0FCB0H
CASPRV          equ     0FCB1H
GXPOS           EQU     0FCB3H
GYPOS           EQU     0FCB5H
GRPACX          EQU     0FCB7H
GRPACY          EQU     0FCB9H
DRWFLG          EQU     0FCBBH
DRWSCL          EQU     0FCBCH
DRWANG          EQU     0FCBDH
RUNBNF          EQU     0FCBEH
SAVENT          EQU     0FCBFH
EXPTBL          EQU     0FCC1H
SLTTBL          EQU     0FCC5H
SLTATR          EQU     0FCC9H
SLTWRK          EQU     0FD09H
PROCNM          EQU     0FD89H
DEVICE          EQU     0FD99H

H.KEYI          EQU     0FD9AH
H.ONGO          EQU     0FDEAH
H.DSKO          EQU     0FDEFH
H.SETS          EQU     0FDF4H
H.NAME          EQU     0FDF9H
H.KILL          EQU     0FDFEH
H.IPL           EQU     0FE03H
H.COPY          EQU     0FE08H
H.CMD           EQU     0FE0DH
H.DSKF          EQU     0FE12H
H.DSKI          EQU     0FE17H
H.ATTR          EQU     0FE1CH
H.LSET          EQU     0FE21H
H.RSET          EQU     0FE26H
H.FIEL          EQU     0FE2BH
H.MKI$          EQU     0FE30H
H.MKS$          EQU     0FE35H
H.MKD$          EQU     0FE3AH
H.CVI           EQU     0FE3FH
H.CVS           EQU     0FE44H
H.CVD           EQU     0FE49H
H.GETP          EQU     0FE4EH
H.SETF          EQU     0FE53H
H.NOFO          EQU     0FE58H
H.NULO          EQU     0FE5DH
H.NTFL          EQU     0FE62H
H.MERG          EQU     0FE67H
H.SAVE          EQU     0FE6CH
H.BINS          EQU     0FE71H
H.BINL          EQU     0FE76H
H.FILE          EQU     0FE7BH
H.DGET          EQU     0FE80H
H.FILO          EQU     0FE85H
H.INDS          EQU     0FE8AH
H.RSLF          EQU     0FE8FH
H.SAVD          EQU     0FE94H
H.LOC           EQU     0FE99H
H.LOF           EQU     0FE9EH
H.EOF           EQU     0FEA3H
H.FPOS          EQU     0FEA8H
H.BAKU          EQU     0FEADH
H.PARD          EQU     0FEB2H
H.NODE          EQU     0FEB7H
H.POSD          EQU     0FEBCH
H.GEND          EQU     0FEC6H
H.RUNC          EQU     0FECBH
H.CLEA          EQU     0FED0H
H.LOPD          EQU     0FED5H
H.STKE          EQU     0FEDAH
H.CRDO          EQU     0FEE9H
H.DSKC          EQU     0FEEEH
H.DOGR          EQU     0FEF3H
H.PRGE          EQU     0FEF8H
H.ERRP          EQU     0FEFDH
H.ERRF          EQU     0FF02H
H.READ          EQU     0FF07H
H.MAIN          EQU     0FF0CH
H.DIRD          EQU     0FF11H
H.FINI          EQU     0FF16H
H.FINE          EQU     0FF1BH
H.CRUN          EQU     0FF20H
H.CRUS          EQU     0FF25H
H.ISRE          EQU     0FF2AH
H.NTFN          EQU     0FF2FH
H.NOTR          EQU     0FF34H
H.SNGF          EQU     0FF39H
H.NEWS          EQU     0FF3EH
H.GONE          EQU     0FF43H
H.CHRG          EQU     0FF48H
H.RETU          EQU     0FF4DH
H.PRTF          EQU     0FF52H
H.COMP          EQU     0FF57H
H.FINP          EQU     0FF5CH
H.TRMN          EQU     0FF61H
H.FRME          EQU     0FF66H
H.NTPL          EQU     0FF6BH
H.EVAL          EQU     0FF70H
H.OKNO          EQU     0FF75H
H.FING          EQU     0FF7AH
H.ISMI          EQU     0FF7FH
H.WIDT          EQU     0FF84H
H.LIST          EQU     0FF89H
H.BUFL          EQU     0FF8EH
H.FRQI          EQU     0FF93H
H.SCNE          EQU     0FF98H
H.FRET          EQU     0FF9DH
H.PTRG          EQU     0FFA2H
H.ERRO          EQU     0FFB1H
H.SCRE          EQU     0FFC0H
H.PLAY          EQU     0FFC5H
EXTBIO          EQU     0FFCAH
D.FFFF          EQU     0FFFFH


        PUBLIC  INIT
        PUBLIC  MAXS
        PUBLIC  ALCFIL
        PUBLIC  RDWEXP
        PUBLIC  ATRSLI
        PUBLIC  ATRSL2
        PUBLIC  CHKZDN

        EXTRN   SNERR
        EXTRN   FCERR
        EXTRN   GETBYT
        EXTRN   STROUT
        EXTRN   OMERR
        EXTRN   SCRTCH
        EXTRN   RUNC
        EXTRN   C62A7
        EXTRN   STKINI
        EXTRN   CLSALL
        EXTRN   NEWSTT
        EXTRN   READY
        EXTRN   LINPRT

; START SUBTTL	INIT

        SUBTTL	INIT

;       Subroutine      System initialization routine
;       Remark          RAM is invoked, EXPTBL and SLTTBL are initialized

INIT:
C7C76:  LD      SP,VARWRK-10            ; temporary stack
        LD      BC,00230H-1
        LD      DE,H.KEYI+1
        LD      HL,H.KEYI
        LD      (HL),0C9H
        LDIR                            ; initialize hooks
        LD      HL,VARWRK
        LD      (HIMEM),HL              ; highest BASIC RAM address
        CALL    C7D5D                   ; search lowest BASIC RAM address
        LD      (BOTTOM),HL             ; save in BOTTOM
        LD      BC,00090H
        LD      DE,VARWRK
        LD      HL,I7F27
        LDIR                            ; initialize some systemvariables
        CALL    INIFNK                  ; initialize functionkeys
        XOR     A
        LD      (ENDBUF),A              ; endmarker for BUF
        LD      (NLONLY),A              ; not loading basic program, close i/o channels when requested
        LD      A,","
        LD      (BUFMIN),A              ; dummy prefix for BUF
        LD      A,":"
        LD      (KBFMIN),A              ; dummy prefix for KBUF
        LD      HL,(CGTABL)
        LD      (CGPNT+1),HL            ; address charactergenerator (but what about the slotid in CGPNT+0 ??)
        LD      HL,PRMSTK
        LD      (PRMPRV),HL             ; initialize previous FN block pointer
        LD      (STKTOP),HL             ; Z80 stack temporary at PRMSTK
        LD      BC,200
        ADD     HL,BC
        LD      (MEMSIZ),HL             ; a fake string heap of 200 bytes
        LD      A,HIGH 0100H
        LD      (VARTAB+1),A            ; a fake simple variable start at 0100H
        CALL    ALCFIL                  ; allocate 1 i/o channel (also reinitialize STKTOP, MEMSIZ)
        CALL    STKINI                  ; initialize stack
        LD      HL,(BOTTOM)
        XOR     A
        LD      (HL),A                  ; end of BASIC line token before BASIC text
        INC     HL
        LD      (TXTTAB),HL             ; start of BASIC text
        CALL    SCRTCH                  ; clear BASIC program
        CALL    INITIO                  ; initialize I/O devices (PSG and LPT)
        call    INIT32                  ; screen 1
        call    CLRSPR                  ; clear sprites
        ld      hl,00A0BH
        ld      (CSRY),hl               ; cursor at 10,11
        ld      hl,T7ED8
        call    STROUT                  ; print MSX system
        ld      hl,00A0CH
        ld      (CSRY),hl               ; cursor at 10,12
        ld      hl,T7EE4
        call    STROUT                  ; print version 1.0
        ld      hl,0020EH
        ld      (CSRY),hl               ; cursor at 2,14
        ld      hl,T7EFD
        call    STROUT                  ; print copyright 1983 by Microsoft
        ld      b,006H
A7D0D:  dec     hl
        ld      a,l
        or      h
        jr      nz,A7D0D
        djnz    A7D0D                   ; wait 3 seconds
J7D14:  CALL    C7D75                   ; do extension ROMs

; Entrypoint used by diskrom
; used when H.STKE was hooked by a extension ROM. BASIC programs in extension ROMs are NOT executed

J7D17:  LD      HL,(BOTTOM)
        XOR     A
        LD      (HL),A                  ; end of BASIC line before BASIC text
        INC     HL
        LD      (TXTTAB),HL
        CALL    SCRTCH                  ; clear basic program
        CALL    C7D29                   ; display BASIC startscreen
        JP      READY                   ; ok and mainloop

;       Subroutine      display BASIC startscreen
;       Inputs          ________________________
;       Outputs         ________________________

C7D29:
        ld      a,0FFH
        ld      (CNSDFG),a              ; KEY ON
M7D2E:
        IF      CNTRY EQ 0

        call    INIT32
        
        ELSE

        call    INITXT                  ; text mode

        ENDIF

J7D31:  ld      hl,T7EF2
        call    STROUT
        ld      hl,T7EE4
        call    STROUT
        LD      HL,T7EFD                ; copyright message
        CALL    STROUT                  ; message to interpreter output
        LD      HL,(VARTAB)
        EX      DE,HL
        LD      HL,(STKTOP)
        LD      A,L
        SUB     E
        LD      L,A
        LD      A,H
        SBC     A,D
        LD      H,A
        LD      BC,-14
        ADD     HL,BC
        CALL    LINPRT                  ; number to interpreter output
        LD      HL,I7F1B
        JP      STROUT                  ; message to interpreter output

;       Subroutine      search for start of ram 0EFFFH - 08000H area (downwards)
;       Inputs          ________________________
;       Outputs         ________________________

C7D5D:  LD      HL,0EF00H
J7D60:  LD      A,(HL)
        CPL
        LD      (HL),A
        CP      (HL)
        CPL
        LD      (HL),A
        JR      NZ,J7D71                ; no RAM, quit search
        INC     L
        JR      NZ,J7D60
        LD      A,H
        DEC     A
        RET     P
        LD      H,A
        JR      J7D60

J7D71:  LD      L,0
        INC     H
        RET

;       Subroutine      do extension ROMs
;       Inputs          ________________________
;       Outputs         ________________________

C7D75:  DI
        LD      C,0                     ; primairy slot
        LD      DE,EXPTBL
        LD      HL,SLTATR
J7D7E:  LD      A,(DE)
        OR      C
        LD      C,A
        PUSH    DE
J7D82:  INC     HL
        PUSH    HL
        LD      HL,04000H
J7D87:  CALL    RDWEXP
        PUSH    HL
        LD      HL,04241H
        RST     DCOMPR
        POP     HL                      ; expansion ROM ?
        LD      B,0
        JR      NZ,J7DBE                ; nope, next slot
        CALL    RDWEXP                  ; read INIT entry
        PUSH    HL
        PUSH    BC
        PUSH    DE
        POP     IX
        LD      A,C
        PUSH    AF
        POP     IY
        CALL    NZ,CALSLT               ; if extension ROM has INIT, call INIT
        POP     BC
        POP     HL
        CALL    RDWEXP                  ; read STATEMENT entry
        ADD     A,0FFH
        RR      B
        CALL    RDWEXP                  ; read DEVICE entry
        ADD     A,0FFH
        RR      B
        CALL    RDWEXP                  ; read BAS entry
        ADD     A,0FFH
        RR      B
        LD      DE,-8
        ADD     HL,DE
J7DBE:  EX      (SP),HL
        LD      (HL),B                  ; adjust SLTATR
        INC     HL
        EX      (SP),HL
        LD      DE,04000H-2
        ADD     HL,DE                   ; next page
        LD      A,H
        CP      0C0H
        JR      C,J7D87                 ; we are doing only page 1 and 2
        POP     HL
        INC     HL
        LD      A,C
        AND     A
        LD      DE,000CH
        JP      P,J7DE0                 ; primary slot, next primary
        ADD     A,04H
        LD      C,A
        CP      90H
        JR      C,J7D82                 ; next secundair slot
        AND     03H
        LD      C,A
        DEFB    03EH                    ; LD A,xx, trick to skip next instruction
J7DE0:  ADD     HL,DE
        POP     DE
        INC     DE
        INC     C
        LD      A,C
        CP      04H
        JR      C,J7D7E                 ; next primary
        LD      HL,SLTATR
        LD      B,40H
J7DEE:  LD      A,(HL)
        ADD     A,A
        JR      C,J7DF6                 ; extension ROM has BAS entry, run it
        INC     HL
        DJNZ    J7DEE
        RET

;       Subroutine      start basic program in extension ROM
;       Inputs          ________________________
;       Outputs         ________________________

J7DF6:  CALL    ATRSL2                  ; translate SLTATR loopvar to address and slotid
        CALL    ENASLT                  ; enable slot on page 2
        LD      HL,(VARTAB)
        LD      DE,0C000H
        RST     DCOMPR
        JR      NC,J7E09                ; VARTAB is already in page 3, leave it alone
        EX      DE,HL
        LD      (VARTAB),HL             ; VARTAB = 0C000H (otherwise VARTAB would point into ROM)
J7E09:  LD      HL,(08000H+8)
        INC     HL
        LD      (TXTTAB),HL             ; start of basiccode
        LD      A,H
        LD      (BASROM),A              ; flag execution of basic program in ROM (cannot be aborted)

; Entrypoint used by diskrom to start extension ROM with basic program

C7E14:  CALL    RUNC                    ; initialize interpreter, basic pointer at start of program
        JP      NEWSTT                  ; execute new statement

;       Subroutine      read word from extension ROM
;       Inputs          HL = address, C = slotid
;       Outputs         DE = word, Zx set if word is zero

RDWEXP:
C7E1A:  CALL    C7E1E                   ; read byte from extension ROM
        LD      E,D
C7E1E:  LD      A,C
        PUSH    BC
        PUSH    DE
        CALL    RDSLT
        POP     DE
        POP     BC
        LD      D,A
        OR      E
        INC     HL
        RET

;       Subroutine      translate SLTATR loopvar to address and slotid
;       Inputs          ________________________
;       Outputs         ________________________

ATRSL2:
C7E2A:  LD      A,64
        SUB     B

;       Subroutine      translate SLTATR entrynumber to address and slotid
;       Inputs          ________________________
;       Outputs         ________________________

ATRSLI:
C7E2D:  LD      B,A
        LD      H,0
        RRA
        RR      H
        RRA
        RR      H                       ; highbyte address in page
        RRA
        RRA
        AND     03H                     ; primairy slot
        LD      C,A
        LD      A,B
        LD      B,0
        PUSH    HL
        LD      HL,EXPTBL
        ADD     HL,BC
        AND     0CH                     ; secundairy slot
        OR      C                       ; + primairy slot
        LD      C,A
        LD      A,(HL)
        POP     HL
        OR      C                       ; + slot expanded flag
        RET

;       Subroutine      MAX statement
;       Inputs          ________________________
;       Outputs         ________________________

MAXS:
C7E4B:  RST     SYNCHR
        DEFB    0B7H
        RST     SYNCHR
        DEFB    0EFH                    ; check for FILES=
        CALL    GETBYT                  ; evaluate byte operand
        JP      NZ,SNERR                ; not end of statement, syntax error
        CP      15+1                    ; number of i/o channels <16 ?
        JP      NC,FCERR                ; nope, illegal function call
        LD      (TEMP),HL               ; save BASIC pointer in TEMP
        PUSH    AF
        CALL    CLSALL                  ; close all i/o channels
        POP     AF
        CALL    ALCFIL                  ; allocate i/o channels
        CALL    C62A7                   ; initialize interpreter, BASIC pointer from TEMP
        JP      NEWSTT                  ; execute new statement

;       Subroutine      allocate i/o channels
;       Inputs          A = number of user i/o channels
;       Outputs         ________________________

ALCFIL:
C7E6B:  PUSH    AF
        LD      HL,(HIMEM)
        LD      DE,-(256+9+2)
J7E72:  ADD     HL,DE
        DEC     A
        JP      P,J7E72
        EX      DE,HL                   ; calculate FILTAB address
        LD      HL,(STKTOP)
        LD      B,H
        LD      C,L
        LD      HL,(MEMSIZ)
        LD      A,L
        SUB     C
        LD      L,A
        LD      A,H
        SBC     A,B
        LD      H,A                     ; size of the string heap
        POP     AF
        PUSH    HL
        PUSH    AF
        LD      BC,140
        ADD     HL,BC
        LD      B,H
        LD      C,L                     ; size of the string heap +140
        LD      HL,(VARTAB)             ; start of the simple variables
        ADD     HL,BC                   ; + size
        RST     DCOMPR                  ; does this fit ?
        JP      NC,OMERR                ; nope, out of memory
        POP     AF
        LD      (MAXFIL),A              ; set number of i/o channels (excluding i/o channel 0)
        LD      L,E
        LD      H,D
        LD      (FILTAB),HL             ; start of i/o channel pointers
        DEC     HL
        DEC     HL                      ; ?? why need a extra byte ??
        LD      (MEMSIZ),HL             ; start of the string heap
        POP     BC                      ; size of the string heap
        LD      A,L
        SUB     C
        LD      L,A
        LD      A,H
        SBC     A,B
        LD      H,A
        LD      (STKTOP),HL             ; start of Z80 stack, end of string heap
        DEC     HL
        DEC     HL
        POP     BC                      ; return address
        LD      SP,HL                   ; new stack with dummy word on stack
        PUSH    BC                      ; return address on stack
        LD      A,(MAXFIL)
        LD      L,A
        INC     L                       ; number of i/o channels
        LD      H,0
        ADD     HL,HL                   ; *2
        ADD     HL,DE
        EX      DE,HL
        PUSH    DE                      ; start of i/o channel buffers
        LD      BC,-2+256+9+2
J7EC2:  LD      (HL),E
        INC     HL
        LD      (HL),D
        INC     HL                      ; pointer to i/o channel buffer
        EX      DE,HL
        LD      (HL),0                  ; i/o channel closed
        ADD     HL,BC                   ; to the next i/o channel buffer
        EX      DE,HL
        DEC     A
        JP      P,J7EC2                 ; next i/o channel
        POP     HL                      ; start of i/o channel buffer
        LD      BC,9
        ADD     HL,BC
        LD      (NULBUF),HL             ; pointer to the i/o channel 0 buffer
        RET

T7ED8:  DEFB    "MSX  system"
        DEFB    0

T7EE4:  DEFB    "version 1.0",13,10
        DEFB    0

T7EF2:  DEFB    "MSX BASIC "
        DEFB    0
T7EFD:  DEFB    "Copyright 1983 by Microsoft",13,10
        DEFB    0

I7F1B:  DEFB    " Bytes free"
        DEFB    0


; Initial Workarea variables


I7F27:

        .PHASE  VARWRK

RDPRIM: OUT     (0A8H),A
        LD      E,(HL)
        JR      J7F2F

WRPRIM: OUT     (0A8H),A
        LD      (HL),E
J7F2F:  LD      A,D
        OUT     (0A8H),A
        RET

CLPRIM: OUT     (0A8H),A
        EX      AF,AF'
        CALL    CLPRM1
        EX      AF,AF'
        POP     AF
        OUT     (0A8H),A
        EX      AF,AF'
        RET

CLPRM1: JP      (IX)

USRTAB: defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call
        defw    FCERR                   ; illegal function call

LINL40:
        IF BASVER EQ 0
        defb    39
        ELSE
        defb    37
        ENDIF

LINL32: defb    29

LINLEN:
        IF BASVER EQ 0
        defb    29
        ELSE
        defb    37
        ENDIF

CRTCNT: defb    24

CLMLST: defb    14

TXTNAM: defw    0
TXTCOL: defw    0
TXTCGP: defw    00800H
TXTATR: defw    0
TXTPAT: defw    0

T32NAM: defw    01800H
T32COL: defw    02000H
T32CGP: defw    0
T32ATR: defw    01B00H
T32PAT: defw    03800H

GRPNAM: defw    01800H
GRPCOL: defw    02000H
GRPCGP: defw    0
GRPATR: defw    01B00H
GRPPAT: defw    03800H

MLTNAM: defw    00800H
MLTCOL: defw    0
MLTCGP: defw    0
MLTATR: defw    01B00H
MLTPAT: defw    03800H

CLIKSW: defb    1
CSRY:   defb    1
CSRX:   defb    1
CNSDFG: defb    0

RG0SAV: defb    000H
RG1SAV: defb    0E0H
RG2SAV: defb    000H
RG3SAV: defb    000H
RG4SAV: defb    000H
RG5SAV: defb    000H
RG6SAV: defb    000H
RG7SAV: defb    000H
STATFL: defb    000H
TRGFLG: defb    0FFH
FORCLR: defb    15
BAKCLR: defb    4

BDRCLR:
        IF BASVER EQ 0
        defb    7
        ELSE
        defb    4
        ENDIF

MAXUPD: jp      0
MINUPD: jp      0
ATRBYT: defb    15
QUEUES: defw    QUETAB
FRCNEW: defb    0FFH
SCNCNT: defb    1
REPCNT: defb    50
PUTPNT: defw    KEYBUF
GETPNT: defw    KEYBUF
CS1200: defb    053H,05CH,026H,02DH,00FH
CS2400: defb    025H,02DH,00EH,016H,01FH
        defb    053H,05CH
        defb    026H,02DH
        defb    00FH
ASPCT1: defw    00100H
ASPCT2: defw    00100H
ENDPRG: defb    ':'

        .DEPHASE

; END   SUBTTL	INIT


        IF	NDEVFIX EQ 1

;       Bugfix          check for zero length devicenames (e.g. ":xxx" filenames)
;       Inputs          ________________________
;       Outputs         ________________________

CHKZDN:
C7FB7:  LD      DE,PROCNM
        AND     A
        RET     NZ
        INC     B                       ; use length 1 (name ":" is used)
        RET

        ENDIF

        IF	SLOTFIX EQ 1

;       Bugfix          
;       Inputs          ________________________
;       Outputs         ________________________

M7FBE:  CALL    C7FCB
        LD      E,(HL)
        JR      J7FC8

;       Bugfix          
;       Inputs          ________________________
;       Outputs         ________________________

M7FC4:  CALL    C7FCB
        LD      (HL),E
J7FC8:  LD      A,B
        JR      J7FD9

C7FCB:  RRCA
        RRCA
        AND     3
        LD      D,A
        LD      A,(D.FFFF)
        CPL
        LD      B,A
        AND     0FCH
        OR      D
        LD      D,A
J7FD9:  LD      (D.FFFF),A
        LD      A,E
        RET

        ENDIF
        
        DEFS    08000H-$,0              ; unused space

        END

