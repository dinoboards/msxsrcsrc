; DSKCOM.MAC

; COMMON 'DISK' BASIC functions, MSX 1 version (version 1.0)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        ORG     6D55H


        INCLUDE MSX.INC


CGTABL          EQU     0004H
SYNCHR          EQU     0008H
RDSLT           EQU     000CH
CHRGTR          EQU     0010H
OUTDO           EQU     0018H
CALSLT          EQU     001CH
DCOMPR          EQU     0020H
ENASLT          EQU     0024H
GETYPR          EQU     0028H
INITIO          EQU     003BH
INIFNK          EQU     003EH
WRTVDP          EQU     0047H
WRTVRM          EQU     004DH
RDVRM           EQU     004AH
FILVRM          EQU     0056H
LDIRMV          EQU     0059H
LDIRVM          EQU     005CH
CHGMOD          EQU     005FH
CHGCLR          EQU     0062H
CLRSPR          EQU     0069H
INITXT          EQU     006CH
INIT32          EQU     006FH
SETTXT          EQU     0078H
SETGRP          EQU     007EH
SETMLT          EQU     0081H
CALPAT          EQU     0084H
CALATR          EQU     0087H
GSPSIZ          EQU     008AH
GRPPRT          EQU     008DH
GICINI          EQU     0090H
WRTPSG          EQU     0093H
STRTMS          EQU     0099H
CHSNS           EQU     009CH
CHGET           EQU     009FH
CHPUT           EQU     00A2H
LPTOUT          EQU     00A5H
CNVCHR          EQU     00ABH
PINLIN          EQU     00AEH
INLIN           EQU     00B1H
QINLIN          EQU     00B4H
ISCNTC          EQU     00BAH
CKCNTC          EQU     00BDH
BEEP            EQU     00C0H
CLS             EQU     00C3H
POSIT           EQU     00C6H
FNKSB           EQU     00C9H
ERAFNK          EQU     00CCH
DSPFNK          EQU     00CFH
TOTEXT          EQU     00D2H
GTSTCK          EQU     00D5H
GTTRIG          EQU     00D8H
GTPAD           EQU     00DBH
GTPDL           EQU     00DEH
TAPION          equ     00E1H
TAPIN           equ     00E4H
TAPIOF          equ     00E7H
TAPOON          equ     00EAH
TAPOUT          equ     00EDH
TAPOOF          equ     00F0H
STMOTR          equ     00F3H
LFTQ            EQU     00F6H
PUTQ            EQU     00F9H
LEFTC           EQU     00FFH
TUPC            EQU     0105H
DOWNC           EQU     0108H
TDOWNC          EQU     010BH
SCALXY          EQU     010EH
MAPXYC          EQU     0111H
FETCHC          EQU     0114H
STOREC          EQU     0117H
SETATR          EQU     011AH
READC           EQU     011DH
SETC            EQU     0120H
NSETCX          EQU     0123H
GTASPC          EQU     0126H
PNTINI          EQU     0129H
SCANR           EQU     012CH
SCANL           EQU     012FH
ISFLIO          EQU     014AH
OUTDLP          EQU     014DH
GETVCP          EQU     0150H
GETVC2          EQU     0153H

VARWRK          EQU     0F380H
LOW.            EQU     0F406h
ERRFLG          EQU     0F414H
LPTPOS          EQU     0F415H
PRTFLG          EQU     0F416H
NTMSXP          EQU     0F417H
VLZADR          EQU     0F419H
VLZDAT          EQU     0F41BH
CURLIN          EQU     0F41CH
KBFMIN          EQU     0F41EH
KBUF            EQU     0F41FH
BUFMIN          EQU     0F55DH
BUF             EQU     0F55EH
ENDBUF          EQU     0F660H
TTYPOS          EQU     0F661H
DIMFLG          EQU     0F662H
VALTYP          EQU     0F663H
DORES           EQU     0F664H
DONUM           EQU     0F665H
CONTXT          EQU     0F666H
CONSAV          EQU     0F668H
CONTYP          EQU     0F669H
CONLO           EQU     0F66AH
MEMSIZ          EQU     0F672H
STKTOP          EQU     0F674H
TXTTAB          EQU     0F676H
TEMPPT          EQU     0F678H
TEMPST          EQU     0F67AH
DSCTMP          EQU     0F698H
FRETOP          EQU     0F69BH
TEMP3           EQU     0F69DH
TEMP8           EQU     0F69FH
ENDFOR          EQU     0F6A1H
DATLIN          EQU     0F6A3H
SUBFLG          EQU     0F6A5H
FLGINP          EQU     0F6A6H
TEMP            EQU     0F6A7H
PTRFLG          EQU     0F6A9H
AUTFLG          EQU     0F6AAH
AUTLIN          EQU     0F6ABH
AUTINC          EQU     0F6ADH
SAVTXT          EQU     0F6AFH
SAVSTK          EQU     0F6B1H
ERRLIN          EQU     0F6B3H
DOT             EQU     0F6B5H
ERRTXT          EQU     0F6B7H
ONELIN          EQU     0F6B9H
ONEFLG          EQU     0F6BBH
TEMP2           EQU     0F6BCH
OLDLIN          EQU     0F6BEH
OLDTXT          EQU     0F6C0H
VARTAB          EQU     0F6C2H
ARYTAB          EQU     0F6C4H
STREND          EQU     0F6C6H
DATPTR          EQU     0F6C8H
DEFTBL          EQU     0F6CAH
PRMSTK          EQU     0F6E4H
PRMLEN          EQU     0F6E6H
PARM1           EQU     0F6E8H
PRMPRV          EQU     0F74CH
PRMLN2          EQU     0F74EH
PARM2           EQU     0F750H
PRMFLG          EQU     0F7B4H
ARYTA2          EQU     0F7B5H
NOFUNS          EQU     0F7B7H
TEMP9           EQU     0F7B8H
FUNACT          EQU     0F7BAH
SWPTMP          EQU     0F7BCH
TRCFLG          EQU     0F7C4H
DAC             EQU     0F7F6H
ARG             EQU     0F847H
MAXFIL          EQU     0F85FH
FILTAB          EQU     0F860H
NULBUF          EQU     0F862H
PTRFIL          EQU     0F864H
FILNAM          EQU     0F866H
FILNM2          EQU     0F871H
NLONLY          EQU     0F87CH
SAVEND          EQU     0F87DH
FNKSTR          EQU     0F87FH
CGPNT           EQU     0F91FH
MINDEL          EQU     0F92DH
MAXDEL          EQU     0F92FH
ASPECT          EQU     0F931H
CENCNT          EQU     0F933H
CLINEF          EQU     0F935H
CNPNTS          EQU     0F936H
CPLOTF          EQU     0F938H
CPCNT           EQU     0F939H
CPCNT8          EQU     0F93BH
CRCSUM          EQU     0F93DH
CSTCNT          EQU     0F93FH
CSCLXY          EQU     0F941H
CSAVEA          EQU     0F942H
CSAVEM          EQU     0F944H
CXOFF           EQU     0F945H
CYOFF           EQU     0F947H
LOHMSK          EQU     0F949H
LOHDIR          EQU     0F94AH
LOHADR          EQU     0F94BH
LOHCNT          EQU     0F94DH
SKPCNT          EQU     0F94FH
MOVCNT          EQU     0F951H
PDIREC          EQU     0F953H
LFPROG          EQU     0F954H
RTPROG          EQU     0F955H
MCLTAB          EQU     0F956H
MCLFLG          EQU     0F958H
QUETAB          EQU     0F959H
PRSCNT          EQU     0FB35H
SAVSP           EQU     0FB36H
VOICEN          EQU     0FB38H
SAVVOL          EQU     0FB39H
MCLLEN          EQU     0FB3BH
MCLPTR          EQU     0FB3CH
MUSICF          EQU     0FB3FH
PLYCNT          EQU     0FB40H
BASROM          EQU     0FBB1H
FNKFLG          EQU     0FBCEH
ONGSBF          EQU     0FBD8H
KEYBUF          EQU     0FBF0H
BOTTOM          EQU     0FC48H
HIMEM           EQU     0FC4AH
TRPTBL          EQU     0FC4CH
INTFLG          EQU     0FC9BH
JIFFY           EQU     0FC9EH
INTVAL          EQU     0FCA0H
INTCNT          EQU     0FCA2H
FLBMEM          EQU     0FCAEH
SCRMOD          EQU     0FCAFH
OLDSCR          EQU     0FCB0H
CASPRV          equ     0FCB1H
GXPOS           EQU     0FCB3H
GYPOS           EQU     0FCB5H
GRPACX          EQU     0FCB7H
GRPACY          EQU     0FCB9H
DRWFLG          EQU     0FCBBH
DRWSCL          EQU     0FCBCH
DRWANG          EQU     0FCBDH
RUNBNF          EQU     0FCBEH
SAVENT          EQU     0FCBFH
EXPTBL          EQU     0FCC1H
SLTTBL          EQU     0FCC5H
SLTATR          EQU     0FCC9H
SLTWRK          EQU     0FD09H
PROCNM          EQU     0FD89H
DEVICE          EQU     0FD99H

H.KEYI          EQU     0FD9AH
H.ONGO          EQU     0FDEAH
H.DSKO          EQU     0FDEFH
H.SETS          EQU     0FDF4H
H.NAME          EQU     0FDF9H
H.KILL          EQU     0FDFEH
H.IPL           EQU     0FE03H
H.COPY          EQU     0FE08H
H.CMD           EQU     0FE0DH
H.DSKF          EQU     0FE12H
H.DSKI          EQU     0FE17H
H.ATTR          EQU     0FE1CH
H.LSET          EQU     0FE21H
H.RSET          EQU     0FE26H
H.FIEL          EQU     0FE2BH
H.MKI$          EQU     0FE30H
H.MKS$          EQU     0FE35H
H.MKD$          EQU     0FE3AH
H.CVI           EQU     0FE3FH
H.CVS           EQU     0FE44H
H.CVD           EQU     0FE49H
H.GETP          EQU     0FE4EH
H.SETF          EQU     0FE53H
H.NOFO          EQU     0FE58H
H.NULO          EQU     0FE5DH
H.NTFL          EQU     0FE62H
H.MERG          EQU     0FE67H
H.SAVE          EQU     0FE6CH
H.BINS          EQU     0FE71H
H.BINL          EQU     0FE76H
H.FILE          EQU     0FE7BH
H.DGET          EQU     0FE80H
H.FILO          EQU     0FE85H
H.INDS          EQU     0FE8AH
H.RSLF          EQU     0FE8FH
H.SAVD          EQU     0FE94H
H.LOC           EQU     0FE99H
H.LOF           EQU     0FE9EH
H.EOF           EQU     0FEA3H
H.FPOS          EQU     0FEA8H
H.BAKU          EQU     0FEADH
H.PARD          EQU     0FEB2H
H.NODE          EQU     0FEB7H
H.POSD          EQU     0FEBCH
H.GEND          EQU     0FEC6H
H.RUNC          EQU     0FECBH
H.CLEA          EQU     0FED0H
H.LOPD          EQU     0FED5H
H.STKE          EQU     0FEDAH
H.CRDO          EQU     0FEE9H
H.DSKC          EQU     0FEEEH
H.DOGR          EQU     0FEF3H
H.PRGE          EQU     0FEF8H
H.ERRP          EQU     0FEFDH
H.ERRF          EQU     0FF02H
H.READ          EQU     0FF07H
H.MAIN          EQU     0FF0CH
H.DIRD          EQU     0FF11H
H.FINI          EQU     0FF16H
H.FINE          EQU     0FF1BH
H.CRUN          EQU     0FF20H
H.CRUS          EQU     0FF25H
H.ISRE          EQU     0FF2AH
H.NTFN          EQU     0FF2FH
H.NOTR          EQU     0FF34H
H.SNGF          EQU     0FF39H
H.NEWS          EQU     0FF3EH
H.GONE          EQU     0FF43H
H.CHRG          EQU     0FF48H
H.RETU          EQU     0FF4DH
H.PRTF          EQU     0FF52H
H.COMP          EQU     0FF57H
H.FINP          EQU     0FF5CH
H.TRMN          EQU     0FF61H
H.FRME          EQU     0FF66H
H.NTPL          EQU     0FF6BH
H.EVAL          EQU     0FF70H
H.OKNO          EQU     0FF75H
H.FING          EQU     0FF7AH
H.ISMI          EQU     0FF7FH
H.WIDT          EQU     0FF84H
H.LIST          EQU     0FF89H
H.BUFL          EQU     0FF8EH
H.FRQI          EQU     0FF93H
H.SCNE          EQU     0FF98H
H.FRET          EQU     0FF9DH
H.PTRG          EQU     0FFA2H
H.ERRO          EQU     0FFB1H
H.SCRE          EQU     0FFC0H
H.PLAY          EQU     0FFC5H
EXTBIO          EQU     0FFCAH
D.FFFF          EQU     0FFFFH

        PUBLIC  DERNMF
        PUBLIC  DERFAO
        PUBLIC  ERRFDR
        PUBLIC  DERFNF
        PUBLIC  DERFNO
        PUBLIC  DERFOV
        PUBLIC  DERBFN
        PUBLIC  DERIER
        PUBLIC  DERSOO
        PUBLIC  DERRPE
        PUBLIC  C6D7B
        PUBLIC  BLDFIN
        PUBLIC  DLINE
        PUBLIC  FILINP
        PUBLIC  FILGET
        PUBLIC  FILIND
        PUBLIC  BLOAD
        PUBLIC  BSAVE

        EXTRN   FIN
        EXTRN   FRMEVL
        EXTRN   GTBYTC
        EXTRN   CHKSTR
        EXTRN   ERROR
        EXTRN   INDSKC
        EXTRN   CLSFIL
        EXTRN   PTRGET
        EXTRN   GENDSP
        EXTRN   FINPRT
        EXTRN   FILEVL
        EXTRN   SETFIL
        EXTRN   CBLOAD
        EXTRN   CBSAVE
        EXTRN   STRLT3
        EXTRN   GTMPRT
        EXTRN   DOASIG
        EXTRN   LETCON
        EXTRN   ISDDEV
        EXTRN   J6CF3
        EXTRN   FRQINT


; START SUBTTL	DSKCOM

        SUBTTL	DSKCOM


;       Subroutine      redirect interpreter input if i/o channel specified
;       Inputs          ________________________
;       Outputs         ________________________

FILINP:
C6D55:  LD      C,1

;       Subroutine      redirect interpreter input/output if i/o channel specified
;       Inputs          ________________________
;       Outputs         ________________________

FILGET:
C6D57:  CP      "#"
        RET     NZ
        PUSH    BC
        CALL    GTBYTC                  ; skip basic char and evaluate byte operand
        RST     SYNCHR
        DEFB    ","                     ; check for ,
        LD      A,E
        PUSH    HL
        CALL    SETFIL                  ; redirect interpreter input/output to i/o channel
        LD      A,(HL)
        POP     HL
        POP     BC
        CP      C                       ; correct filemode ?
        JR      Z,J6D79                 ; yep, quit
        CP      4                       ; random mode ?
        JR      Z,J6D79                 ; yep, quit
        CP      8                       ; append mode ?
        JR      NZ,J6D76                ; nope, bad filenumber error
        LD      A,C
        CP      2                       ; request output mode ?
J6D76:  JP      NZ,DERBFN               ; nope, bad filenumber
J6D79:  LD      A,(HL)
        RET

;       Subroutine      close i/o channel 0 and load HL from (TEMP)
;       Inputs          ________________________
;       Outputs         ________________________

C6D7B:  LD      BC,GTMPRT               ; load BASIC pointer from (TEMP)
        PUSH    BC
        XOR     A
        JP      CLSFIL                  ; close i/o channel 0

FILIND:
J6D83:  RST     GETYPR                  ; get DAC type
        LD      BC,DOASIG
        LD      DE,2C20H
        JR      NZ,J6DA3                ; not a string,
        LD      E,D
        JR      J6DA3

DLINE:
J6D8F:  LD      BC,FINPRT
        PUSH    BC
        CALL    FILINP                  ; redirect interpreter input if i/o channel specified
        CALL    PTRGET                  ; locate variable
        CALL    CHKSTR                  ; check if string
        PUSH    DE
        LD      BC,LETCON
        XOR     A
        LD      D,A
        LD      E,A
J6DA3:  PUSH    AF
        PUSH    BC
        PUSH    HL
J6DA6:  CALL    INDSKC                  ; get sequential input
        JP      C,DERRPE
        CP      20H
        JR      NZ,J6DB4
        INC     D
        DEC     D
        JR      NZ,J6DA6
J6DB4:  CP      22H
        JR      NZ,J6DC6
        LD      A,E
        CP      2CH
        LD      A,22H
        JR      NZ,J6DC6
        LD      D,A
        LD      E,A
        CALL    INDSKC                  ; get sequential input
        JR      C,J6E0D
J6DC6:  LD      HL,BUF
        LD      B,0FFH
J6DCB:  LD      C,A
        LD      A,D
        CP      22H
        LD      A,C
        JR      Z,J6DFC
        CP      0DH
        PUSH    HL
        JR      Z,J6E27
        POP     HL
        CP      0AH
        JR      NZ,J6DFC
J6DDC:  LD      C,A
        LD      A,E
        CP      2CH
        LD      A,C
        CALL    NZ,C6E61
        CALL    INDSKC                  ; get sequential input
        JR      C,J6E0D
        CP      0AH
        JR      Z,J6DDC
        CP      0DH
        JR      NZ,J6DFC
        LD      A,E
        CP      20H
        JR      Z,J6E08
        CP      2CH
        LD      A,0DH
        JR      Z,J6E08
J6DFC:  OR      A
        JR      Z,J6E08
        CP      D
        JR      Z,J6E0D
        CP      E
        JR      Z,J6E0D
        CALL    C6E61
J6E08:  CALL    INDSKC                  ; get sequential input
        JR      NC,J6DCB
J6E0D:  PUSH    HL
        CP      22H
        JR      Z,J6E16
        CP      20H
        JR      NZ,J6E41
J6E16:  CALL    INDSKC                  ; get sequential input
        JR      C,J6E41
        CP      20H
        JR      Z,J6E16
        CP      2CH
        JR      Z,J6E41
        CP      0DH
        JR      NZ,J6E30
J6E27:  CALL    INDSKC                  ; get sequential input
        JR      C,J6E41
        CP      0AH
        JR      Z,J6E41
J6E30:  LD      C,A
        CALL    ISDDEV                  ; current i/o channel a diskdrive device ?
        JR      NC,J6E3C                ; nope,
        CALL    H.BAKU                  ; backup for disk hook
        JP      DERIER                  ; internal error (should not return to here)

J6E3C:  LD      A,18                    ; function backup
        CALL    GENDSP                  ; i/o function dispatcher
J6E41:  POP     HL
J6E42:  LD      (HL),00H
        LD      HL,BUFMIN
        LD      A,E
        SUB     20H
        JR      Z,J6E53
        LD      B,0
        CALL    STRLT3                  ; analyze string with specified endmaker (1st char is skipped) and create temporary stringdescriptor
        POP     HL
        RET

J6E53:  RST     GETYPR                  ; get DAC type
        PUSH    AF
        RST     CHRGTR                  ; get next BASIC character
        POP     AF
        PUSH    AF
        CALL    C,FIN                   ; not a double real, convert text to number
        POP     AF
        CALL    NC,FIN                  ; double real, convert text to number
        POP     HL
        RET

;       Subroutine      __________________________
;       Inputs          ________________________
;       Outputs         ________________________

C6E61:  OR      A
        RET     Z
        LD      (HL),A
        INC     HL
        DEC     B
        RET     NZ
        POP     AF
        JP      J6E42

DERNMF:
J6E6B:  LD      E,56
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERFAO:
J6E6E:  LD      E,54
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

ERRFDR:
J6E71:  LD      E,57
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERFNF:
J6E74:  LD      E,53
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERFNO:
J6E77:  LD      E,59
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERFOV:
J6E7A:  LD      E,50
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERBFN:
J6E7D:  LD      E,52
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERIER:
J6E80:  LD      E,51
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERRPE:
J6E83:  LD      E,55
        DEFB    001H			; LD BC,xxxx, trick to skip next instruction

DERSOO:
J6E86:  LD      E,58
        XOR     A
        LD      (NLONLY),A              ; not loading basic program, close i/o channels when requested
        LD      (FLBMEM),A
        JP      ERROR

;       Subroutine      BSAVE statement
;       Inputs          ________________________
;       Outputs         ________________________

BSAVE:
C6E92:  CALL    FILEVL                  ; evaluate filespecification
        PUSH    DE                      ; save devicecode
        RST     SYNCHR
        DEFB    ","                     ; check for ,
        CALL    C6F0B                   ; evaluate BLOAD/BSAVE address operand
        EX      DE,HL
        LD      (SAVENT),HL
        EX      DE,HL                   ; assume start address = execute address
        PUSH    DE                      ; save start address
        RST     SYNCHR
        DEFB    ","                     ; check for ,
        CALL    C6F0B                   ; evaluate BLOAD/BSAVE address operand
        EX      DE,HL
        LD      (SAVEND),HL
        EX      DE,HL                   ; save end address
        DEC     HL
        RST     CHRGTR                  ; end of statement ?
        JR      Z,J6EB9                 ; yep, skip execute address
        RST     SYNCHR
        DEFB    ","                     ; check for ,
        CALL    C6F0B                   ; evaluate BLOAD/BSAVE address operand
        EX      DE,HL
        LD      (SAVENT),HL
        EX      DE,HL                   ; save execute address
J6EB9:  POP     BC                      ; start address
        POP     DE                      ; devicecode
        PUSH    HL
        PUSH    BC
        LD      A,D
        CP      0FFH                    ; device is CAS ?
        JP      Z,CBSAVE                ; yep, BSAVE to cassette
        JP      DERNMF                  ; bad filename error

;       Subroutine      BLOAD statement
;       Inputs          ________________________
;       Outputs         ________________________

BLOAD:
C6EC6:  CALL    FILEVL                  ; evaluate filespecification
        PUSH    DE
        XOR     A
        LD      (RUNBNF),A              ; assume no execute after load
        DEC     HL
        RST     CHRGTR                  ; end of statement ?
        LD      BC,0                    ; assume offset 0
        JR      Z,J6EE8                 ; yep, go
        RST     SYNCHR
        DEFB    ","                     ; check for ,
        CP      "R"                     ; run option ?
        JR      NZ,J6EE3                ; nope, offset option
        LD      (RUNBNF),A              ; execute after load
        RST     CHRGTR                  ; get next BASIC character
        JR      Z,J6EE8                 ; end of statement, go
        RST     SYNCHR
        DEFB    ","                     ; check for ,
J6EE3:  CALL    C6F0B                   ; evaluate BLOAD/BSAVE address operand (offset)
        LD      B,D
        LD      C,E                     ; offset
J6EE8:  POP     DE                      ; devicecode
        PUSH    HL
        PUSH    BC
        LD      A,D
        CP      0FFH                    ; device is CAS ?
        JP      Z,CBLOAD                ; BLOAD from cassette
        JP      DERNMF                  ; bad filename

;       Subroutine      finish BLOAD
;       Inputs          ________________________
;       Outputs         ________________________

BLDFIN:
J6EF4:  LD      A,(RUNBNF)
        OR      A                       ; execute after load ?
        JR      Z,J6F06                 ; nope, close channel and quit
        XOR     A
        CALL    CLSFIL                  ; close i/o channel 0
        LD      HL,J6CF3
        PUSH    HL                      ; after this, retore BASIC pointer and continue
        LD      HL,(SAVENT)
        JP      (HL)                    ; start code

J6F06:  POP     HL                      ; restore BASIC pointer
        XOR     A
        JP      CLSFIL                  ; close i/o channel 0

;       Subroutine      evaluate BLOAD/BSAVE address operand
;       Inputs          ________________________
;       Outputs         ________________________

C6F0B:  CALL    FRMEVL                  ; evaluate expression
        PUSH    HL
        CALL    FRQINT                  ; convert address to integer
        POP     DE
        EX      DE,HL
        RET

; END   SUBTTL  DSKCOM

        END

