;  
;   FSA1FM2 -> Source re-created by Z80DIS 2.2
;      Z80DIS was written by Kenneth Gielow
;                            Palo Alto, CA
        .Z80
        ORG	4090H
CALSLT	EQU	001CH	; -C---
CHSNS	EQU	009CH	; -C---
CHGET	EQU	009FH	; -C---
CHPUT	EQU	00A2H	; -C---
LPTOUT	EQU	00A5H	; JC---
LPTSTT	EQU	00A8H	; -C---
SNSMAT	EQU	0141H	; -C---
KILBUF	EQU	0156H	; -C---

ERROR   equ     406FH                   ; BASIC error
FNDLIN  EQU     4295H                   ; search linenumber from start of program
CHRGTR  EQU     4666H                   ; get next BASIC character
LINGET  EQU     4769H                   ; collect linenumber
TRPENA  EQU     631BH                   ; enable trap
TRPDIS  EQU     632BH                   ; disable trap
TRPSTP  EQU     6331H                   ; stop trap

I$0209	EQU	0209H	; ----I
I$021E	EQU	021EH	; ----I
I.0258	EQU	0258H	; ----I
I$02CD	EQU	02CDH	; ----I
I$02FF	EQU	02FFH	; ----I
I.04B0	EQU	04B0H	; ----I
I$051E	EQU	051EH	; ----I
I$081E	EQU	081EH	; ----I
I$0A0E	EQU	0A0EH	; ----I
I$0D1E	EQU	0D1EH	; ----I
I$0FD4	EQU	0FD4H	; ----I
I$1000	EQU	1000H	; ----I
I$131E	EQU	131EH	; ----I
J.1840	EQU	1840H	; J----
I$2058	EQU	2058H	; ----I
J$2140	EQU	2140H	; J----
I.322C	EQU	322CH	; ----I
I$331E	EQU	331EH	; ----I
D$332C	EQU	332CH	; --S--
I$3333	EQU	3333H	; ----I
I$361E	EQU	361EH	; ----I
I$381E	EQU	381EH	; ----I
I$3A1E	EQU	3A1EH	; ----I
I$3B1E	EQU	3B1EH	; ----I
C.6000	EQU	6000H	; -C---

D$6047	EQU	6047H	                ; MSX modem disabled
D.6049	EQU	6049H                   ; b7,b6,b2 = terminal mode
D.604B	EQU	604BH	                ; b7-b4 = trap number, b3-b0 = com number
D.6065	EQU	6065H	                ; COM/NET flag
D.6066	EQU	6066H                   ; timer #1 value (BASIC)
D.606D	EQU	606DH	                ; receiver baudrate
D.606F	EQU	606FH	                ; transmitter baudrate
D$6071	EQU	6071H	                ; timeout value
D.6073	EQU	6073H                   ; literal mode
D.6074	EQU	6074H                   ; printer echo enabled
D.6075	EQU	6075H                   ; printer echo receive buffer not empty
D.6077	EQU	6077H                   ; duplex mode
D.607C	EQU	607CH                   ; counter set #1, number of seconds
D.6084	EQU	6084H	                ; mask byte (for unused bits)
D.6085	EQU	6085H                   ; b7,b6 = dialer mode,b5, b4 = SI/SO handshake, b3 = auto LF on receive, b2 = auto LF on send, b1 = RTS/CTS handshake, b0 = XON/XOFF handshake
D.6086	EQU	6086H	                ; b7 = SI/SO receive, b6 = ?, b5 = CR on send, b4 = ?, b3 = channel open, b2 = XON/XOFF receive, b1 = sending suspended, b0 = SI/SO send
D$608A	EQU	608AH                   ; get offset in receive buffer
D$608C	EQU	608CH                   ; get offset in receive buffer (printer echo)
D.6090	EQU	6090H                   ; number of bytes in receive buffer
D.6092	EQU	6092H                   ; number of bytes in receive buffer (printer echo)
D$6094	EQU	6094H                   ; number of bytes in receive buffer (download text/log)
D$60A9	EQU	60A9H                   ; modem type
D.60B0	EQU	60B0H                   ; automatic dialer detection
D.60B6	EQU	60B6H                   ; saved comterm exit code
I.60B8	EQU	60B8H                   ; saved F1-F10 defintion
D.6158	EQU	6158H                   ; saved FORCLR
D.6159	EQU	6159H                   ; saved BAKCLR
D.615A	EQU	615AH                   ; saved BDRCLR
D.615C	EQU	615CH			; show progress char
D.615D	EQU	615DH                   ; comterm mode (b0 = interlace, b1 = full, b2 = chinese, b3/b4 = srceen mode, b5/b6 = kanji code, b7 = DEL operation)
D.615E	EQU	615EH                   ; b1 = shift JIS D, b0 = 12 dot
D.6162	EQU	6162H                   ; auto login pointer
D.6164	EQU	6164H                   ; protocol timer #1 value
D.6165  EQU     6165H                   ; protocol timer #2 value
D.6166	EQU	6166H	; --SL-
D.6168	EQU	6168H	; --SL-
D.616A	EQU	616AH	; --SL-
D.616C	EQU	616CH	; --SL-
D.616E	EQU	616EH	; --SL-
D.6170	EQU	6170H	; --SL-
D.6173	EQU	6173H                   ; comterm activated flag
D.6175	EQU	6175H	; --SLI
C.6176	EQU	6176H	                ; call MSX-JE
D.6186	EQU	6186H                   ; normal flags
D.6188	EQU	6188H                   ; ? flags
D.618B	EQU	618BH                   ; normal flags
D$618D	EQU	618DH                   ; normal ??
D$618F	EQU	618FH                   ; normal ???
I.6190	EQU	6190H                   ; download text/log flags
I.6195	EQU	6195H                   ; printer echo flags
D.619A	EQU	619AH                   ; english flag download text/log
D.619B	EQU	619BH                   ; english flag print echo
D$619C	EQU	619CH	; ---L-
D.619D	EQU	619DH	; --SL-
D.619E	EQU	619EH	; --SL-
D.619F	EQU	619FH                   ; last JIFFY value
D.61A1	EQU	61A1H                   ; timer value
D.61A3	EQU	61A3H                   ; counter, number of hours
D.61A4	EQU	61A4H                   ; counter, number of minutes
D.61A5	EQU	61A5H                   ; counter, number of seconds
D.61A6	EQU	61A6H
D.61A8	EQU	61A8H                   ; number of bytes in printer buffer
D.61A9	EQU	61A9H                   ; put pointer printer buffer
I.61AB	EQU	61ABH                   ; printer buffer
D.61C5	EQU	61C5H                   ; english flag
D.61CF	EQU	61CFH	; --SL-
I$61D8	EQU	61D8H	; ----I
D.61D9	EQU	61D9H	; ---L-
D.6351	EQU	6351H                   ; download text/log enabled
D.6352	EQU	6352H                   ; upload text/log enabled
D$6354	EQU	6354H	; ---L-
D$6355	EQU	6355H	; --S--
D$635C	EQU	635CH	; --S--
I$635D	EQU	635DH	; ----I
D.635E	EQU	635EH                   ; not CALL TELCOM
D$6361	EQU	6361H           	; output to modem
I.6380	EQU	6380H	; ----I
D.7EE7	EQU	7EE7H                   ; printer not ready counter
D.7EEA	EQU	7EEAH                   ; store foreground/background color
D$7EEC	EQU	7EECH                   ; store border color
D$7EF9	EQU	7EF9H	; ---L-
D.7EFA	EQU	7EFAH                   ; store function key display
D.7EFC	EQU	7EFCH	; --SL-

I$C000	EQU	0C000H	; ----I
D$C008	EQU	0C008H	; ---L-
I$C60E	EQU	0C60EH	; ----I

D.F24F	EQU	0F24FH	; prompt hook

LINLEN	EQU	0F3B0H	; ---L-
CNSDFG	EQU	0F3DEH	; --SLI
FORCLR	EQU	0F3E9H	; --SL-
BDRCLR	EQU	0F3EBH	; --SL-
GETPNT	EQU	0F3FAH	; ---L-
LPTPOS	EQU	0F415H	; ----I
VALTYP	EQU	0F663H	; ----I
TXTTAB	EQU	0F676H	; ---L-
STREND	EQU	0F6C6H	; ---L-
FBUFFR	EQU	0F7C5H	; --SL-
DAC	EQU	0F7F6H	; ----I
PTRFIL	EQU	0F864H	; --S--
FNKSTR	EQU	0F87FH	; ----I
HOKVLD	EQU	0FB20H	; ---L-
ONGSBF	EQU	0FBD8H	; ----I
TRPTBL  EQU     0FC4CH
INTFLG	EQU	0FC9BH	; --SLI
JIFFY	EQU	0FC9EH	; ---L-
SCRMOD	EQU	0FCAFH	; ---L-
EXPTBL	EQU	0FCC1H	; ----I
PROCNM	EQU	0FD89H	; ----I
EXTBIO	EQU	0FFCAH	; -C---
I.FFFF	EQU	0FFFFH	; ----I



?.4090:	JP	C.45C0                  ; check if MSX-JE
?.4093:	JP	C.4680                  ; flip kanji entry mode
?.4096:	JP	C.46BE
?.4099:	JP	C.434A
?.409C:	JP	C.4325
?.409F:	JP	C.43BA                  ; get received byte
?.40A2:	JP	C.40EA                  ; send or print byte
C.40A5:	JP	C.40FF                  ; print and send byte
C.40A8:	JP	C.5BC8		        ; MAIN BIOS
C.40AB:	JP	C.5BC3		        ; MAIN BIOS (EI)
C.40AE:	JP	C.57A6
C.40B1:	JP	J$49C7
C.40B4:	JP	C.4BEA                  ; comterm
C.40B7:	JP	J$473C
C.40BA:	JP	J$488C                  ; BASIC error
C.40BD:	JP	J$5739
C.40C0:	JP	J$5AAA                  ; BASIC device handler
C.40C3:	JP	C.5A82                  ; store protocol and timer values
C.40C6:	JP	C.4EBD                  ; echo to screen/printer (literal)
?.40C9:	JP	J$43B4                  ; get received byte (download text/log)
C.40CC:	JP	J$43AE                  ; get received byte (printer echo)
?.40CF:	JP	J$4362                  ; initialize download text/log flags
?.40D2:	JP	C.437A                  ; initialize printer echo flags
?.40D5:	JP	C.500D
?.40D8:	JP	C.5320
?.40DB:	JP	C.534F                  ; finish printer echo
?.40DE:	JP	C.53E4                  ; cancel printer echo
?.40E1:	JP	C.4F02                  ; update counter
?.40E4:	JP	C.4BBD                  ; store PROMPT hook and disable
?.40E7:	JP	C.4BD9                  ; restore PROMPT hook

;	  Subroutine send or print byte (normal)
;	     Inputs  A = byte
;	     Outputs ________________________

C.40EA:	PUSH	HL
        LD	HL,D.6186               ; normal flags
J$40EE:	PUSH	BC
        LD	B,A
        PUSH	BC
        PUSH	DE
        CALL	C$41E7                  ; send or print byte
        POP	DE
        POP	BC
        JR	C,J.40FC                ; CTRL-STOP, quit
        JR	Z,J.40FC                ; time out, quit
        LD	A,B
J.40FC:	POP	BC
        POP	HL
        RET

;	  Subroutine print and send byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.40FF:	PUSH	AF
        LD	A,(D.61A8)
        OR	A                       ; printer buffer empty ?
        JR	Z,J$4120                ; yep, skip print buffer
        PUSH	BC
        PUSH	HL
        LD	HL,I.61AB               ; start of printer buffer
        LD	B,A                     ; number of bytes
        CALL	C.41DA                  ; output to modem or comterm active ?
        JR	Z,J.414E                ; nope, flush printer buffer
J$4111:	LD	A,(HL)
        INC	HL
        CALL	LPTOUT                  ; print character
        JR	C,J$411A                ; error,
        DJNZ	J$4111
J$411A:	POP	HL
        POP	BC
        XOR	A
        LD	(D.61A8),A              ; printer buffer empty
J$4120:	POP	AF
        PUSH	HL
        LD	HL,LPTPOS
        CP	20H                     ; control character ?
        JR	NC,J$4148               ; nope, update LPTPOS,
        CP	13                      ; CR ?
        JR	Z,J$4146                ; yep, LPTPOS=0,
        CP	9                       ; TAB ?
        JR	NZ,J$4149               ; nope,
        LD	A,(HL)
        AND	07H
        XOR	07H
        LD	L,A
J$4137:	LD	A," "
        CALL	C.40FF                  ; print and send byte
        JR	C,J.4144                ; error, quit
        JR	Z,J.4144                ; time out, quit
        DEC	L
        JP	P,J$4137                ; next
J.4144:	POP	HL
        RET

J$4146:	LD	(HL),0FFH
J$4148:	INC	(HL)
J$4149:	LD	HL,D.6188
        JR	J$40EE                  ; send or print byte

J.414E:	XOR	A
        LD	(D.61A8),A              ; printer buffer empty
J$4152:	PUSH	HL
        LD	HL,0
        LD	(D.7EE7),HL             ; reset printer not ready counter
        POP	HL
        CALL	C.4180                  ; wait for printer ready
        SCF
        JR	Z,J.416E                ; time out, quit
        LD	A,(HL)
        INC	HL
        CALL	LPTOUT
        JR	C,J.416E                ; error, quit
        DJNZ	J$4152                  ; next
        POP	HL
        POP	BC
        POP	AF
        OR	A                       ; no error
        RET

J.416E:	POP	HL
        POP	BC
        POP	AF
        SCF                             ; error
        RET

?.4173:	PUSH	AF
        CALL	C.4180                  ; wait for printer ready
        JR	Z,J$417D                ; time out, quit
        POP	AF
        JP	LPTOUT

J$417D:	POP	AF
        SCF                             ; error
        RET

;	  Subroutine wait for printer ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.4180:	PUSH	DE
        PUSH	HL
J$4182:	CALL	LPTSTT                  ; get printer status
        JR	NZ,J$4198               ; printer ready, quit
        EI
        LD	HL,(D.7EE7)
        LD	DE,1200
        SBC	HL,DE                   ; printer not ready for too long ?
        JR	C,J$4182                ; nope, again
        XOR	A
        LD	L,A
        LD	H,A
        LD	(D.7EE7),HL             ; reset printer not ready counter
J$4198:	POP	HL
        POP	DE
        RET

;	  Subroutine print byte (with buffer)
;	     Inputs  ________________________
;	     Outputs ________________________

C.419B:	PUSH	HL
        PUSH	AF
        CALL	C.4180                  ; wait for printer ready
        JR	Z,J.41AE                ; time out, put in printer buffer
        POP	AF
        PUSH	AF
        CALL	LPTOUT
        JR	C,J.41AE                ; error, put in printer buffer
        POP	AF
        POP	HL
        XOR	A
        INC	A                       ; reset Cx, reset Zx
        RET

J.41AE:	LD	A,(D.61A8)
        OR	A                       ; printer buffer empty ?
        LD	HL,(D.61A9)             ; put pointer printer buffer
        JR	NZ,J$41BA               ; nope,
        LD	HL,I.61AB               ; start of printer buffer
J$41BA:	LD	A,(D.61A8)
        CP	4                       ; printer buffer full ?
        JR	C,J$41C4                ; nope, put in printer buffer
        POP	AF
        JR	J$41CE                  ; finish

J$41C4:	POP	AF
        LD	(HL),A
        INC	HL
        LD	(D.61A9),HL             ; update put pointer printer buffer
        LD	HL,D.61A8
        INC	(HL)                    ; update number of bytes in printer buffer
J$41CE:	CALL	C.41DA                  ; output to modem or comterm active ?
        JR	NZ,J$41D6               ; yep,
        POP	HL
        SCF                             ; set Cx
        RET

J$41D6:	POP	HL
        XOR	A
        INC	A                       ; reset Cx, reset Zx
        RET

;	  Subroutine output to modem or comterm active ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.41DA:	PUSH	HL
        LD	H,A
        LD	A,(D$6361)
        LD	L,A                     ; output to modem
        LD	A,(D.6173)
        OR	L                       ; or comterm active
        LD	A,H
        POP	HL
        RET

;	  Subroutine send or print byte
;	     Inputs  B = byte, HL = pointer to flags
;	     Outputs ________________________

C$41E7:	CALL	C.42F8                  ; normal ?
        JR	Z,J.420C                ; yep,
        LD	A,(D$619C)
        AND	A
        LD	A,B
        JR	Z,C.419B                ; print byte (with buffer)
        BIT	5,(HL)
        JR	NZ,J.420C
        PUSH	BC
        LD	A,(D.61C5)
        AND	A                       ; english ?
        LD	DE,I.42B7               ; japanese printer modes
        JR	Z,J$4204                ; nope,
        LD	DE,I.42BF               ; english printer modes
J$4204:	CALL	C.42C7                  ; set printer mode
        POP	BC
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        SET	5,(HL)
J.420C:	LD	A,(D.61C5)
        AND	A                       ; english ?
        LD	A,B
        JR	NZ,C.421C               ; yep, send or print byte
        BIT	5,(HL)
        JR	NZ,J$423A
        CALL	C.431B                  ; double byte header character ?
        JR	NC,J$422A               ; yep, handle double byte character

;	  Subroutine send or print byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.421C:	CALL	C.42F8                  ; normal ?
        JP	NZ,C.419B               ; nope, print byte (with buffer)
        CALL	C.6000
        DEFB	0
        DEFW	C.4156                  ; RS232.SNDCHR
        EI
        RET

; double byte character

J$422A:	INC	HL
        LD	(HL),A                  ; store first byte double byte character
        DEC	HL
        LD	DE,I.42B7               ; japanese printer modes
        CALL	C.42C7                  ; set printer mode
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        SET	5,(HL)
J$4237:	SET	6,(HL)                  ; in double byte character
        RET

J$423A:	BIT	6,(HL)                  ; in double byte character ?
        JR	NZ,J$4272               ; yep, this is the second byte
        CALL	C.431B                  ; double byte header character ?
        JR	C,J$4249                ; nope,
        INC	HL
        LD	(HL),A                  ; store first byte double byte character
        DEC	HL
        DEC	A                       ; ok
        JR	J$4237

J$4249:	CALL	C.42F8                  ; normal ?
        JR	NZ,J$425D               ; nope,
        LD	DE,I.42BF               ; english printer modes
        PUSH	AF
        CALL	C.42C7                  ; set printer mode
        POP	BC
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        RES	5,(HL)
        LD	A,B
        JR	C.421C                  ; send or print byte

J$425D:	AND	A                       ; zero byte ?
        JR	NZ,J$4262               ; nope,
        INC	A                       ; ok
        RET

J$4262:	CP	20H                     ; control character ?
        JR	C,J$426F                ; yep,
        PUSH	AF
        XOR	A
        CALL	C.419B                  ; print byte (with buffer)
        POP	BC
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        LD	A,B
J$426F:	JP	C.419B                  ; print byte (with buffer)

J$4272:	LD	E,A
        INC	HL
        LD	D,(HL)                  ; first byte double byte character
        DEC	HL
        CALL	C.42F8                  ; normal ?
        JR	NZ,J.4289               ; nope,
        CALL	C.4303                  ; in shift JIS D mode ?
        JR	C,J.4289                ; yep,
        LD	A,(D.615D)
        AND	60H                     ; kanji code mode
        CP	40H                     ; in shift JIS mode ?
        JR	Z,J.42A1                ; yep, skip
J.4289:	PUSH	HL
        EX	DE,HL
        CALL	C.6000
        DEFB	2
        DEFW	C.409C
        EX	DE,HL
        POP	HL
        CALL	C.42F8                  ; normal ?
        JR	NZ,J.42A1               ; nope,
        CALL	C.4303                  ; in shift JIS D mode ?
        JR	NC,J.42A1               ; nope,
        SET	7,D
        SET	7,E
J.42A1:	OR	A
        BIT	7,(HL)                  ; uncompleted double byte send ?
        LD	A,D                     ; first byte
        CALL	Z,C.421C                ; nope, send or print byte
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        SET	7,(HL)                  ; first byte of double byte character send
        LD	A,E                     ; second byte
        CALL	C.421C                  ; send or print byte
        RET	C                       ; aborted, quit
        RET	Z                       ; time out, quit
        RES	7,(HL)                  ; double byte character send
        RES	6,(HL)                  ; clear double byte character flag
        RET

; japanese

I.42B7: DEFB    "$@"
        DEFB    "$B"
        DEFB    00H,00H
        DEFB    "K",00H                 ; kanji mode set

; english

I.42BF: DEFB    "(J"                    ; horizontal tab set
        DEFB    "(J"                    ; horizontal tab set
        DEFB    00H,00H
        DEFB    "H",00H                 ; pica mode set

;	  Subroutine set printer mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.42C7:	LD	A,(D.615D)              ; comterm mode
        CALL	C.42F8                  ; normal ?
        JR	Z,J$42D1                ; yep,
        LD	A,60H
J$42D1:	AND	60H                     ; kanji code mode
        RRCA
        RRCA
        RRCA
        RRCA
        EX	DE,HL
        LD	C,A
        LD	B,0
        ADD	HL,BC
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        EX	DE,HL
        LD	A,B
        OR	C
        JR	Z,J$42F6
        LD	A,1BH
        CALL	C.421C                  ; send or print byte
        RET	C
        RET	Z
        LD	A,C
        CALL	C.421C                  ; send or print byte
        RET	C
        RET	Z
        LD	A,B
        OR	A
        JP	NZ,C.421C               ; send or print byte
J$42F6:	INC	A
        RET

;	  Subroutine normal ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.42F8:	PUSH	DE
        PUSH	HL
        OR	A
        LD	DE,D.6186
        SBC	HL,DE
        POP	HL
        POP	DE
        RET

;	  Subroutine in shift JIS D mode ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.4303:	PUSH	BC
        LD	B,A
        LD	A,(D.615D)              ; comterm mode
        AND	60H                     ; kanji code mode
        CP	40H                     ; shift JIS mode ?
        JR	NZ,J.4317               ; nope,
        LD	A,(D.615E)
        AND	02H                     ; shift JIS D ?
        SCF
        JR	Z,J.4317                ; nope,
        DEFB    03EH
J.4317:	OR      A
        LD	A,B
        POP	BC
        RET

;	  Subroutine double byte header character ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.431B:	CP	81H
        RET	C
        CP	0A0H
        CCF
        RET	NC
        CP	0E0H
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4325:	LD	D,B
        LD	E,C
        LD	A,B
        CP	7FH
        RET	NC
        SUB	21H
        RET	C
        RRA
        ADD	A,81H
        CP	0A0H
        JR	C,J$4337
        ADD	A,40H
J$4337:	LD	D,A
        LD	A,C
        BIT	0,B
        JR	Z,J$4346
        ADD	A,1FH
        LD	E,A
        LD	A,C
        CP	60H
        RET	C
        INC	E
        RET

J$4346:	ADD	A,7EH
        LD	E,A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.434A:	XOR	A
        LD	(D.6186),A              ; clear normal flags
        LD	(D.6188),A              ; clear ? flags
        PUSH	HL
        LD	L,A
        LD	H,A
        LD	(D.618B),HL             ; clear
        LD	(D$618D),HL             ; clear
        LD	(D$618F),A              ; clear
        LD	(D.61A8),A              ; printer buffer empty
        POP	HL
        RET

;	  Subroutine initialize download text/log flags
;	     Inputs  ________________________
;	     Outputs ________________________

J$4362:	LD	A,(D.61C5)              ; english flag
        LD	(D.619A),A
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	HL,D.618B
        LD	DE,I.6190
        LD	BC,5
        LDIR
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine initialize printer echo flags
;	     Inputs  ________________________
;	     Outputs ________________________

C.437A:	LD	A,(D.61C5)              ; english flag
        LD	(D.619B),A
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	HL,D.618B
        LD	DE,I.6195
        LD	BC,5
        LDIR
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4392:	PUSH	BC
        PUSH	HL
        PUSH	IX
        POP	DE
        CALL	C$439D
        POP	HL
        POP	DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$439D:	LD	HL,D.618B
        OR	A
        SBC	HL,DE                   ; normal flags ?
        SCF                             ; set Cx
        RET	Z                       ; yep, quit
        LD	HL,I.6190
        OR	A
        SBC	HL,DE                   ; download text/log flags ?
        SCF
        CCF                             ; reset Cx
        RET

;	  Subroutine get received byte (printer echo)
;	     Inputs  ________________________
;	     Outputs ________________________

J$43AE:	LD	IX,I.6195               ; printer echo flags
        JR	J.43BE

;	  Subroutine get received byte (download text/log)
;	     Inputs  ________________________
;	     Outputs ________________________

J$43B4:	LD	IX,I.6190               ; download text/log flags
        JR	J.43BE

;	  Subroutine get received byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.43BA:	LD	IX,D.618B               ; normal flags
J.43BE:	PUSH	BC
        PUSH	DE
        PUSH	HL
        CALL	C$43C8
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$43C8:	OR	A
        LD	A,(IX+2)
        BIT	0,(IX+0)
        RES	0,(IX+0)
        RET	NZ
        CALL	C.4392
        JR	C,J$4400                ; normal flags,
        JR	NZ,J$43EE               ; printer echo flags,
        LD	HL,(D$6094)             ; number of bytes in receive buffer (download text/log)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        RET	Z                       ; yep, quit
        PUSH	IX
        CALL	C.6000
        DEFB	0
        DEFw	C.412C
        POP	IX
        JR	J.4414

J$43EE:	LD	HL,(D.6092)             ; number of bytes in receive buffer (printer echo)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        RET	Z                       ; yep, quit
        PUSH	IX
        CALL	C.6000
        DEFB	0
        DEFW	C.412F
        POP	IX
        JR	J.4414

J$4400:	LD	HL,(D.6090)             ; number of bytes in receive buffer
        LD	A,L
        OR	H                       ; receiver buffer empty ?
        RET	Z                       ; yep, quit
        PUSH	IX
        CALL	C.6000
        DEFB	0
        DEFW	C.40A2
        POP	IX
        EI
        RET	C
        RET	Z
        RET	M
J.4414:	LD	B,A
        LD	A,(D.6073)
        OR	A                       ; literal mode ?
        LD	A,B
        RET	NZ                      ; yep, quit
        CP	7FH                     ; DEL ?
        JR	Z,J$4423                ; yep,
        CP	20H                     ; control character ?
        JR	NC,J$4448               ; nope,
J$4423:	CP	1BH                     ; ESC ?
        JR	NZ,J$4431               ; nope,
        LD	(IX+1),1                ; in ESC sequence
        XOR	A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.442C:	RES	3,(IX+0)
        RET

J$4431:	CP	1AH
        JR	Z,J$4439
        CP	18H
        JR	NZ,J$4444
J$4439:	LD	(IX+1),0                ; leave ESC sequence
        CALL	C.442C
        RES	1,(IX+0)
J$4444:	CP	0FFH
        CCF
        RET

J$4448:	BIT	3,(IX+0)
        JR	Z,J$445A
        CALL	C.44D9                  ; mask data byte
        CP	40H
        CCF
        RET	NC
        CALL	C.442C
        OR	A
        RET

J$445A:	LD	A,(IX+1)
        OR	A                       ; in ESC sequence ?
        LD	A,B
        JR	NZ,J$44C3               ; yep,
        BIT	1,(IX+0)
        JR	NZ,J$44A5
        CP	20H	; " "
        JR	Z,J$4474
        CALL	C.4303                  ; in shift JIS D mode ?
        JR	C,J.4478                ; yep,
        CP	0A0H
        JR	C,J.4478
J$4474:	CP	0E0H
        CCF
        RET	NC
J.4478:	BIT	2,(IX+0)
        JR	NZ,J$449C
J.447E:	OR	A
        LD	A,(D.6084)
        INC	A                       ; 8 bits data byte ?
        LD	A,B
        RET	NZ                      ; nope, quit
        CALL	C.4392
        LD	A,(D.61C5)              ; english flag
        JR	C,J.4495                ; normal flags,
        LD	A,(D.619A)              ; english flag download text/log
        JR	Z,J.4495                ; download text/log flags,
        LD	A,(D.619B)
J.4495:	OR	A                       ; english ?
        LD	A,B
        RET	NZ                      ; yep, quit
        CP	81H
        CCF
        RET	NC
J$449C:	SET	1,(IX+0)
        LD	(IX+3),A
        XOR	A
        RET

J$44A5:	RES	1,(IX+0)
        LD	C,B
        LD	B,(IX+3)
        CALL	C.4303                  ; in shift JIS D mode ?
        JR	NC,J$44B6               ; nope,
        RES	7,B
        RES	7,C
J$44B6:	CALL	C.4325
        SET	0,(IX+0)
        LD	(IX+2),E
        LD	A,D
        OR	A
        RET

J$44C3:	CALL	C.44D9                  ; mask data byte
        CP	80H                     ; ASCII character ?
        JR	C,J$44DF                ; yep,
        XOR	A
        LD	(IX+1),A                ; leave ESC sequence
        LD	A,B
        CP	0A0H
        JR	C,J.447E
        CP	0E0H
        CCF
        JR	C,J.447E
        RET

;	  Subroutine mask data byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.44D9:	LD	A,(D.6084)
        AND	B
        LD	B,A
        RET

J$44DF:	CP	"0"
        JR	NC,J$450C
        LD	A,(IX+1)
        DEC	A                       ; first character in ESC sequence ?
        JR	NZ,J.4500               ; nope, update ESC sequence
        LD	A,B
        LD	(IX+4),A                ; store first character
        CP	"*"
        JR	NZ,J.4500               ; nope, update ESC sequence
J.44F1:	LD	(IX+2),A                ; store
        SET	0,(IX+0)
        XOR	A
        LD	(IX+1),A                ; leave ESC sequence
        LD	A,1BH
        OR	A
        RET

J.4500:	LD	A,(IX+1)
        INC	A                       ; 0FFH ?
        JR	NZ,J$4507               ; nope,
        DEC	A
J$4507:	LD	(IX+1),A
        XOR	A
        RET

J$450C:	LD	A,(IX+1)
        DEC	A                       ; first character in ESC sequence ?
        JR	NZ,J$4525               ; nope,
        LD	A,B
        CP	"K"
        JR	Z,J.453A
        CP	"H"
        JR	Z,J.4540
        CP	"["
        JR	J.44F1

?.451F:	SET	3,(IX+0)
        JR	J.44F1

J$4525:	LD	A,(IX+4)                ; first ESC sequence character
        CP	"$"
        JR	NZ,J$454A
        LD	A,B
        CP	"@"
        JR	Z,J.453A
        CP	"B"
        JR	Z,J.453A

; leave ESC sequence

J.4535:	XOR	A
        LD	(IX+1),A                ; leave ESC sequence
        RET

; ESC K, ESC $@, ESC $B

J.453A:	SET	2,(IX+0)
        JR	J$4544

; ESC H, ESC (

J.4540:	RES	2,(IX+0)
J$4544:	RES	1,(IX+0)
        JR	J.4535                  ; leave ESC sequence

J$454A:	CALL	C$454F
        JR	J.4535                  ; leave ESC sequence

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$454F:	CP	'('
        JR	NZ,J$4559
        LD	A,B
I$4554:	CP	40H
        JR	NC,J.4540
        RET

J$4559:	CP	')'
        JR	NZ,J$457D
        LD	A,(D.615D)              ; comterm mode
        AND	04H                     ; chinese mode ?
        RET	Z                       ; nope, quit
        LD	A,B
        SUB	30H
        JR	Z,J$456B
        CP	03H
        RET	NZ
J$456B:	CALL	C.4392
        LD	HL,D.61C5               ; english flag
        JR	C,J.457B                ; normal flags,
        LD	HL,D.619A
        JR	Z,J.457B                ; download text/log flags,
        LD	HL,D.619B
J.457B:	LD	(HL),A                  ; update english flag
        RET

J$457D:	CP	" "
        JR	NZ,J$458A
        LD	A,B
        CP	":"
        RET	NZ
        SET	4,(IX+0)
        RET

J$458A:	CP	"&"
        RET	NZ
        LD	A,B
        CALL	C.4392
        JR	C,J$459C                ; normal flags,
        RET	NZ                      ; printer echo flags, quit
        CP	":"
        JR	Z,J$45AC
        CP	";"
        JR	Z,J$45AB
J$459C:	CP	">"
        JR	Z,J$45A7
        CP	"<"
        RET	NZ
        LD	(D.619E),A
        RET

J$45A7:	LD	(D.619D),A
        RET

J$45AB:	XOR	A
J$45AC:	LD	(D$6355),A
        RET

I$45B0:	LD	IY,0
        LD	IX,0
        LD	HL,0
        CALL	CALSLT
        EI
        RET

S45B0   EQU     $-I$45B0

;	  Subroutine check if MSX-JE
;	     Inputs  Cx
;	     Outputs ________________________

C.45C0:	LD	HL,D.6175
        LD	(HL),0                  ; assume kanji entry is not possible
        LD	HL,I$45B0
        LD	DE,C.6176
        LD	BC,S45B0
        LDIR                            ; install MSX-JE call routine
        SBC	A,A
        LD	HL,I$61D8
        AND	(HL)
        CP	32
        RET	C
        SUB	04H
        AND	0FEH
        LD	(D.61CF),A
        LD	A,(HOKVLD)
        RRCA
        CCF                             ; EXTBIO initialized ?
        RET	C                       ; nope, quit
        LD	HL,-64
        ADD	HL,SP
        LD	A,H
        CP	HIGH 0C100H
        RET	C
        LD	SP,HL
        PUSH	HL
        IN	A,(0A8H)
        AND	0C0H
        RLCA
        RLCA
        LD	HL,EXPTBL
        LD	C,A
        LD	B,0
        ADD	HL,BC
        LD	A,(HL)
        AND	80H
        JR	Z,J$460D
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	A,(HL)
        AND	0C0H
        RRCA
        RRCA
        RRCA
        SCF
        RRA
J$460D:	OR	C
        LD	B,A
        LD	DE,256*16+0             ; MSX-JE, inquire
        POP	HL                      ; restore pointer to buffer
        PUSH	HL                      ; store pointer to buffer
        CALL	EXTBIO
        POP	DE                      ; restore pointer to buffer
        OR	A
        SBC	HL,DE                   ; found MSX-JE ?
        JR	Z,J.463D                ; nope,
        LD	A,L
        RRCA
        RRCA
        LD	B,A                     ; number of MSX-JE entries
J$4621:	LD	A,(DE)
        INC	DE
        AND	03H
        JR	Z,J$462E
        INC	DE
        INC	DE
        INC	DE
        DJNZ	J$4621                  ; next entry
        JR	J.463D

J$462E:	EX	DE,HL
        LD	A,(HL)
        LD	(C.6176+3),A            ; slotid MSX-JE
        INC	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        LD	(C.6176+6),DE           ; address MSX-JE
        OR	A
        SCF
J.463D:	PUSH	AF
        LD	HL,64+2
        ADD	HL,SP
        POP	AF
        LD	SP,HL                   ; remove buffer from stack
        CCF
        RET	C
        LD	A,1                     ; inquiry
        CALL	C.6176                  ; call MSX-JE
        OR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$464D:	LD	(C.6176+10),HL          ; start work space
        LD	A,2                     ; invoke
        CALL	C.6176                  ; call MSX-JE
        LD	HL,I.60B8
        LD	DE,FNKSTR
        LD	BC,5*16
        LDIR                            ; restore F1-F5 definition
        LD	E,00H
        LD	B,01H
        LD	A,(D.61CF)
        LD	C,A
        LD	A,9                     ; inquire window size
        CALL	C.6176                  ; call MSX-JE
        INC	HL
        LD	A,(HL)
        LD	(D.61CF),A
        LD	A,80H
        LD	(D.6175),A              ; kanji entry mode possible
        RET

;	  Subroutine release MSX-JE
;	     Inputs  ________________________
;	     Outputs ________________________

C$4678:	PUSH	AF
        LD	A,3                     ; release
        CALL	C.6176                  ; call MSX-JE
        POP	AF
        RET

;	  Subroutine flip kanji entry mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.4680:	LD	A,(D.6175)
        RLCA                            ; kanji entry mode possibe ?
        RET	NC                      ; nope, quit
        RLCA                            ; b6 set ?
        JR	C,J$46A3                ; yep,
        CALL	C.6000
        DEFB	2
        DEFW	C.409F
        RET	C
        LD	A,4                     ; clear
        CALL	C.6176                  ; call MSX-JE
        LD	HL,12
        PUSH	HL
        LD	L,0
        ADD	HL,SP
        CALL	C.472A
        POP	HL
        LD	A,0C0H                  ; in kanji entry mode
        JR	J$46AE

J$46A3:	CALL	C$46B2                  ; restore F1-F5 definition
        CALL	C.6000
        DEFB	2
        DEFW	C.40A2
        LD	A,80H                   ; not in kanji entry mode
J$46AE:	LD	(D.6175),A
        RET

;	  Subroutine restore F1-F5 definition
;	     Inputs  ________________________
;	     Outputs ________________________

C$46B2:	LD	HL,I.60B8
        LD	DE,FNKSTR
        LD	BC,5*16
        LDIR
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.46BE:	LD	HL,D.6175
        JR	NZ,J$46E4
        LD	A,(HL)
        AND	0C6H                    ; leave b7,b6,b2,b1
        XOR	0C6H                    ; b7,b6,b2 and b1 set ?
        JR	Z,J.4711                ; yep,
        LD	A,6
        CALL	SNSMAT
        LD	HL,I$635D
        LD	B,(HL)
        LD	(HL),A
        XOR	B
        AND	04H			; GRAPH
        LD	B,A
        LD	A,(D.6175)
        AND	0C4H                    ; leave b7,b6,b2
        XOR	0C4H                    ; b7,b6 and b2 set ?
        RET	NZ                      ; nope, quit
        INC	B                       ; GRAPH key pressed ?
        DJNZ	J.4711                  ; yep,
        RET

J$46E4:	BIT	6,(HL)                  ; in kanji entry mode ?
        JR	NZ,J$46EE               ; yep,
        CALL	CHGET                   ; get key
        EI
        CP	A
        RET

J$46EE:	BIT	2,(HL)
        JR	NZ,J.4711
        CP	7FH
        JR	Z,J$4704
        CP	20H
        JR	NC,J.4711
        DEC	A
        JR	NZ,J$4703
        CALL	C$4734
        DEC	A
        JR	NZ,J.4711
J$4703:	INC	A
J$4704:	PUSH	AF
        LD	A,10                    ; conflict detect control key collision prevention
        CALL	C.6176                  ; call MSX-JE
        OR	A
        JR	Z,J$4710
        POP	AF
        CP	A
        RET

J$4710:	POP	AF
J.4711:	LD	A,6                     ; dispatch
        CALL	C.6176                  ; call MSX-JE
        XOR	0C4H
        LD	(D.6175),A
        RRCA
        PUSH	AF
        CALL	C,C.472A
        POP	AF
        RRCA
        RET	NC
        LD	A,7                     ; get result
        CALL	C.6176                  ; call MSX-JE
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.472A:	LD	A,(D.61CF)
        CALL	C.6000
        DEFB	2
        DEFW	C.40A5
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4734:	CALL	CHSNS                   ; key pressed ?
        RET	P
        ADD	A,28H	; "("
        RET

?.473B:	NOP

; STATEMENT

J$473C:	EI
        PUSH	HL
        POP	IX
        LD	A,(D$6047)
        AND	A			; MSX modem disabled ?
        SCF
        RET	NZ			; yep, quit
        CALL	C$474C
        RET	C
        PUSH	DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$474C:	PUSH	BC
        PUSH	HL
        LD	HL,PROCNM
        LD	BC,256*"O"+"M"
        LD	DE,I$47AA
        LD	A,(HL)
        INC	HL
        CP	"C"
        JR	Z,J.476D
        LD	BC,256*"E"+"T"
        LD	DE,I$47EE
        CP	"N"
        JR	Z,J.476D
        DEC	HL
        LD	DE,I$482F
        JR	J.4777

J.476D:	LD	A,(HL)
        CP	B
        JR	NZ,J.478C
        INC	HL
        LD	A,(HL)
        CP	C
        JR	NZ,J.478C
        INC	HL

J.4777:	LD	A,(DE)
        INC	A			; end of table ?
        JR	Z,J.478C		; yep, quit with not found flag
        PUSH	HL
        CALL	C.4790
        POP	HL
        JR	Z,J$4786
        INC	DE
        INC	DE
        JR	J.4777

J$4786:	EX	DE,HL
        INC	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        DEFB	006H                    ; skip next instruction
J.478C:	SCF
        POP	HL
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4790:	LD	A,(DE)
        CP	(HL)
        JR	NZ,J.479A
        AND	A
        RET	Z
        INC	DE
        INC	HL
        JR	C.4790

J.479A:	LD	A,(DE)
        INC	DE
        AND	A
        JR	NZ,J.479A
        INC	A
        RET

;	  Subroutine to upper
;	     Inputs  ________________________
;	     Outputs ________________________

C.47A1:	CP	"a"
        RET	C
        CP	"z"+1
        RET	NC
        SUB	20H
        RET

; CALLCOM statements

I$47AA:	DEFB	"PROTOCOL",0
        DEFW	C.5A72
        DEFB	"INI",0
        DEFW	C.4893
        DEFB	"STAT",0
        DEFW	C.4958
        DEFB	"BREAK",0
        DEFW	C.496F
        DEFB	"TERM",0
        DEFW	C.4A50
        DEFB	0
        DEFW	C.5678
        DEFB	"ON",0
        DEFW	C.56D3
        DEFB	"OFF",0
        DEFW	C.56B6
        DEFB	"STOP",0
        DEFW	C.56F0
        DEFB	"HELP",0
        DEFW	C.5494
        DEFB	0FFH

; CALLNET statements

I$47EE:	DEFB	"CONFIG",0
        DEFW	C.57ED
        DEFB	"HOOK",0
        DEFW	C.583A
        DEFB	"INI",0
        DEFW	C.58D8
        DEFB	0
        DEFW	C.5677
        DEFB	"OFF",0
        DEFW	C.56B5
        DEFB	"ON",0
        DEFW	C.56D2
        DEFB	"STOP",0
        DEFW	C.56EF
        DEFB	"STAT",0
        DEFW	C.580D
        DEFB	"SPK",0
        DEFW	C.5860
        DEFB	"MODEM",0
        DEFW	C.5881
        DEFB	0FFH

; other CALL statements

I$482F:	DEFB	"DIAL",0
        DEFW	C.5952
        DEFB	"DIALC",0
        DEFW	C.5948
        DEFB	"DTMF",0
        DEFW	C.5835
        DEFB	"LINESEL",0
        DEFW	C.58B3
        DEFB	"TELCOM",0
        DEFW	C.57A6
        DEFB	"BTELCOM",0
        DEFW	C.57BC
        DEFB	"REMOTE",0
        DEFW	C.57E0
        DEFB	0FFH

J$486C:	LD	E,7
        DEFB    1
J$486F:	LD      E,56
        DEFB    1
        LD      E,51
        DEFB    1
J$4875: LD      E,58
        DEFB    1
J$4878:	LD      E,54
        DEFB    1
J.487B:	LD      E,59
        DEFB    1
J$487E:	LD      E,8
        DEFB    1
J$4881:	LD      E,2
        DEFB    1
J$4884:	LD      E,5
        DEFB    1
J$4887:	LD      E,13
        DEFB    1
J.488A:	LD      E,19
J$488C:	LD	IX,ERROR
        JP	C.5BC3

; _COMINI

C.4893:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        PUSH	BC
        PUSH	DE
        PUSH	HL
        EXX
        PUSH	HL
        DI
        CALL	C.6000
        DEFB	0
        DEFW	C.4117                  ; disable i8251 receiver
        POP	HL
        EXX
        LD	HL,I$494B
        LD	DE,D.6065
        PUSH	DE
        POP	IY
        LD	BC,8
        LD	A,(D$4957)
        LD	(IY+12),A
        LDIR
        POP	HL
        POP	DE
        POP	BC
        LD	A,B
        AND	C
        INC	A
        JR	NZ,J$48D3
        LD	A,D
        AND	A
        JR	Z,J$48C6
        CP	":"
J$48C6:	JP	Z,J$492E
        CP	")"
        JR	Z,J$48EC
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        JR	J$48F2

J$48D3:	PUSH	HL
        EXX
        PUSH	HL
        EXX
        POP	HL
        LD	A,B
        AND	A
        JR	Z,J$48E8
        PUSH	IY
        POP	DE
J$48DF:	LD	A,(HL)
        CALL	C.47A1			; to upper
        LD	(DE),A
        INC	DE
        INC	HL
        DJNZ	J$48DF
J$48E8:	POP	HL
        LD	A,(HL)
        CP	")"
J$48EC:	JR	Z,J.492A
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
J$48F2:	CP	","
        JR	Z,J.4908
        CALL	C.5B8F                  ; evaluate address operand
        LD	(D.606D),DE             ; store receiver baudrate
        LD	A,(HL)
        CP	")"
        JR	NZ,J.4908
        LD	(D.606F),DE             ; store transmitter baudrate
        JR	J.492A

J.4908:	CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CP	","
        JR	Z,J$491C
        CALL	C.5B8F                  ; evaluate address operand
        LD	(D.606F),DE             ; store transmitter baudrate
        LD	A,(HL)
        CP	")"
        JR	Z,J.492A
J$491C:	CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CP	")"
        JR	Z,J.492A
        CALL	C.5B97			; evaluate byte operand
        LD	(D$6071),A              ; timeout value
J.492A:	CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J$492E:	LD	(IY+4),4EH
        CALL	C.6000
        DEFB	0
        DEFW	C.411A                  ; initialize serial
        JP	C,J$4884		; illegal function call error
        CALL	C.6000
        DEFB	0
        DEFW	C.40F9                  ; port open ?
        JR	Z,J$4949                ; nope,
        CALL	C.6000
        DEFB	0
        DEFW	C.4150
J$4949:	AND	A
        RET

I$494B:	DEFB	"8N1XNNNN"
        DEFW	300
        DEFW	300
D$4957:	DEFB	0

; _COMSTAT

C.4958:	CALL	C.5821                  ; evaluate comidentifier and check if this one, check for "," locate variable and check for ")"
        RET	C
        CALL	C.6000
        DEFB	0
        DEFW	C.40F9                  ; port open ?
        JP	Z,J.487B                ; nope, file not open error
        PUSH	HL
        CALL	C.6000
        DEFB	0
        DEFW	C.4150                  ; RS232.STAT
        JP	J.5818

; _COMBREAK

C.496F:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        CALL	C.6000
        DEFB	0
        DEFW	C.40F9                  ; port open ?
        JP	Z,J.487B                ; nope, file not open error
        LD	A,D
        CP	","
        JR	Z,J$4992
        DEC	HL
        CALL	C.5B76                  ; get next BASIC character
        JR	Z,J$498D
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J$498D:	LD	DE,10
        JR	J$499C

J$4992:	CALL	C.5B76                  ; get next BASIC character
        CALL	C.5B8F                  ; evaluate address operand
        CALL	C.5B6E			; check for BASIC character
J$499B:	DEFB	")"
J$499C:	LD	A,E
        ADD	A,0FDH
        SBC	A,A
        OR	D
        JP	Z,J$4884		; illegal function call error
        CALL	C.6000
        DEFB	0
        DEFW	C.4168                  ; RS232.SNDBRK
        EI
        LD	A,0
        INC	A
        CALL	C.6000
        DEFB	0
        DEFW	C.411D                  ; update error flags
        JP	C,J.488A                ; device i/o error
        RET

;	  Subroutine store foreground, background and border color
;	     Inputs  ________________________
;	     Outputs ________________________

C.49B8:	PUSH	HL
        LD	HL,(FORCLR)
        LD	(D.6158),HL
        LD	A,(BDRCLR)
        LD	(D.615A),A
        POP	HL
        RET

J$49C7:	PUSH	HL
        PUSH	AF
        LD	(D.615D),A              ; update comterm mode
        LD	A,(D$7EF9)
        OR	A
        LD	B,00H
        JR	Z,J$49D6
        LD	B,02H                   ; set shift JIS D flag
J$49D6:	LD	A,C
        OR	B
        LD	(D.615E),A              ; update shift JIS D flag
        LD	(D.6162),HL             ; update auto login pointer
        CALL	C.49E4                  ; restore foreground, background and border color
        POP	AF
        POP	HL
        RET

;	  Subroutine restore foreground, background and border color
;	     Inputs  ________________________
;	     Outputs ________________________

C.49E4:	PUSH	HL
        LD	HL,(D.6158)
        LD	(FORCLR),HL
        LD	A,(D.615A)
        LD	(BDRCLR),A
        POP	HL
        RET


;	  Subroutine cursor off
;	     Inputs  ________________________
;	     Outputs ________________________

C$49F3:	LD	HL,I$4A15
        JR	J.49FB

;	  Subroutine cursor on
;	     Inputs  ________________________
;	     Outputs ________________________

J$49F8:	LD	HL,I$4A0F
J.49FB:	LD	A,(HL)
        AND	A
        RET	Z
        CALL	C.4EBD			; echo to screen/printer (literal)
        INC	HL
        JR	J.49FB

;	  Subroutine auto login aborted message
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A04:	PUSH	AF
        LD	L,56                    ; text id = auto login aborted
        CALL	C.6000
        DEFB	3
        DEFW	C.40C3                  ; output message
        POP	AF
        RET

; cursor on escape sequence

I$4A0F: DEFB    27,"[>5l",0

; cursor off escape sequence

I$4A15: DEFB    27,"[>5h",0

;	  Subroutine wait for carrier detect (40s)
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A1B:	LD	C,40                    ; wait time = 40 seconds
        DEFB    11H

;	  Subroutine wait for carrier detect (10s)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A1E: LD      C,10                    ; wait time = 10 seconds
        CALL	C.6000
        DEFB    0
        DEFW    C$4096                  ; get carry detect status
        LD	A,0                     ; ok
        RET	C                       ; yep, quit
        CALL	C.6000
        DEFB    0
        DEFW    C$40AE                  ; counter #1, clear
J$4A2F:	CALL	C.4F02                  ; update counter
        CALL	C.6000
        DEFB    0
        DEFW    C$4090                  ; CTRL-STOP pressed ?
        EI
        LD	A,1                     ; CTRL-STOP pressed
        RET	C                       ; yep, quit
        CALL	C.6000
        DEFB    0
        DEFW    C$40B1                  ; counter #1, get number of seconds
        CP	C                       ; wait time passed ?
        LD	A,2                     ; time out
        RET	NC                      ; yep, quit
        CALL	C.6000
        DEFB    0
        DEFW    C$4096                  ; get carrier detect status
        JR	NC,J$4A2F               ; nope, again
        XOR	A                       ; ok
        RET

; _COMTERM

C.4A50:	CALL	C.49B8                  ; store foreground, background and border color
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C$506C                  ; evaluate comterm mode
        DEC	HL
        CALL	C.5B76                  ; get next BASIC character
        JR	Z,J$4A63                ; end of statement or line,
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J$4A63:	CALL	C.6000
        DEFB    0
        DEFW    I$40F9                  ; port open ?
        JR	Z,J$4A70                ; nope,
        LD	A,0FFH
        LD	(D$635C),A
J$4A70:	PUSH	HL
        CALL	C.5BBB                  ; close all i/o channels
        XOR	A                       ; off hook
        LD	H,A
        LD	L,A
        LD	(D.6162),HL             ; end auto login
        LD	(D.7EFC),A
        CALL	C.6000
        DEFB    0
        DEFW    I$4177                  ; MODEM.LINSEL (off hook)
        LD	A,(CNSDFG)
        LD	(D.7EFA),A              ; store function key display
        LD	HL,(FORCLR)
        LD	(D.7EEA),HL             ; store fore and background color
        LD	A,L
        LD	(D$7EEC),A              ; store border color
        CALL	C.4BEA                  ; comterm
        POP	HL
        SUB	3                       ; CTRL-SPACE or GRAPH-SELECT exit ?
        RET	Z                       ; yep, quit
        PUSH	AF
        LD	A,1                     ; on hook
        CALL	C.6000
        DEFB    0
        DEFW    I$4177                  ; MODEM.LINSEL
        POP	AF
        DEC	A                       ; CTRL-STOP pressed ?
        JP	Z,J$486C                ; yep, out of memory error
        OR	A
        RET

;	  Subroutine wait for received byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AAA:	CALL	C.43BA                  ; get received byte
        RET	C
        RET	NZ
        CALL	C.6000
        DEFB    0
        DEFW    C$4090                  ; CTRL-STOP pressed ?
        JR	NC,C.4AAA               ; nope, again
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AB8:	CALL	C.43BA                  ; get received byte
        RET	C                       ; aborted, quit
        RET	NZ                      ; time out, quit
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	HL,D.618B
        BIT	4,(HL)
        RES	4,(HL)
        JR	Z,J$4AD1
        CALL	C$5137
J.4ACC:	POP	HL
        POP	DE
        POP	BC
        XOR	A
        RET

J$4AD1:	LD	A,(D.619D)
        OR	A
        JR	Z,J$4B03
        XOR	A
        LD	(D.619D),A
        LD	HL,I.6380
        LD	B,32
J$4AE0:	LD	A,(HL)
        PUSH	BC
        PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$4156                  ; RS232.SNDCHR
        POP	HL
        POP	BC
        JR	C,J.4ACC                ; aborted, quit
        LD	A,(HL)
        CP	0DH                     ; CR ?
        JR	Z,J.4ACC                ; yep, quit
        CP	0AH                     ; LF ?
        JR	Z,J.4ACC                ; yep, quit
        INC	HL
        DJNZ	J$4AE0
        LD	A,13                    ; CR
        CALL	C.6000
        DEFB    0
        DEFW    C$4156                  ; RS232.SNDCHR
        JR	J.4ACC                  ; quit

J$4B03:	LD	A,(D.619E)
        OR	A
        JR	Z,J.4ACC                ; quit
        XOR	A
        LD	(D.619E),A
        LD	HL,I.6380
        LD	B,32
J$4B12:	PUSH	BC
        PUSH	HL
J$4B14:	CALL	C.6000
        DEFB    0
        DEFW    C$415F                  ; RS232.LOC
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	Z,J$4B14                ; yep, wait
        CALL	C.6000
        DEFB    0
        DEFW    C$40A2                  ; wait for received byte
        POP	HL
        POP	BC
        JR	C,J.4ACC                ; aborted, quit
        LD	(HL),A
        CP	0DH                     ; CR ?
        JR	Z,J.4ACC                ; yep, quit
        CP	0AH                     ; LF ?
        JR	Z,J.4ACC                ; yep, quit
        INC	HL
        DJNZ	J$4B12
        JR	J.4ACC                  ; quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B36:	PUSH	BC
        CALL	C.4A1E                  ; wait for carrier detect (10s)
        POP	BC
        AND	A                       ; carrier detected ?
        SCF
        RET	NZ                      ; nope, quit
        CALL	C.4F02                  ; update counter
        CALL	C.4AB8
        JR	C,J$4B4F
        RET	NZ
        CALL	C.6000
        DEFB    0
        DEFW    C$4090                  ; CTRL-STOP pressed ?
        JR	NC,C.4B36               ; nope, again
J$4B4F:	LD	A,1
        RET

;	  Subroutine parse auto login sting
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B52:	LD	A,B
        OR	C
        RET	Z
        LD	A,(HL)
        INC	HL
        DEC	BC
        CP	"\"
        SCF
        CCF                             ; reset Cx
        RET	NZ
        LD	A,B
        OR	C
        RET	Z
        LD	A,(HL)
        INC	HL
        DEC	BC
        LD	D,A                     ; store character
        CALL	C.47A1			; to upper
        CP	"P"
        JR	Z,C.4B52                ; ignore and restart parse auto login sting
        CP	"T"
        JR	Z,J$4B8E
        CP	"B"
        JR	Z,J$4BA5
J$4B73:	CALL	C.5225                  ; hexdecimal character ?
        JR	C,J$4B8A                ; nope, return character
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        LD	E,A                     ; store high nibble
        LD	A,B
        OR	C
        RET	Z                       ; quit with Zx set
        LD	A,(HL)
        INC	HL
        DEC	BC
        CALL	C.5225                  ; hexdecimal character ?
        JR	C,C.4B52                ; nope, ignore and restart parse auto login sting
        OR	E                       ; combine with high nibble
        LD	D,A                     ; store byte
J$4B8A:	XOR	A
        INC	A                       ; reset Cx, reset Zx
        LD	A,D                     ; byte
        RET

J$4B8E:	LD	A,B
        OR	C
        RET	Z
        LD	A,(HL)
        INC	HL
        DEC	BC
        CP	"0"
        JR	C,C.4B52                ; ignore and restart parse auto login sting
        CP	"9"+1
        JR	NC,C.4B52               ; ignore and restart parse auto login sting
        SUB	"0"
        SCF
        RET	NZ
        LD	A,10
        OR	A
        SCF
        RET

J$4BA5:	LD	A,B
        OR	C
        RET	Z
        LD	A,(HL)
        INC	HL
        DEC	BC
        CALL	C.47A1			; to upper
        CP	"K"
        JR	NZ,J$4BB7
        OR	A
        LD	A,0
        SCF
        RET

J$4BB7:	DEC	HL
        INC	BC
        LD	A,"B"
        JR	J$4B73


;	  Subroutine store PROMPT hook and disable
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BBD:	PUSH	AF
        PUSH	HL
        LD	A,(D.F24F+0)
        LD	HL,(D.F24F+1)
        LD	(FBUFFR+0),A
        LD	(FBUFFR+1),HL
        LD	HL,3333H
        LD	(D.F24F+0),HL
        LD	A,0C9H
        LD	(D$F24F+2),A
        POP	HL
        POP	AF
        RET


;	  Subroutine restore PROMPT hook
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BD9:	PUSH	AF
        PUSH	HL
        LD	A,(FBUFFR+0)
        LD	HL,(FBUFFR+1)
        LD	(D.F24F+0),A
        LD	(D.F24F+1),HL
        POP	HL
        POP	AF
        RET

;	  Subroutine comterm
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BEA:	CALL	C.4BBD                  ; store PROMPT hook and disable
        XOR	A
        LD	(INTFLG),A              ; clear STOP status
        LD	(D.6074),A              ; printer echo disabled
        LD	(D.6075),A              ; printer echo receive buffer empty
        LD	(D.6073),A              ; literal mode = off
        LD	(D.6351),A              ; download text/log disabled
        LD	(D.6352),A              ; upload text/log disabled
        LD	L,A
        LD	H,A
        LD	(D.61A6),HL
        CPL
        LD	(D.6173),A              ; comterm activated
        LD	A,(D.7EFC)
        LD	(D.6077),A              ; set duplex mode
        LD	HL,CNSDFG
        LD	DE,D.7EFA
        LD	B,(HL)
        LD	A,(DE)
        LD	(HL),A
        LD	A,B
        LD	(DE),A                  ; swap function key display
        CALL	C.434A
        LD	HL,FNKSTR
        LD	DE,I.60B8
        LD	BC,10*16
        LDIR                            ; store F1-F10 definition
        LD	HL,I$547B
        LD	DE,FNKSTR+5*16
        LD	B,5
J$4C30:	PUSH	BC
        LD	BC,5
        LDIR
        LD	B,16-5
J$4C38:	LD	(DE),A
        INC	DE
        DJNZ	J$4C38
        POP	BC
        DJNZ	J$4C30                  ; define F5-F10
        LD	HL,(D.7EEA)
        LD	(FORCLR),HL             ; restore fore and background color
        LD	A,H
        LD	(BDRCLR),A              ; restore border color
        LD	A,(D.615E)
        LD	C,A                     ; shift JIS D mode, 12 dots mode
        LD	A,(D.615D)              ; comterm mode
        CALL	C.6000
        DEFB    2
        DEFW    C$4090                  ; initialize comterm mode
        LD	A,(D.615D)
        RRCA
        RRCA
        RRCA                            ; Cx = chinese mode
        CALL	C.45C0                  ; check if MSX-JE
        JR	C,J$4C9B                ; nope,
        XOR	A
        LD	(D.616E),A
        LD	(D.6170),HL
        CALL	C.4F92
        JR	NC,J.4C8B
        LD	A,1
        LD	(D.616E),A
        LD	(D.6170),BC
        CALL	C.4F92
        JR	NC,J.4C8B
        XOR	A
        LD	(D.616E),A
        LD	(D.6170),DE
        CALL	C.4F92
        LD	A,4                     ; comterm exit code = out of memory
        JP	C,J.53F3                ; quit comterm
J.4C8B:	LD	HL,I$5060
        PUSH	HL                      ; release MSX-JE
        LD	HL,(D.6166)
        LD	DE,(D.6168)
        CALL	C$464D
        JR	J$4CA3

J$4C9B:	CALL	C.500D
        LD	A,4                     ; comterm exit code = out of memory
        JP	C,J.53F3                ; quit comterm
J$4CA3:	LD	HL,(D.616C)
        LD	DE,9
        OR	A
        SBC	HL,DE
        SRL	H
        RR	L
        LD	D,H
        LD	B,L
        LD	HL,(D.616A)             ; buffer
        LD	E,4                     ; raw mode
        LD	C,0                     ; buffer size
        CALL	C.6000
        DEFB    0
        DEFW    C$414D                  ; RS232.OPEN
        CALL	C.6000
        DEFB    2
        DEFW    C$40AE
        CALL	C.6000
        DEFB    2
        DEFW    C$40B1
        CALL	C.6000
        DEFB    2
        DEFW    C$40B7
        CALL	C.6000
        DEFB    2
        DEFW    C$40B4
        CALL	C$4A1B                  ; wait for carrier detect (40s)
        OR	A                       ; carrier detected ?
        JP	NZ,J.53F3               ; nope, quit comterm
        LD	HL,(D.6162)
        LD	A,H
        OR	L                       ; auto login ?
        JP	Z,J.4DA4                ; nope, loop
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        LD	A,B
        OR	C
        JP	Z,J.4D9E                ; end auto login
        DEC	HL
        PUSH	HL
        LD	L,52                    ; text id = auto login started
        CALL	C.6000
        DEFB    3
        DEFW    I$40C3                  ; output message
        POP     HL
J.4CF9:	LD	C,(HL)
        INC	HL
        LD	B,(HL)
        INC	HL
        LD	A,B
        OR	C                       ; size = 0 ?
        JP	Z,J.4D96                ; yep, end auto login
        DEC	BC
        LD	A,B
        OR	C
        JR	Z,J.4D58
J.4D07:	CALL	C.4F02                  ; update counter
        PUSH	BC
        PUSH	HL
        CALL	C.4A1E                  ; wait for carrier detect (10s)
        POP	HL
        POP	BC
        AND	A                       ; carrier detected ?
        JP	NZ,J.53F3               ; nope, quit comterm
        CALL	C.4B52                  ; parse auto login sting
        JR	Z,J.4D58
        JR	NC,J$4D47
        OR	A
        JR	NZ,J$4D27
        CALL	C.6000
        DEFB    0
        DEFW    C$40F0                  ; send 300ms break
        JR	J.4D07                  ; again

J$4D27:	LD	D,A                     ; store wait time
        CALL	C.6000
        DEFB    0
        DEFW    C$40AE                  ; counter #1, clear
J$4D2E:	CALL	C.4F02                  ; update counter
        CALL	C.4AB8
        CALL	C,C.4A04                ; error, auto login aborted message
        JR	C,J.4D9E                ; error, end auto login
        CALL	NZ,C.4EBD		; echo to screen/printer (literal)
        CALL	C.6000
        DEFB    0
        DEFW    C$40B1                  ; counter #1, get number of seconds
        CP	D                       ; wait time passed ?
        JR	C,J$4D2E                ; nope, wait
        JR	J.4D07

J$4D47:	CALL	C.40EA                  ; send or print byte
        CALL	C,C.4A04                ; error, auto login aborted message
        JR	C,J.4D9E                ; error, end auto login
        LD	A,(D.6077)
        OR	A                       ; full duplex mode ?
        CALL	NZ,C.4EBD               ; nope, echo to screen/printer (literal)
        JR	J.4D07

J.4D58:	LD	C,(HL)
        INC	HL
        LD	B,(HL)
        INC	HL
        LD	A,B
        OR	C
        JR	Z,J.4D96                ; end auto login
        DEC	BC
        LD	A,B
        OR	C
        JR	Z,J.4CF9
        LD	(D.6162),HL             ; update auto login pointer
        LD	(D.6065),BC
J.4D6C:	CALL	C.4F02                  ; update counter
        CALL	C.4B52                  ; parse auto login sting
        JP	Z,J.4CF9
        JR	C,J.4D6C
        LD	D,A
        CALL	C.4B36
        JR	NC,J$4D87
        CP	2
        JP	Z,J.53F3                ; quit comterm
        CALL	C.4A04                  ; auto login aborted message
        JR	J.4D9E                  ; end auto login

J$4D87:	CALL	C.4EBD			; echo to screen/printer (literal)
        CP	D
        JR	Z,J.4D6C
        LD	HL,(D.6162)             ; auto login pointer
        LD	BC,(D.6065)
        JR	J.4D6C

J.4D96:	LD	L,54                    ; text id = end of auto login
        CALL	C.6000
        DEFB    3
        DEFW    C$40C3                  ; output message

; end auto login

J.4D9E: LD      HL,0
        LD	(D.6162),HL             ; end auto login

; loop

J.4DA4:	EI
        CALL	C.4A1E                  ; wait for carrier detect (10s)
        AND	A                       ; carrier detected ?
        JP	NZ,J.53F3               ; nope, quit comterm
        CALL	C.4F02                  ; update counter
        LD	A,(D.6074)
        OR	A                       ; printer echo enabled ?
        JR	NZ,J.4DC8               ; yep, skip
        LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	Z,J.4DC8                ; yep, skip
        LD	HL,(D.6092)             ; number of bytes in receive buffer (printer echo)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	NZ,J.4DC8               ; nope,
        LD	(D.6075),A              ; printer echo receive buffer empty
        CALL	C$536F
J.4DC8:	CALL	C.539A
        LD	A,(D.6351)
        OR	A                       ; download text/log enabled ?
        JR	Z,J.4DEB                ; nope,
        LD	A,(D.6049)
        AND	10H                     ; terminal mode = raw ?
        JR	NZ,J$4DDE               ; yep,
        LD	A,(D$6354)
        OR	A
        JR	NZ,J$4DE5
J$4DDE:	LD	A,(D.6086)
        BIT	1,A                     ; sending suspended ?
        JR	Z,J.4DEB                ; nope,
J$4DE5:	CALL	C.6000
        DEFB    3
        DEFW    C$409F
J.4DEB:	CALL	C.4AB8
        JP	C,J$4EFD
        JR	NZ,J$4DF9
        CALL	C.6000
        DEFB    3
        DEFW    C$40C6
J$4DF9:	CALL	NZ,C.4EBD		; echo to screen/printer (literal)
        CALL	C.6000
        DEFB    0
        DEFW    C$40F6                  ; STOP pressed ?
        JR	Z,J$4E0A                ; nope, skip break
        CALL	C.6000
        DEFB    0
        DEFW    C$40F0                  ; send 300ms break
J$4E0A:	CALL	C.6000
        DEFB    0
        DEFW    C$4090                  ; CTRL-STOP pressed ?
        LD	A,1                     ; comterm exit code = 
        JP	C,J.53F3                ; yep, quit comterm
        CALL	CHSNS                   ; key pressed ?
        EI
        CALL	C.6000
        DEFB    2
        DEFW    C$4099                  ; update function key display
        JR	Z,J$4E69                ; nope,
        LD	HL,(GETPNT)
        LD	A,(HL)
        CP	0FFH                    ; comterm function defintion ?
        JP	Z,J$5261                ; yep, handle comterm function key
        PUSH	AF
        LD	A,(D.6352)
        OR	A                       ; upload text/log enabled ?
        JR	Z,J$4E5F                ; nope,
        CALL	CHGET                   ; get key
J$4E34:	POP	AF
        CALL	C.6000
        DEFB    0
        DEFW    C$415F                  ; RS232.LOC
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	NZ,J.4E5C               ; nope, loop
        LD	A,(D.6086)
        BIT	2,A                     ; XON received ?
        JR	NZ,J.4E5C               ; yep, loop
        CALL	C.6000
        DEFB    3
        DEFW    C$409C                  ; get byte from disk buffer (for upload)
        CP	1AH                     ; EOF ?
        JP	Z,J.52BA                ; yep, stop upload log/text and loop
        PUSH	AF
        CALL	C.4EA3                  ; send or print byte (with duplex and auto LF)
        POP	AF
        CALL	C.6000
        DEFB    3
        DEFW    C$40BA                  ; wait between characters
J.4E5C:	JP	J.4DA4                  ; loop

J$4E5F:	POP	AF
        CP	18H                     ; SELECT ?
        JR	Z,J$4E66
        CP	20H                     ; SPACE ?
J$4E66:	CALL	Z,C$5239                ; yep, check special keys
J$4E69:	PUSH	AF
        LD	A,(D.6352)
        OR	A                       ; upload text/log enabled
        JR	NZ,J$4E34               ; yep,
        POP	AF
        CALL	C.46BE
        JR	C,J.4E7B
        CALL	Z,C$4E87
        JR	J.4E5C                  ; loop

J.4E7B:	LD	A,(HL)
        OR	A
        JR	Z,J.4E5C                ; loop
        PUSH	HL
        CALL	C.4EA3                  ; send or print byte (with duplex and auto LF)
        POP	HL
        INC	HL
        JR	J.4E7B                  ; next

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4E87:	LD	C,A
        LD	A,(D.615D)              ; comterm mode
        AND	06H                     ; chinese + full
        CP	02H
        LD	A,C
        JR	Z,C.4EA3                ; send or print byte (with duplex and auto LF)
        CP	80H
        JR	C,C.4EA3                ; send or print byte (with duplex and auto LF)
        CP	86H
        RET	C
        CP	0A0H
        JR	C,J$4EA1
        CP	0E0H
        JR	C,C.4EA3                ; send or print byte (with duplex and auto LF)
J$4EA1:	XOR	20H

;	  Subroutine send or print byte (with duplex and auto LF)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EA3:	CALL	C.40EA                  ; send or print byte
        LD	C,A
        LD	A,(D.6077)
        AND	A                       ; full duplex mode ?
        RET	Z                       ; yep, quit
        LD	A,C
        PUSH	AF
        CALL	C.4EBD			; echo to screen/printer (literal)
        POP	AF
        CP	13
        RET	NZ
        LD	HL,D.6085
        BIT	3,(HL)                  ; auto LF on receive ?
        RET	Z                       ; nope, quit
        LD	A,10

;	  Subroutine echo to screen/printer (literal)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EBD:	PUSH	BC
        LD	B,A
        LD	A,(D.6073)
        AND	A                       ; literal mode ?
        JR	Z,J.4EE3                ; nope, print to screen/printer
        LD	A,B
        CP	20H                     ; control code ?
        JR	NC,J.4EE3               ; nope, print to screen/printer
        LD	A,"^"
        CALL	C.4EE5                  ; print to screen/printer
        LD	A,B
        ADD	A,40H
        CALL	C.4EE5                  ; print to screen/printer
        LD	A,B
        CP	10                      ; LF ?
        POP	BC
        RET	NZ                      ; nope, quit
        LD	A,13                    ; CR
        CALL	C.4EE5                  ; print to screen/printer
        LD	A,10                    ; LF
        JR	C.4EE5                  ; print to screen/printer

J.4EE3:	LD	A,B
        POP	BC

;	  Subroutine print to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EE5:	PUSH	AF
        PUSH	HL
        PUSH	BC
        PUSH	DE
        CALL	C.6000
        DEFB    2
        DEFW    C$4093
        POP	DE
        POP	BC
        POP	HL
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EF4:	LD	A,13
        CALL	C.4EBD
        LD	A,10
        JR	C.4EBD

J$4EFD:	LD	A,1                     ; comterm exit code = 
        JP	J.53F3                  ; quit comterm

;	  Subroutine update counter
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F02:	PUSH	BC
        PUSH	DE
        PUSH	HL
        CALL	C$4F0C                  ; update counter (raw)
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine update counter (raw)
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F0C:	LD	HL,(JIFFY)
        LD	DE,(D.619F)
        LD	(D.619F),HL             ; update last JIFFY value
        OR	A
        SBC	HL,DE
        EX	DE,HL                   ; difference in JIFFY
        LD	HL,(D.61A1)
        OR	A
        SBC	HL,DE                   ; - timer value
        JR	NC,J.4F3B               ;
J$4F22:	LD	DE,600                  ; 10 seconds
        ADD	HL,DE
        PUSH	AF
        CALL	C$4F6A                  ; increase counter
        POP	AF
        JR	NC,J$4F22               ; again
        LD	A,(D.61D9)
        OR	A                       ; ?? mode ?
        JR	Z,J.4F3B                ; nope, skip
        PUSH	HL
        CALL	C.6000
        DEFB    2
        DEFW    C$40B1
        POP	HL
J.4F3B:	LD	(D.61A1),HL             ; update timer value
        CALL	C.6000
        DEFB    0
        DEFW    C$413E                  ; receive buffer full ?
        EX	DE,HL
        LD	HL,(D.61A6)
        OR	A
        SBC	HL,DE
        JR	NC,J$4F53
I$4F4D:	XOR	A
        SUB	L
        LD	L,A
        SBC	A,L
        SUB	H
        LD	H,A                     ; negate
J$4F53:	LD	BC,50
        OR	A
        SBC	HL,BC                   ; < 50 ?
        RET	C                       ; yep, quit
        LD	(D.61A6),DE
        LD	A,(D.61D9)
        OR	A                       ; ?? mode ?
        RET	Z                       ; nope, quit
        CALL	C.6000
        DEFB    2
        DEFW    C$40B4
        RET

;	  Subroutine increase counter
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F6A:	LD	A,(D.61A5)
        ADD	A,10
        DAA
        LD	(D.61A5),A
        CP	60H
        RET	NZ
        XOR	A
        LD	(D.61A5),A
        LD	A,(D.61A4)
        INC	A
        DAA
        LD	(D.61A4),A
        CP	60H
        RET	NZ
        XOR	A
        LD	(D.61A4),A
        LD	A,(D.61A3)
        INC	A
        DAA
        LD	(D.61A3),A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F92:	PUSH	BC
        PUSH	DE
        CALL	C$4F9A
        POP	DE
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F9A:	LD	A,(D.635E)
        OR	A                       ; CALL TELCOM ?
        JP	NZ,J.502D               ; nope,
        LD	HL,(STREND)             ; start of free space
        LD	DE,I$C000
        RST	20H                     ; in page 2 ?
        JR	C,J$4FAB                ; yep
        EX	DE,HL
J$4FAB:	LD	HL,-1024
        ADD	HL,SP
        LD	(D.6166),HL             ;
        LD	HL,0
        LD	(D.6168),HL
        LD	(D.616A),HL
        LD	(D.616C),HL
        LD	HL,(D.6166)
        OR	A
        SBC	HL,DE
        JR	C,C.4FEE
        LD	(D.6168),HL
        LD	DE,(D.6170)
        RST	20H
        JR	C,J$4FE8
        LD	A,(D.616E)
        OR	A
        JR	NZ,J$4FDA
        LD	(D.6168),DE
J$4FDA:	LD	HL,(D.6166)
        LD	DE,(D.6168)
        SBC	HL,DE
        LD	(D.6166),HL
        JR	C.4FEE

J$4FE8:	LD	HL,0
        LD	(D.6168),HL

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FEE:	LD	HL,(STREND)
        INC	HL
        LD	(D.616A),HL
        EX	DE,HL
        LD	HL,(D.6166)
        OR	A
        SBC	HL,DE
        RET	C
        LD	(D.616C),HL
        LD	DE,(D.6168)
        LD	A,E
        OR	D
        SCF
        RET	Z
J$5008:	LD	DE,512+9
        RST	20H
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.500D:	LD	A,(D.635E)
        OR	A                       ; CALL TELCOM ?
        JR	NZ,J.502D               ; nope,
        LD	HL,-1024
        ADD	HL,SP
        LD	(D.6166),HL
        LD	HL,0
        LD	(D.616C),HL
        INC	HL
        LD	(D.6168),HL
        CALL	C.4FEE
        LD	A,0
        LD	(D.6168),A
        RET

J.502D:	LD	HL,(TXTTAB)
        LD	A,H
        AND	0C0H
        CP	80H                     ; start BASIC program in page 2 ?
        SCF
        RET	NZ                      ; nope, quit
        LD	HL,I$C60E
        LD	(D.6166),HL
        LD	HL,I$0FD4
        LD	(D.6168),HL
        LD	HL,(D$C008)             ; start BASIC program in ROM
        INC	HL                      ; skip 0 byte
        INC	HL
        INC	HL                      ; skip pointer to next line
        INC	HL                      ; skip line number
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A
        INC	HL
        LD	(D.616A),HL
        EX	DE,HL
        LD	HL,I$C000-1
        OR	A
        SBC	HL,DE
        RET	C
        LD	(D.616C),HL
        JP	J$5008

I$5060:	CALL	C$4678                  ; release MSX-JE
        RET

;	  Subroutine get next character from string
;	     Inputs  ________________________
;	     Outputs ________________________

C.5064:	EXX
        LD	A,(HL)
        CALL	C.47A1			; to upper
        INC	HL
        EXX
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$506C:	XOR	A
        LD	(D.615E),A              ; shift JIS D disabled, 12 dots disabled
        PUSH	HL
        PUSH	DE
        LD	DE,'A'*256+'N'          ; ANK, non-interlace
        LD	HL,'N'*256+'S'          ; DEL no operation, shift JIS
        LD	A,B
        AND	C
        INC	A                       ; no string ?
        JR	Z,J.509D                ; yep,
        LD	A,B
        OR	A                       ; empty string ?
        JR	Z,J.509D                ; yep,
        CALL	C.5064                  ; get next character from string
        LD	D,A                     ; store first character
        DEC	B                       ; more characters ?
        JR	Z,J.509D                ; nope,
        CALL	C.5064                  ; get next character from string
        LD	E,A                     ; store second character
        DEC	B                       ; more characters ?
        JR	Z,J.509D                ; nope,
        CALL	C.5064                  ; get next character from string
        LD	L,A                     ; store third character
        DEC	B                       ; more characters ?
        JR	Z,J.509D                ; nope,
        CALL	C.5064                  ; get next character from string
        LD	H,A                     ; store fourth character
        DEC	B                       ; more characters ?
        JR	NZ,J.50BF               ; yep, illegal function call error
J.509D:	LD	A,D
        LD	D,0
        CP	"A"                     ; first character 'A' ?
        JR	Z,J.50C2                ; yep, ANK mode
        LD	D,2
        CP	"M"
        JR	Z,J.50C2                ; yep, MSX mode
        LD	D,4
        CP	"S"                     ; 12 bits chinese ?
        JR	NZ,J$50B7
        LD	A,1
        LD	(D.615E),A              ; set 12 dot flag
        JR	J.50C2

J$50B7:	CP	"K"                     ; chinese (16x16/8x16) ?
        JR	Z,J.50C2
        LD	D,6
        CP	"G"                     ; grayscale chinese (12x16/6x16) ?
J.50BF:	JP	NZ,J$4884		; nope, illegal function call error
J.50C2:	LD	A,E
        LD	E,0
        CP	"N"                     ; non-interlaced ?
        JR	Z,J$50CF                ; yep,
        LD	E,1
        CP	"I"                     ; interlaced ?
        JR	NZ,J.50BF               ; nope, illegal function call error
J$50CF:	LD	A,L
        LD	L,0
        CP	"O"                     ; old JIS code ?
        JR	Z,J.50F6
        LD	L,20H
        CP	"J"                     ; new JIS code ?
        JR	Z,J.50F6
        LD	L,40H
        CP	"S"                     ; shift JIS code ?
        JR	Z,J.50F6
        LD	L,60H
        CP	"N"                     ; NEC kanji code ?
        JR	Z,J.50F6
        LD	L,40H
        CP	"D"                     ; 
        JR	NZ,J.50BF               ; nope, illegal function call error
        LD	A,(D.615E)
        OR	02H
        LD	(D.615E),A              ; set shift JIS D flag
J.50F6:	LD	A,H
        LD	H,0
        CP	"N"                     ; DEL = no operation ?
        JR	Z,J$5103
        LD	H,80H
        CP	"B"                     ; DEL = backspace ?
        JR	NZ,J.50BF               ; nope, illegal function call error
J$5103:	LD	A,D
        OR	E
        OR	L
        OR	H
        LD	D,A
        LD	A,(SCRMOD)
        OR	A                       ; screen mode = 0 ?
        JR	NZ,J$511B               ; nope,
        LD	A,(LINLEN)
        LD	E,18H
        CP	40+1                    ; 80 column mode ?
        JR	NC,J.512F               ; yep,
J$5117:	LD	E,00H
        JR	J.512F

J$511B:	CP	5                       ; 
        JR	C,J$5117
        LD	E,08H
        JR	Z,J.512F                ; screen mode = 5,
        LD	E,10H
        CP	7                       ; screen mode = 6 ?
        JR	C,J.512F                ; yep,
        LD	E,18H
        JR	Z,J.512F                ; screen mode = 7,
        LD	E,08H
J.512F:	LD	A,E
        OR	D
        LD	(D.615D),A              ; update comterm mode
        POP	DE
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5137:	LD	A,(D.6073)
        AND	A                       ; literal mode ?
        RET	NZ                      ; yep, quit
        CALL	C$49F3			; cursor off
        LD	A,0FFH
        LD	(D.615C),A            	; show no progress char
        JR	J$5150

J.5146:	CALL	C.4AAA                  ; wait for received byte
        JP	C,J.51FA
        CP	":"
        JR	NZ,J.5146
J$5150:	CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.516B
        AND	A
        JR	Z,J$51A4
        LD	B,A
        LD	E,A
        CALL	C.51FE			; receive word in hexadecimal characters
        JR	C,J.516B
        CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.516B
        ADD	A,L
        ADD	A,H
        ADD	A,E
        LD	E,A
J$5168:	CALL	C.5208                  ; receive byte in hexadecimal characters
J.516B:	JR	C,J.51C9
        LD	(HL),A
        ADD	A,E
        LD	E,A
        INC	HL
        DJNZ	J$5168
        CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.51C9
        ADD	A,E
        JR	NZ,J.51C9
        LD	A,"G"
        CALL	C.40EA                  ; send or print byte
        LD	A,(D.615C)
        AND	A                       ; show progess char ?
        JR	Z,J$518E                ; yep,
        INC	A
        LD	(D.615C),A              ; show progress char
        LD	A,"*"
        JR	J$519E

J$518E:	DEC	A
        LD	(D.615C),A
        LD	A,8
        CALL	C.4EBD			; echo to screen/printer (literal)
        LD	A," "
        CALL	C.4EBD
        LD	A,8
J$519E:	CALL	C.4EBD
        JP	J.5146

J$51A4:	CALL	C.51FE			; receive word in hexadecimal characters
        JR	C,J.51C9
        LD	A,H
        OR	L
        JR	NZ,J$51D1
        CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.51C9
        CP	01H	; 1 
        JR	NZ,J.51C9
        CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.51C9
        CP	0FFH
        JR	NZ,J.51C9
        LD	A,"G"
        CALL	C.40EA                  ; send or print byte
        CALL	C.4EF4
        JR	J.51FA

J.51C9:	LD	A,"B"
        CALL	C.40EA                  ; send or print byte
        JP	J.5146

J$51D1:	CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.51C9
        CP	01H	; 1 
        JR	NZ,J.51C9
        ADD	A,L
        ADD	A,H
        LD	E,A
        CALL	C.5208                  ; receive byte in hexadecimal characters
        JR	C,J.51C9
        ADD	A,E
        JR	NZ,J.51C9
J$51E5:	CALL	C.4AAA			; wait for received byte
        JP	C,J.51FA
        CP	0AH	; 10 
        JR	NZ,J$51E5
        LD	A,"G"
        CALL	C.40EA                  ; send or print byte
        CALL	C.4EF4
        CALL	C$51FD
J.51FA:	JP	J$49F8                  ; cursor on

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$51FD:	JP	(HL)

;	  Subroutine receive word in hexadecimal characters
;	     Inputs  ________________________
;	     Outputs ________________________

C.51FE:	CALL	C.5208                  ; receive byte in hexadecimal characters
        RET	C
        LD	H,A
        CALL	C.5208                  ; receive byte in hexadecimal characters
        LD	L,A
        RET

;	  Subroutine receive byte in hexadecimal characters
;	     Inputs  ________________________
;	     Outputs ________________________

C.5208:	PUSH	BC
        CALL	C.4AAA			; wait for received byte
        JR	C,J.5223
        CALL	C.5225                  ; hexdecimal character ?
        JR	C,J.5223                ; nope, quit
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        LD	B,A
        CALL	C.4AAA			; wait for received byte
        JR	C,J.5223
        CALL	C.5225                  ; hexdecimal character ?
        JR	C,J.5223                ; nope, quit
        ADD	A,B
J.5223:	POP	BC
        RET

;	  Subroutine hexdecimal character ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.5225:	CALL	C.47A1			; to upper
        SUB	"0"
        RET	C
        CP	9+1
        CCF
        RET	NC
        SUB	'A'-'0'
        RET	C
        CP	5+1
        CCF
        RET	C
        ADD	A,10
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5239:	LD	H,A
        LD	A,6
        CALL	SNSMAT
        LD	L,A
        LD	A,H
        CP	20H                     ; SPACE ?
        JR	Z,J$5251                ; yep,
        BIT	2,L			; GRAPH ?
        JR	Z,J$5254                ; yep,
        BIT	0,L			; SHIFT ?
        RET	NZ                      ; nope, quit

; SHIFT-SELECT

        LD	HL,J.53F3               ; quit comterm
        JR	J$525A

J$5251:	BIT	1,L			; CTRL ?
        RET	NZ                      ; nope, quit

; CTRL-SPACE/GRAPH-SELECT

J$5254:	CALL	C.4680                  ; flip kanji entry mode
        LD	HL,J.4DA4               ; loop
J$525A:	EX	(SP),HL
        CALL	CHGET                   ; get key (SPACE/SELECT)
        LD	A,3                     ; CTRL/SPACE GRAPH-SELECT
        RET

; handle comterm function key

J$5261:	CALL	CHGET                   ; get 0FFH
        CALL	CHGET                   ; get functionkey number
        EI
        SUB	6                       ; zero based
        JR	Z,J$527C                ; F5,
        DEC	A                       ; F6 ?
        JR	Z,J$5281
        DEC	A                       ; F7 ?
        JP	Z,J$530E
        DEC	A                       ; F8 ?
        JR	Z,J$5289
        DEC	A                       ; F9 ?
        JR	Z,J$52CC
J.5279:	JP	J.4DA4                  ; loop

; F5, literal mode

J$527C:	LD	HL,D.6073		; literal mode
        JR	J$5284

; F6, duplex mode

J$5281:	LD	HL,D.6077		; duplex mode
J$5284:	LD	A,(HL)
        CPL
        LD	(HL),A                  ; flip duplex mode
        JR	J.5279                  ; loop

; F8, upload

J$5289:	CALL	C.5306                  ; terminal mode X-modem ?
        JR	NZ,J$52A6               ; nope, try start upload text/log and loop
        LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	Z,J$529E                ; yep, start X-modem upload
        LD	L,50                    ; text id = printer in use
        CALL	C.6000
        DEFB    3
        DEFW    C$40C3                  ; output message
        JR      J.5303                  ; loop

?.529D:	LD	H,L

J$529E:	CALL	C.6000
        DEFB    3
        DEFW    C$4096                  ; X-modem upload
        JR	J.5303                  ; loop

J$52A6:	LD	A,(D.6352)
        OR	A                       ; upload text/log enabled ?
        JR	NZ,J.52BA               ; yep, stop upload log/text and loop
        LD	A,(D.6351)
        OR	A                       ; download text/log enabled ?
        JR	NZ,J.52FD               ; yep, stop download log/text and loop
        CALL	C.6000
        DEFB    3
        DEFW    C$4090                  ; start upload log/text
        JR	J.5303                  ; loop

J.52BA:	LD	A,(D.6049)
        AND	10H                     ; terminal mode = raw ?
        LD	A,1AH                   ; EOF
        CALL	Z,C.4EA3                ; nope, send or print byte (with duplex and auto LF)
        CALL	C.6000
        DEFB    3
        DEFW    C$40A2                  ; stop upload log/text
        JR	J.5303                  ; loop

; F9, download

J$52CC:	CALL	C.5306                  ; terminal mode X-modem ?
        JR	NZ,J$52E9               ; nope, try start download text/log
        LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	Z,J$52E1                ; yep, start X-modem download
        LD	L,50                    ; text id = printer in use
        CALL	C.6000
        DEFB    3
        DEFW    C$40C3                  ; output message
        JR      J.5303                  ; loop

J$52E1: CALL    C.6000
        DEFB    3
        DEFW    C$4099                  ; X-modem download
        JR	J.5303                  ; loop

J$52E9:	LD	A,(D.6352)
        OR	A                       ; upload text/log enabled ?
        JR	NZ,J.52BA               ; yep, stop upload log/text and loop
        LD	A,(D.6351)
        OR	A                       ; download text/log enabled ?
        JR	NZ,J.52FD               ; yep, stop download log/text and loop
        CALL	C.6000
        DEFB    3
        DEFW    C$4093                  ; start download log/text
        JR	J.5303                  ; loop

J.52FD:	CALL	C.6000
        DEFB    3
        DEFW    C$40A5                  ; stop download log/text
J.5303:	JP	J.4DA4                  ; loop

;	  Subroutine terminal mode X-modem ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.5306:	LD	A,(D.6049)
        AND	0C0H
        CP	80H                     ; terminal mode = X-modem ?
        RET

; F7, printer echo

J$530E:	LD	A,(D.6074)
        OR	A                       ; printer echo enabled ?
        JR	NZ,J$531A               ; yep,
        CALL	C.5320                  ; enable printer echo
J$5317:	JP	J.5279                  ; loop

J$531A:	XOR	A
        LD	(D.6074),A              ; printer echo disabled
        JR	J$5317                  ; loop

;	  Subroutine enable printer echo
;	     Inputs  ________________________
;	     Outputs ________________________

C.5320:	LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	NZ,J$5346               ; nope, printer in use message and quit
        LD	HL,0
        LD	(D.7EE7),HL             ; reset printer not ready counter
        DI
        LD	HL,(D$608A)             ; get offset in receive buffer
        LD	(D$608C),HL             ; get offset in receive buffer (printer echo)
        LD	HL,(D.6090)             ; number of bytes in receive buffer
        LD	(D.6092),HL             ; number of bytes in receive buffer (printer echo)
        CALL	C.437A                  ; initialize printer echo flags
        LD	A,0FFH
        LD	(D.6074),A              ; printer echo enabled
        LD	(D.6075),A              ; printer echo receive buffer not empty
        EI
        RET

J$5346:	LD	L,50                    ; text id = printer in use
        CALL	C.6000
        DEFB    3
        DEFW    I$40C3                  ; output message
        RET

;	  Subroutine finish printer echo
;	     Inputs  ________________________
;	     Outputs ________________________

C.534F:	XOR	A
        LD	(D.6074),A              ; printer echo disabled
        LD	HL,600
        LD	(D.61A1),HL             ; timer value = 600
        CALL	C.539A
        RET	C
        LD	HL,(D.6092)             ; number of bytes in receive buffer (printer echo)
        LD	A,L
        OR	H                       ; receiver buffer empty ?
        JR	NZ,C.534F               ; nope, again
        DI
        XOR	A
        LD	(D.6075),A              ; printer echo receive buffer empty
        LD	L,A
        LD	H,A
        LD	(D.6092),HL             ; number of bytes in receive buffer (printer echo) = 0
        EI

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$536F:	LD	A,0DH                   ; CR
        CALL	C$5377
        RET	C
        LD	A,0AH                   ; LF

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5377:	PUSH	AF
J$5378:	CALL	C.6000
        DEFB    0
        DEFW    C$40AE                  ; counter #1, clear
J$537E:	CALL	C.4F02                  ; update counter
        LD	A,(D.607C)
        CP	20
        JR	NC,J$5392
        CALL	LPTSTT                  ; get printer status
        JR	Z,J$537E                ; printer not ready, wait
        POP	AF
        CALL	C.40FF                  ; print and send byte
        RET

J$5392:	CALL	C.53AC                  ; print not ready message, handle response
        JR	NC,J$5378
        POP	AF
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.539A:	LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        RET	Z                       ; yep, quit
        CALL	C.4F02                  ; update counter
        LD	HL,(D.7EE7)
        LD	DE,1200
        SBC	HL,DE                   ; printer not ready for too long ?
        CCF
        RET	NC                      ; nope, quit

;	  Subroutine print not ready message, handle response
;	     Inputs  ________________________
;	     Outputs ________________________

C.53AC:	LD	L,48                    ; text id = printer not ready
        CALL	C.6000
        DEFB    3
        DEFW    I$40C3                  ; output message
        CALL    KILBUF                  ; clear keyboard buffer
J$53B7:	CALL    C.4F02                  ; update counter
        CALL	CHSNS                   ; key pressed ?
        JR	Z,J$53B7                ; nope, wait
        CALL	CHGET                   ; get key
        PUSH	AF
        CALL	C.4EBD
        CALL	KILBUF                  ; clear keyboard buffer
        CALL	C.4EF4
        POP	AF
        CALL	C.47A1			; to upper
        CP	"R"                     ; retry ?
        JR	NZ,J$53DB               ; nope,
        LD	HL,0
        LD	(D.7EE7),HL             ; reset printer not ready counter
        RET

J$53DB:	CP	"C"                     ; cancel ?
        JR	NZ,C.53AC               ; nope, again
        CALL	C.53E4                  ; cancel printer echo
        SCF
        RET

;	  Subroutine cancel printer echo
;	     Inputs  ________________________
;	     Outputs ________________________

C.53E4:	DI
        XOR	A
        LD	(D.6074),A              ; printer echo disabled
        LD	(D.6075),A              ; printer echo receive buffer empty
        LD	L,A
        LD	H,A
        LD	(D.6092),HL             ; number of bytes in receive buffer (printer echo) = 0
        EI
        RET

; quit comterm

J.53F3:	DEC	A
        CP	4                       ; ok or invalid exitcode ?
        JP	NC,J.4DA4               ; yep, loop
        INC	A
        LD	(D.60B6),A		; store comterm exitcode
        CP	2                       ; carrier detect time out ?
        JR	NZ,J$5419               ; nope,
        LD	E,2                     ; error = carrier lost
        CALL	C.6000
        DEFB    3
        DEFW    C$40C0                  ; output error message
        CALL	C.6000
        DEFB    0
        DEFW    C$40AE                  ; counter #1, clear
J$540F:	CALL	C.4F02                  ; update counter
        LD	A,(D.607C)
        CP	3
        JR	C,J$540F
J$5419:	LD	A,(D.6352)
        OR	A                       ; upload text/log enabled ?
        JR	Z,J$5425                ; nope,
        CALL	C.6000
        DEFB    3
        DEFW    C$40A2                  ; stop upload log/text
J$5425:	LD	A,(D.6351)
        OR	A                       ; download text/log enabled ?
        JR	Z,J$5431                ; nope,
        CALL	C.6000
        DEFB    3
        DEFW    C$40A5                  ; stop download log/text
J$5431:	CALL	C$5B21                  ; close RS232 port
        LD	A,(D.60B6)              ; comterm exit code
        CP	3
        JR	Z,J$5443
        LD	A,1                     ; on hook
        CALL	C.6000
        DEFB    0
        DEFW    C$4177                  ; MODEM.LINSEL
J$5443:	LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        CALL	NZ,C.534F               ; nope, finish printer echo
        CALL	C.4BD9                  ; restore PROMPT hook
        LD	HL,I.60B8
        LD	DE,FNKSTR
        LD	BC,10*16
        LDIR                            ; restore F1-F10 definition
        XOR	A
        LD	(INTFLG),A              ; clear STOP status
        CALL	KILBUF
        CALL	C.6000
        DEFB    2
        DEFW    C$4096
        LD	HL,CNSDFG
        LD	DE,D.7EFA
        LD	B,(HL)
        LD	A,(DE)
        LD	(HL),A
        LD	A,B
        LD	(DE),A
        LD	(CNSDFG),A              ; swap function key display
        XOR	A
        LD	(D.6173),A              ; comterm deactivated
        LD	A,(D.60B6)              ; comterm exit code
        RET

I$547B:
; F6
        DEFB    0FFH
	DEFB	6
	DEFB	0
	DEFB	4CH
	DEFB	54H
; F7
	DEFB	0FFH
	DEFB	7
	DEFB	0
	DEFB	45H
	DEFB	43H
; F8
	DEFB	0FFH
	DEFB	8
	DEFB	0
	DEFB	50H
	DEFB	52H
; F9
	DEFB	0FFH
	DEFB	9
	DEFB	0
	DEFB	55H
	DEFB	50H
; F10
	DEFB	0FFH
	DEFB	10
	DEFB	0
	DEFB	44H
	DEFB	57H

; _COMHELP

C.5494:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        LD	A,D
        AND	A
        JR	Z,J.54A6
        CP	":"
        JR	Z,J.54A6
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J.54A6:	PUSH	HL
        LD	HL,I$550C
J.54AA:	LD	A,(HL)
        INC	HL
        INC	A
        JR	Z,J.54FC
        DEC	A
        JR	Z,J$54C6
        PUSH	AF
        AND	7FH
        CALL	NZ,CHPUT
        POP	AF
        CALL	M,C$54FF
        LD	A,(INTFLG)
        AND	A                       ; STOP or CTRL-STOP pressed ?
        JR	Z,J.54AA                ; nope,
        CP	3                       ; CTRL-STOP pressed ?
        JR	Z,J.54FC                ; yep,
J$54C6:	PUSH	HL
        LD	HL,INTFLG
        LD	(HL),0                  ; clear STOP status
        LD	A,1BH
        CALL	CHPUT
        LD	A,"y"
        CALL	CHPUT
        LD	A,"5"
        CALL	CHPUT
J$54DB:	EI
        LD	A,(HL)
        AND	A
        JR	Z,J$54DB
        PUSH	AF
        LD	A,1BH
        CALL	CHPUT
        LD	A,"x"
        CALL	CHPUT
        LD	A,"5"
        CALL	CHPUT
        POP	AF
        POP	HL
        CP	03H	; 3 
        JR	Z,J.54FC
        XOR	A
        LD	(INTFLG),A              ; clear STOP status
        JR	J.54AA

J.54FC:	POP	HL
        AND	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$54FF:	PUSH	AF
        LD	A,0DH	; 13 
        CALL	CHPUT
        LD	A,0AH	; 10 
        CALL	CHPUT
        POP	AF
        RET

I$550C:	DEFB	080H
        DEFB	"Initialize statement option"
        DEFB	0F3H,080H
        DEFB	"CALL COMINI ("
        DEFB	0A2H
        DEFB	"<device# {0,1,2...9}>"
        DEFB	0BAH
        DEFB	"<character length {5,6,7,8}"
        DEFB	0BEH
        DEFB	"<parity {E,O,I,N}"
        DEFB	0BEH
        DEFB	"<stop bits {1,2,3}"
        DEFB	0BEH
        DEFB	"XON/XOFF {X,N}"
        DEFB	0BEH
        DEFB	"<1 dummy {any character}"
        DEFB	0BEH
        DEFB	"<auto LF on receive {A,N}"
        DEFB	0BEH
        DEFB	"<auto LF on transmit {A,N}"
        DEFB	0BEH
        DEFB	"<SI/SO {S,N}>"
        DEFB	0A2H
        DEFB	",<receive speed (bps)"
        DEFB	0BEH
        DEFB	",<send speed (bps)"
        DEFB	0BEH
        DEFB	",<time out"
        DEFB	0BEH
        DEFB	"                          "
        DEFB	0A9H
        DEFB	"Default"
        DEFB	0BAH
        DEFB	" CALL COMINI(",022H,"0:8N1X NNN",022H,",300,300,0"
        DEFB	0A9H
        DEFB	0FFH

; _NET

C.5677:	DEFB	03EH                    ; NET flag

; _COM

C.5678:	XOR	A                       ; COM flag
J$5679:	LD	(D.6065),A
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
J$5682:	CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B6E			; check for BASIC character
        DEFB	08DH
        LD	IX,LINGET
        CALL	C.5BC3
        PUSH	HL
        LD	A,E
        OR	D
        JR	Z,J$56A2
        LD	IX,FNDLIN
        CALL	C.5BC3
        JP	NC,J$487E               ; undefined line number error
        LD	E,C
        LD	D,B
J$56A2:	POP	HL
J$56A3:	CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        PUSH	HL
        CALL	C.577D			; get TRPTBL entry
        JP	C,J$4884		; invalid trap, illegal function call error
        INC	HL
        LD	(HL),E
        INC	HL
        LD	(HL),D                  ; register trap handler
J$56B2:	POP	HL
        AND	A
        RET

; _NETOFF

C.56B5:	DEFB	03EH                    ; NET flag

; _COMOFF

C.56B6:	XOR	A                       ; COM flag
        LD	(D.6065),A
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        LD	A,D
        AND	A
        JR	Z,J.56CC
        CP	":"
        JR	Z,J.56CC
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J.56CC:	LD	IX,TRPDIS
        JR	J$5718

; _NETON

C.56D2:	DEFB	03EH                    ; NET flag

; _COMON

C.56D3:	XOR	A                       ; COM flag
        LD	(D.6065),A
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        LD	A,D
        AND	A
        JR	Z,J.56E9
        CP	3AH	; ":"
        JR	Z,J.56E9
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J.56E9:	LD	IX,TRPENA
        JR	J$570A                  ; enable trap

; _NETSTOP

C.56EF:	DEFB	03EH                    ; NET flag

; _COMSTOP

C.56F0:	XOR	A                       ; COM flag
        LD	(D.6065),A
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        LD	A,D
        AND	A
        JR	Z,J.5706
        CP	":"
        JR	Z,J.5706
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J.5706:	LD	IX,TRPSTP               ; disable trap

J$570A:	PUSH	HL
        CALL	C.577D			; get TRPTBL entry
        JP	C,J$4884		; invalid trap, illegal function call error
        LD	A,(HL)
        AND	01H                     ; trap enabled ?
        CALL	Z,C$5725                ; nope, clear trap trigger
        POP	HL
J$5718:	PUSH	HL
        CALL	C.577D			; get TRPTBL entry
        JP	C,J$4884		; invalid trap, illegal function call error
        CALL	C.5BC3                  ; execute main bios trap routine
        POP	HL
        AND	A
        RET

;	  Subroutine clear trap trigger
;	     Inputs  ________________________
;	     Outputs ________________________

C$5725:	LD	A,(D.6065)
        OR	A                       ; COM ?
        JR	NZ,C.5732               ; nope (NET), get ring status and quit
        CALL	C.6000
        DEFB    0
        DEFW    I$4093                  ; clear receive buffer
        RET

;	  Subroutine get ring status
;	     Inputs  ________________________
;	     Outputs ________________________

C.5732:	CALL	C.6000
        DEFB    0
        DEFW    I$40FC                  ; get ring status
        RET

; H.NEWS handler

J$5739:	EI
        PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$40F9                  ; port open ?
        JR	Z,J$574E                ; nope,
        CALL	C.6000
        DEFB    0
        DEFW    C$415F                  ; RS232.LOC
        LD	A,L
        OR	H                       ; receiver buffer empty ?
        CALL	NZ,C$5754               ; nope, raise COM trap
J$574E:	CALL	C$5753                  ; raise NET trap when ring
        POP	HL
        RET

;	  Subroutine raise NET trap when ring
;	     Inputs  ________________________
;	     Outputs ________________________

C$5753:	DEFB	03EH

;	  Subroutine raise COM trap
;	     Inputs  ________________________
;	     Outputs ________________________

C$5754:	XOR	A
        LD	(D.6065),A
        CALL	C.577D			; get TRPTBL entry
        RET	C                       ; invalid trap, quit
        LD	A,(HL)
        AND	01H                     ; trap enabled ?
        RET	Z                       ; nope, quit
        LD	A,(HL)
        OR	04H
        CP	(HL)                    ; trap already raised ?
        RET	Z                       ; yep, quit
        CP	05H                     ; trap paused ?
        RET	NZ                      ; yep, quit
        PUSH	AF
        LD	A,(D.6065)
        OR	A                       ; COM trap ?
        JR	Z,J.5776                ; yep, register trap event
        CALL	C.5732                  ; get ring status
        JR	NZ,J.5776               ; yep, register trap event
        POP	AF
        RET

J.5776:	POP	AF
        LD	(HL),A
        LD	HL,ONGSBF
        INC	(HL)
        RET

;	  Subroutine get TRPTBL entry
;	     Inputs  ________________________
;	     Outputs ________________________

C.577D:	CALL	C.578E
        RET	C
        PUSH	BC
        LD	C,A
        ADD	A,A
        ADD	A,C
        LD	C,A
        LD	B,0
        LD	HL,TRPTBL+18*3
        ADD	HL,BC
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.578E:	PUSH	BC
        LD	A,(D.6065)
        LD	B,A			; COM / NET
        LD	A,(D.604B)
        AND	0F0H
        RRCA
        RRCA
        RRCA
        RRCA				; my trapnumber
        INC	B
        DEC	B                       ; COM ?
        JR	Z,J$57A1                ; yep,
        INC	A
J$57A1:	CP	05H
        CCF
        POP	BC
        RET

;	  Subroutine _TELCOM
;	     Inputs  ________________________
;	     Outputs ________________________

C.57A6:	PUSH	HL                      ; store BASIC pointer
        CALL	C.5BBB                  ; close all i/o channels
        POP	HL                      ; restore BASIC pointer
        CALL	C.49B8                  ; store foreground, background and border color
        CALL	C.6000
        DEFB    4
        DEFW    C$4090                  ; telcom
        CALL	C.49E4                  ; restore foreground, background and border color
        XOR	A
        LD	(INTFLG),A              ; clear STOP status
        RET

;	  Subroutine _BTELCOM
;	     Inputs  ________________________
;	     Outputs ________________________

C.57BC:	CALL	C.5B6E			; check for BASIC character
        DEFB	"("
        CALL	C.5B8F                  ; evaluate address operand
        PUSH	DE
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        EX	(SP),HL                 ; store BASIC pointer, restore operand
        PUSH	HL                      ; store operand
        CALL	C.5BBB                  ; close all i/o channels
        CALL	C.49B8                  ; store foreground, background and border color
        POP	HL                      ; restore operand
        CALL	C.6000
        DEFB    4
        DEFW    C$4093                  ; btelcom
        CALL	C.49E4                  ; restore foreground, background and border color
        POP	HL
        XOR	A
        LD	(INTFLG),A              ; clear STOP status
        RET

;	  Subroutine _REMOTE
;	     Inputs  ________________________
;	     Outputs ________________________

C.57E0:	PUSH	HL                      ; store BASIC pointer
        CALL	C.5BBB                  ; close all i/o channels
        CALL	C.6000
        DEFB    4
        DEFW    C$40AB                  ; remote
        POP	HL                      ; restore BASIC pointer
        OR	A                       ; statement handled
        RET

; _NETCONFIG

C.57ED:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B97			; evaluate byte operand
        PUSH	AF                      ; store mode
        CP	3+1                     ; mode valid (0-3) ?
        JP	NC,J$4884		; nope, illegal function call error
        CALL	C$5827                  ; check for "," locate variable and check for ")"
        POP	AF                      ; restore mode
        PUSH	HL                      ; store BASIC pointer
        CALL	C.6000
        DEFB	0
        DEFW	C.4189                  ; MODEM.CONFIG
        JR	J.5818

; _NETSTAT

?.580D:	CALL	C.5821                  ; evaluate comidentifier and check if this one, check for "," locate variable and check for ")"
        RET	C
        PUSH	HL                      ; store BASIC pointer
        CALL	C.6000
        DEFB	0
        DEFW	C.4171                  ; MODEM.NCUSTA
J.5818:	LD	(DAC+2),HL              ; store result in DAC
        POP	HL                      ; restore BASIC pointer
        CALL	C$5C47                  ; assign integer (in DAC) to variable
        AND	A
        RET

;	  Subroutine evaluate comidentifier and check if this one, check for "," locate variable and check for ")"
;	     Inputs  ________________________
;	     Outputs ________________________

C.5821:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string

;	  Subroutine check for "," locate variable and check for ")"
;	     Inputs  ________________________
;	     Outputs ________________________

C$5827:	CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C$5B9F                  ; locate variable
        PUSH	DE
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        POP	DE
        RET

;	  Subroutine _DMTF
;	     Inputs  ________________________
;	     Outputs ________________________

C.5835:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        JR	J.585D                  ; illegal function call

; _NETHOOK

C.583A:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B97			; evaluate byte operand
        PUSH	AF
        AND	0E0H
        JR	NZ,J.585D               ; illegal function call
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        POP	AF
        CP	1+1
        JR	NC,J.585D               ; illegal function call
        AND	A                       ; Zx
        CALL	C.6000
        DEFB	0
        DEFW	C.4186                  ; MODEM.HOKCNT
        RET	NC
J.585D:	JP	J$4884		        ; illegal function call error

; _NETSPK

?.5860:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B97			; evaluate byte operand
        PUSH	AF
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        POP	AF
        CP	1+1
        JR	NC,J.585D               ; illegal function call
        AND	A                       ; Zx
        CALL	C.6000
        DEFB	0
        DEFW	C.4174                  ; MODEM.SPKCNT
        JR	C,J.585D                ; illegal function call
        RET

; _NETMODEM

C.5881:	LD	DE,0FFFFH               ; default mode = -1, default parameter2 = -1
        LD	A,0FFH                  ; default = no protocol
        CALL	C.5A22                  ; evaluate comidentifier with option and two optional parameters
        RET	C
        CP	0FFH                    ; protocol specified ?
        JR	NZ,J.585D               ; yep, illegal function call
        LD	A,E
        INC	A
        CP	17
        JR	NC,J.585D               ; illegal function call
        LD	A,D
        INC	A
        CP	4
        JR	NC,J.585D               ; illegal function call
        PUSH	DE
        LD	A,0
        LD	C,E                     ; bit number
        CALL	C.6000
        DEFB	0
        DEFW	C.4120
        POP	DE
        JR	C,J.585D                ; error, illegal function call
        LD	A,2
        LD	C,D                     ; mode
        CALL	C.6000
        DEFB	0
        DEFW	C.4120
        JR	C,J.585D                ; error, illegal function call
        RET

;	  Subroutine _LINESEL
;	     Inputs  ________________________
;	     Outputs ________________________

C.58B3:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B97			; evaluate byte operand
        PUSH	AF
        AND	0E0H
        JP	NZ,J$4884		; illegal function call error
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        POP	AF
        CP	1+1
        JP	NC,J$4884		; illegal function call error
        AND	A                       ; Zx
        CALL	C.6000
        DEFB	0
        DEFW	C.4177                  ; MODEM.LINSEL
        RET

; _NETINI

C.58D8:	LD	A,"O"                   ; default = O (originate)
        LD	DE,002FFH               ; default dial protocol = -1, default modem protocol = 2 (CCITT V21 300bps Full duplex)
        CALL	C.5A22                  ; evaluate comidentifier with option and two optional parameters
        RET	C
        SUB	'O'                     ; originate ?
        JR	Z,J.58EC                ; yep,
J$58E5:	CP	'A'-'O'                 ; answer ?
        JR	Z,J.58EC                ; yep,
J.58E9:	JP	J$4884		        ; illegal function call error

J.58EC:	LD	C,A                     ; communication mode
        LD	A,E
        CP	0FFH
        JR	Z,J$58F6
        CP	3+1
        JR	NC,J.58E9		; illegal function call
J$58F6:	LD	A,D
        CP	3+1                     ; 300bps or 1200bps protocols ?
        JR	NC,J.58E9		; nope, illegal function call
        CP	2                       ; Bell 103 300bps Full duplex or Bell 212A 1200bps Full duplex ?
        JR	C,J.58E9		; yep, illegal function call
        CALL	C.6000
        DEFB	0
        DEFW	C.40F3                  ; set communication mode
        LD	A,E                     ; dialer mode
        LD	C,00H
        OR	A
        JR	Z,J.591F
        LD	C,03H
        CP	1
        JR	Z,J.591F
        LD	C,02H
        CP	2
        JR	Z,J.591F
        LD	C,0FFH
        CP	0FFH
        JR	Z,J.591F
        LD	C,04H
J.591F:	CALL	C.6000
        DEFB	0
        DEFW	C.4108                  ; set dialer mode
        LD	A,D
        LD	(D$60A9),A              ; store modem mode
        CP	0FFH                    ; default modem mode ?
        RET	Z                       ; yep, quit
        PUSH	AF
        CALL	C.6000
        DEFB	0
        DEFW	C.4111                  ; set modem mode
        POP	AF
        BIT	0,A                     ; 300bps modem mode ?
        LD	DE,300
        JR	Z,J$593E                ; yep
        LD	DE,1200
J$593E:	LD	(D.606D),DE             ; store receiver baudrate
        LD	(D.606F),DE             ; store transmitter baudrate
        OR	A
        RET

;	  Subroutine _DIALC
;	     Inputs  ________________________
;	     Outputs ________________________

C.5948:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        XOR	A
        INC	A
        JR	J$5959

;	  Subroutine _DIAL
;	     Inputs  ________________________
;	     Outputs ________________________

C.5952:	CALL	C.5BD4			; evaluate comidentifier and check if this one
        CALL	C.5C3D                  ; check for empty or no string
        XOR	A
J$5959:	PUSH	AF                      ; store DIAL/DIALC flag
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CALL	C.5B87                  ; evaluate expression
        PUSH	HL                      ; store BASIC pointer
        CALL	C.5BA7                  ; free temporary string
        EX	(SP),HL
        LD	A,(HL)
        CP	","
        LD	A,0FFH
        JR	NZ,J$5973
        CALL	C.5B76                  ; get next BASIC character
        CALL	C.5B97			; evaluate byte operand
J$5973:	POP	BC
        CP	0FFH
        JP	Z,J$597E
        CP	3+1
        JP	NC,J$4884		; illegal function call error
J$597E:	PUSH	AF                      ; store dial mode
        CALL	C.5B6E			; check for BASIC character
        DEFB	")"
        POP	AF                      ; restore dial mode
        PUSH	HL
        LD	H,B
        LD	L,C
        LD	C,A                     ; dial mode
        LD	B,(HL)                  ; size of string
        INC	HL
        LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; pointer to string
        POP	HL
        POP	AF                      ; restore DIAL/DAILC
        PUSH	HL
        PUSH	AF
        JR	Z,J$5999                ; DIAL, normal string
        LD	A,B
        CP	1+1                     ; size of string <= 1 ?
        JP	NC,J$4884		; nope, illegal function call error
J$5999:	LD	A,C
        OR	A                       ; dial mode 0 ?
        JR	Z,J.59B1                ; yep,
        LD	C,3
        CP	1                       ; dial mode 1 ?
        JR	Z,J.59B1                ; yep,
        LD	C,2
        CP	2                       ; dial mode 2 ?
        JR	Z,J.59B1                ; yep,
        LD	C,0FFH
        CP	0FFH                    ; default dial mode ?
        JR	Z,J.59B1                ; yep,
        LD	C,4
J.59B1:	CALL	C.6000
        DEFB    0
        DEFW    C$4105                  ; set dial mode
        PUSH	BC
        EX	DE,HL
        PUSH	HL
J$59BA:	LD	A,B
        OR	A                       ; string finished ?
        JR	Z,J$59C9                ; yep,
        DEC	B
        LD	A,(HL)                  ; dial character
        INC	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$410B                  ; to upper, translate dail character
        JR	NC,J$59BA               ; no error, continue
J$59C9:	POP	HL
        POP	BC
        JP	C,J$4884		; error, illegal function call error
        XOR	A                       ; off hook
        CALL	C.6000
        DEFB    0
        DEFW    C$4177                  ; MODEM.LINSEL
        POP	AF                      ; DIAL/DIALC
        JR	NZ,J$59DE
        CALL	C.6000
        DEFB    0
        DEFW    C$4126                  ; wait for dial tone
J$59DE:	LD	A,B
        OR	A
        JR	Z,J.5A19
        LD	A,(D.6085)
        AND	0C0H                    ; dailer mode
        CP	80H                     ; automatic dialer mode ?
        JR	NZ,J.59F3               ; nope, skip
        LD	A,(D.60B0)              ; ??
        LD	A,2
        LD	(D.60B0),A              ; automatic dialer detection
J.59F3:	CALL	C.6000
        DEFB    0
        DEFW    C$40F6                  ; STOP pressed ?
        JR	Z,J$5A03                ; nope,
        CALL	C.6000
        DEFB    0
        DEFW    C$4123                  ; error
        JR	J.5A19

J$5A03:	LD	A,(HL)
        INC	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$40FF
        LD	A,(D.60B0)
        CP	2                       ; automatic dialer detection
        JR	NZ,J$5A17
        INC	B
        XOR	A
        LD	(D.60B0),A              ; automatic dialer detection = disabled
J$5A17:	DJNZ	J.59F3
J.5A19:	CALL	C.6000
        DEFB    0
        DEFW    C$4102
        POP	HL
        AND	A
        RET

;	  Subroutine evaluate comidentifier with option and two optional timer parameters
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A22:	LD	(D.6065),A              ; store protocol default
        LD	(D.6066),DE             ; store timer #1 and #2 defaults
        CALL	C.5BD4			; evaluate comidentifier and check if this one
        LD	A,B
        AND	C
        INC	A                       ; no string ?
        JR	Z,J.5A3E                ; yep,
        LD	A,B
        OR	A                       ; empty string ?
        JR	Z,J.5A3E                ; yep,
        EXX
        LD	A,(HL)
        EXX
        CALL	C.47A1			; to upper
        LD	(D.6065),A              ; store protocol
J.5A3E:	LD	DE,(D.6066)             ; restore timer #1 and #2 defaults
        DEC	HL
        CALL	C.5B76                  ; get next BASIC character
        JR	Z,J$5A6D                ; end of statement or line,
        CP	")"
        JR	Z,J.5A69
        CALL	C.5B6E			; check for BASIC character
        DEFB	","
        CP	","
        JR	Z,J$5A5F
        PUSH	DE
        CALL	C.5B97			; evaluate byte operand (timer #1)
        POP	DE
        LD	E,A                     ; update timer #1 value
        LD	A,(HL)
        CP	")"
        JR	Z,J.5A69
J$5A5F:	CALL	C.5B6E			; check for BASIC character
        DEFB	","
        PUSH	DE
        CALL	C.5B97			; evaluate byte operand (timer #2)
        POP	DE
        LD	D,A                     ; update timer #2 value
J.5A69:	CALL	C.5B6E			; check for BASIC character
        DEFB	")"
J$5A6D:	LD	A,(D.6065)              ; protocol
        OR	A
        RET

; _COMPROTOCOL

C.5A72:	LD	A,"T"                   ; default protocol = T
        LD	DE,0                    ; default timer #1 = 0, default timer #2 = 0
        CALL	C.5A22                  ; evaluate comidentifier with option and two optional parameters
        RET	C
        CALL	C.5A82                  ; store protocol and timer values
        RET	NC                      ; no error, quit
        JP	J$4884		        ; illegal function call error

;	  Subroutine store protocol and timer values
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A82:	PUSH	BC
        CALL	C.47A1			; to upper
        CP	"T"                     ; terminal mode (EOF detection) ?
        LD	B,40H
        JR	Z,J.5A9B
        CP	"R"                     ; terminal mode (raw) ?
        LD	B,50H
        JR	Z,J.5A9B
        CP	"X"                     ; X-modem (without CRC) ?
        LD	B,80H
        JR	Z,J.5A9B
        POP	BC
        SCF
        RET

J.5A9B:	LD	A,(D.6049)
        AND	2FH                     ; clear b7,b6,b4
        OR	B
        LD	(D.6049),A              ; update terminal mode
        LD	(D.6164),DE             ; store timer #1 and #2 value
        POP	BC
        RET

; Device handler

J$5AAA:	EI
        CP	0FFH			; devicename inquiry ?
        JP	NZ,J$5AE7		; nope, handle devicefunction
        LD	HL,PROCNM
        LD	A,(HL)
        CP	"C"
        JR	NZ,J.5AE5
        INC	HL
        LD	A,(HL)
        CP	"O"
        JR	NZ,J.5AE5
        INC	HL
        LD	A,(HL)
        CP	"M"
        JR	NZ,J.5AE5
        INC	HL
        LD	A,(HL)
        AND	A			; COM number specified ?
        JR	NZ,J$5ACC		; may be, check
        DEC	HL
        LD	A,"0"			; use COM0 as default
J$5ACC:	SUB	"0"
        JR	C,J.5AE5
        CP	0AH	; 10 
        JR	NC,J.5AE5
        PUSH	BC
        PUSH	AF
        LD	A,(D.604B)
        AND	0FH			; my COM number
        LD	B,A
        POP	AF
        CP	B
        POP	BC
        JR	NZ,J.5AE5
        INC	HL
        LD	A,(HL)
        AND	A
        RET	Z
J.5AE5:	SCF				; device not handled by me
        RET

J$5AE7:	PUSH	HL
        PUSH	AF
        LD	HL,I$5AF8
        ADD	A,L
        LD	L,A
        JR	NC,J$5AF1
        INC	H
J$5AF1:	LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A
        POP	AF
        EX	(SP),HL
        RET

; BASIC device function table

I$5AF8: DEFW    C$5B0C                   ; function open
        DEFW    C$5B21                   ; function close
        DEFW    J$4875                   ; function random i/o, sequential i/o only error
        DEFW    C$5B28                   ; function sequential output
        DEFW    C$5B37                   ; function sequential input
        DEFW    C$5B41                   ; function loc
        DEFW    C$5B52                   ; function lof
        DEFW    C$5B5B                   ; function eof
        DEFW    J$4884                   ; function fpos,illegal function call
        DEFW    C$5B67                   ; function backup

;	  Subroutine open
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B0C: LD	C,128                   ; buffer size = 128
        CALL	C.6000
        DEFB    0
        DEFW    C$414D                  ; RS232.OPEN
        JR	C,J$5B1A                ; error, 
        LD	(PTRFIL),HL
        RET

J$5B1A:	DEC	A
        JP	Z,J$486F                ; bad filename error
        JP	J$4878                  ; file already open error

;	  Subroutine close
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B21:	CALL	C.6000
        DEFB    0
        DEFW    C$4159                  ; RS232.CLOSE
        RET

;	  Subroutine sequential output
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B28:	LD	A,C
        CALL	C.6000
        DEFB    0
        DEFW    C$4156                  ; RS232.SNDCHR
        EI
        JP	C,J.488A                ; aborted by CTRL-STOP, device i/o error
        JP	Z,J.488A                ; timeout, device i/o error
        RET

;	  Subroutine sequential input
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B37:	CALL	C.6000
        DEFB    0
        DEFW    C$4153                  ; RS232.GETCHR
        JP	M,J.488A                ; error, device i/o error
        RET

;	  Subroutine loc
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B41:	PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$415F                  ; RS232.LOC
J$5B48:	LD	(DAC+2),HL
        LD	HL,VALTYP
        LD	(HL),2                  ; DAC = integer
        POP	HL
        RET

;	  Subroutine lof
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B52:	PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$4162                  ; RS232.LOF
J$5B59:	JR	J$5B48

;	  Subroutine eof
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B5B:	PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C$410E                  ; eof
        JP	M,J.488A                ; error, device i/o error
        JR	J$5B59

;	  Subroutine backup
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B67:	CALL	C.6000
        DEFB    0
        DEFW    C$4165                  ; RS232.BACKUP
        RET

;	  Subroutine check for BASIC character
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B6E:	LD	A,(HL)
        EX	(SP),HL
        CP	(HL)
        JP	NZ,J$4881               ; syntax error
        INC	HL
        EX	(SP),HL

;	  Subroutine get next BASIC character
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B76:	PUSH	IX
        LD	IX,CHRGTR
        EXX
        PUSH	HL
        EXX
        CALL	C.5BC3
        EXX
        POP	HL
        EXX
        JR	J$5BB8

;	  Subroutine evaluate expression
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B87:	PUSH	IX
        LD	IX,I$4C64
        JR	J.5BB5

;	  Subroutine evaluate address operand
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B8F:	PUSH	IX
        LD	IX,I$542F
        JR	J.5BB5

;	  Subroutine evaluate byte operand
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B97:	PUSH	IX
        LD	IX,I$521C
        JR	J.5BB5

;	  Subroutine locate variable
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B9F:	PUSH	IX
        LD	IX,I$5EA4
        JR	J.5BB5

;	  Subroutine free temporary string
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BA7:	PUSH	IX
        LD	IX,I$67D0
        JR	J.5BB5

;	  Subroutine convert to DAC to new type
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BAF:	PUSH	IX
        LD	IX,I$517A
J.5BB5:	CALL	C.5BC3
J$5BB8:	POP	IX
        RET

;	  Subroutine close all i/o channels
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BBB:	PUSH	IX
        LD	IX,I$6C1C
        JR	J.5BB5

;	  Subroutine MSX BIOS call (EI)
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BC3:	CALL	C.5BC8
        EI
        RET

;	  Subroutine MSX BIOS call
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BC8:	PUSH	IY
        LD	IY,(EXPTBL+0-1)
        CALL	CALSLT
        POP	IY
        RET


;	  Subroutine evaluate comidentifier and check if this one
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BD4:	DEC	HL
        CALL	C.5B76                  ; get next BASIC character
        LD	D,A                     ; store last BASIC character
        JR	NZ,J$5BE2               ; not end of statement or line,
J.5BDB:	XOR	A                       ; COM0
        LD	BC,-1                   ; no string
        PUSH	HL
        JR	J.5C20

J$5BE2:	CP	"("
        JP	Z,J$5BED
        CP	","
        JR	Z,J.5BDB
        JR	J$5BF5

J$5BED:	CALL	C.5B76                  ; get next BASIC character
        LD	D,A                     ; store last BASIC character
        CP	","
        JR	Z,J.5BDB
J$5BF5:	CALL	C.5B87                  ; evaluate expression
        PUSH	HL
        CALL	C.5BA7                  ; free temporary string
        LD	C,0
        LD	B,(HL)                  ; size of string
        INC	HL
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; pointer to string
        LD	A,B
        AND	A                       ; empty string ?
        JR	Z,J.5C20                ; yep,
        INC	HL
        LD	A,(HL)
        CP	":"
        JR	Z,J$5C12
        DEC	HL
        XOR	A                       ; COM0
        JR	J.5C20

J$5C12:	DEC	HL
        LD	A,(HL)
        SUB	"0"
        JR	C,J.5C3A
        CP	9+1
        JR	NC,J.5C3A
        INC	HL
        INC	HL
        DEC	B
        DEC	B
J.5C20:	LD	E,A
        LD	A,(D.604B)
        AND	0FH			; my COM number
        PUSH	HL
        EXX
        POP	HL
        EXX
        POP	HL
        PUSH	AF
        DEC	HL
        CALL	C.5B76                  ; get next BASIC character
        LD	D,A                     ; store last BASIC character
        POP	AF
        CP	E
        RET	Z
J$5C34:	POP	HL
        PUSH	IX
        POP	HL
        SCF
        RET

J.5C3A:	POP	HL
        JR	J$5C34

;	  Subroutine check for empty or no string
;	     Inputs  ________________________
;	     Outputs ________________________

C.5C3D:	LD	A,B
        OR	C                       ; empty string ?
        RET	Z                       ; yep, quit
        LD	A,B
        AND	C
        INC	A                       ; no string ?
        RET	Z                       ; yep, quit
        JP	J$4884		        ; illegal function call error

;	  Subroutine assign integer to variable
;	     Inputs  ________________________
;	     Outputs ________________________

C$5C47:	PUSH	HL
        LD	HL,VALTYP
        LD	A,(HL)
        CP	2
        JR	Z,J$5C75
        CP	4
        JR	Z,J$5C65
        CP	8
        JP	NZ,J$4887               ; type mismatch error
        LD	(HL),2                  ; DAC = integer
        PUSH	DE
        LD	A,8                     ; double float
        CALL	C.5BAF                  ; convert to DAC to new type
        LD	C,8
        JR	J$5C6F

J$5C65:	LD	(HL),2                  ; DAC = integer
        PUSH	DE
        LD	A,4                     ; single float
        CALL	C.5BAF                  ; convert to DAC to new type
        LD	C,4
J$5C6F:	POP	DE
        LD	HL,DAC
        JR	J$5C7A

J$5C75:	LD	HL,DAC+2
        LD	C,2
J$5C7A:	LD	B,0
        LDIR
        POP	HL
        RET

        DEFS    6000H-$,0FFH
