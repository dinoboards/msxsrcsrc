;  
;   FSA1FM4 -> Source re-created by Z80DIS 2.2
;      Z80DIS was written by Kenneth Gielow
;                            Palo Alto, CA
        .Z80
        ORG	4090H
C.0000	EQU	0000H	; -C--I
I.0001	EQU	0001H	; ----I
I.0007	EQU	0007H	; ----I
C.0008	EQU	0008H	; -C---
I.0009	EQU	0009H	; ----I
I$000A	EQU	000AH	; ----I
I$000B	EQU	000BH	; ----I
I$0011	EQU	0011H	; ----I
X.0020	EQU	0020H	; -C-L-
C$0028	EQU	0028H	; -C---
DBUF	EQU	0080H	; ----I
CHSNS	EQU	009CH	; -C---
CHGET	EQU	009FH	; -C---
LPTOUT	EQU	00A5H	; -C---
LPTSTT	EQU	00A8H	; -C---
I$00B4	EQU	00B4H	; ----I
C$00CD	EQU	00CDH	; -C---
I$00F0	EQU	00F0H	; ----I
I$00FF	EQU	00FFH	; ----I
I.0100	EQU	0100H	; ----I
KILBUF	EQU	0156H	; -C---
I$023E	EQU	023EH	; ----I
I.0258	EQU	0258H	; ----I
I$0302	EQU	0302H	; ----I
I$043E	EQU	043EH	; ----I
J$0459	EQU	0459H	; J----
I.04B0	EQU	04B0H	; ----I
J$0952	EQU	0952H	; J----
C$0A0D	EQU	0A0DH	; -C---
I$0E10	EQU	0E10H	; ----I
I$2036	EQU	2036H	; ----I
I$2252	EQU	2252H	; ----I
C$2840	EQU	2840H	; -C---
D$2B2A	EQU	2B2AH	; --S--
I$2E59	EQU	2E59H	; ----I
I$3A5A	EQU	3A5AH	; ----I

C.6000	EQU	6000H	; -C---
D.6049	EQU	6049H                   ; b7,b6,b2 = terminal mode
I$604A	EQU	604AH	; ----I
D.6074	EQU	6074H                   ; printer echo enabled
D.6075	EQU	6075H                   ; printer echo receive buffer not empty
D.607A	EQU	607AH                   ; counter set #1, number of 100 ms
D.607C	EQU	607CH                   ; counter set #1, number of seconds
D.6085	EQU	6085H                   ; b7,b6 = dialer mode,b5, b4 = SI/SO handshake, b3 = auto LF on receive, b2 = auto LF on send, b1 = RTS/CTS handshake, b0 = XON/XOFF handshake
D.6086	EQU	6086H	                ; b7 = SI/SO receive, b6 = ?, b5 = CR on send, b4 = ?, b3 = channel open, b2 = XON/XOFF receive, b1 = sending suspended, b0 = SI/SO send
D$608A	EQU	608AH                   ; get offset in receive buffer
D$608E	EQU	608EH                   ; get offset in receive buffer (download text/log)
D.6090	EQU	6090H                   ; number of bytes in receive buffer
D.6092	EQU	6092H                   ; number of bytes in receive buffer (printer echo)
D.6094	EQU	6094H                   ; number of bytes in receive buffer (download text/log)
D$6098	EQU	6098H                   ; buffer size
D$615D	EQU	615DH                   ; comterm mode (b0 = interlace, b1 = full, b2 = chinese, b3/b4 = srceen mode, b5/b6 = kanji code, b7 = DEL operation)
D$615E	EQU	615EH                   ; b1 = shift JIS D, b0 = 12 dot
D.6164	EQU	6164H                   ; protocol timer #1 value
D.6165	EQU	6165H                   ; protocol timer #2 value
D$616A	EQU	616AH	; ---L-
D$616C	EQU	616CH	; ---L-
D$6173	EQU	6173H	; ---L-
D.6174	EQU	6174H                   ; saved 7EED
D$61C5	EQU	61C5H                   ; english flag
D.61D8	EQU	61D8H	; ---L-
D.6340	EQU	6340H                   ; timer 0 value
D.6342	EQU	6342H                   ; timer 1 value
D.6344	EQU	6344H                   ; timer 2 value
I.6346	EQU	6346H                   ; timer flags
D.6347	EQU	6347H	; --S-I
D.6348	EQU	6348H	; --S-I
D.6349	EQU	6349H	; --SLI
D.634A	EQU	634AH	; --SL-
D$634B	EQU	634BH	; --S--
D.634C	EQU	634CH                   ; saved 6085
D.634D	EQU	634DH                   ; file open
D.634E	EQU	634EH	; --SL-
D.634F	EQU	634FH	; --SL-
D.6351	EQU	6351H                   ; download text/log enabled
D.6352	EQU	6352H                   ; upload text/log enabled
D.6353	EQU	6353H                   ; get offset (read)/put offset (write) disk buffer
D$6354	EQU	6354H	; --S--
D$6355	EQU	6355H	; ---L-
D.6358	EQU	6358H	; --SL-
D.6359	EQU	6359H	; --SL-
D.635B	EQU	635BH                   ; wildcard flag
D$635E	EQU	635EH                   ; not CALL TELCOM
D.6361	EQU	6361H           	; output to modem
D.6362	EQU	6362H	; --SL-
D$6370	EQU	6370H	; ---L-
D.6372	EQU	6372H	; --SL-

FILEVL	EQU	6A0EH	; ----I
OPNFIL	EQU	6AFAH	; ----I
CLSFIL	EQU	6B24H	; ----I
FILOUT	EQU	6C48H	; ----I
INDSKC	EQU	6C71H	; ----I
D.7EE7	EQU	7EE7H                   ; printer not ready counter
D.7EED	EQU	7EEDH	; --SL-

BDOS	EQU	0F37DH	; -C---
CSRX	EQU	0F3DDH	; ---LI

D.F55E	EQU	0F55EH	; --SL-
D.F560	EQU	0F560H	; ---L-
I.F562	EQU	0F562H	; ----I
D.F57E	EQU	0F57EH	; ---LI
D.F580	EQU	0F580H	; ---L-

D.F65B	EQU	0F65BH                  ; ring counter
D.F65C	EQU	0F65CH                  ; last line status
D.F65D	EQU	0F65DH	; --SL-
HOLD8   EQU     0F806H
TMPFCB  EQU     HOLD8
FILTAB	EQU	0F860H	; ---L-
NULBUF	EQU	0F862H	; ---L-
FILNAM	EQU	0F866H	; --S-I
SCRMOD	EQU	0FCAFH	; --SL-
H.PHYD	EQU	0FFA7H	; ---L-

?.4090:	JP	J$420D                  ; start upload log/text
?.4093:	JP	J$40CC                  ; start download log/text
?.4096:	JP	J$4452                  ; X-modem upload
I$4099:	JP	J$4245                  ; X-modem download
?.409C:	JP	J$422A                  ; get byte from disk buffer (for upload)
I.409F:	JP	C.416F
I.40A2:	JP	J$4234                  ; stop upload log/text
I$40A5:	JP	J$4105                  ; stop download log/text
?.40A8:	JP	J$4C51
I$40AB:	JP	J$461A
?.40AE:	JP	J$46A1
?.40B1:	JP	C.47DF
?.40B4:	JP	C.47F2                  ; get byte from disk buffer
?.40B7:	JP	C.49C4                  ; close file (with stop/start sending)
?.40BA:	JP	J$4D24                  ; wait between characters
?.40BD:	JP	J$5AD5
?.40C0:	JP	C.4EB2                  ; output error message
?.40C3:	JP	C.4EFD                  ; output message
?.40C6:	JP	C.4DC7                  ; sender may start sending
I$40C9:	JP	J$4ABF

;	  Subroutine enable download log/text
;	     Inputs  ________________________
;	     Outputs ________________________

J$40CC:	XOR	A
        LD	(D.6353),A              ; put offset disk buffer = 0 (empty buffer)
        CALL	C$41EC                  ; initialize disk buffer for writing
        LD	A,(D.6049)
        AND	10H                     ; terminal mode = raw ?
	LD	L,6                     ; text id = download log
        JR	NZ,J.40DE               ; yep,
        LD	L,4                     ; text id = download text
J.40DE:	CALL	C.4CFD
        JR	C,J.4117
        CALL	C$413F
        JR	C,J.4117
        DI
        XOR	A
        LD	(D$6354),A
        CPL
        LD	(D.6351),A              ; download text/log enabled
        LD	HL,(D$608A)             ; get offset in receive buffer
        LD	(D$608E),HL             ; update get offset in receive buffer (download text/log)
        LD	HL,(D.6090)             ; number of bytes in receive buffer
        LD	(D.6094),HL             ; update number of bytes in receive buffer (download text/log)
        EI
        CALL	C.6000
        DEFB    1
        DEFW    I$40CF                  ; initialize download text/log flags
        RET

J$4105:	LD	HL,(D.6094)             ; number of bytes in receive buffer (download text/log)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	Z,J$4114                ; yep,
        CALL	C.416F
        LD	A,(D.6351)
        OR	A                       ; download text/log enabled ?
        RET	Z                       ; nope, quit
J$4114:	CALL	C$41C4
J.4117:	LD	C,14                    ; text id = download aborted
        LD	L,18                    ; text id = end of download

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.411B:	JR	NC,J.411E               ; no error, use normal text id
        LD	L,C                     ; error, use use error text id
J.411E:	LD	A,0
        LD	(D.6351),A              ; download text/log disabled
        LD	(D.6352),A              ; upload text/log disabled
        PUSH	HL
        CALL	C,C.4139                ; error, output error message
        LD	A,(D.634D)
        OR	A                       ; file open ?
        CALL	NZ,C$413C               ; yep, close file (with stop/start sending)
        CALL	C,C.4139                ; close file error, output error message
        POP	HL
        CALL	C.4EDD                  ; output message with new line
        RET

;	  Subroutine output error message
;	     Inputs  E = error code
;	     Outputs ________________________

C.4139:	JP	C.4EB2                  ; output error message

;	  Subroutine close file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C$413C:	JP	C.49C4                  ; close file (with stop/start sending)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$413F:	CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4857                  ; check if file exists
        RET	C                       ; error, quit
        AND	A                       ; file exists ?
        JR	Z,J.414D                ; yep,
J$4149:	CALL	C.48BB                  ; create file (with stop/start sending)
        RET

J.414D:	CALL	C$4EFB                  ; output file already exists message
        CALL	C.4E6D                  ; get input
        CALL	C.4EE3                  ; output new line
        JR	C,J.416B
        CALL	C.4F2B                  ; to upper
        CP	"R"
        JR	Z,J$4149                ; replace file
        CP	"C"
        JR	Z,J.416B
        CP	"A"
        JR	NZ,J.414D
        CALL	C$4C70                  ; open file for append
        RET

J.416B:	LD	E,1                     ; error = canceled
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.416F:	CALL	C.4DE4                  ; sender must stop sending
J.4172:	LD	HL,(D.6094)             ; number of bytes in receive buffer (download text/log)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	Z,J$41C0                ; yep,
        CALL	C.6000
        DEFB    1
        DEFW    I$40C9                  ; get received byte (download text/log)
        PUSH	AF
        LD	A,(D$6355)
        OR	A
        JR	Z,J$4189
        POP	AF
        JR	J.4172                  ; again

J$4189:	POP	AF
        JR	Z,J.4172
        CP	1AH
        JR	NZ,J$4199
        LD	A,(D.6049)
        AND	10H                     ; terminal mode = raw ?
        JR	Z,J$41B7                ; nope,
        LD	A,1AH
J$4199:	LD	HL,(D$635E)
        INC	L
        DEC	L                       ; CALL TELCOM ?
        JR	Z,J.41AC                ; yep,
        CP	20H                     ; control character ?
        JR	NC,J.41AC               ; nope,
        CP	0DH                     ; CR ?
        JR	Z,J.41AC
        CP	0AH                     ; LF ?
        JR	NZ,J.4172
J.41AC:	CALL	C$41CE                  ; put byte in disk buffer
        JR	NC,J.4172
        CALL	C.4DC7                  ; sender may start sending
        JP	J.4117

J$41B7:	CALL	C.41FB                  ; flush disk write buffer
        CALL	C.4DC7                  ; sender may start sending
        JP	J.4117

J$41C0:	CALL	C.4DC7                  ; sender may start sending
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$41C4:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C.41FB                  ; flush disk write buffer
        CALL	C.4DC7                  ; sender may start sending
        RET

;	  Subroutine put byte in disk buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C$41CE:	PUSH	AF
        CALL	C.4A9A                  ; get pointer to buffer
        LD	A,(D.6353)
        LD	E,A
        LD	D,0                     ; put offset
        ADD	HL,DE
        INC	A
        LD	(D.6353),A              ; update put offset
        POP	BC
        LD	(HL),B                  ; put in buffer
        RET	NZ                      ; buffer not full, quit
        CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4849                  ; set DMA address
        LD	DE,256
        CALL	C.49A2                  ; write random block to file

;	  Subroutine initialize disk buffer for writing
;	     Inputs  ________________________
;	     Outputs ________________________

C$41EC:	PUSH	AF
        PUSH	DE
        CALL	C.4A9A                  ; get pointer to buffer
        LD	B,0
J$41F3:	LD	(HL),1AH
        INC	HL
        DJNZ	J$41F3                  ; fill buffer with EOFs
        POP	DE
        POP	AF
        RET

;	  Subroutine flush disk write buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.41FB:	CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4849                  ; set DMA address
        LD	A,(D.6353)
        LD	E,A
        LD	D,0                     ; number of bytes = put offset
        OR	A                       ; buffer empty ?
        RET	Z                       ; yep, quit
        CALL	C.4999                  ; write random block to file (with stop/start sending)
        RET

;	  Subroutine start upload log/text
;	     Inputs  ________________________
;	     Outputs ________________________

J$420D:	LD	A,(D.6049)
        AND	10H                     ; terminal mode = raw ?
        LD	L,2                     ; text id = upload log
        JR	NZ,J$4218               ; yep,
        LD	L,0                     ; text id = upload text
J$4218:	CALL	C.4CFD
        JP	C,J.422E
        CALL	C.423A
        JP	C,J.422E
        LD	A,0FFH
        LD	(D.6352),A              ; upload text/log enabled
        RET

J$422A:	CALL	C.47F2                  ; get byte from disk buffer
        RET	NC                      ; ok, quit
J.422E:	LD	L,12                    ; text id = upload aborted
        SCF
        JP	J.411E

;	  Subroutine stop upload log/text
;	     Inputs  ________________________
;	     Outputs ________________________

J$4234:	LD	L,16                    ; text id = end of upload
        OR	A
        JP	J.411E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.423A:	CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4857                  ; check if file exists
        RET	C                       ; error, quit
        CALL	C.47E3                  ; open file, initialize recordsize and disk buffer
        RET

J$4245:	LD	L,10                    ; text id = download X-modem
        CALL	C.4278
        CALL	C.4FDE
        LD	C,14                    ; text id = download aborted
        LD	L,18                    ; text id = end of download
        JP	C.411B

;	  Subroutine upload file with X-modem
;	     Inputs  ________________________
;	     Outputs ________________________

C$4254:	LD	L,8                     ; text id = upload X-modem
        CALL	C.4278
        CALL	C.4FDE
        PUSH	AF
        PUSH	DE
        CALL	C.5074                  ; output to modem ?
        JR	Z,J.426F                ; nope,
        LD	A,(D.634D)
        OR	A                       ; file open ?
        JR	Z,J.426F                ; nope,
        CALL	C.6000
        DEFB    7
        DEFW    I$40E1
J.426F:	POP	DE
        POP	AF
        LD	C,12                    ; text id = upload aborted
        LD	L,16                    ; text id = end of upload
        JP	C.411B

;	  Subroutine __________________________
;	     Inputs  L = text id
;	     Outputs ________________________

C.4278:	CALL	C.4FCC                  ; disable XON/XOFF handshake
        CALL	C.4CFD
        RET	C
        XOR	A
        LD	(D.6358),A              ; reset CRC16 flag
        LD	D,A
        LD	E,A
        LD	(D.6359),DE
        CALL	C.4FD0                  ; disable auto LF on send and receive
        CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4857                  ; check if file exists
        RET	C                       ; error, quit
        AND	A                       ; file exists ?
        JR	NZ,J.42B5               ; yep,
        CALL	C.5074                  ; output to modem ?
        LD	E,65                    ; error = file already exists
        SCF
        RET	NZ                      ; yep, quit with error
        LD	L,22                    ; text id = file already exists
        CALL	C.4EDD                  ; output message with new line
        CALL	C.4E6D                  ; get input
        CALL	C.4EE3                  ; output new line
        JR	C,J$42B1
        CALL	C.4F2B                  ; to upper
        CP	"R"
        JR	Z,J.42B5                ; replace file
J$42B1:	SCF
        LD	E,1                     ; error = canceled
        RET

J.42B5:	CALL	C.48BB                  ; create file (with stop/start sending)
        RET	C
        XOR	A
        LD	(D.6349),A
        LD	A,11
        LD	(D.6348),A
        CALL	C.5074                  ; output to modem ?
        JR	Z,J$42D7                ; nope,
        CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
J$42CD:	CALL	C.5065
        LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	20                      ; 20 seconds passed ?
        JR	C,J$42CD                ; nope, wait
J$42D7:	LD	A,1
        LD	(D.6358),A              ; set CRC16 flag
        LD	A,"C"                   ; request CRC16
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
        LD	HL,180
        CALL	C.4D3D
J.42E8:	CALL	C.5065
        CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	NZ,J$4314               ; timer finished, use sum check
        CALL	C.45BC                  ; CAN if CTRL-STOP pressed
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J.42E8                ; receive buffer empty, wait
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        CP	01H                     ; SOH ?
        JR	Z,J$4308                ; yep,
        CP	18H                     ; CAN ?
        JR	NZ,J.42E8               ; nope,
        JP	J.4573

J$4308:	LD	L,26                    ; text id = crc16 check
        CALL	C.444B
        LD	L,32                    ; text id = 
        CALL	C.444B
        JR	J.4361

J$4314:	XOR	A
        LD	(D.6358),A              ; reset CRC16 flag
        LD	L,24                    ; text id = sum check
        CALL	C.444B
        LD	L,32
        CALL	C.444B
J.4322:	LD	A,15H                   ; NAK
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
        LD	HL,D.6348
        DEC	(HL)
        JP	Z,J.45B0

J$432F:	LD	HL,600
        CALL	C.4D3D
J.4335:	CALL	C.5065
        CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	NZ,J.4322               ; timer finished, NAK
        CALL	C.45BC                  ; CAN if CTRL-STOP pressed
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J.4335                ; receive buffer empty, wait
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        CP	01H                     ; SOH ?
        JR	Z,J.4361                ; yep,
        CP	04H                     ; EOT ?
        JR	Z,J$4359                ; yep,
        CP	18H                     ; CAN ?
        JR	NZ,J.4335               ; nope,
        JP	J.4573

J$4359:	LD	A,06H                   ; ACK
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
        XOR	A
        RET

J.4361:	CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
        LD	HL,(NULBUF)
        INC	HL
        LD	B,128+3                 ; 128 data bytes, 2x block number, sum
        LD	A,(D.6358)
        ADD	A,B
        LD	B,A                     ; CRC16, 1 byte extra
J$4372:	PUSH	HL
        LD	HL,60
        CALL	C.4D43                  ; initialize timer 0
        POP	HL
J$437A:	CALL	C.5065
        CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	NZ,J.4322               ; timer finished, NAK
        LD	A,(D.6165)              ; protocol timer #2 value
        AND	A                       ; default value ?
        LD	D,20
        JR	Z,J$438B                ; yep, use 20 seconds
        LD	D,A
J$438B:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	D
        JR	Z,J.4322                ; yep, NAK
        CALL	C.45BC                  ; CAN if CTRL-STOP pressed
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J$437A                ; receive buffer empty,
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        LD	(HL),A
        INC	HL
        DJNZ	J$4372
        LD	HL,(NULBUF)
        INC	HL
        INC	HL
        INC	HL
        LD	A,(D.6358)
        AND	A                       ; CRC16 ?
        JR	Z,J$43CF                ; nope,
        PUSH	HL
        POP	IX
        LD	HL,0                    ; reset CRC16
        LD	B,128
J$43B6:	LD	A,(IX+0)
        INC	IX
        CALL	C.45D2                  ; update CRC16
        DJNZ	J$43B6
        LD	A,(IX+0)
        CP	H                       ; CRC16 correct ?
        JR	NZ,J$43CA               ; nope,
        LD	A,(IX+1)
        CP	L                       ; CRC16 correct ?
J$43CA:	JP	NZ,J.4322               ; nope, NAK
        JR	J$43DA                  ; continue

J$43CF:	LD	B,80H
        XOR	A
J$43D2:	ADD	A,(HL)
        INC	HL
        DJNZ	J$43D2
        CP	(HL)                    ; sum correct ?
        JP	NZ,J.4322               ; nope, NAK
J$43DA:	CALL	C.5065
        LD	HL,(NULBUF)
        INC	HL
        INC	HL
        LD	A,(HL)
        CPL
        DEC	HL
        CP	(HL)                    ; block number correct ?
        JP	NZ,J.4322               ; nope, NAK
        LD	A,(HL)
        LD	B,A
        LD	HL,D.6349
        SUB	(HL)
        CP	2
        JR	NC,J$4443
        LD	(HL),B
        OR	A
        JR	Z,J$4422
        CALL	C.4577
        LD	A,(D.6362)
        OR	A
        JR	Z,J$441E                ; nope, skip printer
        CALL	C.4A9A                  ; get pointer to buffer
        LD	B,128
J$4405:	CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
J$440B:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	20                      ; 20 seconds passed ?
        JR	NC,J$442B               ; yep,
        CALL	LPTSTT                  ; get printer status
        JR	Z,J$440B                ; not ready, wait
        LD	A,(HL)
        INC	HL
        CALL	LPTOUT
        DJNZ	J$4405
J$441E:	CALL	C$4996
        RET	C
J$4422:	LD	A,06H                   ; ACK
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
        JP	J$432F

J$442B:	LD	A,18H                   ; CAN
        CALL	C.4F82                  ; ensure carrier detect, send byte
        CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
J$4436:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	4                       ; 4 seconds passed ?
        JR	C,J$4436                ; nope, wait
        LD	L,44                    ; text id = printer not ready
        CALL	C.4EFD                  ; output message
        RET

J$4443:	LD	E,6                     ; error = wrong block
        SCF
        RET

J$4447:	LD	E,3                     ; error = time out
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.444B:	CALL	C.5074                  ; output to modem ?
        RET	NZ                      ; yep, quit
        JP	C.4EDD                  ; output message with new line

J$4452:	LD	L,8                     ; text id = upload X-modem
        CALL	C.4470
        CALL	C.4FDE
        LD	C,12                    ; text id = upload aborted
        LD	L,16                    ; text id = end of upload
        JP	C.411B

;	  Subroutine download file with X-modem
;	     Inputs  ________________________
;	     Outputs ________________________

C$4461:	LD	L,10                    ; text id = download X-modem
        CALL	C.4470
        CALL	C.4FDE
        LD	C,14                    ; text id = download aborted
        LD	L,18                    ; text id = end of download
        JP	C.411B

;	  Subroutine __________________________
;	     Inputs  L = text id
;	     Outputs ________________________

C.4470:	CALL	C.4FCC                  ; disable XON/XOFF handshake
        CALL	C.4CFD
        RET	C
        XOR	A
        LD	(D.6358),A
        LD	DE,0
        LD	(D.6359),DE
        CALL	C.4FD0                  ; disable auto LF on send and receive
        CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4857                  ; check if file exists
        RET	C                       ; error, quit
        CALL	C.4920                  ; open file (with stop/start sending)
        RET	C
        LD	A,1
        LD	(D.6349),A
        LD	A,10
        LD	(D.6348),A
        LD	HL,3600
        CALL	C.4D3D
J.44A0:	CALL	C.5065
        CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	NZ,J$4447               ; timer finished,
        CALL	C.45B4                  ; EOT if CTRL-STOP pressed
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J.44A0                ; receive buffer empty, wait
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        CP	"C"                     ; request CRC16 ?
        JR	NZ,J$44C5               ; nope,
        LD	L,26
        CALL	C.444B
        LD	A,1
        LD	(D.6358),A              ; set CRC16 flag
        JR	J$44D5

J$44C5:	CP	15H                     ; NAK ?
        JR	Z,J$44D0                ; yep,
        CP	18H                     ; CAN ?
        JR	NZ,J.44A0               ; nope,
        JP	J.4573

J$44D0:	LD	L,24                    ; text id = sum check
        CALL	C.444B
J$44D5:	LD	L,30                    ; text id = send block counter
        CALL	C.444B
J$44DA:	LD	HL,(NULBUF)
        LD	(HL),1
        INC	HL
        LD	A,(D.6349)
        LD	(HL),A
        INC	HL
        CPL
        LD	(HL),A
        INC	HL
        CALL	C$4FEB
        PUSH	HL
        CALL	C$4950                  ; read from file (with stop/start sending)
        POP	HL
        RET	C
        OR	A
        JP	NZ,J.4586
        LD	A,(D.6358)
        AND	A
        JR	Z,J$4515
        PUSH	HL
        POP	IX
        LD	B,128
        LD	HL,0                    ; reset CRC16
J$4503:	LD	A,(IX+0)
        INC	IX
        CALL	C.45D2                  ; update CRC16
        DJNZ	J$4503
        LD	(IX+0),H
        LD	(IX+1),L
        JR	J.451C

J$4515:	LD	B,80H
J$4517:	ADD	A,(HL)
        INC	HL
        DJNZ	J$4517
        LD	(HL),A
J.451C:	LD	B,84H
        LD	A,(D.6358)
        ADD	A,B
        LD	B,A
        LD	HL,(NULBUF)
J$4526:	CALL	C.5065
        LD	A,(HL)
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
        INC	HL
        DJNZ	J$4526
        CALL	C.6000
        DEFB    0
        DEFW    I$4093                  ; clear receive buffer
        CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
J.453D:	CALL	C.5065
        EI
        CALL	C.45B4                  ; EOT if CTRL-STOP pressed
        LD	A,(D.6164)              ; protocol timer #1 value
        AND	A                       ; default value ?
        LD	D,10
        JR	Z,J$454D                ; yep, use 10 seconds
        LD	D,A
J$454D:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	D
        JR	Z,J.457E
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J.453D                ; receive buffer empty,
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        CP	15H                     ; NAK ?
        JR	Z,J.457E                ; yep,
        CP	18H                     ; CAN ?
        JR	Z,J.4573
        CP	06H                     ; ACK ?
        JR	NZ,J.453D               ; nope,
        LD	HL,D.6349
        INC	(HL)
        CALL	C.4577
        JP	J$44DA

J.4573:	LD	E,4                     ; error = CAN received
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4577:	CALL	C.5074                  ; output to modem ?
        RET	NZ                      ; yep, quit
        JP	J$4FF5

J.457E:	LD	HL,D.6348
        DEC	(HL)
        JR	NZ,J.451C
        JR	J.45B0

J.4586:	LD	HL,600
        CALL	C.4D43                  ; initialize timer 0
        LD	A,04H                   ; EOT
        CALL	C.4F82                  ; ensure carrier detect, send byte
        RET	C                       ; carrier lost, quit
J.4592:	CALL	C.5065
        CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	NZ,J$45A9               ; timer finished,
        CALL	C.4FA6                  ; ensure carrier detect, receive buffer empty ?
        RET	C                       ; carrier lost, quit
        JR	Z,J.4592                ; receive buffer empty, wait
        CALL	C.4FBC                  ; ensure carrier detect, get received byte
        RET	C                       ; carrier lost, quit
        SUB	06H                     ; ACK ?
        JR	NZ,J.4592               ; nope,
        RET

J$45A9:	LD	HL,D.6348
        DEC	(HL)
        JP	NZ,J.4586
J.45B0:	LD	E,5                     ; error = out of retries
        SCF
        RET

;	  Subroutine EOT if CTRL-STOP pressed
;	     Inputs  ________________________
;	     Outputs ________________________

C.45B4:	CALL	C.4F34                  ; CTRL-STOP pressed ?
        RET	NC                      ; nope, quit
        LD	A,04H                   ; EOT
        JR	J$45C2

;	  Subroutine CAN if CTRL-STOP pressed
;	     Inputs  ________________________
;	     Outputs ________________________

C.45BC:	CALL	C.4F34                  ; CTRL-STOP pressed ?
        RET	NC                      ; nope, quit
        LD	A,18H                   ; CAN
J$45C2:	PUSH	AF
J$45C3:	CALL	C.4F34                  ; CTRL-STOP pressed ?
        JR	C,J$45C3                ; still pressed, again
        POP	AF
        CALL	C.4F82                  ; ensure carrier detect, send byte
        POP	IX
        SCF
        LD	E,1                     ; error canceled
        RET

;	  Subroutine update CRC16
;	     Inputs  ________________________
;	     Outputs ________________________

C.45D2:	XOR	H
        LD	H,A
        CALL	C$45D7

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$45D7:	LD	A,H
        RRCA
        RRCA
        RRCA
        RRCA
        AND	0FH
        CALL	C$45EC
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        LD	A,E
        XOR	L
        LD	L,A
        LD	A,D
        XOR	H
        LD	H,A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$45EC:	ADD	A,A
        LD	E,A
        LD	D,0
        PUSH	HL
        LD	HL,I$45FA
        ADD	HL,DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        POP	HL
        RET

I$45FA:	DEFB	0,0
        LD	HL,I$4210
        JR	NZ,J$4664
        JR	NC,J$4587
        LD	B,B
        AND	L
        LD	D,B
        ADD	A,60H	; "`"
        RST	20H
        LD	(HL),B
        EX	AF,AF'
        ADD	A,C
        ADD	HL,HL
        SUB	C
        LD	C,D
        AND	C
        LD	L,E
        OR	C
        ADC	A,H
        POP	BC
        XOR	L
        POP	DE
        ADC	A,0E1H
        RST	28H
        POP	AF

J$461A:	CALL	C.6000
        DEFB    1
        DEFW    I$40E4                  ; store PROMPT hook and disable
        CALL	C$462A
        CALL	C.6000
        DEFB    1
        DEFW    I$40E7                  ; restore PROMPT hook
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$462A:	PUSH	AF
        PUSH	DE
        CALL	C.47B6
        JR	C,J.469E                ; error,
        LD	L,A
        POP	DE
        POP	AF
        OR	L
        LD	H,E
        LD	E,65                    ; error = file already exists
        SCF
        RET	Z
        LD	E,H
        PUSH	BC
        PUSH	DE
        CALL	C.48BB                  ; create file (with stop/start sending)
        JR	C,J.469E
        POP	DE
        POP	BC
        LD	H,D
        LD	L,E
        OR	A
        SBC	HL,BC
        PUSH	DE
        EX	DE,HL
        CALL	C.4A9A                  ; get pointer to buffer
        XOR	A
        LD	(HL),0FEH
        INC	HL
        LD	(HL),A
        INC	HL
        LD	(HL),A
        INC	HL
        LD	(HL),E
        INC	HL
        LD	(HL),D
        INC	HL
        LD	(HL),A
        INC	HL
        LD	(HL),A
        POP	DE
        PUSH	BC
        PUSH	DE
        LD	DE,7
        CALL	C.4999                  ; write random block to file (with stop/start sending)
J$4664	EQU	$-2
        JR	C,J.469E
        POP	DE
        POP	BC
J$466A:	LD	H,D
        LD	L,E
        SBC	HL,BC
        JR	C,J$4694                ; close file (with stop/start sending) and quit
        LD	A,H
        OR	A
        JR	Z,J$4677
        LD	HL,I$00FF
J$4677:	INC	HL
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	D,B
        LD	E,C
        LD	B,H
        LD	C,L
        CALL	C.4A9A                  ; get pointer to buffer
        EX	DE,HL
        LDIR
        POP	DE
        PUSH	DE
        CALL	C.4999                  ; write random block to file (with stop/start sending)
        JR	C,J$4697                ; error, close file (with stop/start sending) and quit
        POP	BC
        POP	DE
        POP	HL
        ADD	HL,BC
        LD	B,H
        LD	C,L
        JR	J$466A

J$4694:	JP	C.49C4                  ; close file (with stop/start sending)

J$4697:	PUSH	DE
        CALL	C.49C4                  ; close file (with stop/start sending)
        POP	DE
        SCF
        POP	HL
J.469E:	POP	HL
        POP	HL
        RET

J$46A1:	CALL	C.6000
        DEFB    1
        DEFW    I$40E4                  ; store PROMPT hook and disable
        CALL	C$46B1
        CALL	C.6000
        DEFB    1
        DEFW    I$40E7                  ; restore PROMPT hook
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$46B1:	PUSH	DE
        PUSH	BC
        CALL	C.47DF
        JR	C,J$4730
        LD	DE,7                    ; number of bytes = 7
        CALL	C.4977                  ; read random block from file
        JR	C,J.4727                ; close file (with stop/start sending)
        LD	DE,7
        SBC	HL,DE
        LD	E,61                    ; error = bad file mode
        SCF
        JR	NZ,J.4727               ; close file (with stop/start sending)
        CALL	C.4A9A                  ; get pointer to buffer
        LD	A,(HL)
        CP	0FEH                    ; BSAVE file ?
        SCF
        JR	NZ,J.4727               ; nope, close file (with stop/start sending)
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	B,(HL)                  ; start address
        INC	HL
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A                     ; end address
        OR	A
        SBC	HL,BC
        POP	BC
        POP	DE
        JR	C,J$46F0
        ADD	HL,BC
        JR	C,J$46ED
        OR	A
        EX	DE,HL
        SBC	HL,DE
        EX	DE,HL
        JR	NC,J.46F3
J$46ED:	LD	E,7
        RET

J$46F0:	LD	E,61                    ; error = bad file mode
        RET

J.46F3:	PUSH	HL
        OR	A
        SBC	HL,BC
        POP	HL
        JR	C,J.4721                ; close file (with stop/start sending)
        PUSH	BC
        PUSH	HL
        LD	DE,256                  ; number of bytes = 256
        CALL	C.4977                  ; read random block from file
        JR	C,J.4727                ; close file (with stop/start sending)
        EX	DE,HL
        POP	HL
        POP	BC
        LD	A,D
        OR	E
        JR	Z,J.4721                ; close file (with stop/start sending)
        PUSH	BC
        PUSH	HL
        CALL	C.4A9A                  ; get pointer to buffer
        PUSH	DE
        LD	D,B
        LD	E,C
        POP	BC
        PUSH	BC
        LDIR
        POP	DE
        POP	BC
        POP	HL
        ADD	HL,DE
        PUSH	HL
        LD	H,B
        LD	L,C
        POP	BC
        JR	J.46F3

J.4721:	PUSH	HL
        CALL	C.49C4                  ; close file (with stop/start sending)
        POP	HL
        RET

J.4727:	PUSH	DE
        CALL	C.49C4                  ; close file (with stop/start sending)
        POP	DE
J.472C:	SCF
        POP	HL
        POP	HL
        RET

J$4730:	LD	A,E
        CP	35H
        JR	NZ,J.472C
        LD	A,(TMPFCB+1)
        CP	" "
        JR	NZ,J.472C
        LD	E,56                    ; error = bad file name
        JR	J.472C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4740:	CALL	C.5074                  ; output to modem ?
        JR	NZ,C.474E               ; yep,
        CALL	C.4DE4                  ; sender must stop sending
        CALL	C.474E
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.474E:	CALL	C.4A9A                  ; get pointer to buffer
        CALL	C.4849                  ; set DMA address
        CALL	C.4893                  ; search first
        RET	C                       ; error, quit
        LD	E,53                    ; error = file not found
        SCF
        RET	NZ                      ; error, quit
        CALL	C.4EE3                  ; output new line
J$475F:	CALL	C.5074                  ; output to modem ?
        JR	Z,J.4773                ; nope,
        CALL	C.6000
        DEFB    1
        DEFW    I$409F                  ; get received byte
        JR	Z,J.4773
        LD	E,1                     ; error = canceled
        RET	C
        CP	03H
        SCF
        RET	Z
J.4773:	CALL	C.5065
        CALL	C.4A9A                  ; get pointer to buffer
        INC	HL
        LD	B,11
J$477C:	LD	A,(HL)
        INC	HL
        CALL	C.4F43                  ; output character
        LD	A,B
        CP	4
        JR	NZ,J$4790
        LD	A,(HL)
        CP	" "
        JR	Z,J$478D
        LD	A,"."
J$478D:	CALL	C.4F43                  ; output character
J$4790:	DJNZ	J$477C
        LD	A,(D.61D8)
        LD	B,A
        LD	A,(CSRX)
        OR	A                       ; cursor at start of line ?
        JR	Z,J.47AB                ; yep, skip
        ADD	A,12
        CP	B
        JR	NC,J$47A8
        LD	A," "
        CALL	C.4F43                  ; output character
        JR	J.47AB

J$47A8:	CALL	C.4EE3                  ; output new line
J.47AB:	XOR	A
        LD	(TMPFCB+12),A
        CALL	C$48A6                  ; search next
        RET	C
        JR	Z,J$475F
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.47B6:	CALL	C.47C3
        RET	C                       ; error, quit
        PUSH	BC
        LD	HL,(NULBUF)
        CALL	C.4857                  ; check if file exists
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.47C3:	PUSH	BC
        PUSH	HL
        CALL	C.4D07
        LD	HL,(NULBUF)
        LD	(HL),"""
        INC	HL
        EX	DE,HL
        POP	HL
J$47D0:	LD	A,(HL)
        OR	A
        JR	Z,J$47D9
        LD	(DE),A
        INC	HL
        INC	DE
        JR	J$47D0

J$47D9:	EX	DE,HL
        CALL	C$4BBB
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.47DF:	CALL	C.47B6
        RET	C                       ; error, quit

;	  Subroutine open file, initialize recordsize and disk buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.47E3:	CALL	C.4920                  ; open file (with stop/start sending)
        RET	C                       ; error, quit
        LD	HL,1
        LD	(TMPFCB+14),HL          ; record size = 1
        XOR	A
        LD	(D.6353),A              ; get offset disk buffer = 0 (empty buffer)
        RET

;	  Subroutine get byte from disk buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.47F2:	LD	A,(D.6353)
        OR	A                       ; buffer empty ?
        JR	NZ,J$481E               ; nope, return byte from buffer
        LD	DE,256                  ; number of bytes = 256
        CALL	C.4DE4                  ; sender must stop sending
        CALL	C.4977                  ; read random block from file
        CALL	C.4DC7                  ; sender may start sending
        RET	C
        LD	A,H
        OR	L                       ; bytes read ?
        LD	A,1AH
        RET	Z                       ; nope, return EOF
        LD	A,1
        LD	(D.6353),A
        EX	DE,HL
        LD	HL,(NULBUF)
        LD	A,D
        OR	A                       ; 256 bytes read ?
        LD	A,(HL)
        RET	NZ                      ; yep, return first byte
        PUSH	HL
        ADD	HL,DE
        LD	(HL),1AH
        POP	HL                      ; add EOF in buffer
        LD	A,(HL)                  ; return first byte
        RET

J$481E:	INC	A
        LD	(D.6353),A              ; update get offset
        DEC	A
        LD	E,A
        LD	D,0
        LD	HL,(NULBUF)
        ADD	HL,DE
        LD	A,(HL)                  ; return byte
        RET

;	  Subroutine TMPFCB to diskdrive file ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.482C:	PUSH	BC
        LD	B,A
        LD	A,(H.PHYD)
        CP	0C9H                    ; MSX disk system ?
        SCF
        CCF
        JR	Z,J$483C                ; nope, quit
        LD	A,(TMPFCB+0)
        CP	8+1                     ; MSX disk system BASIC device ?
J$483C:	LD	A,B
        POP	BC
        RET

;	  Subroutine check if diskdrive or console device
;	     Inputs  ________________________
;	     Outputs ________________________

C.483F:	LD	A,(TMPFCB+0)
        CP	0FFH                    ; CON device ?
        RET	Z                       ; yep, quit
        CP	0FCH
        CCF
        RET

;	  Subroutine set DMA address
;	     Inputs  ________________________
;	     Outputs ________________________

C.4849:	CALL	C.482C                  ; TMPFCB to diskdrive file ?
        RET	NC                      ; nope, quit
        PUSH	DE
        LD	D,H
        LD	E,L
        LD	C,1AH                   ; SETDMA
        CALL	C.4A07                  ; diskbasic BDOS
        POP	DE
        RET

;	  Subroutine check if file exists
;	     Inputs  ________________________
;	     Outputs ________________________

C.4857:	CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	C,J$4874                ; yep,
        LD	A,(TMPFCB+0)
        CP	0FFH                    ; CON device ?
        JR	NZ,J$4865               ; nope, test device open
        OR	A                       ; no error, file exists
        RET

J$4865:	CALL	C.4920                  ; open file (with stop/start sending)
        PUSH	AF
        CALL	C.49C4                  ; close file (with stop/start sending)
        POP	AF
        LD	A,0FFH
        JR	C,J$4872                ; error, quit with no error, file does not exists
        XOR	A                       ; no error, file exists
J$4872:	OR	A
        RET

J$4874:	CALL	C.4849                  ; set DMA address
        CALL	C.4DE4                  ; sender must stop sending
        CALL	C$4880                  ; search file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine search file
;	     Inputs  ________________________
;	     Outputs ________________________

C$4880:	CALL	C.4893                  ; search first
        RET	C                       ; error, quit
        RET	NZ                      ; file not found, quit
        CALL	C.4A9A                  ; get pointer to buffer
        INC	HL
        LD	DE,TMPFCB+1
        LD	BC,11
        LDIR
        XOR	A                       ; no error, file exists
        RET

;	  Subroutine search first
;	     Inputs  ________________________
;	     Outputs ________________________

C.4893:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        LD	DE,TMPFCB
        LD	C,11H                   ; SEARCH FIRST
        CALL	C.4A07                  ; diskbasic BDOS
        CALL	C.4C46                  ; leave disk operation
        OR	A
        RET

;	  Subroutine search next
;	     Inputs  ________________________
;	     Outputs ________________________

C$48A6:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        LD	DE,TMPFCB
        LD	C,12H                   ; SEARCH NEXT
        CALL	C.4A07                  ; diskbasic BDOS
        CALL	C.4C46                  ; leave disk operation
        OR	A
        RET

I.48B9:	SCF
        RET

;	  Subroutine create file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C.48BB:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C$48C4                  ; create file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine create file
;	     Inputs  ________________________
;	     Outputs ________________________

C$48C4:	CALL	C$48EE                  ; validate file name
        LD	E,56                    ; error = bad file name
        RET	C                       ; error,
        LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	NC,J$491B               ; nope, open I/O channel for sequential output and quit
        LD	DE,TMPFCB
        LD	C,16H                   ; CREATE FILE (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
        OR	A
J$48DE:	CALL	C.4C46                  ; leave disk operation
        LD	HL,1
        LD	(TMPFCB+14),HL          ; record size = 1
        OR	A                       ; error ?
        JR	Z,J$4945                ; nope,
        LD	E,67                    ; error = too many files
        SCF
        RET

;	  Subroutine validate file name
;	     Inputs  ________________________
;	     Outputs ________________________

C$48EE:	PUSH	BC
        PUSH	HL
        LD	HL,TMPFCB+1
        LD	A,(HL)
        CP	" "
        SCF
        JR	Z,J.490F
        LD	B,11
J$48FB:	LD	A,(HL)
        PUSH	BC
        PUSH	HL
        LD	HL,I$4912
        LD	BC,9
        CPIR
        POP	HL
        POP	BC
        SCF
        JR	Z,J.490F
        INC	HL
        DJNZ	J$48FB
        OR	A
J.490F:	POP	HL
        POP	BC
        RET

I$4912:	LD	(D$2B2A),HL
        CPL
        DEC	SP
        DEC	A
        CCF
        LD	E,E
        LD	E,L

J$491B:	CALL	C$4A0C                  ; open I/O channel for sequential output
        JR	J$48DE                  ; leave disk operation

;	  Subroutine open file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4920:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C$4929                  ; open file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine open file
;	     Inputs  ________________________
;	     Outputs ________________________

C$4929:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	NC,J$494B               ; nope, open I/O channel for sequential input and quit
        LD	DE,TMPFCB
        LD	C,0FH                   ; OPEN FILE (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
        OR	A
J$493D:	CALL	C.4C46                  ; leave disk operation
        OR	A                       ; error ?
        LD	E,53                    ; error = file not found
        SCF
        RET	NZ                      ; yep, quit
J$4945:	DEC	A
        LD	(D.634D),A              ; file open
        XOR	A
        RET

J$494B:	CALL	C$4A16                  ; open I/O channel for sequential input
        JR	J$493D                  ; leave disk operation

;	  Subroutine read from file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C$4950:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C$4959                  ; read from file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine read from file
;	     Inputs  ________________________
;	     Outputs ________________________

C$4959:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	NC,J$4970               ; nope,
        LD	DE,TMPFCB
        LD	C,14H                   ; READ FILE (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
J$496C:	CALL	C.4C46                  ; leave disk operation
        RET

J$4970:	LD	B,128
        CALL	C.4A54
        JR	J$496C

;	  Subroutine read random block from file
;	     Inputs  ________________________
;	     Outputs ________________________

C.4977:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	NC,J$4990               ; nope,
        LD	H,D
        LD	L,E
        LD	DE,TMPFCB
        LD	C,27H                   ; RANDOM BLOCK READ (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
J$498C:	CALL	C.4C46                  ; leave disk operation
        RET

J$4990:	LD	B,E
        CALL	C.4A54
        JR	J$498C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4996:	LD	DE,DBUF

;	  Subroutine write random block to file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4999:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C.49A2                  ; write random block to file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine write random block to file
;	     Inputs  ________________________
;	     Outputs ________________________

C.49A2:	LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        EX	DE,HL
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	NC,J$49BF               ; nope,
        LD	DE,TMPFCB
        LD	C,26H                   ; RANDOM BLOCK WRITE (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
J$49B6:	CALL	C.4C46                  ; leave disk operation
        OR	A                       ; error ?
        RET	Z                       ; nope, quit
        LD	E,66                    ; error = disk full
        SCF
        RET

J$49BF:	CALL	C$4A30
        JR	J$49B6

;	  Subroutine close file (with stop/start sending)
;	     Inputs  ________________________
;	     Outputs ________________________

C.49C4:	CALL	C.4DE4                  ; sender must stop sending
        CALL	C$49CD                  ; close file
        JP	C.4DC7                  ; sender may start sending

;	  Subroutine close file
;	     Inputs  ________________________
;	     Outputs ________________________

C$49CD:	XOR	A
        LD	(D.634D),A              ; file closed
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JP	NC,C.49EA               ; nope, close I/O channel () and quit
        LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        LD	DE,TMPFCB
        LD	C,10H                   ; CLOSE FILE (FCB)
        CALL	C.4A07                  ; diskbasic BDOS
J$49E5:	CALL	C.4C46                  ; leave disk operation
        OR	A
        RET

;	  Subroutine close I/O channel ()
;	     Inputs  ________________________
;	     Outputs ________________________

C.49EA:	LD	BC,I$49F5               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        CALL	C$4A8F                  ; close I/O channel
        JR	J$49E5                  ; leave disk operation and quit

I$49F5:	LD	HL,(FILTAB)
        INC	HL
        INC	HL
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A
        LD	(HL),0
        CALL	C.49EA                  ; close channel ()
        LD	E,19                    ; error = device I/O error
        SCF
        RET

;	  Subroutine diskbasic BDOS
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A07:	CALL	BDOS
        EI
        RET

;	  Subroutine open I/O channel for sequential output
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A0C:	CALL	C.483F                  ; check if diskdrive or console device
        LD	E,62                    ; error = bad drive name
        RET	C                       ; nope, quit
        LD	E,2                     ; file mode = sequential output
        JR	C.4A1E                  ; open I/O channel and quit

;	  Subroutine open I/O channel for sequential input
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A16:	CALL	C.483F                  ; check if diskdrive or console device
        LD	E,62                    ; error = bad drive name
        RET	C                       ; nope, quit
        LD	E,1                     ; file mode = sequential input

;	  Subroutine open I/O channel
;	     Inputs  E = file mode
;	     Outputs ________________________

C.4A1E:	LD	A,(TMPFCB+0)
        LD	D,A                     ; BASIC device code
        LD	A,1                     ; I/O channel = 1
        LD	HL,TMPFCB+13
        LD	IX,OPNFIL               ; open i/o channel
        CALL	C.4E24                  ; wait ? ms when RS232 port is open, execute main bios
        XOR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A30:	LD	B,L
        CALL	C.4A9A                  ; get pointer to buffer
J$4A34:	LD	A,(HL)
        CP	1AH
        JR	Z,J$4A3D
        CP	03H	; 3 
        JR	NZ,J$4A48
J$4A3D:	LD	A,3
        LD	IX,FILOUT               ; do sequential output
        CALL	C.4E27                  ; call main bios
        LD	A,(HL)
        DEC	A
J$4A48:	LD	IX,FILOUT               ; do sequential output
        CALL	C.4E27                  ; call main bios
        INC	HL
        DJNZ	J$4A34
        XOR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A54:	LD	A,(D.634A)
        CP	1
        RET	Z
        CALL	C.4A9A                  ; get pointer to buffer
        XOR	A
        LD	C,A
J$4A5F:	PUSH	AF
        LD	IX,INDSKC               ; get sequential input
        CALL	C.4E27                  ; call main bios
        JR	C,J.4A85
        CP	3
        JR	NZ,J$4A77
        LD	IX,INDSKC               ; get sequential input
        CALL	C.4E27                  ; call main bios
        JR	C,J.4A85
        INC	A
J$4A77:	LD	(HL),A
        POP	AF
        INC	HL
        INC	A
        JR	NZ,J$4A7E
        INC	C
J$4A7E:	DJNZ	J$4A5F
J$4A80:	LD	L,A
        LD	H,C
        XOR	A
        OR	A
        RET

J.4A85:	LD	(HL),1AH
        LD	A,1
        LD	(D.634A),A
        POP	AF
        JR	J$4A80

;	  Subroutine close I/O channel
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A8F:	LD	A,1                     ; I/O channel = 1
        LD	IX,CLSFIL               ; close i/o channel
        CALL	C.4E24                  ; wait ? ms when RS232 port is open, execute main bios
        XOR	A
        RET

;	  Subroutine get pointer to buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A9A:	LD	HL,(NULBUF)
        CALL	C.6000
        DEFB    0
        DEFW    I$40F9                  ; port open ?
        RET	Z                       ; nope, quit
        LD	A,(D.6049)
        AND	0C0H                    ; b7,b6 = terminal mode
        CP	80H                     ; terminal mode = X-modem ?
        RET	NZ                      ; nope, quit
        INC	HL
        INC	HL
        INC	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AB0:	XOR	A
        LD	(D.635B),A              ; reset wildcard flag
        CALL	C$4B47
        CALL	C.4AD4
        RET	C
        OR	A
        JR	Z,C.4AB0                ; again
        RET

J$4ABF:	CALL	C.47C3
        CALL	C.4AD4
        RET	C
        LD	A,(D.6372)
        OR	A
        RET	Z
        LD	HL,(NULBUF)
        CALL	C.4849                  ; set DMA address
        JP	C.47E3                  ; open file, initialize recordsize and disk buffer

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AD4:	JR	NC,J$4B01
        CALL	C.482C                  ; TMPFCB to diskdrive file ?
        CCF
        LD	A,E
        LD	E,62                    ; bad drive name error
        RET	C                       ; nope, quit
        LD	E,A
        CP	56                      ; bad file name error ?
        SCF
        RET	NZ                      ; nope, quit
        LD	HL,(NULBUF)
        LD	A,"""
        CP	(HL)
        SCF
        RET	NZ
        INC	HL
        CP	(HL)
        SCF
        RET	NZ
        INC	HL
        LD	A,(HL)
        OR	A
        SCF
        RET	NZ
        LD	A,"*"
        LD	(FILNAM+0),A
        LD	(FILNAM+8),A
        LD	D,0                     ; device = default drive
        CALL	C$4BD3                  ; initialize FCB
J$4B01:	CALL	C.482C                  ; TMPFCB to diskdrive file ?
        LD	A,0FFH
        RET	NC                      ; nope, quit
        LD	A,(D.635B)
        OR	A                       ; wildcard flag set ?
        JR	NZ,J$4B27               ; yep,
        LD	HL,TMPFCB+1
        LD	B,11
J$4B12:	LD	A,(HL)
        INC	HL
        CP	" "
        SCF
        CCF
        LD	A,0FFH
        RET	NZ
        DJNZ	J$4B12
        LD	HL,TMPFCB+1
        LD	B,11
J$4B22:	LD	(HL),"?"
        INC	HL
        DJNZ	J$4B22
J$4B27:	LD	A,(D.6372)
        OR	A
        JR	Z,J$4B37
        CALL	C.6000
        DEFB    4
        DEFW    I$40AE
        XOR	A
        LD	(D.6372),A
J$4B37:	CALL	C.4740
        LD	A,0
        RET	NC
        LD	A,E
        CP	53                      ; file not found error ?
        SCF
        RET	NZ                      ; nope, quit
        CALL	C.4EB2                  ; output error message
        XOR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4B47:	LD	L,20                    ; text id = enter file name
        CALL	C.4EDD                  ; output message with new line
        LD	HL,(NULBUF)
        LD	(HL),"""
        INC	HL
        PUSH	HL
        LD	B,31
        LD	A," "
J$4B57:	LD	(HL),A
        INC	HL
        DJNZ	J$4B57
        LD	B,0
        POP	HL
J.4B5E:	CALL	C.4E6D                  ; get input
        LD	E,1                     ; error = canceled
        RET	C
        CP	03H                     ; CTRL-C ?
        SCF
        RET	Z                       ; yep, quit
        CP	1CH                     ; RIGHT ?
        JR	NZ,J$4B71               ; nope,

; RIGHT

        CALL	C$4C20
        JR	J$4B85

J$4B71:	CP	1DH                     ; LEFT ?
        JR	Z,J$4BAD                ; yep,
        CP	08H                     ; BS ?
        JR	Z,J$4B9B                ; yep,
        CP	0DH                     ; CR ?
        JR	Z,J$4BB8                ; yep,
        CP	20H                     ; other control code ?
        JR	C,J.4B5E                ; yep, skip
        CALL	C.4F43                  ; output character
        LD	(HL),A
J$4B85:	INC	HL
        INC	B
        LD	A,B
        CP	20H
        JR	C,J.4B5E
        DEC	HL
        DEC	B
        CALL	C.4C2F
        LD	A," "
        CALL	C.4F43                  ; output character
        CALL	C.4C2F
        JR	J.4B5E

; BS

J$4B9B:	LD	A,B
        AND	A
        JR	Z,J.4B5E
        CALL	C.4C2F
        LD	A," "
        CALL	C.4F43                  ; output character
        LD	(HL),A
        CALL	C.4C2F
        JR	J$4BB4

; LEFT

J$4BAD:	LD	A,B
        AND	A
        JR	Z,J.4B5E
        CALL	C.4C2F
J$4BB4:	DEC	HL
        DEC	B
        JR	J.4B5E

; CR

J$4BB8:	CALL	C.4EE3                  ; output new line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4BBB:	LD	(HL),"""
        INC	HL
        LD	(HL),0
        LD	BC,I$4C1A               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        LD	HL,(NULBUF)
        LD	IX,FILEVL               ; evaluate filespecification
        CALL	C.4E24                  ; wait ? ms when RS232 port is open, execute main bios
        CALL	C.4C46                  ; leave disk operation

;	  Subroutine initialize FCB
;	     Inputs  ________________________
;	     Outputs ________________________

C$4BD3:	LD	HL,TMPFCB
        LD	(HL),D                  ; device code
        INC	HL
        LD	DE,FILNAM
        LD	B,8
        CALL	C.4BFC                  ; handle wildcard character
        LD	B,3
        CALL	C.4BFC                  ; handle wildcard character
        XOR	A
        LD	B,37-11-1
J$4BE8:	LD	(HL),A
        INC	HL
        DJNZ	J$4BE8                  ; initialize rest of FCB
        LD	HL,TMPFCB
        LD	A,(HL)
        OR	A                       ; default drive ?
        RET	NZ                      ; nope, quit
        LD	A,(H.PHYD)
        SUB	0C9H                    ; MSX disk system ?
        OR	A
        RET	NZ                      ; yep, quit
        LD	(HL),0FFH               ;
        RET

;	  Subroutine handle wildcard character
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BFC:	LD	A,(DE)
        CP	"*"
        JR	Z,J.4C0E
        CP	"?"
        JR	NZ,J$4C08
        LD	(D.635B),A              ; set wildcard flag
J$4C08:	LD	(HL),A
        INC	HL
        INC	DE
        DJNZ	C.4BFC
        RET

J.4C0E:	LD	(HL),"?"
        INC	HL
        INC	DE
        DJNZ	J.4C0E
        LD	A,0FFH
        LD	(D.635B),A              ; set wildcard flag
        RET

I$4C1A:	SCF
        RET

I$4C1C: DEFB    27,"[C",0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4C20:	PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	HL,I$4C1C
        CALL	C.4F1D                  ; output ASCIIZ string
J$4C2A:	POP	HL
        POP	DE
        POP	BC
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C2F:	PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,08H
        CALL	C.4F43                  ; output character
        JR	J$4C2A

;	  Subroutine enter disk operation
;	     Inputs  BC = error handler
;	     Outputs ________________________

C.4C3A:	POP	HL
        PUSH	BC
        LD	A,1
        LD	(D.634E),A              ; in disk operation
        LD	(D.634F),SP
        JP	(HL)

;	  Subroutine leave disk operation
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C46:	POP	BC
        INC	SP
        INC	SP
        PUSH	AF
        XOR	A
        LD	(D.634E),A              ; not in disk operation
        POP	AF
        PUSH	BC
        RET

J$4C51:	PUSH	AF
        LD	A,(D.634E)
        OR	A                       ; in disk operation ?
        JR	Z,J$4C61                ; nope,
        XOR	A
        LD	(D.634E),A              ; not in disk operation
        LD	SP,(D.634F)
        RET

J$4C61:	POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4C63:	LD	HL,(NULBUF)
        PUSH	HL
        LD	B,80H
J$4C69:	LD	(HL)," "
        INC	HL
        DJNZ	J$4C69
        POP	HL
        RET

;	  Subroutine open file for append
;	     Inputs  ________________________
;	     Outputs ________________________

C$4C70:	CALL	C.482C                  ; TMPFCB to diskdrive file ?
        JR	C,J$4C8D                ; yep,
        CALL	C.4DE4                  ; sender must stop sending
        LD	BC,I.48B9               ; error handler
        CALL	C.4C3A                  ; enter disk operation
        LD	E,8                     ; file mode = sequential append
        CALL	C.4A1E                  ; open I/O channel
        CALL	C.4C46                  ; leave disk operation
        DEC	A
        LD	(D.634D),A              ; file open
        JP	C.4DC7                  ; sender may start sending

J$4C8D:	CALL	C.4920                  ; open file (with stop/start sending)
        RET	C                       ; error, quit
        CALL	C$4C63
        LD	HL,1
        LD	(TMPFCB+14),HL
        LD	HL,(TMPFCB+16)
        LD	DE,(TMPFCB+18)          ; file size
        LD	A,L
        OR	H
        OR	D
        OR	E                       ; empty file ?
        RET	Z                       ; yep, quit
        LD	BC,128                  ; number of bytes before end = 128
        CALL	C.4CF1                  ; calculate random record
        JR	NC,J$4CB7               ; ok, continue
        LD	HL,0
        LD	E,L
        LD	D,H                     ; random record = 0
        LD	BC,(TMPFCB+16)          ; file size (file must be < 64 KB)
J$4CB7:	LD	(TMPFCB+33),HL
        LD	(TMPFCB+35),DE          ; update random record
        CALL	C.4DE4                  ; sender must stop sending
        PUSH	BC
        PUSH	BC
        POP	DE
        CALL	C.4977                  ; read random block from file
        POP	BC
        CALL	C.4DC7                  ; sender may start sending
        RET	C
        LD	HL,(NULBUF)
        LD	B,C
J$4CD0:	LD	A,(HL)
        CP	1AH
        JR	Z,J$4CDA
        INC	HL
        DJNZ	J$4CD0
        OR	A
        RET

J$4CDA:	LD	C,B
        LD	B,0                     ; number of bytes
        LD	HL,(TMPFCB+16)
        LD	DE,(TMPFCB+18)          ; file size
        CALL	C.4CF1                  ; calculate random record
        LD	(TMPFCB+33),HL
        LD	(TMPFCB+35),DE          ; update random record
        RET	NC                      ; ok, quit
        DI
        HALT                            ; halt system

;	  Subroutine calculate random record
;	     Inputs  BC = number of bytes before end
;	     Outputs ________________________

C.4CF1:	OR	A
        SBC	HL,BC
        RET	NC
        DEC	DE
        LD	A,E
        AND	D
        INC	A
        SCF
        RET	Z
        OR	A
        RET

;	  Subroutine __________________________
;	     Inputs  L = text id
;	     Outputs ________________________

C.4CFD:	CALL	C.4D07
        CALL	C.4EDD                  ; output message with new line
        CALL	C.4AB0
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D07:	XOR	A
        LD	(D.634A),A
        LD	(D$634B),A
        LD	(D.634E),A              ; not in disk operation
        LD	(D.634D),A              ; file closed
        LD	(D.635B),A              ; reset wildcard flag
        LD	A,(D.6085)
        LD	(D.634C),A              ; saved 6085
        LD	A,(D.7EED)
        LD	(D.6174),A              ; saved 7EED
        RET

;	  Subroutine wait between characters
;	     Inputs  ________________________
;	     Outputs ________________________

J$4D24:	PUSH	AF
        PUSH	BC
        PUSH	HL
        LD	HL,(D.6164)             ; protocol timer #1 value
        CP	13                      ; CR ?
        JR	NZ,J$4D2F               ; nope,
        LD	L,H                     ; protocol timer #2 value
J$4D2F:	LD	H,0
        CALL	C.4D43                  ; initialize timer 0
J$4D34:	CALL	C.4D5E                  ; update timers, check if timer 0 finished
        JR	Z,J$4D34                ; timer not finished, again
        POP	HL
        POP	BC
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D3D:	CALL	C.4DA9
        LD	(D.6347),A

;	  Subroutine initialize timer 0
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D43:	LD	(D.6340),HL
        LD	HL,I.6346
        RES	0,(HL)
        RET

;	  Subroutine initialize timer 1
;	     Inputs  ________________________
;	     Outputs ________________________

?.4D4C:	LD	(D.6342),HL
        LD	HL,I.6346
        RES	1,(HL)
        RET

;	  Subroutine initialize timer 2
;	     Inputs  ________________________
;	     Outputs ________________________

C$4D55:	LD	(D.6344),HL
        LD	HL,I.6346
        RES	2,(HL)
        RET

;	  Subroutine update timers, check if timer 0 finished
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D5E:	LD	A,1                     ; timer 0
        DEFB    11H

;	  Subroutine update timers, check if timer 1 finished
;	     Inputs  ________________________
;	     Outputs ________________________

?.4D61: LD      A,2                     ; timer 1
        DEFB    11H

;	  Subroutine update timers, check if timer 2 finished
;	     Inputs  ________________________
;	     Outputs ________________________

C$4D64:	LD      A,4                     ; timer 2
        PUSH	HL
        PUSH	BC
        PUSH	AF
        CALL	C$4D72                  ; update timers
        POP	AF
        EX	DE,HL
        AND	(HL)                    ; check if timer finished
        POP	BC
        POP	HL
        RET

;	  Subroutine update timers
;	     Inputs  ________________________
;	     Outputs ________________________

C$4D72:	LD	DE,I.6346
        CALL	C.4DA9
        LD	B,A
        LD	HL,D.6347
        SUB	(HL)
        RET	Z
        LD	(HL),B
        LD	C,A
        LD	B,0FFH
        LD	HL,(D.6340)
        ADD	HL,BC
        LD	(D.6340),HL             ; update timer 0
        JR	C,J$4D8F
        EX	DE,HL
        SET	0,(HL)                  ; timer 0 finshed, set timer 0 flag
        EX	DE,HL
J$4D8F:	LD	HL,(D.6342)
        ADD	HL,BC
        LD	(D.6342),HL             ; update timer 1
        JR	C,J$4D9C
        EX	DE,HL
        SET	1,(HL)                  ; timer 1 finshed, set timer 1 flag
        EX	DE,HL
J$4D9C:	LD	HL,(D.6344)
        ADD	HL,BC
        LD	(D.6344),HL             ; update timer 2
        RET	C
        EX	DE,HL
        SET	2,(HL)                  ; timer 2 finshed, set timer 2 flag
        EX	DE,HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DA9:	PUSH	HL
        LD	HL,I$604A
        LD	A,(HL)
        POP	HL
        RET

?.4DB0:	CALL	C.4F34                  ; CTRL-STOP pressed ?
        RET	NC
        PUSH	AF
J$4DB5:	CALL	C.4F34                  ; CTRL-STOP pressed ?
        JR	C,J$4DB5
        POP	AF
        POP	IX
        SCF
        LD	E,1                     ; error = canceled
        RET

;	  Subroutine RS232 port open ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DC1:	LD	A,(D.6086)
        BIT	3,A
        RET

;	  Subroutine sender may start sending
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DC7:	PUSH	AF
        PUSH	DE
        PUSH	HL
        CALL	C.4DC1                  ; RS232 port open ?
        JR	Z,J.4DDF                ; nope, quit
        CALL	C.6000
        DEFB    0
        DEFW    I$4141                  ; determine number of bytes in receive buffer (version)
        LD	A,E
        OR	D                       ; receive buffer empty ?
        JR	NZ,J.4DDF               ; nope, quit
        CALL	C.6000
        DEFB    0
        DEFW    I$40CC                  ; signal sender to resume sending
J.4DDF:	EI
        POP	HL
        POP	DE
        POP	AF
        RET

;	  Subroutine sender must stop sending
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DE4:	PUSH	AF
        PUSH	DE
        PUSH	HL
        CALL	C.4DC1                  ; RS232 port open ?
        JR	Z,J.4DDF                ; nope, quit
        LD	A,(D.6086)
        BIT	1,A                     ; sending suspended ?
        JR	NZ,J.4DDF               ; yep, quit
        CALL	C.6000
        DEFB    0
        DEFB    I$40CF                  ; signal sender to stop sending
        LD	A,(D.6085)
        BIT	0,A                     ; XON/XOFF handshake ?
        CALL	NZ,C.4E03               ; yep, wait for 1 second period of empty receive
        JR	J.4DDF                  ; quit

;	  Subroutine wait for 1 second period of empty receive
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E03:	CALL	C.6000
        DEFB    0
        DEFW    I$40AE                  ; counter set #1, clear
        LD	DE,(D.6090)             ; number of bytes in receive buffer
J$4E0D:	OR	A
        LD	HL,(D$6098)             ; buffer size
        SBC	HL,DE                   ; buffer full ?
        RET	Z                       ; yep, quit
        OR	A
        LD	HL,(D.6090)             ; number of bytes in receive buffer
        SBC	HL,DE                   ; received byte(s) ?
        JR	NZ,C.4E03               ; yep, again
        LD	A,(D.607A)              ; counter set #1, number of 100 ms
        CP	10                      ; 1 second passed ?
        JR	C,J$4E0D                ; nope, wait
        RET

;	  Subroutine wait ? ms when RS232 port is open, execute main bios
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E24:	CALL	C$4E32                  ; wait ? ms when RS232 port is open

;	  Subroutine call main bios
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E27:	PUSH	BC
        PUSH	HL
        CALL	C.6000
        DEFB    1
        DEFW    I$40AB                  ; MAIN BIOS (EI)
        POP	HL
        POP	BC
        RET

;	  Subroutine wait ? ms when RS232 port is open
;	     Inputs  ________________________
;	     Outputs ________________________

C$4E32:	PUSH	AF
        CALL	C.4DC1                  ; RS232 port open ?
        JR	Z,J$4E43                ; nope, quit
        PUSH	BC
        LD	BC,0
J$4E3C:	EI
        DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$4E3C
        POP	BC
J$4E43:	POP	AF
        RET

;	  Subroutine ensure carrier detect
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E45:	PUSH	BC
        PUSH	DE
        PUSH	HL
        CALL	C.6000
        DEFB    0
        DEFW    C.40C0                  ; read line status
        AND	08H                     ; b3 set ?
        JR	Z,J.4E68                ; nope, quit
        CALL	C.4F3B                  ; get carrier detect status
        JR	NC,J.4E68               ; nope, quit
        LD	HL,240
        CALL	C$4D55                  ; initialize timer 2
J$4E5D:	CALL	C.4F3B                  ; get carrier detect status
        JR	NC,J.4E68               ; nope, quit
        CALL	C$4D64                  ; update timers, check if timer 2 finished
        JR	Z,J$4E5D                ; timer not finished, again
        SCF
J.4E68:	EI
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine get input
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E6D:	PUSH	HL
        PUSH	BC
        CALL	C.5074                  ; output to modem ?
        JR	Z,J.4E96                ; nope,
J$4E74:	CALL	C.6000
        DEFB    0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        SCF
        JR	Z,J.4EAE                ; nope, quit
        CALL	C.6000
        DEFB	0
        DEFW    C.415F                  ; RS232.LOC
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	Z,J$4E74                ; yep, again
        CALL	C.6000
        DEFB	0
        DEFW    C.40A2                  ; wait for received byte
        CP	03H                     ; CTRL-C ?
        SCF
        JR	Z,J.4EAE                ; yep, quit
        JR	J$4EAD

J.4E96:	CALL	C.5065
        CALL	C.4F34                  ; CTRL-STOP pressed ?
        JR	C,J.4EAE                ; yep, quit
        CALL	C.6000
        DEFB    2
        DEFW    C.4099
        EI
        CALL	CHSNS                   ; key pressed ?
        JR	Z,J.4E96                ; nope, wait
        CALL	CHGET                   ; get key
J$4EAD:	OR	A
J.4EAE:	EI
        POP	BC
        POP	HL
        RET

;	  Subroutine output error message
;	     Inputs  E = error code
;	     Outputs ________________________

C.4EB2:	LD	A,E                     ; error code
        LD	HL,I$5079
        LD	BC,17
        CPIR                            ; special error code ?
        LD	HL,I$5531               ; internal error message
        JR	NZ,J$4ED8               ; nope,
        LD	A,17
        INC	C
        SUB	C
        LD	E,A
        LD	D,0
        CALL	C.4F26                  ; english ?
        LD	HL,I$50AC               ; japanese error table
        JR	Z,J$4ED2                ; nope,
        LD	HL,I$508A               ; english error table
J$4ED2:	ADD	HL,DE
        ADD	HL,DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        EX	DE,HL
J$4ED8:	CALL	C.4F15                  ; output text
        JR	C.4EE3                  ; output new line

;	  Subroutine output message with new line
;	     Inputs  L = text id
;	     Outputs ________________________

C.4EDD:	CALL	C.4F02                  ; get pointer to message
        CALL	C.4F15                  ; output text

;	  Subroutine output new line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EE3:	PUSH	AF
        CALL	C.5074                  ; output to modem ?
        JR	NZ,J$4EEF               ; yep, skip
        LD	A,(CSRX)
        OR	A                       ; cursor at start of line ?
        JR	Z,J$4EF9                ; yep, quit
J$4EEF:	LD	A,13
        CALL	C.4F43                  ; output character
        LD	A,10
        CALL	C.4F43                  ; output character
J$4EF9:	POP	AF
        RET

;	  Subroutine output file already exists message
;	     Inputs  ________________________
;	     Outputs ________________________

C$4EFB:	LD	L,28

;	  Subroutine output message
;	     Inputs  L = text id
;	     Outputs ________________________

C.4EFD:	CALL	C.4F02                  ; get pointer to message
        JR	C.4F15                  ; output text

;	  Subroutine get pointer to message
;	     Inputs  L = text id
;	     Outputs ________________________

C.4F02:	CALL	C.4F26                  ; english ?
        LD	DE,I$510A               ; japanese messages
        JR	Z,J$4F0D                ; nope,
        LD	DE,I$50CE               ; english messages
J$4F0D:	LD	H,0
        ADD	HL,DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        EX	DE,HL
        RET

;	  Subroutine output text
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F15:	LD	A,18H
        CALL	C.4F43                  ; output character
        CALL	C.4EE3                  ; output new line

;	  Subroutine output ASCIIZ string
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F1D:	LD	A,(HL)
        AND	A
        RET	Z
        CALL	C.4F43                  ; output character
        INC	HL
        JR	C.4F1D

;	  Subroutine english ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F26:	LD	A,(D$61C5)
        OR	A
        RET

;	  Subroutine to upper
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F2B:	CP	"a"
        RET	C
        CP	"z"+1
        RET	NC
        SUB	20H
        RET

;	  Subroutine CTRL-STOP pressed ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F34:	CALL	C.6000
        DEFB	0
        DEFW    C.4090                  ; CTRL-STOP pressed ?
        RET

;	  Subroutine get carrier detect status
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F3B:	CALL	C.6000
        DEFB	0
        DEFW    C.4096                  ; get carrier detect status
        CCF
        RET

;	  Subroutine output character
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F43:	PUSH	BC
        PUSH	DE
        PUSH	HL
        PUSH	AF
        CALL	C.5074                  ; output to modem ?
        JR	Z,J$4F73                ; nope, output to screen
        CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        JR	Z,J.4F7B                ; nope, quit
        LD	HL,CSRX
        INC	(HL)                    ; update cursor column
        LD	A,(D.61D8)
        DEC	A
        CP	(HL)
        JR	NC,J$4F63
        LD	(HL),0
J$4F63:	POP	AF
        PUSH	AF
        CP	0DH                     ; CR ?
        JR	NZ,J$4F6B               ; nope,
        LD	(HL),0
J$4F6B:	CALL	C.6000
        DEFB	0
        DEFW    C.4156                  ; RS232.SNDCHR
        JR	J.4F7B                  ; quit

J$4F73:	POP	AF
        PUSH	AF
        CALL	C.6000
        DEFB    2
        DEFW    C.4093                  ; character to screen
J.4F7B:	POP	AF
        POP	HL
        POP	DE
        POP	BC
        SCF
        CCF
        RET

;	  Subroutine ensure carrier detect, send byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F82:	PUSH	AF
        CALL	C.4E45                  ; ensure carrier detect
        JR	C,J.4FA1                ; nope, carrier lost error
        POP	AF
        PUSH	AF
        CALL	C.6000
        DEFB	0
        DEFW    C.4156                  ; RS232.SNDCHR
        JR	C,J$4F99                ; CTRL-STOP, canceled
        JP	Z,J$4F9D                ; time out, time out
        POP	AF
        EI
        OR	A
        RET

J$4F99:	LD	E,1                     ; error = canceled
        JR	J.4FA3

J$4F9D:	LD	E,3                     ; error = time out
        JR	J.4FA3

J.4FA1:	LD	E,2                     ; error = carrier lost
J.4FA3:	POP	AF
        SCF
        RET

;	  Subroutine ensure carrier detect, receive buffer empty ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FA6:	PUSH	BC
        PUSH	HL
        CALL	C.6000
        DEFB	0
        DEFW    C.415F                  ; RS232.LOC
        LD	A,L
        OR	H                       ; receive buffer empty ?
        POP	HL
        POP	BC
        PUSH	AF
        CALL	C.4E45                  ; ensure carrier detect
        JR	C,J.4FA1                ; nope, quit with error 2
        POP	AF
        SCF
        CCF                             ; clear Cx
        RET

;	  Subroutine ensure carrier detect, get received byte
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FBC:	CALL	C.4E45                  ; ensure carrier detect
        LD	E,2                     ; error = carrier lost
        RET	C                       ; nope, quit
        CALL	C.6000
        DEFB	0
        DEFW    C.4153                  ; RS232.GETCHR
        EI
        SCF
        CCF
        RET

;	  Subroutine disable XON/XOFF handshake
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FCC:	LD	B,0FEH                  ; clear b0
        JR	J$4FD6

;	  Subroutine disable auto LF on send and receive
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FD0:	XOR	A
        LD	(D.7EED),A
        LD	B,0F3H                  ; clear b3 and b2
J$4FD6:	LD	A,(D.6085)
        AND	B
        LD	(D.6085),A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FDE:	LD	A,(D.634C)              ; saved 6085
        LD	(D.6085),A
        LD	A,(D.6174)              ; saved 7EED
        LD	(D.7EED),A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4FEB:	PUSH	HL
        LD	B,80H
J$4FEE:	LD	(HL)," "
        INC	HL
        DJNZ	J$4FEE
        POP	HL
        RET

J$4FF5:	PUSH	HL
        PUSH	AF
        LD	HL,(D.6359)
        INC	HL
        LD	(D.6359),HL
        LD	A,H
        RL	A
        JR	NC,J$5006
        LD	HL,C.0000
J$5006:	LD	(D.6359),HL
        CALL	C$500F
        POP	AF
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  HL = integer
;	     Outputs ________________________

C$500F:	PUSH	HL
        PUSH	BC
        PUSH	DE
        PUSH	AF
        PUSH	IX
        LD	B,4
J$5017:	PUSH	BC
        CALL	C$5040                  ; MOD 10
        LD	A,L
        CALL	C$5037                  ; nibble to hexadecimal ASCII
        PUSH	BC
        POP	HL
        POP	BC
        PUSH	AF
        DJNZ	J$5017
        CALL	C$5050
        LD	B,4
J$502A:	POP	AF
        CALL	C.4F43                  ; output character
        DJNZ	J$502A
        POP	IX
        POP	AF
        POP	DE
        POP	BC
        POP	HL
        RET

;	  Subroutine nibble to hexadecimal ASCII
;	     Inputs  ________________________
;	     Outputs ________________________

C$5037:	CP	10
        JR	C,J$503D
        ADD	A,7
J$503D:	ADD	A,"0"
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5040:	LD	DE,10
        LD	BC,0
J$5046:	OR	A
        SBC	HL,DE
        JR	C,J$504E
        INC	BC
        JR	J$5046

J$504E:	ADD	HL,DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5050:	LD	HL,I$5057
        CALL	C.505C
        RET

I$5057:	DEC	DE
        LD	E,E
        INC	(HL)
        LD	B,H
        NOP

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.505C:	LD	A,(HL)
        AND	A
        RET	Z
        INC	HL
        CALL	C.4F43                  ; output character
        JR	C.505C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5065:	PUSH	AF
        LD	A,(D$6173)
        OR	A
        JR	Z,J$5072
        CALL	C.6000
        DEFB    1
        DEFW    I$40E1                  ; update counter
J$5072:	POP	AF
        RET

;	  Subroutine output to modem ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.5074:	LD	A,(D.6361)
        OR	A
        RET

I$5079: DEFB    1,2,3,4
        DEFB    5,6,19,53
        DEFB    56,61,62,66
        DEFB    67,68,69,70
        DEFB    65

; english error table

I$508A: DEFW    I.5438                  ; 1
        DEFW    I.5441                  ; 2
        DEFW    I.544E                  ; 3
        DEFW    I.5457                  ; 4
        DEFW    I.5469                  ; 5
        DEFW    I.5473                  ; 6
        DEFW    I.5488                  ; 19
        DEFW    I.5499                  ; 53
        DEFW    I.54BC                  ; 56
        DEFW    I.54CA                  ; 61
        DEFW    I.54D8                  ; 62
        DEFW    I.54E7                  ; 66
        DEFW    I.54F1                  ; 67
        DEFW    I.5500                  ; 68
        DEFW    I.5515                  ; 69
        DEFW    I.5524                  ; 70
        DEFW    I.54A8                  ; 65

; japanese error table

I$50AC: DEFW    I.5921
        DEFW    I.592E
        DEFW    I.594B
        DEFW    I.595C
        DEFW    I.5977
        DEFW    I.598A
        DEFW    I.59A9
        DEFW    I.59CA
        DEFW    I.5A04
        DEFW    I.5A21
        DEFW    I.5A3A
        DEFW    I.5A57
        DEFW    I.5A6E
        DEFW    I.5A83
        DEFW    I.5A94
        DEFW    I.5AB5
        DEFW    I.59E3

; english messages

I$50CE: DEFW    I.5146                  ; 0
        DEFW    I.515E                  ; 2
        DEFW    I.5175                  ; 4
        DEFW    I.518F                  ; 6
        DEFW    I.51A8                  ; 8
        DEFW    I.51C3                  ; 10
        DEFW    I.51E0                  ; 12
        DEFW    I.51F0                  ; 14
        DEFW    I.5202                  ; 16
        DEFW    I.5211                  ; 18
        DEFW    I.5222                  ; 20
        DEFW    I.5232                  ; 22
        DEFW    I.525C                  ; 24
        DEFW    I.526B                  ; 26
        DEFW    I.5277                  ; 28
        DEFW    I.52AA                  ; 30
        DEFW    I.52BD                  ; 32
        DEFW    I.5362                  ; 34
        DEFW    I.5372                  ; 36
        DEFW    I.537D                  ; 38
        DEFW    I.5387                  ; 40
        DEFW    I.5394                  ; 42
        DEFW    I.53A0                  ; 44
        DEFW    I.53C3                  ; 46
        DEFW    I.52D4                  ; 48
        DEFW    I.52FA                  ; 50
        DEFW    I.5309                  ; 52
        DEFW    I.5328                  ; 54
        DEFW    I.5343                  ; 56
        DEFW    I.53B4                  ; 58

; japanese messages

I$510A: DEFW    I.5540
        DEFW    I.5586
        DEFW    I.5563
        DEFW    I.55A5
        DEFW    I.55C4
        DEFW    I.55ED
        DEFW    I.5616
        DEFW    I.5633
        DEFW    I.5650
        DEFW    I.566B
        DEFW    I.5686
        DEFW    I.56A1
        DEFW    I.56DE
        DEFW    I.56F1
        DEFW    I.56FE
        DEFW    I.5745
        DEFW    I.575A
        DEFW    I.5808
        DEFW    I.5819
        DEFW    I.5826
        DEFW    I.5841
        DEFW    I.5856
        DEFW    I.5869
        DEFW    I.589D
        DEFW    I.576F
        DEFW    I.57A6
        DEFW    I.57B1
        DEFW    I.57CC
        DEFW    I.57E9
        DEFW    I.588A

I.5146: DEFB    "Up-load (Text protocol)",0             ; 0
I.515E: DEFB    "Up-load (Log protocol)",0              ; 2
I.5175: DEFB    "Down-load (Text protocol)",0           ; 4
        DEFB    "Down-load (Log protocol)",0            ; 6
        DEFB    "Up-load (X-MODEM protocol)",0          ; 8
        DEFB    "Down-load (X-MODEM protocol)",0        ; 10
        DEFB    "Up-load aborted",0                     ; 12
        DEFB    "Down-load aborted",0                   ; 14
        DEFB    "End of Up-load",0                      ; 16
        DEFB    "End of Down-load",0                    ; 18
        DEFB    "Enter file name",0                     ; 20
        DEFB    "File already exists",13,10,"Replace,Cancel?(R/C)",0
        DEFB    "Sum-check mode",0                      ; 24
        DEFB    "CRC-16 mode",0                         ; 26
        DEFB    "File already exists",13,10,"Replace,Append,Cancel?(R/A/C)",0
        DEFB    "Sent block counter",0                  ; 30
        DEFB    "Received block counter",0              ; 32
I.52D4: DEFB    "Printer not ready",13,10,"Retry,Cancel?(R/C)",0
I.52FA: DEFB    "Printer in use",0                      ; 50
I.5309: DEFB    "Auto Login sequence is started",0      ; 52
I.5328: DEFB    "End of Auto Login sequence",0          ; 54
I.5343: DEFB    "Auto Login sequence is aborted",0      ; 56
I.5362: DEFB    "Command error",13,10,0                 ; 34
        DEFB    "Good bye",13,10,0                      ; 36
        DEFB    "Type file",0                           ; 38
        DEFB    "Type aborted",0                        ; 40
        DEFB    "End of file",0                         ; 42
        DEFB    "Printer not ready",13,10,0             ; 44
I.53B4: DEFB    "Print was done",0                      ; 58

I.53C3: DEFB    "Menu",13,10                            ; 46
        DEFB    " F : Files",13,10
        DEFB    " T : Type file",13,10
        DEFB    " U : Upload file",13,10
        DEFB    " D : Download file",13,10
        DEFB    " P : Print file",13,10
        DEFB    " E : Exit",13,10
        DEFB    " ? : This menu",13,10,0

I.5438: DEFB    "Canceled",0                            ; error 1
        DEFB    "Carrier lost",0                        ; error 2
        DEFB    "Time-out",0                            ; error 3
        DEFB    "CAN code received",0                   ; error 4
        DEFB    "Retry out",0                           ; error 5
        DEFB    "Wrong block received",0                ; error 6
I.5488: DEFB    "Device I/O error",0                    ; error 19
I.5499: DEFB    "File not found",0                      ; error 53
I.54A8: DEFB    "File already exists",0                 ; error 65
I.54BC: DEFB    "Bad file name",0                       ; error 56
I.54CA: DEFB    "Bad file mode",0                       ; error 61
I.54D8: DEFB    "Bad drive name",0                      ; error 62
I.54E7: DEFB    "Disk full",0                           ; error 66
I.54F1: DEFB    "Too many files",0                      ; error 67
I.5500: DEFB    "Disk write protected",0                ; error 68
I.5515: DEFB    "Disk I/O error",0                      ; error 69
I.5524: DEFB    "Disk offline",0                        ; error 70
I$5531: DEFB    "Internal error",0

        ADD	A,E
J.5541:	LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.5546:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),E
        ADD	A,D
J$5551:	LD	H,H
        ADD	A,D
J$5553:	LD	(HL),A
        ADD	A,D
        LD	(HL),E
        ADD	A,E
        HALT

?.5558:	ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
        ADD	A,E
        ADC	A,E
        ADD	A,C
J$5561:	LD	L,D
        NOP
J$5563:	ADD	A,E
J$5564:	LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),E
        ADD	A,D
        LD	H,H
        ADD	A,D
        LD	(HL),A
        ADD	A,D
        LD	(HL),E
        ADD	A,E
        HALT

?.557B:	ADD	A,E
J$557C:	ADC	A,L
J$557D:	ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
        ADD	A,E
        ADC	A,E
        ADD	A,C
J$5584:	LD	L,D
        NOP
        ADD	A,E
        LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.558C:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	C,A
        ADD	A,E
J$5599:	HALT

?.559A:	ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
J$55A0:	ADD	A,E
        ADC	A,E
        ADD	A,C
        LD	L,D
        NOP
        ADD	A,E
        LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	C,A
        ADD	A,E
        HALT

?.55B9:	ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
        ADD	A,E
        ADC	A,E
        ADD	A,C
        LD	L,D
        NOP
        ADD	A,E
        LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.55CA:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),A
        ADD	A,C
        LD	A,H
        ADD	A,D
        LD	L,H
        ADD	A,D
        LD	L,(HL)
        ADD	A,D
        LD	H,E
        ADD	A,D
        LD	H,H
        ADD	A,D
        LD	L,H
        ADD	A,E
        HALT

?.55E2:	ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
        ADD	A,E
        ADC	A,E
        ADD	A,C
        LD	L,D
        NOP
        ADD	A,E
        LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),A
        ADD	A,C
        LD	A,H
        ADD	A,D
        LD	L,H
        ADD	A,D
        LD	L,(HL)
        ADD	A,D
        LD	H,E
        ADD	A,D
        LD	H,H
        ADD	A,D
        LD	L,H
        ADD	A,E
        HALT

?.560B:	ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,A
        ADD	A,E
        LD	D,D
        ADD	A,E
        ADC	A,E
        ADD	A,C
        LD	L,D
        NOP
        ADD	A,E
        LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.561C:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        CALL	C.8692
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,D
        OR	E
        ADD	A,D
        JP	PE,J.DC82
        ADD	A,D
        OR	L
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        CALL	C.8692
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,D
        OR	E
        ADD	A,D
        JP	PE,J.DC82
        ADD	A,D
        OR	L
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.5656:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        RET	P
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        RET	P
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        SUB	(HL)
        CP	H
        ADD	A,D
        RET	P
        SUB	E
        CALL	M,C$CD97
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	NZ,C$BA89
        ADD	A,D
        OR	E
        ADD	A,D
        AND	D
        NOP
        ADC	A,(HL)
        LD	(HL),A
        SUB	D
        RET	PE
        ADD	A,D
        CALL	Z,C.7483
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        CALL	C.B782
        ADD	A,D
        PUSH	BC
        ADD	A,D
        RET

?.56B7:	SUB	C
        OR	(HL)
        ADC	A,L
        DEFB	0DDH		; << Illegal Op Code Byte >>

        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        DEC	C
        LD	A,(BC)
        SUB	D
        LD	(HL),L
        ADD	A,D
        XOR	E
        ADC	A,D
        OR	A
        ADD	A,D
        AND	(HL)
        ADD	A,C
        LD	B,E
        SUB	D
        ADD	A,(HL)
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,C
        LD	C,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),C
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	H,D
        ADD	A,C
        LD	L,D
        NOP
        ADD	A,E
        LD	H,B
        ADD	A,E
        LD	B,(HL)
        ADD	A,E
        LD	H,D
        ADD	A,E
        LD	C,(HL)
        ADD	A,E
        LD	D,H
        ADD	A,E
        ADD	A,B
        ADD	A,E
        ADD	A,D
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        NOP
        ADD	A,D
        LD	H,D
        ADD	A,D
        LD	(HL),C
        ADD	A,D
        LD	H,D
        ADD	A,E
        ADD	A,D
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        NOP
        ADC	A,(HL)
        LD	(HL),A
        SUB	D
        RET	PE
        ADD	A,D
        CALL	Z,C.7483
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        CALL	C.B782
        ADD	A,D
        PUSH	BC
        ADD	A,D
        RET

?.5714:	SUB	C
        OR	(HL)
        ADC	A,L
        DEFB	0DDH		; << Illegal Op Code Byte >>

        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        DEC	C
        LD	A,(BC)
        SUB	D
        LD	(HL),L
        ADD	A,D
        XOR	E
        ADC	A,D
        OR	A
        ADD	A,D
        AND	(HL)
        ADD	A,C
        LD	B,E
        SUB	D
        RST	00H
        ADC	A,C
        POP	BC
        ADD	A,C
        LD	B,E
        SUB	D
        ADD	A,(HL)
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,C
        LD	C,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),C
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	H,B
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	H,D
        ADD	A,C
        LD	L,D
        NOP
        SUB	C
        SUB	A
        SUB	B
        LD	C,L
        ADD	A,E
        LD	(HL),L
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,D
        ADD	A,E
        LD	C,(HL)
        ADD	A,E
        LD	C,D
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        LD	H,A
        NOP
        ADC	A,(HL)
        DI
        SUB	B
        LD	C,L
        ADD	A,E
        LD	(HL),L
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,D
        ADD	A,E
        LD	C,(HL)
        ADD	A,E
        LD	C,D
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        LD	H,A
        NOP
        ADD	A,E
        HALT

?.5771:	ADD	A,E
        ADC	A,D
        ADD	A,E
        SUB	E
        ADD	A,E
        LD	E,(HL)
        ADD	A,D
        CALL	Z,C.808F
        SUB	H
        PUSH	AF
        ADD	A,D
        XOR	D
        ADD	A,D
        PUSH	BC
        ADD	A,D
        XOR	E
        ADD	A,D
        CALL	NZ,C.A282
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        DEC	C
        LD	A,(BC)
        SUB	C
        OR	C
        ADC	A,L
        LD	(HL),E
        ADD	A,C
        LD	B,E
        SUB	D
        ADD	A,(HL)
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,C
        LD	C,B
        ADD	A,C
        LD	L,C
        ADD	A,D
        LD	(HL),C
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	H,D
        ADD	A,C
        LD	L,D
        NOP
        ADC	A,B
        DI
        ADC	A,L
        CALL	M,C.8692
        ADD	A,D
        PUSH	BC
        ADD	A,D
        OR	A
        NOP
        ADD	A,E
        LD	C,C
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	H,A
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	C,A
        ADD	A,E
        LD	B,E
        ADD	A,E
        SUB	E
        ADD	A,D
        RET	P
        ADC	A,D
        LD	C,D
        ADC	A,(HL)
        LD	L,(HL)
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        NOP
        ADD	A,E
        LD	C,C
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	H,A
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	C,A
        ADD	A,E
        LD	B,E
        ADD	A,E
        SUB	E
        ADD	A,D
        RET	P
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	C,C
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	H,A
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	C,A
        ADD	A,E
        LD	B,E
        ADD	A,E
        SUB	E
        ADD	A,D
        CALL	C.8692
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,D
        OR	E
        ADD	A,D
        JP	PE,J.DC82
        ADD	A,D
        OR	L
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	D,D
        ADD	A,E
        LD	A,L
        ADD	A,E
        SUB	E
        ADD	A,E
        LD	L,B
        ADD	A,E
        LD	B,A
        ADD	A,E
        ADC	A,C
        ADD	A,C
        LD	E,E
        DEC	C
        LD	A,(BC)
        NOP
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        DEC	C
        LD	A,(BC)
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        CALL	Z,C$E093
J$5830	EQU	$-2
        SUB	A
        LD	H,L
        ADD	A,D
        RET	P
        SUB	L
        LD	E,H
        ADC	A,(HL)
        AND	(HL)
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        NOP
        SUB	L
        LD	E,H
J$5843:	ADC	A,(HL)
        AND	(HL)
        ADD	A,D
        CALL	C.8692
        ADC	A,(HL)
        LD	A,(HL)
        ADD	A,D
        OR	E
        ADD	A,D
        JP	PE,J.DC82
        ADD	A,D
        OR	L
        ADD	A,D
        CP	L
        NOP
J$5856:	SUB	L
        LD	E,H
        ADC	A,(HL)
        AND	(HL)
        ADD	A,D
        RET	P
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
J$5869:	ADD	A,E
        HALT

?.586B:	ADD	A,E
        ADC	A,D
        ADD	A,E
        SUB	E
        ADD	A,E
        LD	E,(HL)
        ADD	A,D
        CALL	Z,C.808F
        SUB	H
        PUSH	AF
        ADD	A,D
        XOR	D
        ADD	A,D
        PUSH	BC
        ADD	A,D
        XOR	E
        ADD	A,D
        CALL	NZ,C.A282
J$5881:	ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        DEC	C
        LD	A,(BC)
        NOP
        ADC	A,B
        DI
        ADC	A,L
        CALL	M,C$F082
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
        ADD	A,D
        OR	L
J.5896:	ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        ADD	A,C
        ADD	A,E
        LD	L,D
        ADD	A,E
        ADD	A,L
        ADD	A,C
        LD	E,E
        DEC	C
        LD	A,(BC)
        JR	NZ,J$58EF
        JR	NZ,J$58E5
        JR	NZ,J$5830
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADC	A,B
        JP	PE,J$9797
        DEC	C
        LD	A,(BC)
        JR	NZ,J$5910
        JR	NZ,J$58F8
        JR	NZ,J$5843
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        SUB	L
        LD	E,H
        ADC	A,(HL)
        AND	(HL)
        DEC	C
        LD	A,(BC)
        JR	NZ,J$5924
        JR	NZ,J$590B
        JR	NZ,J$5856
        LD	B,C
        ADD	A,E
        LD	H,D
        ADD	A,E
        HALT

?.58D8:	ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        DEC	C
        LD	A,(BC)
        JR	NZ,J$5926
        JR	NZ,J$591E
        JR	NZ,J$5869
J$58E5	EQU	$-1
        LD	E,A
        ADD	A,E
        LD	B,L
        ADD	A,E
        SUB	E
        ADD	A,E
        ADC	A,L
        ADD	A,C
        LD	E,E
J$58EF:	ADD	A,E
        LD	L,B
        DEC	C
        LD	A,(BC)
        JR	NZ,J.5945
        JR	NZ,J$5931
        JR	NZ,J$5881
J$58F8	EQU	$-1
        DI
        ADC	A,L
        CALL	M,C$0A0D
        JR	NZ,J.5945
        JR	NZ,J$593C
        JR	NZ,J.5896
        JP	Z,J$4D90
        ADC	A,A
        LD	C,C
        SUB	A
        CP	C
J$590B:	DEC	C
        LD	A,(BC)
        JR	NZ,J$594E
        JR	NZ,J$594B
J$5910	EQU	$-1
        JR	NZ,J.5896
        ADD	A,C
        ADD	A,E
        LD	L,D
        ADD	A,E
        ADD	A,L
        ADD	A,C
        LD	E,E
        SUB	L
        LD	E,H
        ADC	A,(HL)
        AND	(HL)
J$591E:	DEC	C
        LD	A,(BC)
        NOP
        SUB	D
        ADD	A,(HL)
        ADC	A,(HL)
J$5924:	LD	A,(HL)
        ADD	A,D
J$5926:	OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        SUB	C
        ADC	A,D
        ADC	A,(HL)
J$5931:	RET	PE
        ADD	A,D
        CALL	Z,C$CA92
        SUB	B
        LD	C,L
        ADC	A,C
        CP	C
        ADD	A,D
        XOR	D
J$593C:	ADD	A,D
        RET	Z
        ADD	A,D
        XOR	L
        ADD	A,D
        RET	Z
        ADD	A,D
        RET	PE
        ADD	A,D
J.5945:	CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
J$594B:	ADD	A,E
        LD	E,(HL)
        ADD	A,E
J$594E:	LD	B,E
        ADD	A,E
        ADD	A,B
        ADD	A,E
        LD	B,C
        ADD	A,E
        LD	B,L
        ADD	A,E
        LD	H,A
        ADD	A,D
        PUSH	BC
        ADD	A,D
        OR	A
        NOP
        ADD	A,D
        LD	H,D
        ADD	A,D
        LD	H,B
        ADD	A,D
        LD	L,L
        ADD	A,E
        LD	D,D
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        RET	P
        ADC	A,(HL)
        DI
        SUB	B
        LD	C,L
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        SUB	C
        ADC	A,D
        ADC	A,(HL)
        RET	PE
        ADD	A,D
        XOR	D
        ADC	A,C
        SBC	A,(HL)
        SUB	E
        SBC	A,D
        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADD	A,E
        LD	(HL),L
        ADD	A,E
        ADC	A,L
        ADD	A,E
        LD	H,D
        ADD	A,E
        LD	C,(HL)
        SUB	H
        CALL	NC,C$868D
        ADD	A,D
        XOR	D
        SUB	B
        OR	E
        ADD	A,D
        OR	L
        ADD	A,D
        XOR	L
        ADD	A,D
        AND	B
        ADD	A,D
        RET	PE
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADD	A,E
        LD	H,(HL)
        ADD	A,E
        LD	L,A
        ADD	A,E
        LD	B,E
        ADD	A,E
        LD	E,B
        ADD	A,D
        LD	L,B
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	L,(HL)
        ADD	A,E
        LD	B,A
        ADD	A,E
        ADC	A,C
        ADD	A,C
        LD	E,E
        ADD	A,D
        XOR	D
        ADD	A,D
        XOR	B
        ADD	A,D
        XOR	E
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        XOR	D
        ADC	A,H
        XOR	C
        ADD	A,D
        JP	NZ,J$A982
        ADD	A,D
        RET	PE
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADC	A,(HL)
        LD	(HL),A
        SUB	D
        RET	PE
        ADD	A,D
        CALL	Z,C.7483
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        CALL	C.B782
        ADD	A,D
        PUSH	BC
        ADD	A,D
        RET

?.59F9:	SUB	C
        OR	(HL)
        ADC	A,L
        DEFB	0DDH		; << Illegal Op Code Byte >>

        ADD	A,D
        OR	L
        ADD	A,D
        CALL	C,C.B782
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        SUB	(HL)
        CP	H
        ADD	A,D
        XOR	D
        SUB	B
        OR	E
        ADD	A,D
        OR	L
        ADD	A,D
        XOR	L
        ADD	A,D
        AND	B
        ADD	A,D
        RET	PE
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,E
        ADD	A,D
        ADD	A,C
        LD	E,E
        ADD	A,E
        LD	L,B
        ADD	A,D
        XOR	D
        ADC	A,B
        POP	HL
        ADD	A,D
        AND	D
        ADD	A,D
        CALL	C,C.B782
        NOP
        ADD	A,E
        LD	L,B
        ADD	A,E
        ADC	A,C
        ADD	A,E
        LD	B,E
        ADD	A,E
        LD	(HL),L
        SUB	(HL)
        CP	H
        ADD	A,D
        XOR	D
        SUB	B
        OR	E
        ADD	A,D
        OR	L
        ADD	A,D
        XOR	L
        ADD	A,D
        AND	B
        ADD	A,D
        RET	PE
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADD	A,E
        LD	H,(HL)
        ADD	A,E
        LD	B,D
        ADD	A,E
        LD	E,B
        ADD	A,E
        LD	C,(HL)
        ADD	A,D
        XOR	D
        ADD	A,D
        AND	D
        ADD	A,D
        POP	BC
        ADD	A,D
        RST	08H
        ADD	A,D
        AND	D
        ADD	A,D
        PUSH	BC
        ADD	A,D
        OR	A
        NOP
        ADD	A,E
        LD	(HL),H
        ADD	A,E
        LD	B,B
        ADD	A,E
        LD	B,E
        ADD	A,E
        ADC	A,E
        ADD	A,D
        XOR	D
        SUB	C
        CP	L
        ADD	A,D
        OR	A
        ADD	A,D
        XOR	H
        ADD	A,D
        CALL	C,C.B782
        NOP
        ADC	A,A
        SUB	C
        ADD	A,D
        XOR	E
        ADC	A,L
        SBC	A,(HL)
        ADD	A,D
        DEFB	0DDH		; << Illegal Op Code Byte >>

        ADC	A,E
        SUB	8EH
        LD	A,(HL)
        ADD	A,D
        PUSH	BC
        ADD	A,D
        OR	A
        NOP
        ADD	A,E
        LD	H,(HL)
        ADD	A,E
        LD	B,D
        ADD	A,E
        LD	E,B
        ADD	A,E
        LD	C,(HL)
        ADD	A,D
        LD	L,B
        ADD	A,C
        LD	E,(HL)
        ADD	A,D
        LD	L,(HL)
        ADD	A,E
        LD	B,A
        ADD	A,E
        ADC	A,C
        ADD	A,C
        LD	E,E
        ADD	A,D
        XOR	D
        ADD	A,D
        XOR	B
        ADD	A,D
        XOR	E
        ADD	A,D
        CALL	C,C.B582
        ADD	A,D
        CP	L
        NOP
        ADD	A,E
        LD	H,(HL)
        ADD	A,E
        LD	B,D
        ADD	A,E
        LD	E,B
        ADD	A,E
        LD	C,(HL)
        ADD	A,D
        XOR	D
        ADD	A,D
        AND	B
        ADD	A,D
        RET	PE
        ADD	A,D
        CALL	C,C.B982
        ADD	A,D
        POP	AF
        NOP
        ADD	A,E
        LD	B,A
        ADD	A,E
        ADC	A,C
        ADD	A,C
        LD	E,E
        ADD	A,D
        PUSH	BC
        ADD	A,D
        OR	A
        NOP

J$5AD5:	LD	(D.F55E),HL
        LD	(D.F560),DE
        LD	A,1
        LD	(D.6361),A              ; output to modem
        LD	A,(SCRMOD)
        PUSH	AF                      ; store current screen mode
        LD	A,(D.6049)
        PUSH	AF
        AND	2FH                     ; b7,b6,b2 = terminal mode
        LD	(D.6049),A              ; 
        CALL	C.6000
        DEFB    1
        DEFW    I$40E4                  ; store PROMPT hook and disable
        CALL	C$5B1D
        CALL	C.6000
        DEFB    1
        DEFW    I$40E7                  ; restore PROMPT hook
        POP	AF
        LD	(D.6049),A              ; b7,b6,b2 = terminal mode
        POP	AF
        LD	(SCRMOD),A              ; restore screen mode
        XOR	A
        LD	(D.6361),A              ; output to screen
        RET

;	  Subroutine wait 300 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B0A:	LD	C,3                     ; 300 ms
        JR	J$5B10

;	  Subroutine wait 1 second
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B0E:	LD	C,10                    ; 1 second
J$5B10:	CALL	C.6000
        DEFB	0
        DEFW    C.40AE                  ; counter set #1, clear
J$5B16:	LD	A,(D.607A)              ; counter set #1, number of 100 ms
        CP	C
        JR	C,J$5B16
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B1D:	CALL	C.6000
        DEFB    1
        DEFW    I$40D5
        RET	C
J$5B24:	LD	A,1                     ; on hook
        CALL	C.6000
        DEFB	0
        DEFW    C.4177                  ; MODEM.LINSEL
J$5B2C:	LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	Z,J.5B56                ; yep,
        LD	A,4
        CALL	C.5FE8
        LD	HL,(D.7EE7)
        LD	DE,1200
        SBC	HL,DE                   ; printer not ready for too long ?
        JR	C,J$5B49                ; nope,
        CALL	C.6000
        DEFB    1
        DEFW    I$40DE                  ; cancel printer echo
        JR	J.5B56

J$5B49:	LD	HL,(D.6092)             ; number of bytes in receive buffer (printer echo)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	NZ,J$5B2C               ; nope,
        CALL	C.5E86                  ; cancel printer echo
        CALL	C.5E95
J.5B56:	XOR	A
        LD	(D.F65B),A              ; clear ring counter
        CALL	C.5FE8
        CALL	C$5B0E                  ; wait 1 second
        CALL	KILBUF
        CALL	C.6000
        DEFB	0
        DEFW    C.40FC                  ; get ring status (reset ring status)
        CALL    C.6000
        DEFB    0
        DEFW    C.40AE                  ; counter set #1, clear
J.5B6F:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	4                       ; 4 seconds passed without ring ?
        JR	C,J$5B7A                ; nope,
        XOR	A
        LD	(D.F65B),A              ; clear ring counter
J$5B7A:	XOR	A
        CALL	C.5FE8
        CALL	CHSNS                   ; key pressed ?
        JR	Z,J$5B8B                ; nope,
        CALL	CHGET                   ; get key
        CP	14H                     ; CTRL-T ?
        JR	NZ,J.5B6F               ; nope, again
        RET

J$5B8B:	CALL	C.6000
        DEFB	0
        DEFW    C.40FC                  ; get ring status
        JR      Z,J.5B6F                ; no ring,
        CALL    C.6000
        DEFB    0
        DEFW    C.40AE                  ; counter set #1, clear
        LD	HL,D.F65B
        INC	(HL)                    ; update ring counter
        LD	A,(HL)
        CP	5                       ; 5 rings ?
        JR	C,J.5B6F                ; nope,
        LD	A,1
        CALL	C.5FE8
        XOR	A                       ; off hook
        CALL	C.6000
        DEFB	0
        DEFW    C.4177                  ; MODEM.LINSEL
        CALL	C$5B0A                  ; wait 300 ms
        CALL	C.6000
        DEFB	0
        DEFW    C.40C0                  ; read line status
        LD	(D.F65C),A              ; store last line status
        CALL	C.5C68                  ; open channel in raw mode
        LD	B,8                     ; 8 tries
J$5BBF:	CALL	C.6000
        DEFB	0
        DEFW    C.40AE                  ; counter set #1, clear
J$5BC5:	CALL	C.6000
        DEFB	0
        DEFW    C.40C0                  ; read line status
        LD	C,A
        LD	A,(D.F65C)
        CP	C                       ; line status changed ?
        JR	NZ,J.5C04               ; yep,
        CALL	CHSNS                   ; key pressed ?
        JR	Z,J$5BDE                ; nope,
        CALL	CHGET                   ; get key
        CP	14H                     ; CTRL-T ?
        JR	Z,J.5C04                ; yep,
J$5BDE:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	10                      ; line status unchanged for 10 seconds ?
        JR	NC,J$5BF1               ; yep,
        CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        JR	NZ,J$5C1A               ; yep,
        JR	J$5BC5                  ; again

J$5BF1:	PUSH	BC
        CALL	C.6000
        DEFB	0
        DEFW    C.4159                  ; RS232.CLOSE
        CALL	C.6000
        DEFB    6
        DEFW    C.40F0
        CALL	C.5C68                  ; open channel in raw mode
        POP	BC
        DJNZ	J$5BBF                  ; next try
J.5C04:	CALL	C.6000
        DEFB	0
        DEFW    C.4159                  ; RS232.CLOSE
        LD	A,1                     ; on hook
        CALL	C.6000
        DEFB	0
        DEFW    C.4177                  ; MODEM.LINSEL
        LD	A,(D$6370)
        OR	A
        JP	Z,J$5B24
        RET

J$5C1A:	CALL	C.6000
        DEFB	0
        DEFW    C.40AE                  ; counter set #1, clear
J$5C20:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	2
        JR	C,J$5C20                ; wait 2 seconds
        CALL	C.6000
        DEFB    1
        DEFW    I$4099
        LD	A,(D$615E)
        LD	C,A                     ; shift JIS D mode, 12 dot mode
        LD	A,(D$615D)              ; comterm mode
        CALL	C.6000
        DEFB    2
        DEFW    C.4090                  ; initialize comterm mode
        LD	HL,(D.F55E)
        CALL	C.5EC1                  ; send or print string (carrier detect)
        JR	C,J.5C04
        CALL	C.4EE3                  ; output new line
        CALL	C$5C85                  ; get and verify password (with retry)
        JR	C,J.5C04                ; error, quit
        CALL	C.5D4A                  ; menu
J$5C4D:	CALL	C.5F09
        JR	C,J.5C04
D$5C52:	LD	A,0FFH
        LD	(D.F65D),A
        CALL	C.5F0F
        JR	C,J.5C04
        CALL	C$5CC2
        JR	C,J.5C04
        LD	A,1
        CALL	C.5FE8
        JR	J$5C4D

;	  Subroutine open channel in raw mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.5C68:	LD	HL,(D$616C)
        LD	DE,9
        OR	A
        SBC	HL,DE
        SRL	H
        RR	L
        LD	D,H
        LD	B,L
        LD	HL,(D$616A)
        LD	E,4                     ; raw mode
        LD	C,0
        CALL	C.6000
        DEFB	0
        DEFW    C.414D                  ; RS232.OPEN
        RET

;	  Subroutine get and verify password (with retry)
;	     Inputs  ________________________
;	     Outputs ________________________

C$5C85:	LD	B,3
J$5C87:	PUSH	BC
        CALL	C$5C9D                  ; get and verify password
        POP	BC
        RET	NC                      ; correct, quit
        LD	HL,I$5EE6               ; wrong password
        CALL	C.5EC1                  ; send or print string (carrier detect)
        DJNZ	J$5C87
        LD	HL,I$5EF7               ; login incorrect
        CALL	C.5EC1                  ; send or print string (carrier detect)
        SCF
        RET

;	  Subroutine get and verify password
;	     Inputs  ________________________
;	     Outputs ________________________

C$5C9D:	LD	HL,(D.F560)
        LD	A,(HL)
        OR	A                       ; empty password ?
        RET	Z                       ; yep, quit (correct)
        LD	HL,I$5ED9               ; password
        CALL	C.5EC1                  ; send or print string (carrier detect)
        RET	C
        XOR	A
        LD	(D.F65D),A
        CALL	C.5F0F
        RET	C
        LD	HL,(D.F560)
        LD	DE,I.F562
J$5CB8:	LD	A,(DE)
        CP	(HL)
        SCF
        RET	NZ
        AND	A
        RET	Z
        INC	DE
        INC	HL
        JR	J$5CB8

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5CC2:	LD	A,B
        OR	A
        RET	Z
        LD	C,0
        LD	HL,D.F57E
        LD	DE,I.F562
J$5CCD:	LD	A,(DE)
        OR	A
        JR	Z,J.5CEC
        CP	" "
        JR	Z,J.5CE7
        LD	(HL),E
        INC	HL
        LD	(HL),D
        INC	HL
        INC	C
J$5CDA:	INC	DE
        LD	A,(DE)
        OR	A
        JR	Z,J.5CEC
        CP	" "
        JR	Z,J.5CE7
        DJNZ	J$5CDA
        JR	J.5CEC

J.5CE7:	XOR	A
        LD	(DE),A
        INC	DE
        DJNZ	J$5CCD
J.5CEC:	LD	A,C
        OR	A
        RET	Z
        LD	HL,(D.F57E)
        INC	HL
        LD	A,(HL)
        DEC	HL
        OR	A
        JR	NZ,J$5D1E
        LD	A,(HL)
        CALL	C.5FDF                  ; to upper
        CP	"?"
        JR	Z,C.5D4A                ; menu
        CP	"E"
        JR	Z,J$5D51                ; exit
        CP	"F"
        JR	Z,J$5D5F                ; files
        CP	"U"
        JP	Z,J$5D96                ; upload file
        CP	"D"
        JP	Z,J$5DB2                ; download file
        CP	"T"
        JP	Z,J$5DC7                ; type file
        CP	"P"
        JP	Z,J$5E32                ; print file
        JR	J.5D58

J$5D1E:	LD	A,(HL)
        CALL	C.5FDF                  ; to upper
        CP	"U"
        JR	NZ,J.5D58
        INC	HL
        LD	A,(HL)
        CALL	C.5FDF                  ; to upper
        CP	"P"
        JR	NZ,J.5D58
        INC	HL
        LD	A,(HL)
        OR	A
        JR	NZ,J.5D58
        LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JP	NZ,J.5E7F               ; nope, printer in use
        CALL	LPTSTT                  ; get printer status
        JP	Z,J.5E78                ; not ready, command error
        LD	A,0FFH
        LD	(D.6362),A
        LD	A,05H	; 5 
        JR	J$5D98

;	  Subroutine menu
;	     Inputs  ________________________
;	     Outputs ________________________

C.5D4A:	LD	L,46
        CALL	C.4EFD                  ; output message
        OR	A
        RET

;	  Subroutine exit
;	     Inputs  ________________________
;	     Outputs ________________________

J$5D51:	LD	L,36                    ; text id = good bye
        CALL	C.4EFD                  ; output message
        SCF
        RET

;	  Subroutine command error
;	     Inputs  ________________________
;	     Outputs ________________________

J.5D58:	LD	L,34                    ; text id = command error
        CALL	C.4EFD                  ; output message
        OR	A
        RET

;	  Subroutine files
;	     Inputs  ________________________
;	     Outputs ________________________

J$5D5F:	DEC	C
        JR	Z,J$5D7B
        LD	HL,(D.F580)
        CALL	C.47C3
        JR	C,J$5D91
        LD	HL,TMPFCB+1
        LD	B,11
J$5D6F:	LD	A,(HL)
        INC	HL
        CP	" "
        JR	NZ,J$5D88
        DJNZ	J$5D6F
        LD	A,(TMPFCB+0)
        DEFB    06H
J$5D7B:	XOR     A
        LD	HL,TMPFCB
        LD	(HL),A
        INC	HL
        LD	B,11
J$5D83:	LD	(HL),"?"
        INC	HL
        DJNZ	J$5D83
J$5D88:	CALL	C.4740
        PUSH	AF
        CALL	C.4EE3                  ; output new line
        POP	AF
        RET	NC                      ; no error, quit
J$5D91:	CALL	C.4EB2                  ; output error message
        OR	A
        RET

;	  Subroutine upload file
;	     Inputs  ________________________
;	     Outputs ________________________

J$5D96:	LD	A,3
J$5D98:	CALL	C.5FE8
        LD	A,(D.6049)
        PUSH	AF
        AND	2FH                     ; b7,b6,b2 = terminal mode
        OR	80H                     ; terminal mode = X-modem
        LD	(D.6049),A
        CALL	C$4254                  ; upload file with X-modem
J$5DA9:	POP	AF
        LD	(D.6049),A              ; restore terminal mode
        XOR	A
        LD	(D.6362),A
        RET

;	  Subroutine download file
;	     Inputs  ________________________
;	     Outputs ________________________

J$5DB2:	LD	A,2
        CALL	C.5FE8
        LD	A,(D.6049)
        PUSH	AF                      ; store terminal mode
        AND	2FH                     ; b7,b6,b2 = terminal mode
        OR	80H                     ; terminal mode = X-modem
        LD	(D.6049),A
        CALL	C$4461                  ; download file with X-modem
        JR	J$5DA9                  ; finish

;	  Subroutine type file
;	     Inputs  ________________________
;	     Outputs ________________________

J$5DC7:	PUSH	BC
        LD	A,2
        CALL	C.5FE8
        POP	BC
        DEC	C
        JR	Z,J$5DE1
        LD	HL,(D.F580)
        CALL	C.47C3
        CALL	C.4AD4
        JR	C,J.5E2A                ; quit with error
        OR	A
        JR	NZ,J$5DEE
        JR	J$5DE6

J$5DE1:	LD	L,38                    ; text id = type file
        CALL	C.4EFD                  ; output message
J$5DE6:	CALL	C.4D07
        CALL	C.4AB0
        JR	C,J.5E2A                ; quit with error
J$5DEE:	CALL	C.423A
        JR	C,J.5E2A                ; quit with error
J$5DF3:	CALL	C.6000
        DEFB    1
        DEFW    I$409F                  ; get received byte
        JR	Z,J$5E04
        LD	E,1                     ; error = canceled
        JR	C,J.5E2A                ; quit with error 1
        CP	03H
        SCF
        JR	Z,J.5E2A                ; quit with error 1
J$5E04:	CALL	C.47F2                  ; get byte from disk buffer
        JR	C,J.5E2A                ; error,
        CP	1AH                     ; EOF ?
        JR	Z,J$5E26                ; yep,
        PUSH	AF
        CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        JR	Z,J$5E21                ; nope, quit with error 2
        POP	AF
        CALL	C.6000
        DEFB    1
        DEFW    I$40A2
        JR	J$5DF3                  ; next

J$5E21:	POP	AF
        LD	E,2                     ; error = carrier lost
        JR	J.5E2A                  ; quit with error

J$5E26:	LD	L,42
        JR	J$5E2D

J.5E2A:	LD	C,28H
        SCF
J$5E2D:	CALL	C.411B
        OR	A
        RET

;	  Subroutine print file
;	     Inputs  ________________________
;	     Outputs ________________________

J$5E32:	LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	NZ,J.5E7F               ; nope, printer in use
        CALL	LPTSTT                  ; get printer status
        JR	Z,J.5E78                ; not ready, command error
        LD	A,4
        CALL	C.5FE8
        CALL	C.6000
        DEFB    1
        DEFW    I$40D8
J.5E48:	CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        JR	Z,J.5E70                ; nope,
        LD	HL,(D.7EE7)
        LD	DE,1200
        SBC	HL,DE                   ; printer not ready for too long ?
        JR	NC,C.5E75               ; yep, ? + command error
        CALL	C.6000
        DEFB    1
        DEFW    I$409F                  ; get received byte
        JR	Z,J.5E48
        CP	1AH
        JR	Z,J.5E70
        CALL	C.6000
        DEFB    1
        DEFW    I$40A2
        JR	J.5E48

J.5E70:	XOR	A
        LD	(D.6074),A              ; printer echo disabled
        RET

;	  Subroutine ? + command error
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E75:	CALL	C.5E86                  ; cancel printer echo
J.5E78:	LD	L,34                    ; text id = command error
        CALL	C.4EFD                  ; output message
        OR	A
        RET

J.5E7F:	LD	L,50                    ; text id = printer in use
        CALL	C.4EFD                  ; output message
        OR	A
        RET

;	  Subroutine cancel printer echo
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E86:	DI
        XOR	A
        LD	(D.6074),A              ; printer echo disabled
        LD	(D.6075),A              ; printer echo receive buffer empty
        LD	L,A
        LD	H,A
        LD	(D.6092),HL             ; update number of bytes in receive buffer (printer echo)
        EI
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E95:	LD	A,18H
        CALL	C.5EA3
        RET	C
        LD	A,0DH	; 13 
        CALL	C.5EA3
        RET	C
        LD	A,0AH	; 10 

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5EA3:	PUSH	AF
        CALL	C.6000
        DEFB	0
        DEFW    C.40AE                  ; counter set #1, clear
J$5EAA:	LD	A,(D.607C)              ; counter set #1, number of seconds
        CP	20                      ; 20 seconds passed ?
        JR	NC,J$5EBE               ; yep, quit
        CALL	LPTSTT                  ; get printer status
        JR	Z,J$5EAA                ; not ready, wait
        POP	AF
        CALL	C.6000
        DEFB    1
        DEFW	I$40A5
        RET

J$5EBE:	POP	AF
        SCF
        RET

;	  Subroutine send or print string (carrier detect)
;	     Inputs  ________________________
;	     Outputs ________________________

C.5EC1:	PUSH	HL
        CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        POP	HL
        SCF
        RET	Z                       ; nope, quit
        LD	A,(HL)
        OR	A
        RET	Z
        INC	HL
        CALL	C.6000
        DEFB    1
        DEFW    C.40A2                  ; send or print byte
        JR	C.5EC1                  ; next byte

I$5ED9: DEFB    "Password: "

I$5EE4: DEFB    ">",0

I$5EE6: DEFB    "Wrong password",13,10,0

I$5EF7: DEFB    "Login incorrect",13,10,0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F09:	LD	HL,I$5EE4
        JP	C.5EC1                  ; send or print string (carrier detect)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F0F:	LD	HL,I.F562
        PUSH	HL
        LD	B,31
        XOR	A
J$5F16:	LD	(HL),A
        INC	HL
        DJNZ	J$5F16
        POP	HL
J.5F1B:	CALL	CHSNS                   ; key pressed ?
        JR	Z,J$5F27                ; nope,
        CALL	CHGET                   ; get key
        CP	14H                     ; CTRL-T ?
        SCF
        RET	Z                       ; yep, quit
J$5F27:	PUSH	HL
        CALL	C.6000
        DEFB	0
        DEFW    C.4150                  ; RS232.STAT
        BIT	0,L                     ; carrier detect ?
        POP	HL
        SCF
        RET	Z                       ; nope, quit
        PUSH	BC
        PUSH	HL
        LD	A,(D.6075)
        OR	A                       ; printer echo receive buffer empty ?
        JR	Z,J.5F77                ; yep,
        LD	HL,(D.7EE7)
        LD	DE,1200
        SBC	HL,DE                   ; printer not ready for too long ?
        JR	C,J$5F4A                ; nope,
        CALL	C.5E75                  ; ? + command error
        JR	J$5F5C

J$5F4A:	LD	HL,(D.6092)             ; number of bytes in receive buffer (printer echo)
        LD	A,L
        OR	H                       ; receive buffer empty ?
        JR	NZ,J.5F77               ; nope,
        CALL	C.5E86                  ; cancel printer echo
        CALL	C.5E95
        LD	L,58                    ; textid = print was done
        CALL	C.4EFD                  ; output message
J$5F5C:	CALL	C.4EE3                  ; output new line
        CALL	C.5F09
        POP	HL
        POP	BC
        PUSH	BC
        PUSH	HL
        LD	A,B
J$5F67:	OR	A
        JR	Z,J.5F77
        LD	HL,I.F562
J$5F6D:	LD	A,(HL)
        INC	HL
        CALL	C.6000
        DEFB    1
        DEFW    C.40A2
        DJNZ	J$5F6D
J.5F77:	POP	HL
        POP	BC
        CALL	C.6000
        DEFB    1
        DEFW    C.409F                  ; get received byte
        JR	NZ,J$5F8A
        CALL	C.6000
        DEFB	0
        DEFW    C.40CC                  ; signal sender to resume sending
        DEFB    0C3H
        DEC	DE
        LD	E,A

J$5F8A:	CP	08H                     ; BS ?
        JR	Z,J$5FB8
        CP	0DH                     ; CR ?
        JR	Z,J$5FC7                ; yep, output new line
        CP	20H                     ; other control code ?
        JP	C,J.5F1B                ; yep,
        PUSH	AF
        LD	A,(D.F65D)
        OR	A
        JR	Z,J$5FA6
        POP	AF
        PUSH	AF
        CALL	C.6000
        DEFB    1
        DEFW    C.40A2
J$5FA6:	POP	AF
        LD	(HL),A
        INC	HL
        INC	B
        LD	A,B
        CP	20H	; " "
        JP	C,J.5F1B
        DEC	HL
        DEC	B
        CALL	C.5FCC
        JP	J.5F1B

J$5FB8:	LD	A,B
        AND	A
        JP	Z,J.5F1B
        CALL	C.5FCC
        DEC	HL
        LD	(HL),00H
        DEC	B
        JP	J.5F1B

J$5FC7:	CALL	C.4EE3                  ; output new line
        OR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FCC:	PUSH	AF
        PUSH	HL
        LD	A,(D.F65D)
        OR	A
        LD	HL,I$5FDB
        CALL	NZ,C.5EC1               ; send or print string (carrier detect)
        POP	HL
        POP	AF
        RET

I$5FDB: DEFB    8," ",8,0

;	  Subroutine to upper
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FDF:	CP	"a"
        RET	C
        CP	"z"+1
        RET	NC
        SUB	20H
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FE8:	PUSH	BC
        LD	B,A
        LD	A,(SCRMOD)
        PUSH	AF                      ; store screen mode
        LD	A,2
        LD	(SCRMOD),A
        LD	A,B
        CALL	C.6000
        RLCA
        SBC	A,H
        LD	B,B
        POP	AF
        LD	(SCRMOD),A              ; restore screen mode
        POP	BC
        RET

        END
