; T600-2.MAC
;
; MSX-MODEM Sony T600
;
; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA
;
; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker
;
; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders
;

        .Z80
        ASEG

	ORG	04040H

VDP.DR	EQU	0006H
RDSLT	EQU	000CH
CALSLT	EQU	001CH
CHGMOD	EQU	005FH
CHPUT	EQU	00A2H
BEEP	EQU	00C0H

GRPCOL	EQU	0F3C9H
GRPCGP	EQU	0F3CBH
CSRY	EQU	0F3DCH
CSRX	EQU	0F3DDH
CNSDFG	EQU	0F3DEH
RG0SAV	EQU	0F3DFH
FORCLR	EQU	0F3E9H
BAKCLR	EQU	0F3EAH
FNKSTR	EQU	0F87FH
CGPNT	EQU	0F91FH
DPPAGE	EQU	0FAF5H
EXBRSA	EQU	0FAF8H
MODE	EQU	0FAFCH
FNKSWI	EQU	0FBCDH
NEWKEY	EQU	0FBE5H
LINWRK	EQU	0FC18H
PATWRK	EQU	0FC40H
INTFLG	EQU	0FC9BH
SCRMOD	EQU	0FCAFH
GRPACX	EQU	0FCB7H
GRPACY	EQU	0FCB9H
EXPTBL	EQU	0FCC1H
RG8SAV	EQU	0FFE7h
RG9SAV	EQU	0FFE8H
RG23SAV	EQU	0FFF6H


C$6000	EQU	6000H			; inter segment call (EI)
D.6153	EQU	6153H			; comterm mode (b7 = back space, b6-b5 = JIS mode, b4-b3 = screen mode, b2-b1 = character mode, b0 = interlace)
D.6175	EQU	6175H			; ESC handler
D.6177	EQU	6177H			; ESC parameter pointer
D.6179	EQU	6179H			; first character after ESC
D.617A	EQU	617AH			; parameter1
D.618E	EQU	618EH			; graphic header character flag
D.618F	EQU	618FH			; double byte character flag
D.6190	EQU	6190H			; ANK mode flag
D.6193	EQU	6193H	; --SLI
D.6194	EQU	6194H			; save current cursor position
D.6196	EQU	6196H			; save normal/inverse video, attribute flags
D.6198	EQU	6198H			; save current foreground and background color
D.619B	EQU	619BH			; ? column
D.619C	EQU	619CH			; STB column
D.619D	EQU	619DH			; current color attribute
D.619E	EQU	619EH			; normal/inverse video
D.619F	EQU	619FH			; attribute flags
D.61A0	EQU	61A0H			; current foreground color
D.61A1	EQU	61A1H			; current background color
D.61A2	EQU	61A2H			; screen size, number of lines
D.61A3	EQU	61A3H			; screen size, number of columns
D.61A4	EQU	61A4H			; VDP data read port
D.61A5	EQU	61A5H			; screen mode code
D.61A6	EQU	61A6H			; character mode and interlace
D.61A7	EQU	61A7H			; start of line pixel offset
D.61A9	EQU	61A9H			; character foreground color
D.61AA	EQU	61AAH			; character background color
D.61AB	EQU	61ABH			; foreground color
D.61AC	EQU	61ACH			; background color
D.61AD	EQU	61ADH			; character size, number of horizontal pixels
D.61AE	EQU	61AEH			; character size, number of vertical pixels
D.61AF	EQU	61AFH	; --SLI
D.61B0	EQU	61B0H			; current bitmask
D.61B1	EQU	61B1H			; current bitmask pointer
I.61B3	EQU	61B3H			; double size character table
I.62B8	EQU	62B8H			; pattern work area
I.62C0	EQU	62C0H	; ----I
I.62C8	EQU	62C8H	; ----I
I.62D0	EQU	62D0H	; ----I


?.4040:	JP	J$405E			; initialize comterm mode
?.4043:	JP	J$408E
?.4046:	JP	J$4088			; 
?.4049:	JP	J$4610			; update function key display
?.404C:	JP	C.41B8
?.404F:	JP	J$451D			; start MSX-JE execution
I$4052:	JP	J$460C			; terminate MSX-JE execution
?.4055:	JP	C.4534			; display STB
?.4058:	JP	C.446C			; get usable screen size
?.405B:	JP	J$53C5			; display COMHELP

;	  Subroutine initialize comterm mode
;	     Inputs  A = comterm mode (b7 = back space, b6-b5 = JIS mode, b4-b3 = screen mode, b2-b1 = character mode, b0 = interlace)
;	     Outputs ________________________

J$405E:	CALL	C$475B
	LD	A,(D.6153)
	CPL
	AND	04H			; chinese character mode
	LD	(D.6190),A		; update ANK mode
	XOR	A
	LD	(D.618E),A		; reset graphic header character flag
	LD	(D.618F),A		; reset double byte character flag
	LD	(CSRX),A
	LD	(CSRY),A		; cursor home
	LD	(D.619E),A		; normal video
	CALL	C.42E1			; save cursor position and attributes
	CALL	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)
	CALL	C.4D77			; inverse video on character if enabled
	CALL	C$4624
	JR	J.40CD			; continue

J$4088:	CALL	C$465E			; update function key display flag
	JP	J$4855			; display page 0, enable sprites

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

J$408E:	PUSH	AF			; store character
	CALL	C.4D77			; inverse video on character if enabled
	POP	AF			; restore character
	CALL	C$40A1
	JP	C.4D77			; inverse video on character if enabled

;	  Subroutine register and suspend ESC handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.4099:	LD	(D.6177),HL		; store HL
	POP	HL
	LD	(D.6175),HL		; store return address
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$40A1:	CP	0FFH
	RET	Z
	CP	20H			; control code ?
	JR	C,J$40B4		; yep,
	CP	7FH			; DEL ?
	JR	NZ,J$40C5		; nope, resume handler
	LD	A,(D.6153)
	BIT	7,A			; BS = NULL ?
	RET	Z			; yep, quit
	LD	A,8
J$40B4:	CP	1AH			; EOF ?
	JR	NZ,J$40BA		; nope,
	LD	A,18H			; CAN
J$40BA:	CP	18H			; CAN ?
	JR	Z,J$40D0
	CP	1BH			; ESC ?
	JR	Z,J$40D5		; yep,
	JP	C.4135			; character on screen

; resume ESC handler

J$40C5:	LD	HL,(D.6175)		; address handler
	PUSH	HL			; resume after return
	LD	HL,(D.6177)		; restore HL
	RET

J.40CD:	CALL	C.4099			; register and suspend ESC handler

; handle CAN

J$40D0:	CALL	C.4135			; character on screen
	JR	J.40CD			; continue

; handle ESC

J$40D5:	CALL	C.4099			; register and suspend ESC handler
	CP	30H
	JR	C,J$40E9
	CP	80H
	JR	NC,J.40CD		; continue
	CP	"["
	JR	Z,J$4107
	CALL	C$423F			; handle ESC[ sequence
	JR	J.40CD			; continue

J$40E9:	CP	"*"
	JR	NZ,J$40F4

; handle ESC *

	LD	A,0CH			; FF
	CALL	C.4135			; character on screen
	JR	J.40CD			; continue

J$40F4:	LD	(D.6179),A		; store first character after ESC
J$40F7:	CALL	C.4099			; register and suspend ESC handler
	CP	30H
	JR	C,J$40F7		; ignore
	CP	80H
	JR	NC,J.40CD		; continue
	CALL	C$4275
	JR	J.40CD			; continue

J$4107:	LD	HL,D.6179
	LD	(HL),0			;
	INC	HL
	LD	(HL),0			; parameter1 default = 0
	INC	HL
	LD	(HL),0			; parameter2 default = 0
	DEC	HL
	CALL	C.4099			; register and suspend ESC handler
	CALL	C.428E
	JR	NC,J.4123
	CP	30H
	JR	C,J.40CD		; continue
	CP	40H
	JR	NC,J$412B
J.4123:	CALL	C.4099			; register and suspend ESC handler
	CALL	C.428E
	JR	NC,J.4123
J$412B:	CP	80H
	JR	NC,J.40CD		; continue
	EX	DE,HL
	CALL	C$42B9			; handle ESC[[ sequence
	JR	J.40CD			; continue

;	  Subroutine character on screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.4135:	CALL	C$41CE			; handle graphic header and character
	PUSH	AF			; store character
	LD	A,(D.61A3)		; screen size, number of columns
	DEC	A
	LD	HL,CSRX
	CP	(HL)			; at last column ?
	JR	NC,J$414B		; nope, skip LF
	XOR	A
	LD	(HL),A			; column = 0
	CALL	C.4229			; LF
	CALL	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)
J$414B:	POP	AF			; restore character

;	  Subroutine character to display
;	     Inputs  ________________________
;	     Outputs ________________________

C.414C:	LD	L,A			; store character
	LD	A,(D.6190)
	OR	A			; in ANK mode ?
	JR	NZ,C.4199		; yep, skip JIS stuff
	LD	A,(D.618F)
	OR	A			; in double byte character ?
	JR	NZ,J$416A		; yep,
	LD	A,L			; character
	CP	80H
	JR	C,C.4199
	CP	0A0H
	JR	C,J$4166
	CP	0E0H
	JR	C,C.4199
J$4166:	LD	(D.618F),A		; set double byte character flag
	RET

J$416A:	LD	H,A			; first character
	XOR	A
	LD	(D.618F),A		; reset double byte character flag
	PUSH	HL
	LD	A,(D.61A3)		; screen size, number of columns
	DEC	A
	LD	HL,CSRX
	CP	(HL)
	JR	NZ,J$4182
	LD	L," "
	CALL	C.4199
	CALL	C.425E
J$4182:	POP	HL
	CALL	C.41B8
	LD	A,(D.619F)
	AND	40H			; hidden on ?
	JR	Z,J$4190		; nope,
	LD	HL,2121H
J$4190:	CALL	C$4A6C
	LD	HL,CSRX
	INC	(HL)
	JR	J$41AA

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4199:	LD	A,(D.619F)
	AND	40H			; hidden on ?
	JR	Z,J$41A2		; nope,
	LD	L," "			; use space
J$41A2:	LD	H,0
	CALL	C$49F8
	LD	HL,CSRX
J$41AA:	INC	(HL)			; update column
	LD	A,(D.61A3)		; screen size, number of columns
	CP	(HL)			; at last column ?
	RET	NZ			; nope, quit
	DEC	(HL)			; revert column
	PUSH	HL
	CALL	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)
	POP	HL
	INC	(HL)			; update column
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.41B8:	LD	A,H
	XOR	0A0H
	ADD	A,A
	LD	H,A
	LD	A,L
	LD	DE,0DEE1H
	ADD	HL,DE
	CP	7FH
	RET	C
	DEC	HL
	CP	9FH
	RET	C
	LD	DE,00A2H
	ADD	HL,DE
	RET

;	  Subroutine handle graphic header and character
;	     Inputs  ________________________
;	     Outputs ________________________

C$41CE:	LD	HL,D.618E
	DEC	(HL)			; in graphic header character ?
	JR	NZ,J$41D7		; nope,
	SUB	40H
	RET

J$41D7:	CP	7FH			; DEL ?
	JR	Z,J.41E3		; yep,
	CP	0FFH
	JR	Z,J.41E3
	INC	(HL)			; reset graphic header character flag
	CP	20H			; control character ?
	RET	NC			; nope, quit
J.41E3:	POP	BC
	CP	01H			; graphic header ?
	JR	NZ,J$41EA		; nope,
	INC	(HL)
	RET

J$41EA:	CP	07H			; BEL ?
	JP	Z,J$49ED		; yep, beep and quit
	LD	HL,CSRX
	CP	08H			; BS ?
	JR	Z,J$4214		; yep,
	LD	BC,C.44F3
	PUSH	BC			; after this, force valid column, update GRPAC with current cursor position (with offset)
	CP	09H			; HT ?
	JR	Z,J$4219
	CP	0AH			; LF ?
	JR	Z,C.4229
	CP	0BH			; VT ?
	JR	Z,J$4231
	CP	0CH			; FF ?
	JR	Z,J$422C
	CP	0DH			; CR ?
	JR	Z,J$4234
	POP	BC
	CP	18H			; CAN ?
	JR	Z,J$4237
	RET

; handle BS

J$4214:	LD	A,1			; columns left = 1
	JP	J.44BF			; cursor left with

; handle HT

J$4219:	LD	A,(HL)
	OR	07H
	INC	A
	PUSH	HL
	LD	HL,D.61A3		; screen size, number of columns
	CP	(HL)
	JR	C,J$4226
	LD	A,(HL)
	DEC	A			; last column
J$4226:	POP	HL
	LD	(HL),A			; update column
	RET

;	  Subroutine handle LF
;	     Inputs  ________________________
;	     Outputs ________________________

C.4229:	JP	C.4262			; move/scroll window up one line

; handle FF

J$422C:	PUSH	HL
	CALL	C$4350
	POP	HL

; handle VT

J$4231:	LD	(HL),0
	DEC	HL

; handle CR

J$4234:	LD	(HL),0
	RET

; handle CAN

J$4237:	XOR	A
	LD	(D.618E),A		; reset graphic header character flag
	LD	(D.618F),A		; reset double byte character flag
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$423F:	LD	BC,5
	CALL	C.4509

        DEFB    "78MDE"

	DEFW	(C.42E1-$)		; 7
	DEFW	(C.42F4-$)		; 8
	DEFW	(C.424F-$)		; M
	DEFW	(C.4262-$)		; D
	DEFW	(C.425E-$)		; E

;	  Subroutine ESC [M (move/scroll window down one line)
;	     Inputs  ________________________
;	     Outputs ________________________

C.424F:	LD	A,(CSRY)
	OR	A			; line = 0 ?
	LD	A,1			; lines up = 1
	JP	NZ,C.44B9		; nope, cursor up with
	CALL	C$4DAE
	JP	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine ESC [E (move to next line)
;	     Inputs  ________________________
;	     Outputs ________________________

C.425E:	XOR	A
	LD	(CSRX),A

;	  Subroutine ESC [D (move/scroll window up one line)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4262:	CALL	C.4711			; get number of usable lines
	DEC	A
	LD	HL,CSRY
	CP	(HL)			; cursor at last line ?
	LD	A,1			; lines down = 1
	JP	NZ,J.44CB		; nope, cursor down with
	CALL	C.4DE8
	JP	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4275:	LD	B,A
	LD	A,(D.6179)
	CP	")"
	RET	NZ

; handle ESC )<n>

	LD	A,(D.6153)
	AND	04H			; chinese character mode ?
	RET	Z			; nope, quit
	LD	A,B
	SUB	"0"
	JR	Z,J.428A
	CP	3
	RET	NZ
J.428A:	LD	(D.6190),A		; update ANK mode flag
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.428E:	CP	"0"
	RET	C
	CP	"9"+1
	JR	NC,J$42A8
J$4295:	SUB	"0"
	LD	B,A
	LD	A,(HL)
	CP	24+1
	JR	C,J$42A1
	LD	A,0FFH
	JR	J$42A6

J$42A1:	ADD	A,A
	ADD	A,A			; *4
	ADD	A,(HL)			; *5
	ADD	A,A			; *10
	ADD	A,B
J$42A6:	LD	(HL),A
	RET

J$42A8:	CP	";"
	SCF
	RET	NZ
	PUSH	HL
	LD	DE,D.617A+15
	SBC	HL,DE
	POP	HL
	JR	NC,J$42B6
	INC	HL
J$42B6:	XOR	A
	LD	(HL),A
	RET

;	  Subroutine handle ESC [[ sequence
;	     Inputs  ________________________
;	     Outputs ________________________

C$42B9:	LD	BC,17
	CALL	C.4509

        DEFB    "ABCDHJKML"
        DEFB    "cfhlmnsu"

	DEFW	(C.432D-$)		; A
	DEFW	(C.4333-$)		; B
	DEFW	(C.4339-$)		; C
	DEFW	(C.433F-$)		; D
	DEFW	(C.430C-$)		; H
	DEFW	(C.4345-$)		; J
	DEFW	(C.436E-$)		; K
	DEFW	(C.43A0-$)		; M
	DEFW	(C.43AC-$)		; L

	DEFW	(C.43BD-$)		; c
	DEFW	(C.430C-$)		; f
	DEFW	(C.43CE-$)		; h
	DEFW	(C.43D3-$)		; l
	DEFW	(C.43D8-$)		; m
	DEFW	(C.43C5-$)		; n
	DEFW	(C.42E1-$)		; s
	DEFW	(C.42F4-$)		; u

;	  Subroutine ESC [7, ESC[[s (save cursor position and attributes)
;	     Inputs  ________________________
;	     Outputs ________________________

C.42E1:	LD	HL,(CSRY)
	LD	(D.6194),HL		; store cursor position
	LD	HL,(D.619E)
	LD	(D.6196),HL		; store normal/inverse video, attribute flags
	LD	HL,(D.61A0)
	LD	(D.6198),HL		; store current foreground and background color
	RET

;	  Subroutine ESC [8, ESC[[u (restore cursor position and attributes)
;	     Inputs  ________________________
;	     Outputs ________________________

C.42F4:	LD	HL,(D.6194)
	LD	(CSRY),HL		; restore cursor position
	CALL	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)
	LD	HL,(D.6196)
	LD	(D.619E),HL		; restore normal/inverse video, attribute flags
	LD	HL,(D.6198)
	LD	(D.61A0),HL		; restore current foreground and background color
	JP	C.4941

;	  Subroutine ESC [[H, ESC[[f (cursor home)
;	     Inputs  ________________________
;	     Outputs ________________________

C.430C:	CALL	C.4711			; get number of usable lines
	LD	E,A
	LD	HL,D.617A		; parameter1
	CALL	C.4326			; force parameter within limits
	DEC	A
	PUSH	AF
	LD	A,(D.61A3)		; screen size, number of columns
	LD	E,A
	INC	HL			; parameter2
	CALL	C.4326			; force parameter within limits
	DEC	A
	LD	E,A
	POP	AF
	JP	C.44B1			; update cursor position

;	  Subroutine force parameter within limits
;	     Inputs  ________________________
;	     Outputs ________________________

C.4326:	CALL	C$4504			; if parameter = 0 or not specified, use 1
	CP	E			; within limits ?
	RET	C			; yep, quit
	LD	A,E
	RET

;	  Subroutine ESC [[<n>A (cursor <n> up)
;	     Inputs  ________________________
;	     Outputs ________________________

C.432D:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	JP	C.44B9			; cursor up with

;	  Subroutine ESC [[<n>B (cursor <n> down)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4333:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	JP	J.44CB			; cursor down with

;	  Subroutine ESC [[<n>C (cursor <n> right)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4339:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	JP	J$44E2			; cursor right with

;	  Subroutine ESC [[D (cursor <n> left)
;	     Inputs  ________________________
;	     Outputs ________________________

C.433F:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	JP	J.44BF			; cursor left with

;	  Subroutine ESC [[J (erase to end of screen)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4345:	LD	A,(D.617A)
	OR	A			; parameter = 0 or not specified ?
	JR	Z,J$4361		; yep,
	DEC	A			; parameter = 1 ?
	JR	Z,J$4357		; yep, clear lines from top to current line
	DEC	A			; parameter = 2 ?
	RET	NZ			; nope, quit

;	  Subroutine clear screen
;	     Inputs  ________________________
;	     Outputs ________________________

C$4350:	CALL	C.4711			; get number of usable lines
	LD	E,A			; end line
	XOR	A			; start line = 0
	JR	J.437E			; clear lines

;	  Subroutine clear lines from top to current line
;	     Inputs  ________________________
;	     Outputs ________________________

J$4357:	CALL	C.4381
	LD	A,(CSRY)
	LD	E,A			; end line = current line
	XOR	A			; start line = 0
	JR	J.437E			; clear lines

J$4361:	CALL	C.438F
	CALL	C.4711			; get number of usable lines
	LD	E,A
	LD	A,(CSRY)
	INC	A			; start line = current line +1
	JR	J.437E			; clear lines

;	  Subroutine ESC [[K (clear to end of line)
;	     Inputs  ________________________
;	     Outputs ________________________

C.436E:	LD	A,(D.617A)
	OR	A			; parameter = 0 or not specified ?
	JR	Z,C.438F		; yep,
	DEC	A			; parameter = 1 ?
	JR	Z,C.4381		; yep,
	DEC	A			; parameter = 2 ?
	RET	NZ			; nope, quit
	LD	A,(CSRY)
	LD	E,A
	INC	E
J.437E:	JP	C.4ED2			; clear lines

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4381:	LD	E,0			; offset = 0
	LD	A,(CSRX)
	LD	HL,D.61A3		; screen size, number of columns
	CP	(HL)			; at last column ?
	JR	Z,C.4396		; yep,
	INC	A			; next column
	JR	C.4396

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.438F:	LD	A,(CSRX)
	LD	E,A
	LD	A,(D.61A3)		; screen size, number of columns

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4396:	SUB	E			; - offset
	RET	Z
	RET	C
	LD	D,A
	LD	A,(CSRY)
	JP	J$4F3A

;	  Subroutine ESC [[M (scroll down line)
;	     Inputs  ________________________
;	     Outputs ________________________

C.43A0:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	LD	B,A
	LD	A,(CSRY)
	CALL	C.4E42
	JR	J$43B6

;	  Subroutine ESC [[L ()
;	     Inputs  ________________________
;	     Outputs ________________________

C.43AC:	CALL	C.4501			; if parameter1 = 0 or not specified, use 1
	LD	B,A
	LD	A,(CSRY)
	CALL	C.4E73
J$43B6:	XOR	A
	LD	(CSRX),A		; column = 0
	JP	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine ESC [[c (indentify terminal type)
;	     Inputs  ________________________
;	     Outputs ________________________

C.43BD:	LD	A,(D.617A)
	OR	A			; parameter = 0 or not specified ?
	RET	NZ			; nope, quit
	JP	J$445F			; echo terminal specifications

;	  Subroutine ESC [[n ()
;	     Inputs  ________________________
;	     Outputs ________________________

C.43C5:	LD	A,(D.617A)
	CP	6			; parameter = 6 ?
	RET	NZ			; nope, quit
	JP	J$4475			; get cursor position

;	  Subroutine ESC [[h
;	     Inputs  ________________________
;	     Outputs ________________________

C.43CE:	LD	A,"h"
	JP	J.4486

;	  Subroutine ESC [[l
;	     Inputs  ________________________
;	     Outputs ________________________

C.43D3:	LD	A,"l"
	JP	J.4486

;	  Subroutine ESC [[m (turn off character attributes)
;	     Inputs  ________________________
;	     Outputs ________________________

C.43D8:	EX	DE,HL
	INC	HL
	LD	DE,D.617A
	OR	A
	SBC	HL,DE
	LD	B,L			; number of parameters
J$43E1:	LD	A,(DE)			; parameter value
	PUSH	DE
	PUSH	BC
	CALL	C$43FC			; convert value to foreground, background color, OR mask
	POP	BC
	POP	DE
	INC	DE
	LD	HL,D.619F
	OR	(HL)
	LD	(HL),A			; update attribute flags
	DJNZ	J$43E1
	LD	HL,D.619F
	LD	A,(HL)
	RRCA				; any attributes ?
	RET	NC			; nope, quit
	RES	0,(HL)			; reset
	JP	C.4941

;	  Subroutine convert value to foreground, background color, OR mask
;	     Inputs  ________________________
;	     Outputs ________________________

C$43FC:	LD	HL,D.619F
	OR	A			; parameter value = 0 ?
	JR	Z,J$4435		; yep, turn off character attributes
	DEC	A			; parameter value = 1 ?
	JR	Z,J$443A		; yep, bold on
	SUB	3			; parameter value = 4 ?
	JR	Z,J$443D		; yep, underline on
	DEC	A			; parameter value = 5 ?
	JR	Z,J$4440		; yep, blinking on
	DEC	A			; parameter value = 6 ?
	JR	Z,J.4443		; yep, replace by space
	DEC	A			; parameter value = 7 ?
	JR	Z,J$4446		; yep, reverse video on
	DEC	A			; parameter value = 8 ?
	JR	Z,J.4443		; yep, hidden on
	SUB	08H			; parameter value = 16 ?
	JR	Z,J.4443		; yep, hidden on
	INC	HL			; foreground color
	SUB	0EH			; parameter value >= 30 ?
	CP	08H			; parameter value < 38 ?
	JR	C,J.445B		; yep, use direct value
	SUB	14H			; parameter value >= 50 ?
	CP	08H			; parameter value < 58 ?
	JR	C,J.4451		; yep, use converted value
	INC	HL			; background color
	SUB	0F6H			; parameter value >= 40 ?
	CP	08H			; parameter value < 48 ?
	JR	C,J.445B		; yep, use direct value
	SUB	14H			; parameter value >= 60 ?
	CP	08H			; parameter value < 68 ?
	JR	C,J.4451		; yep, use converted value
	XOR	A			; no attribute
	RET

J$4435:	CALL	C.4907			; turn off character attributes
	XOR	A			; OR mask
	RET

; bold on

J$443A:	LD	A,03H
	RET

; underline on

J$443D:	LD	A,11H
	RET

; blinking on

J$4440:	LD	A,21H
	RET

; hidden on

J.4443:	LD	A,41H
	RET

; reverse video on

J$4446:	LD	A,81H
	RET

I$4449:	DEFB	8
	DEFB	10
	DEFB	12
	DEFB	13
	DEFB	9
	DEFB	11
	DEFB	14
	DEFB	15

J.4451:	LD	DE,I$4449
	ADD	A,E
	LD	E,A
	LD	A,0
	ADC	A,D
	LD	D,A
	LD	A,(DE)
J.445B:	LD	(HL),A
	LD	A,1
	RET

; echo terminal specifications

J$445F:	CALL	C.446C			; get usable screen size
	LD	A,(D.6153)
	AND	04H			; chinese character mode
	RRCA
	RRCA				; to b0
	JP	J$5353			; echo terminal specifications

;	  Subroutine get usable screen size
;	     Inputs  ________________________
;	     Outputs ________________________

C.446C:	CALL	C.4711			; get number of usable lines
	LD	L,A
	LD	A,(D.61A3)		; screen size, number of columns
	LD	H,A
	RET

; get cursor position

J$4475:	LD	HL,(CSRY)
	LD	A,(D.61A3)		; screen size, number of columns
	CP	H
	JR	NZ,J$4481
	LD	H,0
	INC	L
J$4481:	INC	H
	INC	L
	JP	J$5386			; echo 

J.4486:	PUSH	AF
	LD	(D.6179),A		; update first character after ESC
	CP	">"
	JR	NZ,J$4490
	POP	AF			; unreachable code
	RET

J$4490:	POP	AF
	LD	HL,C.4667		; set application sequences
	LD	E,1			; inverse video
	CP	"h"
	JR	Z,J$44A1
	LD	HL,C.462D		; reset cursor sequences
	DEC	E			; normal video
	CP	"l"
	RET	NZ
J$44A1:	LD	A,(D.617A)
	CP	1			; parameter = 1 ?
	JR	Z,J$44B0		; yep,
	CP	5			; parameter = 5 ?
	RET	NZ			; nope, quit
	LD	A,E
	LD	(D.619E),A		; update normal/inverse video
	RET

J$44B0:	JP	(HL)

;	  Subroutine update cursor position
;	     Inputs  A = line, E = column
;	     Outputs ________________________

C.44B1:	LD	HL,CSRY
	LD	(HL),A
	INC	HL
	LD	(HL),E
	JR	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine cursor up with
;	     Inputs  ________________________
;	     Outputs ________________________

C.44B9:	LD	E,A
	LD	HL,CSRY
	JR	J$44C3

;	  Subroutine cursor left with
;	     Inputs  A = number of steps
;	     Outputs ________________________

J.44BF:	LD	E,A
	LD	HL,CSRX
J$44C3:	LD	A,(HL)
	SUB	E
	JR	NC,J$44C8
	XOR	A
J$44C8:	LD	(HL),A
	JR	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine cursor down with
;	     Inputs  ________________________
;	     Outputs ________________________

J.44CB:	LD	HL,CSRY
	ADD	A,(HL)
	JR	NC,J$44D2
	SBC	A,A
J$44D2:	LD	D,A
	CALL	C.4711			; get number of usable lines
	LD	E,A
	LD	A,D
	CP	E
	JR	C,J$44DD
	DEC	E
	LD	A,E
J$44DD:	LD	(CSRY),A
	JR	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)

;	  Subroutine cursor right with
;	     Inputs  A = number of steps
;	     Outputs ________________________

J$44E2:	LD	HL,CSRX
	ADD	A,(HL)
	JR	NC,J$44E9
	SBC	A,A
J$44E9:	LD	HL,D.61A3
	CP	(HL)			; screen size, number of columns
	JR	C,J$44F0
	LD	A,(HL)
J$44F0:	LD	(CSRX),A

;	  Subroutine force valid column, update GRPAC with current cursor position (with offset)
;	     Inputs  ________________________
;	     Outputs ________________________

C.44F3:	LD	HL,(CSRY)
	LD	A,(D.61A3)		; screen size, number of columns
	DEC	A
	CP	H			; cursor past last column ?
	JR	NC,J$44FE		; nope,
	LD	H,A			; last column
J$44FE:	JP	J$4F86			; update GRPAC with current cursor position (with offset)

;	  Subroutine if parameter1 = 0 or not specified, use 1
;	     Inputs  ________________________
;	     Outputs ________________________

C.4501:	LD	HL,D.617A

;	  Subroutine if parameter = 0 or not specified, use 1
;	     Inputs  ________________________
;	     Outputs ________________________

C$4504:	LD	A,(HL)
	OR	A			; parameter = 0 or not specified ?
	RET	NZ			; nope, quit
	INC	A			; use 1
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4509:	POP	HL
	PUSH	BC
	CPIR
	POP	BC
	RET	NZ
	DEC	HL
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	ADD	HL,BC
J$4515:	JP	(HL)

I$4516:	DEFB	18H			; move cursor
	DEFB	-3			; X coord
	DEFB	93H			; shift-JIS
	DEFB	FCH
	DEFB	97H			; shift-JIS
	DEFB	CDH
	DEFB	0

;	  Subroutine start MSX-JE execution
;	     Inputs  ________________________
;	     Outputs ________________________

J$451D:	XOR	A
	LD	(D.619C),A		; STB column = 0
	LD	(D.619B),A		; ? column = 0
	CALL	C$4569			; update current color attribute
	LD	A,2			; set b1
	CALL	C.4635
	LD	HL,I$4516
	XOR	A
	CALL	C.4534			; display STB
	RET

;	  Subroutine display STB
;	     Inputs  ________________________
;	     Outputs ________________________

C.4534:	CALL	C.4719			; store current status, execute next and restore current status
	PUSH	AF
	PUSH	HL
	LD	A,(D.619C)
	LD	E,A			; STB column
	LD	A,(D.61A2)		; screen size, number of lines
	DEC	A			; last line
	CALL	C.44B1			; update cursor position
	LD	A,(D.619D)
	LD	B,A			; current color attribute
	CALL	C.45ED			; set color attribute
	XOR	A
	LD	(D.619E),A		; normal video
	CALL	C.4D77			; inverse video on character if enabled
	POP	HL
	CALL	C.457D
	LD	A,(D.619B)
	LD	E,A			; ? column
	POP	AF
	ADD	A,4			; +4
	CALL	C.4396
	CALL	C.4D77			; inverse video on character if enabled
	LD	A,(CSRX)
	LD	(D.619C),A		; update STB column

;	  Subroutine update current color attribute
;	     Inputs  ________________________
;	     Outputs ________________________

C$4569:	LD	A,(FORCLR)
	AND	0FH
	RLCA
	RLCA
	RLCA
	RLCA
	LD	H,A
	LD	A,(BAKCLR)
	AND	0FH
	OR	H
	LD	(D.619D),A		; update current color attribute
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.457D:	CALL	C$458F
	PUSH	HL
	LD	A,(CSRX)
	LD	HL,D.619B
	CP	(HL)			; ? column
	JR	C,J$458B
	LD	(HL),A			; update ? column
J$458B:	POP	HL
	INC	HL
	JR	C.457D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$458F:	LD	A,(HL)
	POP	BC			; remove and store return address
	OR	A			; end of text ?
	RET	Z			; yep, quit caller
	PUSH	BC			; restore return address
	CP	20H			; control character ?
	JR	NC,J$4606		; nope, character to display and quit
	CP	10H			; 10H-1FH ?
	JR	NC,J$45A9		; yep,
	CP	05H			; 05H (clears characters behind cursor) ?
	JR	Z,J.45D8		; yep,
	CP	08H			; 08H (move cursor back and erase character) ?
	JR	Z,J$45CD		; yep,
	CP	0CH			; 0CH (move cursor home and erase screen) ?
	JR	Z,J$45D3		; yep,
	RET

J$45A9:	INC	HL
	LD	B,(HL)
	CP	12H			; 12H (reverse area from cursor) ?
	JR	Z,J$45BE
	CP	17H			; 17H (open window) ?
	JR	Z,J$45BC
	CP	18H			; 18H (move cursor) ?
	JR	Z,C.45DF
	CP	1AH			; 1AH (attribute) ?
	JR	Z,C.45ED
	RET

; open window

J$45BC:	LD	E,B
	RET

; reverse area from cursor

J$45BE:	PUSH	HL
	LD	A,(CSRX)
	LD	E,A			; current column
	LD	D,B
	LD	A,(D.61A3)		; screen size, number of columns
	DEC	A			; last line
	CALL	C$4F22
	POP	HL
	RET

; move cursor back and erase character

J$45CD:	LD	A,(CSRX)
	LD	B,A			; current column
	JR	J.45D8

; move cursor home and erase screen

J$45D3:	LD	B,4-3			; 4 columns
	CALL	C.45DF			; move cursor
J.45D8:	LD	A,(CSRX)
	LD	(D.619B),A		; update ? column
	RET

;	  Subroutine move cursor
;	     Inputs  ________________________
;	     Outputs ________________________

C.45DF:	PUSH	HL
	LD	A,B
	ADD	A,3
	LD	E,A			; column
	LD	A,(D.61A2)		; screen size, number of lines
	DEC	A			; last line
	CALL	C.44B1			; update cursor position
	POP	HL
	RET

;	  Subroutine set color attribute
;	     Inputs  ________________________
;	     Outputs ________________________

C.45ED:	PUSH	HL
	LD	A,B
	LD	(D.619D),A		; update current color attribute
	AND	0FH
	LD	(BAKCLR),A		; update background color
	LD	A,B
	RRCA
	RRCA
	RRCA
	RRCA
	AND	0FH
	LD	(FORCLR),A		; update foreground color
	CALL	C.4907			; turn off character attributes
	POP	HL
	RET

J$4606:	PUSH	HL
	CALL	C.414C			; character to display
	POP	HL
	RET

;	  Subroutine terminate MSX-JE execution
;	     Inputs  ________________________
;	     Outputs ________________________

J$460C:	LD	A,2			; reset b1
	JR	J$4669

J$4610:	PUSH	AF
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	A,(FNKSWI)
	LD	HL,NEWKEY+6
	XOR	(HL)
	RRCA
	CALL	C,C.4682
	POP	BC
	POP	DE
	POP	HL
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4624:	XOR	A
	LD	(D.6193),A
	LD	A,(CNSDFG)
	OR	A			; function key display on ?
	RET	Z			; nope, quit

;	  Subroutine ESC [[1l (reset cursor sequences)
;	     Inputs  ________________________
;	     Outputs ________________________

C.462D:	LD	A,1			; set b0
	CALL	C.4635
	RET	C
	JR	C.4682

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4635:	PUSH	AF
	LD	HL,D.6193
	OR	(HL)			; set bit
	LD	(HL),A			; update
	POP	AF
	CALL	C.4708
	RET	C			; nope, quit
	LD	A,(D.61A2)		; screen size, number of lines
	DEC	A
	LD	HL,CSRY
	CP	(HL)			; cursor at last line ?
	JR	NZ,J$4654		; nope,
	LD	A,1
	CALL	C.4DE8
	LD	A,1			; lines up = 1
	CALL	C.44B9			; cursor up with
J$4654:	LD	A,0FFH
	LD	(CNSDFG),A		; function key display on
	CALL	C.4700			; clear last line
	XOR	A
	RET

;	  Subroutine update function key display flag
;	     Inputs  ________________________
;	     Outputs ________________________

C$465E:	LD	A,(D.6193)
	RRCA				; b0
	SBC	A,A
	LD	(CNSDFG),A		; update function key display flag
	RET

;	  Subroutine ESC [[1h (set application sequences)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4667:	LD	A,1			; reset b0
J$4669:	PUSH	AF
	LD	HL,D.6193
	CPL
	AND	(HL)			; reset bit
	LD	(HL),A			; update
	POP	AF
	CALL	C.4708
	RET	C			; nope, quit
	AND	(HL)
	JR	NZ,J$467F
	LD	HL,CNSDFG
	XOR	A
	CP	(HL)			; function key display on ?
	LD	(HL),A			; function key display off
	RET	Z			; nope, quit
J$467F:	CALL	C.4700			; clear last line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4682:	LD	A,1			; b0
	CALL	C.4708
	RET	NZ			; nope, quit
	CALL	C.4700			; clear last line
	CALL	C.4719			; store current status, execute next and restore current status
	CALL	C.4907			; turn off character attributes
	LD	A,(D.61A2)		; screen size, number of lines
	DEC	A
	LD	L,A
	LD	H,0
	LD	(CSRY),HL		; cursor at start of last line
	CALL	C.44F3			; force valid column, update GRPAC with current cursor position (with offset)
	LD	A,(NEWKEY+6)
	RRCA				; SHIFT key pressed ?
	LD	HL,FNKSTR+0*16
	LD	A,1
	JR	C,J$46AD		; nope,
	LD	HL,FNKSTR+5*16
	XOR	A
J$46AD:	LD	(FNKSWI),A
	LD	C,5
	LD	A,(D.61A3)		; screen size, number of columns
	CALL	C$46F2
	RET	C
J$46B9:	PUSH	BC
	LD	C,0
J$46BC:	LD	A,(HL)
	INC	HL
	INC	C
	CP	21H			; space or control code ?
	JR	C,J.46D4		; yep,
	CP	7FH			; DEL ?
	JR	Z,J.46D4		; yep,
	CP	0FFH			; ?
	JR	Z,J.46D4		; yep,
	PUSH	HL
	PUSH	BC
	CALL	C.414C			; character to display
	POP	BC
	POP	HL
	JR	J$46D7

J.46D4:	CALL	C.46E6			; increase and force column, update GRPAC with current cursor position (with offset)
J$46D7:	DJNZ	J$46BC
	LD	A,16
	SUB	C
	LD	C,A
	ADD	HL,BC
	CALL	C.46E6			; increase and force column, update GRPAC with current cursor position (with offset)
	POP	BC
	DEC	C
	JR	NZ,J$46B9
	RET

;	  Subroutine increase and force column, update GRPAC with current cursor position (with offset)
;	     Inputs  ________________________
;	     Outputs ________________________

C.46E6:	PUSH	HL
	PUSH	BC
	LD	HL,CSRX
	INC	(HL)			; increase column
	CALL	C.44F3			; force column, update GRPAC with current cursor position (with offset)
	POP	BC
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$46F2:	SUB	04H	; 4 
	RET	C
	LD	B,0FFH
J$46F7:	INC	B
	SUB	05H	; 5 
	JR	NC,J$46F7
	LD	A,B
	SUB	01H	; 1 
	RET

;	  Subroutine clear last line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4700:	LD	A,(D.61A2)		; screen size, number of lines
	LD	E,A			; end line
	DEC	A			; start line
	JP	C.4ED2			; clear lines

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4708:	LD	HL,D.6193
	LD	B,A
	DEC	A
	AND	(HL)
	OR	B
	CP	(HL)
	RET

;	  Subroutine get number of usable lines
;	     Inputs  ________________________
;	     Outputs ________________________

C.4711:	LD	A,(D.61A2)		; screen size, number of lines
	LD	HL,CNSDFG
	ADD	A,(HL)
	RET

;	  Subroutine store current status, execute next and restore current status
;	     Inputs  ________________________
;	     Outputs ________________________

C.4719:	EXX
	EX	AF,AF'
	POP	BC			; restore return address
	LD	HL,(D.618F)
	PUSH	HL			; store double byte character/JIS flags
	LD	HL,0
	LD	(D.618F),HL
	LD	HL,(CSRY)
	PUSH	HL
	LD	HL,(D.61A0)
	PUSH	HL			; store current foreground and background color
	LD	HL,(D.619E)
	PUSH	HL			; store normal/inverse video, attribute flags
	LD	HL,(FORCLR)
	PUSH	HL
	CALL	C$4757			; continue at return address
	POP	HL
	LD	(FORCLR),HL
	CALL	C.4907			; turn off character attributes
	POP	HL
	LD	(D.619E),HL		; restore normal/inverse video, attribute flags
	POP	HL
	LD	(D.61A0),HL		; restore current foreground and background color
	CALL	C.4941
	POP	HL
	LD	(CSRY),HL		; restore current cursor position
	CALL	C.44F3			; force column, update GRPAC with current cursor position (with offset)
	POP	HL
	LD	(D.618F),HL		; restore double byte character/JIS flag
	RET

;	  Subroutine continue at return address
;	     Inputs  ________________________
;	     Outputs ________________________

C$4757:	PUSH	BC
	EXX
	EX	AF,AF'
	RET

;	  Subroutine __________________________
;	     Inputs  A = comterm mode (b7 = back space, b6-b5 = JIS mode, b4-b3 = screen mode, b2-b1 = character mode, b0 = interlace)
;	     Outputs ________________________

C$475B:	LD	B,A			; store comterm mode
	LD	A,(MODE)
	AND	06H			; VRAM size
	JR	Z,J$4770		; 16 KB, force comterm mode 0-7
	CP	04H			; 128 KB ?
	JR	NC,J.4774		; yep,
	LD	A,B			; restore comterm mode
	AND	18H			; screen mode
	CP	18H			; comterm mode 24-31 ?
	JR	NZ,J.4774		; nope,
	JR	J$4772			; force comterm mode 16-23

J$4770:	RES	4,B
J$4772:	RES	3,B
J.4774:	LD	A,B			; comterm mode
	AND	1FH			; b4-b3 = screen mode, b2-b1 = character mode, b0 = interlace
	LD	HL,I$486B
	LD	D,0
	LD	E,A
	ADD	HL,DE
	LD	B,(HL)
	LD	A,B
	AND	07H			; b2-b1 = character mode, b0 = interlace
	LD	(D.61A6),A		; character mode and interlace
	LD	A,B
	AND	18H			; screen mode 2 ?
	JR	Z,J$478F		; yep,
	RRCA
	RRCA
	RRCA				; to b1,b0
	ADD	A,2
J$478F:	ADD	A,2
	LD	(SCRMOD),A
	LD	A,B
	AND	18H			; screen mode
	RRCA
	RRCA				; to b2,b1
	LD	HL,I$488B
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	DE,D.61A5
	LDI
	LD	A,(D.61A6)		; character mode and interlace
	ADD	A,A
	ADD	A,A			; to b4-b2
	ADD	A,(HL)			; b1-b0 = screen mode
	ADD	A,A
	LD	HL,I$4893
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	DE,D.61A2
	LDI				; screen size, number of lines
	LD	A,(HL)
	LD	(DE),A			; screen size, number of columns per line
	LD	L,A			; number of columns
	CALL	C.4FAB			; convert column to pixels
	EX	DE,HL
	CALL	C.4F12			; get horizontal screen size, in pixels
	OR	A
	SBC	HL,DE			; pixels left
	SRL	H
	RR	L			; calculate left offset
	CALL	C.515A			; screen mode 2 ?
	JR	NZ,J$47D2		; nope,
	LD	A,L
	AND	0F8H
	LD	L,A			; offset must be multiply of 8
J$47D2:	LD	A,L
	LD	(D.61A7),A		; update start of line pixel offset
	LD	A,(D.61A6)		; character mode and interlace
	ADD	A,A
	LD	HL,I$48C3
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	DE,D.61AD
	LDI
	LDI
	LD	HL,VDP.DR
	LD	A,(EXPTBL+0)
	LD	IX,RDSLT
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT
	LD	(D.61A4),A		; VDP data read port
	LD	A,(SCRMOD)
	LD	IX,CHGMOD
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT			; initialize screen mode
	CALL	C$48CF
	CALL	C.4907			; turn off character attributes
	CALL	C$4FE9
	LD	A,(D.61A2)		; screen size, number of lines
	LD	E,A
	CALL	C.515A			; screen mode 2 ?
	JR	Z,J$481D		; yep,
	INC	E
J$481D:	XOR	A			; start line = 0
	CALL	C.4ED2			; clear lines
	CALL	C.515A			; screen mode 2 ?
	RET	Z			; yep, quit
	LD	BC,(RG8SAV-1)
	SET	1,B			; disable sprites
	LD	A,(D.61A5)
	DEC	A			; screen mode 6 ?
	JR	NZ,J$4833		; nope,
	SET	5,B			; color 0 = black
J$4833:	LD	C,8
	CALL	C.5133			; write VDP register
	EI
	CALL	C.50BB			; interlace mode ?
	JR	Z,J$4845		; yep, enable interlace
	LD	A,(RG9SAV)
	AND	0F3H			; disable interlace
	JR	J$4851			; write VDP register and quit

J$4845:	LD	B,3FH			; display page 1
	LD	C,2
	CALL	C.5133			; write VDP register
	LD	A,(RG9SAV)
	OR	0CH			; enable interlace
J$4851:	LD	C,09H
	JR	J$4867			; write VDP register and quit

J$4855:	CALL	C.515A			; screen mode 2 ?
	RET	Z			; yep, quit
	LD	B,1FH			; display page 0
	LD	C,2
	CALL	C.5133			; write VDP register
	LD	A,(RG8SAV)
	AND	0FDH			; enable sprites
	LD	C,8
J$4867:	LD	B,A
	JP	C.5133			; write VDP register

I$486B:
; b4-b3 = screen mode, b2-b1 = character mode, b0 = interlace

; pattern mode

	DEFB	8*0+0                   ; comterm mode 0, screen mode 2
        DEFB    8*0+0                   ; comterm mode 1, screen mode 2
        DEFB    8*0+1                   ; comterm mode 2, screen mode 2
        DEFB    8*0+1                   ; comterm mode 3, screen mode 2
        DEFB    8*0+2                   ; comterm mode 4, screen mode 2
        DEFB    8*0+2                   ; comterm mode 5, screen mode 2
        DEFB    8*0+2                   ; comterm mode 6, screen mode 2
        DEFB    8*0+2                   ; comterm mode 7, screen mode 2

; 256 pixel mode

        DEFB    8*1+0                   ; comterm mode 8, screen mode 5
        DEFB    8*1+0                   ; comterm mode 9, screen mode 5
        DEFB    8*1+1                   ; comterm mode 10, screen mode 5
        DEFB    8*1+1                   ; comterm mode 11, screen mode 5
        DEFB    8*1+2                   ; comterm mode 12, screen mode 5
        DEFB    8*1+3                   ; comterm mode 13, screen mode 5
        DEFB    8*2+4                   ; comterm mode 14, screen mode 6
        DEFB    8*2+5                   ; comterm mode 15, screen mode 6

; 512 pixel mode

        DEFB    8*2+0                   ; comterm mode 16, screen mode 6
        DEFB    8*2+0                   ; comterm mode 17, screen mode 6
        DEFB    8*2+1                   ; comterm mode 18, screen mode 6
        DEFB    8*2+1                   ; comterm mode 19, screen mode 6
        DEFB    8*2+2                   ; comterm mode 20, screen mode 6
        DEFB    8*2+3                   ; comterm mode 21, screen mode 6
        DEFB    8*2+4                   ; comterm mode 22, screen mode 6
        DEFB    8*2+5                   ; comterm mode 23, screen mode 6

; 512 pixel mode

        DEFB    8*3+0                   ; comterm mode 24, screen mode 7
        DEFB    8*3+0                   ; comterm mode 25, screen mode 7
        DEFB    8*3+1                   ; comterm mode 26, screen mode 7
        DEFB    8*3+1                   ; comterm mode 27, screen mode 7
        DEFB    8*3+2                   ; comterm mode 28, screen mode 7
        DEFB    8*3+3                   ; comterm mode 29, screen mode 7
        DEFB    8*2+4                   ; comterm mode 30, screen mode 6
        DEFB    8*2+5                   ; comterm mode 31, screen mode 6

I$488B: DEFB    2,0			; screen mode 2
        DEFB    0,1			; screen mode 5
        DEFB    1,2			; screen mode 6
        DEFB    0,3			; screen mode 7

; screensize: number of lines, number of characters per line

I$4893:	DEFB    24,40			; screen mode 2, non interlace, ANK
        DEFB    26,40			; screen mode 5, non interlace, ANK
        DEFB    26,80			; screen mode 6, non interlace, ANK
        DEFB    26,80			; screen mode 7, non interlace, ANK
        DEFB    24,32			; screen mode 2, interlace, ANK
        DEFB    26,32			; screen mode 5, interlace, ANK
        DEFB    26,64			; screen mode 6, interlace, ANK
        DEFB    26,64			; screen mode 7, interlace, ANK
        DEFB    12,32
        DEFB    13,32
        DEFB    13,64
        DEFB    13,64
        DEFB    24,32
        DEFB    26,32
        DEFB    26,64
        DEFB    26,64
        DEFB    12,40
        DEFB    13,40
        DEFB    13,80
        DEFB    13,80
        DEFB    24,40
        DEFB    26,40
        DEFB    26,80
        DEFB    26,80
        DEFB    12,40
        DEFB    15,40
        DEFB    15,80
        DEFB    15,80
        DEFB    12,40
        DEFB    26,40
        DEFB    26,80
        DEFB    26,80
        DEFB    12,40
        DEFB    16,40
        DEFB    16,80
        DEFB    16,80
        DEFB    12,40
        DEFB    30,40
        DEFB    30,80
        DEFB    30,80

; character size

I$48C3:	DEFB    6,8			; 6*8, non interlaced
        DEFB    8,8			; 8*8, non interlaced
        DEFB    8,16			; 8*16, interlaced
        DEFB    8,8			; 8*8, non interlaced
        DEFB    6,16			; 6*16, interlaced
        DEFB    6,8			; 6*8, non interlaced
        DEFB    6,14			; 6*14, interlaced
        DEFB    6,8			; 6*8, non interlaced
        DEFB    6,13			; 6*13, interlaced
        DEFB    6,7			; 6*7, non interlaced

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$48CF:	LD	HL,I$48F7
J$48D2:	LD	B,4
	LD	A,(D.61A5)
	DEC	A			; screen mode 6 ?
	RET	NZ			; nope, quit
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	C,J$48E3		; yep,
	LD	HL,I$48FF
J$48E3:	SLA	B			; B=8
	PUSH	BC
	LD	BC,0*256+10
	CALL	C.5133			; write VDP register
	EI
	POP	BC
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,2
	LD	C,A			; VDP pallette port
	OTIR
	RET

I$48F7:	DEFB	0,0
	LD	D,L
	DEC	B
	DEFB	0,0
	LD	(HL),A
	RLCA

I$48FF:	LD	(HL),A
	RLCA
	LD	B,H
	INC	B
	LD	(D$0002),HL
	NOP

;	  Subroutine turn off character attributes
;	     Inputs  ________________________
;	     Outputs ________________________

C.4907:	XOR	A
	LD	(D.619F),A		; no attributes enabled
	LD	HL,(FORCLR)
	LD	A,L
	CALL	C.4922			; translate color
	LD	L,A
	LD	A,H
	CALL	C.4922			; translate color
	LD	H,A
	LD	(D.61A0),HL		; update current foreground and background color
	CALL	C.4958
	LD	(D.61AC),A		; background color
	RET

;	  Subroutine translate color
;	     Inputs  ________________________
;	     Outputs ________________________

C.4922:	AND	0FH
	PUSH	HL
	LD	HL,I$4931
	ADD	A,L
	LD	L,A
	LD	A,0
	ADC	A,H
	LD	H,A
	LD	A,(HL)
	POP	HL
	RET

I$4931:	DEFB	8,0,2,10,4,12,13,6,1,9,3,11,14,5,15,7

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4941:	LD	A,(D.619F)
	LD	HL,(D.61A0)		; current foreground and background color
	BIT	1,A			; bold on ?
	JR	Z,J$4951		; nope,
	LD	D,A			; store attribute
	LD	A,L
	XOR	08H
	LD	L,A
	LD	A,D			; restore attribute
J$4951:	BIT	7,A			; reverse video on ?
	JR	Z,C.4958		; nope,
	LD	A,L
	LD	L,H
	LD	H,A			; swap fore and background color

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4958:	LD	A,(D.61A5)
	LD	BC,I$49CD
	DEC	A			; screen mode 6 ?
	JR	NZ,J.496E		; nope,
	LD	BC,I$49BD
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	C,J.496E		; yep,
	LD	BC,I$49DD
J.496E:	LD	E,H
	LD	H,0
	LD	D,H
	ADD	HL,BC
	LD	L,(HL)
	EX	DE,HL
	ADD	HL,BC
	LD	D,(HL)
	EX	DE,HL
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	C,J$4993		; yep,
	LD	A,L
	CP	H
	LD	HL,D.619F
	JR	NZ,J$4988
	SET	6,(HL)			; hidden on
J$4988:	JR	NC,J$498E
	SET	7,(HL)			; reverse video on
	JR	J$4990

J$498E:	RES	7,(HL)			; reverse video off
J$4990:	LD	HL,1
J$4993:	LD	A,H
	XOR	L
	LD	(D.61AB),A
	LD	A,(D.619F)		; useless
	LD	(D.61A9),HL		; update character foreground and background color
	LD	A,(SCRMOD)
	CP	02H
	JR	NZ,J$49AC
	LD	A,L
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	OR	H
	RET

J$49AC:	CP	06H
	LD	A,H
	JR	NZ,J$49B5
	ADD	A,A
	ADD	A,A
	OR	H
	LD	H,A
J$49B5:	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	OR	H
	LD	H,A
	LD	A,H
	RET

I$49BD:	DEFB	0
	DEFB	0
	DEFB	0
	DEFB	1
	DEFB	0
	DEFB	1
	DEFB	1
	DEFB	1
	DEFB	2
	DEFB	2
	DEFB	2
	DEFB	3
	DEFB	2
	DEFB	3
	DEFB	3
	DEFB	3

I$49CD:	DEFB	1
	DEFB	8
	DEFB	2
	DEFB	10
	DEFB	4
	DEFB	13
	DEFB	7
	DEFB	15
	DEFB	0
	DEFB	9
	DEFB	3
	DEFB	11
	DEFB	5
	DEFB	6
	DEFB	12
	DEFB	14

I$49DD:	DEFB	0
	DEFB	4
	DEFB	8
	DEFB	12
	DEFB	2
	DEFB	6
	DEFB	10
	DEFB	14
	DEFB	1
	DEFB	5
	DEFB	9
	DEFB	13
	DEFB	3
	DEFB	7
	DEFB	11
	DEFB	15

;	  Subroutine beep
;	     Inputs  ________________________
;	     Outputs ________________________

J$49ED:	LD	IX,BEEP
	LD	IY,(EXPTBL+0-1)
	JP	CALSLT

;	  Subroutine __________________________
;	     Inputs  L = character code
;	     Outputs ________________________

C$49F8:	LD	A,(D.61A6)		; character mode and interlace
	CP	02H			; ANK character mode ?
	JR	NC,J$4A17		; nope,
	CALL	C.4CE1			; read system character pattern
	CALL	C$4D11
	EI
	LD	HL,(GRPACX)
	LD	BC,(D.61AD)		; character size, number of horizontal pixels
	LD	B,0
	ADD	HL,BC
	LD	(GRPACX),HL
	CALL	C.5069			; normal size character at current position
	RET

J$4A17:	LD	A,L
	CP	20H			; control code ?
	JR	C,J.4A28		; yep,
	CP	80H			; shift-JIS header ?
	JR	C,J.4A3D		; nope,
	CP	0A0H			; shift-JIS header ?
	JR	C,J.4A28		; yep,
	CP	0E0H			; shift-JIS header ?
	JR	C,J.4A3D		; nope,
J.4A28:	CALL	C.4CE1			; read system character pattern
	LD	HL,PATWRK
	LD	DE,I.62B8
	LD	B,8
J$4A33:	LD	A,(HL)
	INC	HL
	LD	(DE),A
	INC	DE
	LD	(DE),A
	INC	DE
	DJNZ	J$4A33
	JR	J$4A4A

J.4A3D:	LD	BC,-32
	RLCA
	JR	NC,J$4A46
	LD	BC,02C0H
J$4A46:	ADD	HL,BC
	CALL	C.4AAE			; read JIS ROM character pattern
J$4A4A:	LD	DE,(GRPACY)
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	NC,J$4A5A		; nope,
	CALL	C.4AFB
	JR	J$4A69			; normal size character at current position

J$4A5A:	PUSH	DE
	LD	HL,I.62B8
	LD	B,16
	LD	C,6
	CALL	C.4B37
	POP	HL
	LD	(GRPACY),HL
J$4A69:	JP	C.5069			; normal size character at current position

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A6C:	LD	DE,0DFE0H
	ADD	HL,DE
	PUSH	HL
	LD	L,H
	LD	H,00H
	LD	E,L
	LD	D,H
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	EX	DE,HL
	POP	HL
	LD	H,00H
	ADD	HL,DE
	LD	A,H
	CP	04H	; 4 
	JR	C,J$4A89
	DEC	H
	DEC	H
J$4A89:	CALL	C.4AAE			; read JIS ROM character pattern
	LD	DE,(GRPACY)
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	NC,J$4A9C		; nope,
	CALL	C$4AEB
	JR	J$4AAB			; double size character at current position

J$4A9C:	PUSH	DE
	LD	HL,I.62B8
	LD	B,16
	LD	C,12
	CALL	C.4B37
	POP	HL
	LD	(GRPACY),HL
J$4AAB:	JP	J$505F			; double size character at current position

;	  Subroutine read JIS ROM character pattern
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AAE:	LD	A,L
	ADD	HL,HL
	ADD	HL,HL
	LD	L,A
	LD	C,0D9H			; JIS1 I/O port
	BIT	6,H
	JR	Z,J$4ABA
	INC	C
	INC	C			; JIS2 I/O port
J$4ABA:	OUT	(C),H
	DEC	C
	OUT	(C),L
	INC	C
	LD	HL,I.62B8
	LD	B,8
	INIR
	LD	HL,I.62C8
	LD	B,8
	INIR
	LD	HL,I.62C0
	LD	B,8
	INIR
	LD	HL,I.62D0
	LD	B,8
	INIR
	LD	A,(D.619F)
	BIT	4,A			; underline on ?
	RET	Z			; nope, quit
	LD	A,0FFH
	LD	(I.62C0+7),A
	LD	(I.62D0+7),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4AEB:	CALL	C.4AFB
	PUSH	DE
	LD	HL,I.62C8
	LD	DE,I.62B8
	LD	BC,16
	LDIR
	POP	DE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AFB:	PUSH	DE
	LD	HL,I.62B8
	LD	DE,PATWRK
	LD	BC,8
	LDIR
	CALL	C.4C13
	CALL	C.50BB			; interlace mode ?
	LD	HL,4
	JR	Z,J$4B13		; yep,
	ADD	HL,HL
J$4B13:	POP	DE
	PUSH	DE
	ADD	HL,DE
	LD	(GRPACY),HL
	LD	HL,I.62C0
	LD	DE,PATWRK
	LD	BC,8
	LDIR
	CALL	C.4C13
	POP	DE
	LD	(GRPACY),DE
	LD	BC,8
	LD	HL,(GRPACX)
	ADD	HL,BC
	LD	(GRPACX),HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B37:	CALL	C.50BB			; interlace mode ?
	JR	NZ,J.4B3E		; nope,
	SRL	B
J.4B3E:	CALL	C.4B59
	CALL	C.50BB			; interlace mode ?
	JR	NZ,J$4B4D		; nope,
	INC	HL
	CALL	C.4F7E			; select display page 1
	CALL	C.4B59
J$4B4D:	INC	HL
	INC	DE
	DJNZ	J.4B3E			; next line
	LD	HL,(GRPACX)
	ADD	HL,BC
	LD	(GRPACX),HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B59:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	(GRPACY),DE
	CALL	C$4BA6
	POP	BC
	PUSH	BC
	LD	H,1			; NY = 1
	LD	L,C			; NX
	LD	D,C
	LD	A,(D.619F)
	BIT	7,A			; reverse video on ?
	LD	E,0
	JR	Z,J$4B73		; nope,
	DEC	E
J$4B73:	PUSH	DE
	LD	C,0B0H			; vdp command = LMMC
	LD	A,(PATWRK+0)
	XOR	E
	RLCA
	RLCA
	PUSH	AF
	CALL	C.4CBF
	LD	BC,256*(128+44)+17	; no increment, CL
	CALL	C.5133			; write VDP register
	EI
	LD	HL,PATWRK+1
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3
	LD	C,A			; VDP command port
	POP	AF
	POP	DE
	LD	B,3
J$4B94:	RLCA
	RLCA
	OUT	(C),A
	DJNZ	J$4B9F
	LD	A,(HL)
	XOR	E
	INC	HL
	LD	B,4
J$4B9F:	DEC	D
	JR	NZ,J$4B94
	POP	BC
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4BA6:	LD	A,(HL)
	LD	BC,16
	ADD	HL,BC
	LD	L,(HL)
	LD	H,A
	LD	DE,PATWRK
	LD	A,H
	PUSH	HL
	RRCA
	RRCA
	RRCA
	AND	1FH
	CALL	C.4BC9
	POP	HL
	ADD	HL,HL
	PUSH	HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,H
	AND	3FH	; "?"
	CALL	C.4BC9
	POP	HL
	LD	A,L
	AND	3EH	; ">"

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BC9:	LD	HL,I$4BD3
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	LDI
	RET

I$4BD3:	NOP
	INC	BC
	EX	AF,AF'
	DEC	BC
	EX	AF,AF'
	DEC	BC
	INC	C
	RRCA
	JR	NC,J$4C10
	JR	C,J$4C1A
	JR	C,J$4C1C
	INC	A
	CCF
	ADD	A,B
	ADD	A,E
	ADC	A,B
	ADC	A,E
	ADC	A,B
	ADC	A,E
	ADC	A,H
	ADC	A,A
	OR	B
	OR	E
	CP	B
	CP	E
	CP	B
	CP	E
	CP	H
	CP	A
	ADD	A,B
	ADD	A,E
	ADC	A,B
	ADC	A,E
	ADC	A,B
	ADC	A,E
	ADC	A,H
	ADC	A,A
	OR	B
	OR	E
	CP	B
	CP	E
	CP	B
	CP	E
	CP	H
	CP	A
	RET	NZ
	JP	J$CBC8

?.4C07:	RET	Z
	SET	1,H
	RST	08H
	RET	P
	DI
	RET	M
	EI
	RET	M
J$4C10:	EI
	CALL	M,xxxx

C.4C13:	LD	C,0B0			; vdp command = LMMC
	CALL	C.515A			; screen mode 2 ?
	JP	Z,J$4CD6		; yep,
	LD	HL,PATWRK
	LD	DE,(D.61A9)		; character foreground and background color
	RL	(HL)			; get bit
	LD	A,E			; character foreground color
	JR	C,J$4C28		; bit set,
	LD	A,D			; character background color
J$4C28:	LD	D,A
	CALL	C.50BB			; interlace mode ?
	LD	A,D
	LD	HL,8*256+8		; NY = 8, NX = 8
	JR	NZ,J$4C35		; nope,
	LD	HL,4*256+8		; NY = 4, NX = 4
J$4C35:	CALL	C.4CBF
	LD	BC,256*(128+44)+17	; no increment, CL
	CALL	C.5133			; write VDP register
	EI
	LD	HL,PATWRK
	LD	DE,(D.61A9)		; character foreground and background color
	CALL	C.50BB			; interlace mode ?
	JR	NZ,J$4C4F		; nope,
	LD	C,4
	JR	J$4C51

J$4C4F:	LD	C,8
J$4C51:	LD	B,7
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3			; VDP command port
J$4C58:	PUSH	BC
	LD	C,A
J$4C5A:	RL	(HL)			; bit set ?
	JR	C,J$4C62		; yep,
	OUT	(C),D
	JR	J$4C64

J$4C62:	OUT	(C),E
J$4C64:	DJNZ	J$4C5A
	POP	BC
	INC	HL
	PUSH	AF
	CALL	C.50BB			; interlace mode ?
	JR	NZ,J$4C6F		; nope,
	INC	HL
J$4C6F:	POP	AF
	LD	B,8
	DEC	C
	JR	NZ,J$4C58
	CALL	C.50BB			; interlace mode ?
	RET	NZ			; nope, quit
	CALL	C.4F7E			; select display page 1
	LD	C,0B0H			; vdp command = LMMC
	LD	HL,PATWRK+1
	LD	DE,(D.61A9)		; character foreground and background color
	RL	(HL)			; get bit
	LD	A,E
	JR	C,J$4C8B		; bit set,
	LD	A,D
J$4C8B:	LD	HL,4*256+8		; NY = 4, NX = 8
	CALL	C.4CBF
	LD	BC,256*(128+44)+17	; no increment, CL
	CALL	C.5133			; write VDP register
	EI
	LD	HL,PATWRK+1
	LD	DE,(D.61A9)		; character foreground and background color
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3			; VDP command port
	LD	BC,8*256+4
	DEC	B
J$4CA8:	PUSH	BC
	LD	C,A
J$4CAA:	RL	(HL)			; get bit
	JR	C,J$4CB2		; bit set,
	OUT	(C),D
	JR	J$4CB4

J$4CB2:	OUT	(C),E
J$4CB4:	DJNZ	J$4CAA
	POP	BC
	INC	HL
	INC	HL
	LD	B,8
	DEC	C
	JR	NZ,J$4CA8
	RET

;	  Subroutine __________________________
;	     Inputs  H = NY, L = NX, A = color, C = VDP cmd
;	     Outputs ________________________

C.4CBF:	PUSH	BC
	LD	E,A			; CL
	LD	D,0			; command flags
	PUSH	DE
	LD	E,H
	PUSH	DE			; NY
	LD	E,L
	PUSH	DE			; NX
	LD	HL,(GRPACY)
	CALL	C.50C4			; add display page
	PUSH	HL			; DY
	LD	HL,(GRPACX)
	PUSH	HL			; DX
	JP	J.50E4			; write graphic vdp command (without SX,SY)

J$4CD6:	PUSH	BC
	LD	E,A
	LD	D,0
	PUSH	DE
	LD	HL,8
	JP	J$4D65

;	  Subroutine read system character pattern
;	     Inputs  L = character code
;	     Outputs ________________________

C.4CE1:	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL			; *8
	EX	DE,HL
	LD	HL,(CGPNT+1)
	ADD	HL,DE
	LD	DE,PATWRK
	LD	B,8

; fix for BIOS bug, slotid is wrong when slot 0 is expanded

	LD	A,(CGPNT+0)
	OR	A			; slot 0 ?
	JR	NZ,J.4CF7		; nope, use slotid
	LD	A,(EXPTBL+0)		; make sure it is the slotid of the main rom

; end fix

J.4CF7:	PUSH	AF
	PUSH	BC
	PUSH	DE
	CALL	RDSLT
	EI
	POP	DE
	LD	(DE),A
	INC	DE
	INC	HL
	POP	BC
	POP	AF
	DJNZ	J.4CF7
	LD	A,(D.619F)
	BIT	4,A			; underline on ?
	RET	Z			; nope, quit
	DEC	DE
	LD	A,0FFH
	LD	(DE),A			; underline
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4D11:	LD	C,0B0H			; vdp command = LMMC
	CALL	C.515A			; screen mode 2 ?
	JR	Z,C.4D5D		; yep,
	LD	HL,PATWRK
	LD	DE,(D.61A9)		; character foreground and background color
	RL	(HL)			; get bit
	LD	A,E
	JR	C,J$4D25		; bit set,
	LD	A,D
J$4D25:	CALL	C.4D5D
	LD	BC,256*(128+44)+17	; no increment, CL
	CALL	C.5133			; write VDP register
	EI
	LD	HL,PATWRK
	LD	DE,(D.61A9)		; character foreground and background color
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3			; VDP command port
	LD	IX,D.61AD
	LD	B,(IX+0)		; character size, number of horizontal pixels
	LD	C,(IX+1)
	DEC	B
J$4D46:	PUSH	BC
	LD	C,A
J$4D48:	RL	(HL)			; get bit
	JR	C,J$4D50		; bit set,
	OUT	(C),D
	JR	J$4D52

J$4D50:	OUT	(C),E
J$4D52:	DJNZ	J$4D48
	POP	BC
	INC	HL
	LD	B,(IX+0)
	DEC	C
	JR	NZ,J$4D46
	RET

;	  Subroutine __________________________
;	     Inputs  A = CL, C = VDP cmd
;	     Outputs ________________________

C.4D5D:	PUSH	BC
	LD	E,A			; CL
	LD	D,0			; command flags
	PUSH	DE
	LD	HL,(D.61AE)		; character size, number of vertical pixels
J$4D65:	LD	H,D
	PUSH	HL			; NY
	LD	HL,(D.61AD)		; character size, number of horizontal pixels
	LD	H,D
	PUSH	HL			; NX
	LD	HL,(GRPACY)
	PUSH	HL			; DY
	LD	HL,(GRPACX)
	PUSH	HL			; DX
	JP	J.50E4			; write graphic vdp command (without SX,SY)

;	  Subroutine inverse video on character if enabled
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D77:	LD	A,(D.619E)
	AND	01H			; inverse video ?
	RET	NZ			; yep, quit
	LD	C,83H			; vdp command = LMMV + XOR
	LD	A,(D.61AB)		; CL
	PUSH	BC
	PUSH	AF
	CALL	C$4D92
	POP	AF
	POP	BC
	LD	D,A			; store CL
	CALL	C.50BB			; interlace mode ?
	LD	A,D			; restore CL
	RET	NZ			; nope, quit
	CALL	C.4F7E			; select display page 1

;	  Subroutine __________________________
;	     Inputs  A = CL, C = VDP cmd
;	     Outputs ________________________

C$4D92:	PUSH	BC
	LD	E,A			; CL
	LD	D,0			; command flags
	PUSH	DE
	LD	HL,(D.61AE)		; character size, number of vertical pixels
	LD	H,D
	PUSH	HL			; NY
	CALL	C$5053			; get character size at current position
	PUSH	HL			; NX
	LD	HL,(GRPACY)
	CALL	C.50C4			; add display page
	PUSH	HL			; DY
	LD	HL,(GRPACX)
	PUSH	HL			; DX
	JP	J.50E4			; write graphic vdp command (without SX,SY)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4DAE:	LD	D,A
	CALL	C$4DB5
	JP	J.5040			; clear double size character table of current line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4DB5:	CALL	C.515A			; screen mode 2 ?
	LD	A,0
	LD	B,D
	JP	Z,C.4E73		; yep,
	CALL	C$5006
	XOR	A
	LD	E,A
	SUB	D
J$4DC4:	CP	E
	JR	Z,J$4DCD
	CALL	C.4EDD
	INC	A
	JR	J$4DC4

J$4DCD:	PUSH	DE
	LD	HL,D.61A2
	LD	A,(CNSDFG)
	ADD	A,(HL)			; screen size, number of lines
	LD	E,A			; number of usable lines
	SUB	D
	LD	D,A
	LD	A,(HL)
	CALL	C$4E61
	POP	DE
	LD	A,D
	CALL	C.4FD6			; convert line to pixel line
	LD	A,L
	NEG
	LD	L,A
	JP	C.50C9			; scroll vertical

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DE8:	LD	D,A
	CALL	C$4DEF
	JP	J.5040			; clear double size character table of current line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4DEF:	CALL	C.515A			; screen mode 2 ?
	LD	A,0
	LD	B,D
	JR	Z,C.4E42		; yep,
	CALL	C$4FFB
	LD	BC,(D.61A2)		; screen size, number of lines
	DEC	C
	LD	B,0
	LD	A,(CNSDFG)
	OR	A			; function key display on ?
	JR	NZ,J$4E1F		; yep,
	LD	A,(D.61A2)		; screen size, number of lines
	LD	C,A
	ADD	A,D
	LD	E,A
	INC	E
	LD	A,C
J$4E0F:	CP	E
	JR	Z,J$4E18
	CALL	C.4EDD
	INC	A
	JR	J$4E0F

J$4E18:	LD	A,D
	CALL	C.4FD6			; convert line to pixel line
	JP	C.50C9			; scroll vertical

J$4E1F:	LD	A,(D.61A2)		; screen size, number of lines
	LD	E,A
	DEC	E
	INC	A
	CALL	C.4EDD
	INC	A
	LD	D,A
	CALL	C.4E98
	LD	A,E
	CALL	C.4EDD
	LD	A,1			; 1 line
	CALL	C.4FD6			; convert line to pixel line
	CALL	C.50C9			; scroll vertical
	LD	A,(D.61A2)		; screen size, number of lines
	LD	D,A
	DEC	D
	LD	E,A
	INC	E
	JR	C.4E98

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E42:	LD	D,A
	ADD	A,B
	JR	NC,J$4E47
	SBC	A,A
J$4E47:	LD	E,A
	LD	HL,D.61A2
	LD	A,(CNSDFG)
	ADD	A,(HL)			; screen size, number of lines
	CP	E
	JR	NC,J$4E53
	LD	E,A
J$4E53:	SUB	E
	JR	Z,J$4E5E
	LD	B,A
J$4E57:	CALL	C.4E98
	INC	D
	INC	E
	DJNZ	J$4E57
J$4E5E:	LD	A,D
	JR	C.4ED2			; clear lines

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4E61:	CP	E
	JR	NC,J$4E65
	LD	E,A
J$4E65:	SUB	E
	JR	Z,J$4E70
	LD	B,A
J$4E69:	CALL	C.4E98
	INC	D
	INC	E
	DJNZ	J$4E69
J$4E70:	LD	A,D
	JR	C.4EDD

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E73:	LD	E,A
	ADD	A,B
	JR	NC,J$4E78
	SBC	A,A
J$4E78:	LD	D,A
	LD	HL,D.61A2
	LD	A,(CNSDFG)
	ADD	A,(HL)			; screen size, number of lines
	CP	D
	JR	NC,J$4E84
	LD	D,A
J$4E84:	SUB	D
	JR	Z,J$4E94
	LD	B,A
	ADD	A,D
	LD	D,A
	LD	A,E
	ADD	A,B
	LD	E,A
J$4E8D:	DEC	D
	DEC	E
	CALL	C.4E98
	DJNZ	J$4E8D
J$4E94:	LD	A,E
	LD	E,D
	JR	C.4ED2			; clear lines

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E98:	PUSH	DE
	PUSH	BC
	CALL	C$5011
	CALL	C.4EB3			; copy VRAM to VRAM
	POP	BC
	POP	DE
	LD	L,A
	CALL	C.50BB			; interlace mode ?
	LD	A,L
	RET	NZ			; nope, quit
	PUSH	DE
	PUSH	BC
	CALL	C.4F7E			; select display page 1
	CALL	C.4EB3			; copy VRAM to VRAM
	POP	BC
	POP	DE
	RET

;	  Subroutine copy VRAM to VRAM
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EB3:	LD	C,0E0H			; vdp command = YMMM
	PUSH	BC
	LD	BC,0			; CL = 0, command flags
	PUSH	BC
	LD	HL,(D.61AE)		; character size, number of vertical pixels
	LD	H,B
	PUSH	HL			; NY
	CALL	C.4F12			; get horizontal screen size, in pixels
	PUSH	HL			; NX
	LD	A,D			; destination line
	CALL	C.4FC3			; convert line to pixel line (scroll)
	PUSH	HL			; DY
	PUSH	BC			; DX
	LD	A,E			; source line
	CALL	C.4FC3			; convert line to pixel line (scroll)
	PUSH	HL			; SY
	PUSH	BC			; SX
	JP	J$50DF			; write graphic vdp command (with SX,SY)

;	  Subroutine clear lines
;	     Inputs  A = start line, E = end line
;	     Outputs ________________________

C.4ED2:	CP	E			; current line = end line ?
	RET	Z			; yep, quit
	CALL	C$5037			; clear double size character table of line (save)
	CALL	C.4EDD
	INC	A			; update current line
	JR	C.4ED2			; next line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EDD:	PUSH	AF
	PUSH	DE
	CALL	C.4EF5			; clear line
	POP	DE
	POP	AF
	LD	C,A
	CALL	C.50BB			; interlace mode ?
	LD	A,C
	RET	NZ			; nope, quit
	PUSH	AF
	PUSH	DE
	CALL	C.4F7E			; select display page 1
	CALL	C.4EF5			; clear line
	POP	DE
	POP	AF
	RET

;	  Subroutine clear line
;	     Inputs  A = line
;	     Outputs ________________________

C.4EF5:	LD	C,0C0H			; vdp command = HMMV
	PUSH	BC
	LD	BC,(D.61AC)		; background color
	LD	B,0
	PUSH	BC
	LD	HL,(D.61AE)		; character size, number of vertical pixels
	LD	H,B
	PUSH	HL			; NY
	CALL	C.4F12			; get horizontal screen size, in pixels
	PUSH	HL			; NX
	CALL	C.4FC3			; convert line to pixel line (scroll)
	PUSH	HL			; DY
	LD	C,0
	PUSH	BC			; DX = 0
	JP	J.50E4			; write graphic vdp command (without SX,SY)

;	  Subroutine get horizontal screen size, in pixels
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F12:	LD	HL,256
	PUSH	AF
	LD	A,(SCRMOD)
	AND	06H
	CP	06H
	JR	NZ,J$4F20
	ADD	HL,HL
J$4F20:	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F22:	PUSH	DE
	PUSH	AF
	CALL	C$4F32
	POP	AF
	POP	DE
	LD	C,A
	CALL	C.50BB			; interlace mode ?
	LD	A,C
	RET	NZ			; nope, quit
	CALL	C.4F7E			; select display page 1

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F32:	LD	C,83H			; vdp command = LMMV + XOR
	PUSH	BC
	LD	HL,(D.61AB)		; CL
	JR	J$4F64

J$4F3A:	PUSH	AF
	LD	L,A
	LD	H,E
	CALL	C.5083			; calculate double size character bit mask and pointer
	CPL
	LD	C,A
	LD	B,D
J$4F43:	LD	A,(HL)
	AND	C			; clear bit
	LD	(HL),A
	RLC	C			; update bitmask
	JR	C,J$4F4B
	INC	HL
J$4F4B:	DJNZ	J$4F43
	POP	AF
	PUSH	DE
	PUSH	AF
	CALL	C$4F5E			; clear part of line
	POP	AF
	POP	DE
	LD	C,A
	CALL	C.50BB			; interlace mode ?
	LD	A,C
	RET	NZ			; nope, quit
	CALL	C.4F7E			; select display page 1

;	  Subroutine clear part of line
;	     Inputs  E = start column, D = number of column, A = line
;	     Outputs ________________________

C$4F5E:	LD	C,0C0H			; vdp command = HMMV
	PUSH	BC
	LD	HL,(D.61AC)		; background color
J$4F64:	LD	H,0			; command flags
	PUSH	HL
	LD	HL,(D.61AE)		; character size, number of vertical pixels
	LD	H,0
	PUSH	HL			; NY
	LD	L,D			; number of columns
	CALL	C.4FAB			; convert column to pixels
	PUSH	HL			; NX
	CALL	C.4FC3			; convert line to pixel line (scroll)
	PUSH	HL			; DY
	EX	DE,HL			; start column
	CALL	C.4F9E			; convert column to pixel column (with offset)
	PUSH	HL			; DX
	JP	J.50E4			; write graphic vdp command (without SX,SY)

;	  Subroutine select display page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F7E:	PUSH	AF
	LD	A,1
	LD	(DPPAGE),A
	POP	AF
	RET

;	  Subroutine update GRPAC with current cursor position (with offset)
;	     Inputs  ________________________
;	     Outputs ________________________

J$4F86:	PUSH	HL			; store cursor position
	CALL	C.5083			; calculate double size character bit mask and pointer
	CALL	C.5075			; store bitmask and pointer
	POP	HL			; restore cursor position
	LD	E,H			; column
	LD	A,L			; line
	CALL	C.4FC3			; convert line to pixel line (scroll)
	LD	(GRPACY),HL
	EX	DE,HL
	CALL	C.4F9E			; convert column to pixel column (with offset)
	LD	(GRPACX),HL
	RET

;	  Subroutine convert column to pixel column (with offset)
;	     Inputs  L = column
;	     Outputs ________________________

C.4F9E:	CALL	C.4FAB			; convert column to pixels
	PUSH	DE
	LD	DE,(D.61A7)		; start of line pixel offset
	LD	D,0
	ADD	HL,DE
	POP	DE
	RET

;	  Subroutine convert column to pixels
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FAB:	PUSH	AF
	LD	H,0
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; ANK or MSX character mode ?
	JR	NC,J$4FB8		; nope, *6
	OR	A			; ANK character mode without interlace ?
	JR	NZ,J$4FBE		; nope, *8
J$4FB8:	LD	A,L
	ADD	A,A			; *2
	ADD	A,L			; *3
	LD	L,A
	JR	J$4FC0			; *6

J$4FBE:	ADD	HL,HL
	ADD	HL,HL
J$4FC0:	ADD	HL,HL
	POP	AF
	RET

;	  Subroutine convert line to pixel line (scroll)
;	     Inputs  A = line
;	     Outputs ________________________

C.4FC3:	PUSH	AF
	CALL	C.4FD6			; convert line to pixel line
	CALL	C.515A			; screen mode 2 ?
	JR	Z,J$4FD4		; yep, skip scroll adjust
	LD	A,(RG23SAV)
	ADD	A,L
	LD	L,A
	CALL	C.50C4			; add display page
J$4FD4:	POP	AF
	RET

;	  Subroutine convert line to pixel line
;	     Inputs  A = line
;	     Outputs HL = pixel line

C.4FD6:	LD	L,A
	LD	H,0
	LD	A,(D.61A6)		; character mode and interlace
	CP	04H			; chinese character mode ?
	JR	Z,J$4FE4		; yep, *16
	CP	02H			; MSX character mode ?
	JR	NZ,J$4FE5		; nope, *8
J$4FE4:	ADD	HL,HL
J$4FE5:	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4FE9:	XOR	A
	LD	(D.61AF),A
	LD	HL,I.61B3
	LD	DE,I.61B3+1
	LD	BC,26*(80/8)-1
	LD	(HL),0
	LDIR
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4FFB:	LD	HL,D.61AF
	LD	A,(HL)
	ADD	A,D
	LD	(HL),A
	SUB	26
	RET	C
	LD	(HL),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5006:	LD	HL,D.61AF
	LD	A,(HL)
	SUB	D
	LD	(HL),A
	ADD	A,26
	RET	NC
	LD	(HL),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5011:	PUSH	BC
	PUSH	DE
	LD	HL,D.61A2
	LD	A,(CNSDFG)
	ADD	A,(HL)			; screen size, number of lines
	DEC	A
	CP	D
	JR	C,J.5034
	CP	E
	JR	C,J.5034
	LD	H,0			; column = 0
	LD	L,D			; line
	CALL	C.5083			; calculate double size character bit mask and pointer
	PUSH	HL
	LD	H,0			; column = 0
	LD	L,E			; line
	CALL	C.5083			; calculate double size character bit mask and pointer
	POP	DE
	LD	BC,10
	LDIR
J.5034:	POP	DE
	POP	BC
	RET

;	  Subroutine clear double size character table of line (save)
;	     Inputs  A = line
;	     Outputs ________________________

C$5037:	PUSH	DE
	PUSH	AF
	LD	L,A			; line
	CALL	C$5043			; clear double size character table of line
	POP	AF
	POP	DE
	RET

;	  Subroutine clear double size character table of current line
;	     Inputs  L = line
;	     Outputs ________________________

J.5040:	LD	HL,(CSRY)		; cursor position

;	  Subroutine clear double size character table of line
;	     Inputs  L = line
;	     Outputs ________________________

C$5043:	LD	H,0			; column = 0
	CALL	C.5083			; calculate double size character bit mask and pointer
	LD	(HL),0
	LD	D,H
	LD	E,L
	INC	DE
	LD	BC,10-1
	LDIR
	RET

;	  Subroutine get character size at current position
;	     Inputs  ________________________
;	     Outputs ________________________

C$5053:	CALL	C.507C			; restore bitmask and pointer
	AND	(HL)
	LD	HL,(D.61AD)		; character size, number of horizontal pixels
	LD	H,0
	RET	Z			; bit reset, quit
	ADD	HL,HL
	RET

;	  Subroutine double size character at current position
;	     Inputs  ________________________
;	     Outputs ________________________

J$505F:	CALL	C.507C			; restore bitmask and pointer
	LD	E,A			; store bitmask
	OR	(HL)
	LD	(HL),A			; set bit
	LD	A,E			; restore bit mask
	CALL	C$5071			; next bit, store bitmask and pointer

;	  Subroutine normal size character at current position
;	     Inputs  ________________________
;	     Outputs ________________________

C.5069:	CALL	C.507C			; restore bitmask and pointer
	LD	E,A			; store bitmask
	CPL
	AND	(HL)
	LD	(HL),A			; reset bit
	LD	A,E			; restore bitmask

;	  Subroutine next bit, store bitmask and pointer
;	     Inputs  ________________________
;	     Outputs ________________________

C$5071:	RLCA
	JR	NC,C.5075
	INC	HL

;	  Subroutine store bitmask and pointer
;	     Inputs  ________________________
;	     Outputs ________________________

C.5075:	LD	(D.61B0),A
	LD	(D.61B1),HL
	RET

;	  Subroutine restore bitmask and pointer
;	     Inputs  ________________________
;	     Outputs ________________________

C.507C:	LD	A,(D.61B0)
	LD	HL,(D.61B1)
	RET

;	  Subroutine calculate double size character bit mask and pointer
;	     Inputs  H = line, L = column
;	     Outputs ________________________

C.5083:	PUSH	BC
	PUSH	DE
	EX	DE,HL
	LD	A,D
	PUSH	AF			; store line
	AND	07H
	LD	C,A
	LD	B,0
	LD	HL,I$50B3
	ADD	HL,BC
	LD	D,(HL)			; bit mask
	POP	AF			; restore line
	XOR	C
	RRCA
	RRCA
	RRCA
	LD	C,A
	LD	A,(D.61AF)
	ADD	A,E			; + column
	CP	26
	JR	C,J$50A2
	SUB	26
J$50A2:	LD	E,A
	ADD	A,A			; *2
	ADD	A,A			; *4
	ADD	A,E			; *5
	ADD	A,A			; *10
	ADD	A,C
	LD	C,A
	RL	B
	LD	HL,I.61B3		; double size character table
	ADD	HL,BC
	LD	A,D			; bitmask
	POP	DE
	POP	BC
	RET

I$50B3:	DEFB	01H
	DEFB	02H
	DEFB	04H
	DEFB	08H
	DEFB	10H
	DEFB	20H
	DEFB	40H
	DEFB	80H

;	  Subroutine interlace mode ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.50BB:	LD	A,(D.61A6)		; character mode and interlace
	CP	03H			; MSX character mode and interlace ?
	RET	Z
	CP	05H			; chinese character mode and interlace ?
	RET

;	  Subroutine add display page
;	     Inputs  ________________________
;	     Outputs ________________________

C.50C4:	LD	A,(DPPAGE)
	LD	H,A
	RET

;	  Subroutine scroll vertical
;	     Inputs  L = number of pixel lines
;	     Outputs ________________________

C.50C9:	CALL	C.5111			; wait for command ready
	LD	B,L
	LD	HL,GRPACY
	LD	A,(HL)
	ADD	A,B
	LD	(HL),A
	LD	A,(RG23SAV)
	ADD	A,B
	LD	B,A
	LD	C,23
	CALL	C.5133			; write VDP register
	EI
	RET

;	  Subroutine write graphic vdp command (with SX,SY)
;	     Inputs  ________________________
;	     Outputs ________________________

J$50DF:	LD	BC,32*256+15
	JR	J$50E7

;	  Subroutine write graphic vdp command (without SX,SY)
;	     Inputs  ________________________
;	     Outputs ________________________

J.50E4:	LD	BC,36*256+11
J$50E7:	CALL	C.515A			; screen mode 2 ?
	JR	Z,J$5160		; yep,
	LD	HL,0
	ADD	HL,SP
	CALL	C$50FA			; write vdp registers (when ready)
	INC	HL
	LD	SP,HL
	XOR	A
	LD	(DPPAGE),A		; select display page 0
	RET

;	  Subroutine write vdp registers (when ready)
;	     Inputs  ________________________
;	     Outputs ________________________

C$50FA:	PUSH	BC
	CALL	C.5111			; wait for command ready
	POP	BC
	PUSH	BC
	LD	C,17
	CALL	C.5133			; write VDP register
	EI
	POP	BC
	LD	B,C
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3
	LD	C,A			; VDP command port
	OTIR
	RET

;	  Subroutine wait for command ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.5111:	LD	BC,256*(128+15)+17	; no increment, RS
	CALL	C.5133			; write VDP register
	EI
	LD	A,(D.61A4)		; VDP data read port
	ADD	A,3
	LD	C,A			; VDP command port
J$511E:	DI
	LD	A,2
	OUT	(C),A			; select VDP status register 2
	DEC	C
	DEC	C
	IN	A,(C)
	PUSH	AF			; store VDP status register
	INC	C
	INC	C
	XOR	A
	OUT	(C),A			; select VDP status register 0
	EI
	POP	AF			; restore VDP status register
	RRCA                            ; command executing ?
	JR	C,J$511E		; yep, wait
	RET

;	  Subroutine write VDP register
;	     Inputs  ________________________
;	     Outputs ________________________

C.5133:	PUSH	AF
	PUSH	HL
	LD	L,C
	SET	7,L			; write VDP register
	LD	A,(D.61A4)		; VDP data read port
	LD	C,A
	INC	C			; VDP port
	DI
	OUT	(C),B
	OUT	(C),L
	LD	A,L
	LD	HL,RG0SAV-80H
	CP	88H
	JR	C,J$5151
	CP	98H
	JR	NC,J$5157
	LD	HL,RG8SAV-88H
J$5151:	LD	C,A
	LD	A,B
	LD	B,0
	ADD	HL,BC
	LD	(HL),A
J$5157:	POP	HL
	POP	AF
	RET

;	  Subroutine screen mode 2 ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.515A:	LD	A,(SCRMOD)
	CP	2
	RET

J$5160:	LD	A,B
	CP	20H	; " "
	JR	NZ,J$5169
	CALL	C.5181
	EX	DE,HL
J$5169:	CALL	C.5181
	LD	A,(D.61A4)		; VDP data read port
	LD	C,A
	LD	IY,0
	ADD	IY,SP
	LD	A,(IY+6)
	CALL	C$5190
	POP	HL
	POP	HL
	POP	HL
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5181:	POP	BC
	POP	HL
	LD	A,L
	POP	HL
	PUSH	BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5190:	CP	0E0H
	JR	NZ,J$51DB
	EX	DE,HL
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	BC,(GRPCGP)
	ADD	HL,BC
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	POP	BC
	CALL	C$51B0
	POP	DE
	POP	HL
	PUSH	BC
	LD	BC,(GRPCOL)
	ADD	HL,BC
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	POP	BC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$51B0:	LD	B,(IY+2)
J$51B3:	PUSH	BC
	PUSH	HL
	CALL	C.5344
	LD	B,20H	; " "
	LD	HL,LINWRK
J$51BD:	INI
	JR	NZ,J$51BD
	EX	DE,HL
	CALL	C.5340
	EX	DE,HL
	LD	B,20H	; " "
	LD	HL,LINWRK
J$51CB:	OUTI
	JR	NZ,J$51CB
	POP	HL
	LD	BC,32
	ADD	HL,BC
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	POP	BC
	DJNZ	J$51B3
	RET

J$51DB:	LD	D,A
	LD	A,(IY+2)
J$51DF:	PUSH	AF
	PUSH	DE
	PUSH	HL
	CALL	C$51EF
	POP	HL
	POP	DE
	POP	AF
	INC	H
	SUB	08H	; 8 
	RET	C
	JR	NZ,J$51DF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$51EF:	LD	A,L
	AND	07H	; 7 
	LD	E,A
	XOR	L
	CP	L
	LD	L,A
	LD	A,(IY)
	JR	Z,J$5210
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	C$522E
	POP	HL
	POP	DE
	LD	BC,8
	ADD	HL,BC
	POP	BC
	POP	AF
	ADD	A,E
	DEC	A
	SUB	07H	; 7 
	RET	C
	RET	Z
J$5210:	DEC	A
	SUB	07H	; 7 
J$5213:	JR	C,J$5229
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,D
	CALL	C$523E
	POP	HL
	POP	DE
	LD	BC,8
	ADD	HL,BC
	POP	BC
	POP	AF
	SUB	08H	; 8 
	JR	J$5213

J$5229:	AND	07H	; 7 
	RET	Z
	LD	E,00H

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$522E:	CALL	C$52E9
	CP	0C0H
	JR	Z,J$525D
	CP	83H
	JR	Z,J$527D
	CP	0B0H
	JR	Z,J$52BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$523E:	CP	0C0H
	JR	Z,J$524B
	CP	83H
	JR	Z,J$527B
	CP	0B0H
	JR	Z,J$52AF
	RET

J$524B:	PUSH	HL
	LD	DE,(GRPCGP)
	ADD	HL,DE
	CALL	C.5340
	XOR	A
	LD	B,8
J$5257:	OUT	(C),A
	DJNZ	J$5257
	JR	J$5270

J$525D:	PUSH	HL
	CALL	C.5305
	CALL	C.5340
	LD	B,8
	LD	HL,I.62B8
J$5269:	LD	A,(HL)
	AND	D
	OUT	(C),A
	INC	HL
	DJNZ	J$5269
J$5270:	POP	HL
	LD	DE,(GRPCOL)
	ADD	HL,DE
	LD	A,(IY+4)
	JR	J$52A5

J$527B:	LD	E,0FFH
J$527D:	PUSH	HL
	CALL	C.5305
	CALL	C.5340
	LD	HL,I.62B8
	LD	B,8
J$5289:	LD	A,(HL)
	XOR	E
	OUT	(C),A
	INC	HL
	DJNZ	J$5289
	POP	HL
	LD	DE,(GRPCOL)
	ADD	HL,DE
	CALL	C.5344
	IN	A,(C)
	XOR	(IY+4)
	RLCA
	RLCA
	RLCA
	RLCA
	XOR	(IY+4)
J$52A5:	CALL	C.5340
	LD	B,8
J$52AA:	OUT	(C),A
	DJNZ	J$52AA
	RET

J$52AF:	CALL	C.531B
	LD	B,8
	LD	HL,PATWRK
J$52B7:	OUTI
	JR	NZ,J$52B7
	RET

J$52BC:	LD	A,B
	EXX
	LD	E,A
	EXX
	PUSH	HL
	CALL	C.5305
	POP	HL
	CALL	C.531B
	LD	HL,I.62B8
	EXX
	LD	HL,PATWRK
	LD	C,8
J$52D1:	LD	A,(HL)
	LD	B,E
	INC	B
J$52D4:	RRCA
	DJNZ	J$52D4
	RLCA
	LD	(HL),A
	INC	HL
	EXX
	AND	E
	LD	B,A
	LD	A,(HL)
	AND	D
	INC	HL
	OR	B
	OUT	(C),A
	EXX
	DEC	C
	JR	NZ,J$52D1
	EXX
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$52E9:	DEC	A
	CP	07H	; 7 
	JR	C,J$52F0
	LD	A,07H	; 7 
J$52F0:	INC	A
	LD	B,A
	XOR	A
J$52F3:	SCF
	RRA
	DJNZ	J$52F3
	LD	B,E
	INC	B
J$52F9:	OR	A
	RRA
	DJNZ	J$52F9
	RLA
	LD	B,E
	PUSH	DE
	LD	E,A
	CPL
	LD	D,A
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5305:	PUSH	DE
	LD	DE,(GRPCGP)
	ADD	HL,DE
	POP	DE
	PUSH	HL
	CALL	C.5344
	LD	B,8
	LD	HL,I.62B8
J$5315:	INI
	JR	NZ,J$5315
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.531B:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	DE,(GRPCOL)
	ADD	HL,DE
	CALL	C.5340
	LD	DE,(D.61A9)		; character foreground and background color
	LD	A,E
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	OR	D
	LD	B,8
J$5332:	OUT	(C),A
	DJNZ	J$5332
	POP	BC
	POP	DE
	POP	HL
	PUSH	DE
	LD	DE,(GRPCGP)
	ADD	HL,DE
	POP	DE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5340:	SET	6,H
	JR	J$5346

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5344:	RES	6,H
J$5346:	RES	7,H
	INC	C
	DI
	OUT	(C),L
	EI
	OUT	(C),H
	DEC	C
	EX	(SP),HL
	EX	(SP),HL
	RET

; echo terminal specifications

J$5353:	PUSH	AF
	CALL	C.5398

	DEFB	27,"[?1;0;0012;"
	DEFB	0

	LD	A,(EXBRSA)
	OR	A			; MSX1 ?
	LD	A,1
	JR	Z,J$536E		; yep,
	LD	A,2
J$536E:	CALL	C.53A3			; (MSX version)
	POP	AF
	CALL	C.53A3			; (ANK/Chinese)
	LD	A,H
	CALL	C.53A3			; (number of columns)
	LD	A,L
	CALL	C.53A3			; (number of lines)
	CALL	C.5398

	DEFB	"341c"
	DEFB	0

	RET

J$5386:	CALL	C.5398

	DEFB	27,"["
	DEFB	0

	LD	A,L
	CALL	C.53A3
J$5390:	LD	A,H
	CALL	C.53AA
	LD	A,"R"
	JR	C.53BC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5398:	EX	(SP),HL
	LD	A,(HL)
	INC	HL
	EX	(SP),HL
	OR	A
	RET	Z
	CALL	C.53BC
	JR	C.5398

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.53A3:	CALL	C.53AA
	LD	A,";"
	JR	C.53BC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.53AA:	LD	B,0
J$53AC:	INC	B
	SUB	10
	JR	NC,J$53AC
	ADD	A,10
	DEC	B
	PUSH	AF
	LD	A,B
	CALL	NZ,C.53AA
	POP	AF
	ADD	A,"0"

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.53BC:	PUSH	HL
	CALL	C$6000
	DEFB	1
	DEFW	C.4052
	POP	HL
	RET

;	  Subroutine display COMHELP
;	     Inputs  ________________________
;	     Outputs ________________________

J$53C5:	PUSH	HL
	LD	HL,I$542B
J.53C9:	LD	A,(HL)
	INC	HL
	INC	A
	JR	Z,J.541B
	DEC	A
	JR	Z,J$53E5
	PUSH	AF
	AND	7FH			; force ASCII
	CALL	NZ,CHPUT		; not NULL, display character
	POP	AF
	CALL	M,C$541E		; b7 set, new line
	LD	A,(INTFLG)
	AND	A			; get STOP key status
	JR	Z,J.53C9		; not pressed, continue
	CP	03H			; CTRL-STOP pressed ?
	JR	Z,J.541B		; yep,
J$53E5:	PUSH	HL
	LD	HL,INTFLG
	LD	(HL),0			; clear STOP key status
	LD	A,1BH
	CALL	CHPUT
	LD	A,"y"
	CALL	CHPUT
	LD	A,"5"
	CALL	CHPUT			; cursor ON
J$53FA:	EI
	LD	A,(HL)
	AND	A			; STOP key pressed ?
	JR	Z,J$53FA		; nope, wait
	PUSH	AF
	LD	A,1BH
	CALL	CHPUT
	LD	A,"x"
	CALL	CHPUT
	LD	A,"5"
	CALL	CHPUT
	POP	AF			; cursor OFF
	POP	HL
	CP	3			; CTRL-STOP pressed ?
	JR	Z,J.541B		; yep, quit
	XOR	A
	LD	(INTFLG),A		; reset STOP key status
	JR	J.53C9			; next character

J.541B:	POP	HL
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$541E:	PUSH	AF
	LD	A,13
	CALL	CHPUT
	LD	A,10
	CALL	CHPUT
	POP	AF
	RET

I$542B:	ADD	A,B
	LD	C,C
	LD	L,(HL)
	LD	L,C
	LD	(HL),H
	LD	L,C
	LD	H,C
	LD	L,H
	LD	L,C
	LD	A,D
	LD	H,L
	JR	NZ,J$54AB
	LD	(HL),H
	LD	H,C
	LD	(HL),H
	LD	H,L
	LD	L,L
	LD	H,L
	LD	L,(HL)
	LD	(HL),H
	JR	NZ,J$54B1
	LD	(HL),B
	LD	(HL),H
	LD	L,C
	LD	L,A
	LD	L,(HL)
	DI
	ADD	A,B
	LD	B,E
	LD	B,C
	LD	C,H
	LD	C,H
	JR	NZ,J$5492
	LD	C,A
	LD	C,L
	LD	C,C
	LD	C,(HL)
	LD	C,C
	JR	NZ,J$547E
	AND	D
	INC	A
	LD	H,H
	LD	H,L
	HALT

?.545B:	LD	L,C
	LD	H,E
	LD	H,L
	INC	HL
	JR	NZ,J$54DC
	JR	NC,J$548F
	LD	SP,I.322C
	LD	L,2EH	; "."
	LD	L,39H	; "9"
	LD	A,L
	LD	A,0BAH
	INC	A
	LD	H,E
	LD	L,B
	LD	H,C
	LD	(HL),D
	LD	H,C
	LD	H,E
	LD	(HL),H
	LD	H,L
	LD	(HL),D
	JR	NZ,J$54E5
	LD	H,L
	LD	L,(HL)
	LD	H,A
	LD	(HL),H
	LD	L,B
J$547E:	JR	NZ,J$54FB
	DEC	(HL)
	INC	L
	LD	(HL),2CH	; ","
	SCF
	INC	L
	JR	C,J$5505
	CP	(HL)
	INC	A
	LD	(HL),B
	LD	H,C
	LD	(HL),D
	LD	L,C
	LD	(HL),H
J$548F:	LD	A,C
	JR	NZ,J$550D
J$5492:	LD	B,L
	INC	L
	LD	C,A
	INC	L
	LD	C,C
	INC	L
	LD	C,(HL)
	LD	A,L
	CP	(HL)
	INC	A
	LD	(HL),E
	LD	(HL),H
	LD	L,A
	LD	(HL),B
	JR	NZ,J$5504
	LD	L,C
	LD	(HL),H
	LD	(HL),E
	JR	NZ,J$5522
	LD	SP,I.322C
	INC	L
J$54AB:	INC	SP
	LD	A,L
	CP	(HL)
	INC	A
	LD	E,B
	LD	C,A
J$54B1:	LD	C,(HL)
	CPL
	LD	E,B
	LD	C,A
	LD	B,(HL)
	LD	B,(HL)
	JR	NZ,J$5534
	LD	E,B
	INC	L
	LD	C,(HL)
	LD	A,L
	CP	(HL)
	INC	A
	LD	SP,I$6420
	LD	(HL),L
	LD	L,L
	LD	L,L
	LD	A,C
	JR	NZ,J$5543
	LD	H,C
	LD	L,(HL)
	LD	A,C
	JR	NZ,J$5530
	LD	L,B
	LD	H,C
	LD	(HL),D
	LD	H,C
	LD	H,E
	LD	(HL),H
	LD	H,L
	LD	(HL),D
	LD	A,L
	CP	(HL)
	INC	A
	LD	H,C
	LD	(HL),L
	LD	(HL),H
	LD	L,A
J$54DC:	JR	NZ,J$552A
	LD	B,(HL)
	JR	NZ,J$5550
	LD	L,(HL)
	JR	NZ,J$5556
	LD	H,L
J$54E5:	LD	H,E
	LD	H,L
	LD	L,C
	HALT

?.54E9:	LD	H,L
	JR	NZ,J$5567
	LD	B,C
	INC	L
	LD	C,(HL)
	LD	A,L
	CP	(HL)
	INC	A
	LD	H,C
	LD	(HL),L
	LD	(HL),H
	LD	L,A
	JR	NZ,J$5544
	LD	B,(HL)
	JR	NZ,J$556A
J$54FB:	LD	L,(HL)
	JR	NZ,J.5572
	LD	(HL),D
	LD	H,C
	LD	L,(HL)
	LD	(HL),E
	LD	L,L
	LD	L,C
J$5504:	LD	(HL),H
J$5505:	JR	NZ,J.5582
	LD	B,C
	INC	L
	LD	C,(HL)
	LD	A,L
	CP	(HL)
	INC	A
J$550D:	LD	D,E
	LD	C,C
	CPL
	LD	D,E
	LD	C,A
	JR	NZ,J$558F
	LD	D,E
	INC	L
	LD	C,(HL)
	LD	A,L
	LD	A,0A2H
	INC	L
	INC	A
	LD	(HL),D
	LD	H,L
	LD	H,E
	LD	H,L
	LD	L,C
	HALT

J$5522:	LD	H,L
	JR	NZ,J$5598
	LD	(HL),B
	LD	H,L
	LD	H,L
	LD	H,H
	JR	NZ,J$5553
J$552A	EQU	$-1
	LD	H,D
	LD	(HL),B
	LD	(HL),E
	ADD	HL,HL
	CP	(HL)
J$5530:	INC	L
	INC	A
	LD	(HL),E
	LD	H,L
J$5534:	LD	L,(HL)
	LD	H,H
	JR	NZ,J$55AB
	LD	(HL),B
	LD	H,L
	LD	H,L
	LD	H,H
	JR	NZ,J$5566
J$553E:	LD	H,D
	LD	(HL),B
	LD	(HL),E
	ADD	HL,HL
	CP	(HL)
J$5543:	INC	L
J$5544:	INC	A
	LD	(HL),H
	LD	L,C
	LD	L,L
	LD	H,L
	JR	NZ,J$55BA
	LD	(HL),L
	LD	(HL),H
	CP	(HL)
	JR	NZ,J$5570
J$5550:	JR	NZ,J.5572
	JR	NZ,J$5574
J$5553	EQU	$-1
	JR	NZ,J$5576
J$5556:	JR	NZ,J$5578
	JR	NZ,J$557A
	JR	NZ,J$557C
	JR	NZ,J$557E
	JR	NZ,J$5580
	JR	NZ,J.5582
	JR	NZ,J$5584
	JR	NZ,J$5586
J$5566:	JR	NZ,J$5588
J$5567	EQU	$-1
	XOR	C
	LD	B,H
J$556A:	LD	H,L
	LD	H,(HL)
	LD	H,C
	LD	(HL),L
	LD	L,H
	LD	(HL),H
J$5570:	CP	D
	JR	NZ,J$55B6
J.5572	EQU	$-1
	LD	B,C
J$5574:	LD	C,H
	LD	C,H
J$5576:	JR	NZ,J.55BB
J$5578:	LD	C,A
	LD	C,L
J$557A:	LD	C,C
	LD	C,(HL)
J$557C:	LD	C,C
	JR	Z,J$55A1
J$557E	EQU	$-1
	JR	NC,J.55BB
J$5580	EQU	$-1
	JR	C,J$55D1
J.5582	EQU	$-1
	LD	SP,I$2058
J$5584	EQU	$-2
J$5586:	LD	C,(HL)
	LD	C,(HL)
J$5588:	LD	C,(HL)
	LD	(D$332C),HL
	JR	NC,J$55BE
	INC	L
J$558F:	INC	SP
	JR	NC,J$55C2
	INC	L
	JR	NC,J$553E

	END
