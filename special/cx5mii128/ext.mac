; EXT.MAC

; CX5MII extension rom for 80 column mode (V9938)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        ORG	4000H

RDSLT	EQU	000CH
OUTDO	EQU	0018H
CALSLT	EQU	001CH
CLRSPR	EQU	0069H
GICINI	EQU	0090H
CHGET	EQU	009FH
BEEP	EQU	00C0H
FNKSB	EQU	00C9H

M4055   EQU     4055H                   ; syntax error
M4666   EQU     4666H                   ; get next basic character
M475A   EQU     475AH                   ; illegal function call
M521C   EQU     521CH                   ; evaluate byte operand

LINL40	EQU	0F3AEH
LINL32	EQU	0F3AFH
LINLEN	EQU	0F3B0H
CRTCNT	EQU	0F3B1H
CLMLST	EQU	0F3B2H
TXTNAM	EQU	0F3B3H
TXTCOL	EQU	0F3B5H
TXTCGP	EQU	0F3B7H
T32NAM	EQU	0F3BDH
T32COL	EQU	0F3BFH
T32CGP	EQU	0F3C1H
T32ATR	EQU	0F3C3H
T32PAT	EQU	0F3C5H
GRPNAM	EQU	0F3C7H
GRPCOL	EQU	0F3C9H
GRPCGP	EQU	0F3CBH
GRPATR	EQU	0F3CDH
GRPPAT	EQU	0F3CFH
MLTNAM	EQU	0F3D1H
MLTCGP	EQU	0F3D5H
MLTATR	EQU	0F3D7H
MLTPAT	EQU	0F3D9H
CLIKSW	EQU	0F3DBH
CSRY	EQU	0F3DCH
CSRX	EQU	0F3DDH
CNSDFG	EQU	0F3DEH
RG0SAV	EQU	0F3DFH
RG1SAV	EQU	0F3E0H
RG2SAV	EQU	0F3E1H
RG3SAV	EQU	0F3E2H
RG4SAV	EQU	0F3E3H
RG5SAV	EQU	0F3E4H
RG6SAV	EQU	0F3E5H
FORCLR	EQU	0F3E9H
BAKCLR	EQU	0F3EAH
BDRCLR	EQU	0F3EBH
ATRBYT	EQU	0F3F2H
CS1200	EQU	0F3FCH
LOW	EQU	0F406H
ASPCT1	EQU	0F40BH
ASPCT2	EQU	0F40DH
NTMSXP	EQU	0F417H
CURLIN	EQU	0F41CH
BUFMIN	EQU	0F55DH
BUF	EQU	0F55EH
TTYPOS	EQU	0F661H
AUTFLG	EQU	0F6AAH
FNKSTR	EQU	0F87FH
CGPNT	EQU	0F91FH
NAMBAS	EQU	0F922H
CGPBAS	EQU	0F924H
PATBAS	EQU	0F926H
ATRBAS	EQU	0F928H

DPPAGE	EQU	0FAF5H
ACPAGE	EQU	0FAF6H
DFAF7	EQU	0FAF7H
DFB02	EQU	0FB02H

BASROM	EQU	0FBB1H
LINTTB	EQU	0FBB2H
FSTPOS	EQU	0FBCAH
CURSAV	EQU	0FBCCH
FNKSWI	EQU	0FBCDH
NEWKEY	EQU	0FBE5H
LINWRK	EQU	0FC18H
TRPTBL	EQU	0FC4CH
INTFLG	EQU	0FC9BH
GRPHED	EQU	0FCA6H
ESCCNT	EQU	0FCA7H
INSFLG	EQU	0FCA8H
CSRSR	EQU	0FCA9H
CSTYLE	EQU	0FCAAH
SCRMOD	EQU	0FCAFH
OLDSCR	EQU	0FCB0H
GXPOS	EQU	0FCB3H
GYPOS	EQU	0FCB5H
EXPTBL	EQU	0FCC1H
PROCNM	EQU	0FD89H

H.CHPU	EQU	0FDA4H
H.DSPC	EQU	0FDA9H
H.ERAC	EQU	0FDAEH
H.DSPF	EQU	0FDB3H
H.ERAF	EQU	0FDB8H
H.TOTE	EQU	0FDBDH
H.INIP	EQU	0FDC7H
H.PINL	EQU	0FDDBH
H.QINL	EQU	0FDE0H
H.INLI	EQU	0FDE5H
H.WIDT	EQU	0FF84H
H.SCRE	EQU	0FFC0H

RG8SAV	EQU	0FFE7H
RG9SAV	EQU	0FFE8H
RG10SAV	EQU	0FFE9H
RG11SAV	EQU	0FFEAH
D$FFFF	EQU	0FFFFH

        DEFB	"AB"
        DEFW	C$408F
        DEFW	C$4019
        DEFW	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFW	0

;	  Subroutine set screen 0 width and change to screen mode 0
;	     Inputs  A = 0, E = screen 0 width
;	     Outputs ________________________
;	     Remark  UNUSED

?.4010:	PUSH	AF
        LD	A,E
        LD	(LINL40),A
        POP	AF
        JP	C.43CB			; chgmod

;	  Subroutine EXTENSION ROM CALL statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$4019:	PUSH	HL
        EX	AF,AF'
        EXX
        LD	DE,I$4047
J$401F:	LD	HL,PROCNM
J$4022:	LD	A,(DE)
        AND	A
        JR	Z,J$403D
        CP	(HL)
        JR	NZ,J.402D
        INC	HL
        INC	DE
        JR	J$4022

J.402D:	LD	A,(DE)
        CP	0FFH
        JR	Z,J$403A
        INC	DE
        AND	A
        JR	NZ,J.402D
        INC	DE
        INC	DE
        JR	J$401F

J$403A:	POP	HL
        SCF
        RET

J$403D:	EX	DE,HL
        INC	HL
        PUSH	DE
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        EX	DE,HL
        POP	DE
        PUSH	HL
        RET

I$4047:	DEFB	"CLS"
        DEFB	0
        DEFW	C$4089
        DEFB	"@REL"
        DEFB	0
        DEFW	C$406F
        DEFB	"@VER"
        DEFB	0
        DEFW	C$4076
        DEFB	0FFH

I$405C:	DEFB	"X.B8P.10.007"

I$4068:	DEFB	"Ver 1.0"

;	  Subroutine CALL @REL statement
;	     Inputs  ________________________
;	     Outputs ________________________

C$406F:	LD	HL,I$405C
        LD	B,12
        JR	J.407B                  ; print release string and quit

;	  Subroutine CALL @VER statement
;	     Inputs  ________________________
;	     Outputs ________________________

C$4076:	LD	HL,I$4068
        LD	B,7

J.407B:	PUSH	BC
        PUSH	HL
        LD	A,(HL)
        CALL	C.41FD                  ; output to current channel
        POP	HL
        INC	HL
        POP	BC
        DJNZ	J.407B
        POP	HL
        OR	A                       ; flag statement executed
        RET

;	  Subroutine CALL CLS statement
;	     Inputs  ________________________
;	     Outputs ________________________

C$4089:	POP	HL
        CALL	C.4B33			; clear screen
        OR	A
        RET

;	  Subroutine EXTENSION ROM INIT
;	     Inputs  ________________________
;	     Outputs ________________________

C$408F:	DI
        LD	DE,0C9C9H
	LD	HL,(H.WIDT+0)
        OR	A
	SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.SCRE+0)
	OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.CHPU+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.DSPF+0)
        OR	A
        SBC	HL,DE
	JR	NZ,J.40EB
        LD	HL,(H.ERAF+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.DSPC+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.ERAC+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.PINL+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.QINL+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.INLI+0)
        OR	A
        SBC	HL,DE
        JR	NZ,J.40EB
        LD	HL,(H.TOTE+0)
        OR	A
        SBC	HL,DE
        JR	Z,J$40ED
J.40EB:	EI
        RET

J$40ED:	IN	A,(0A8H)
        LD	B,A
        AND	3FH
        LD	C,A
        RRCA
        RRCA
        RRCA
        RRCA
        AND	0C0H
        OR	C
        OUT	(0A8H),A
        LD	A,(D$FFFF)
        CPL
        LD	C,A
        LD	A,B
        OUT	(0A8H),A
        LD	A,0CH
        AND	B
        RRCA
        RRCA
        LD	B,A
        LD	HL,EXPTBL
        OR	A
        JR	Z,J$4114
J$4110:	INC	HL
        DEC	A
        JR	NZ,J$4110
J$4114:	LD	A,C
        AND	0CH
        OR	(HL)
        OR	B                       ; calculate slotid of this ROM
        LD	HL,I$41C0
        LD	DE,H.WIDT
        LD	BC,5
        LDIR
        LD	(H.WIDT+1),A            ; initialize WIDTH hook
        LD	HL,I$41C5
        LD	DE,H.SCRE
        LD	BC,5
        LDIR
        LD	(H.SCRE+1),A            ; initialize SCREEN hook
        LD	HL,I$41CA
        LD	DE,H.CHPU
        LD	BC,5
        LDIR
        LD	(H.CHPU+1),A            ; initialize CHPUT hook
        LD	HL,I$41CF
        LD	DE,H.DSPF
        LD	BC,5
        LDIR
        LD	(H.DSPF+1),A            ; initialize DSPFNK hook
        LD	HL,I$41D4
        LD	DE,H.ERAF
        LD	BC,5
        LDIR
        LD	(H.ERAF+1),A            ; initialize ERAFNK hook
        LD	HL,I$41D9
        LD	DE,H.DSPC
        LD	BC,5
        LDIR
        LD	(H.DSPC+1),A            ; initialize display cursor hook
        LD	HL,I$41DE
        LD	DE,H.ERAC
        LD	BC,5
        LDIR
        LD	(H.ERAC+1),A            ; initialize erase cursor hook
        LD	HL,I$41E3
        LD	DE,H.PINL
        LD	BC,5
        LDIR
        LD	(H.PINL+1),A            ; initialize PINLIN hook
        LD	HL,I$41E8
        LD	DE,H.QINL
        LD	BC,5
        LDIR
        LD	(H.QINL+1),A            ; initialize QINLIN hook
        LD	HL,I$41ED
        LD	DE,H.INLI
        LD	BC,5
        LDIR
        LD	(H.INLI+1),A            ; initialize INLIN hook
        LD	HL,I$41F2
        LD	DE,H.TOTE
        LD	BC,5
        LDIR
        LD	(H.TOTE+1),A            ; initialize TOTEXT hook
        LD	BC,16
        LD	HL,I$4A9A
        LD	DE,RG8SAV
        LDIR                            ; initialize new VDP readback system variables
        EI
        RET                             ; quit

I$41C0:	RST	30H
        DEFB	0
        DEFW	C$4253
        RET

I$41C5:	RST	30H
        DEFB	0
        DEFW	C$42C6
        RET

I$41CA:	RST	30H
        DEFB	0
        DEFW	C$4CFA
        RET

I$41CF:	RST	30H
        DEFB	0
        DEFW	C$5183
        RET

I$41D4:	RST	30H
        DEFB	0
        DEFW	C$516B
        RET

I$41D9:	RST	30H
        DEFB	0
        DEFW	C$50E6
        RET

I$41DE:	RST	30H
        DEFB	0
        DEFW	C$510B
        RET

I$41E3:	RST	30H
        DEFB	0
        DEFW	C$524E
        RET

I$41E8:	RST	30H
        DEFB	0
        DEFW	C$5266
        RET

I$41ED:	RST	30H
        DEFB	0
        DEFW	C$5274
        RET

I$41F2:	RST	30H
        DEFB	0
        DEFW	C$43BD
        RET

;	  Subroutine get character from input
;	     Inputs  ________________________
;	     Outputs ________________________

C$41F7:	LD	IX,CHGET
        JR	J.4231

;	  Subroutine output to current channel
;	     Inputs  ________________________
;	     Outputs ________________________

C.41FD:	LD	IX,OUTDO
        JR	J.4231

;	  Subroutine display/erase function keys
;	     Inputs  ________________________
;	     Outputs ________________________

J$4203:	LD	IX,FNKSB
        JR	J.4231

;	  Subroutine read from slot
;	     Inputs  ________________________
;	     Outputs ________________________

C$4209:	LD	IX,RDSLT
        JR	J.4231

;	  Subroutine get next BASIC char
;	     Inputs  ________________________
;	     Outputs ________________________

C.420F:	LD	IX,M4666
        JR	J.4231

;	  Subroutine evaluate byte operand
;	     Inputs  ________________________
;	     Outputs ________________________

C.4215:	LD	IX,M521C
        JR	J.4231

;	  Subroutine clear sprites (mode 1 sprites)
;	     Inputs  ________________________
;	     Outputs ________________________

C$421B:	LD	IX,CLRSPR
        JR	J.4231

;	  Subroutine beep
;	     Inputs  ________________________
;	     Outputs ________________________

C.4221:	LD	IX,BEEP
        JR	J.4231

;	  Subroutine syntax error
;	     Inputs  ________________________
;	     Outputs ________________________

J$4227:	LD	IX,M4055
        JR	J.4231

;	  Subroutine illegal function call
;	     Inputs  ________________________
;	     Outputs ________________________

J.422D:	LD	IX,M475A

;	  Subroutine invoke main bios routine
;	     Inputs  ________________________
;	     Outputs ________________________

J.4231:	DI
        PUSH	AF
        IN	A,(0A8H)
        AND	0FCH
        OUT	(0A8H),A                ; select primairy slot 0 on page 0
                                        ; (note this only works if slot 0 is not expanded, as with the CX5MII)
        XOR	A
        PUSH	AF
        POP	IY
        POP	AF
        EI
        JP	CALSLT

;	  Subroutine compare
;	     Inputs  ________________________
;	     Outputs ________________________

C.4242:	LD	A,H
        SUB	D
        RET	NZ
        LD	A,L
        SUB	E
        RET

;	  Subroutine check for (SYNCHR)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4248:	LD	A,(HL)
        EX	(SP),HL
        CP	(HL)
        INC	HL
        EX	(SP),HL
        JP	NZ,J$4227		; syntax error
        JP	C.420F			; get next BASIC char

;	  Subroutine WIDTH statement
;	     Inputs  ________________________
;	     Outputs ________________________
        
C$4253:	AND	A
        JR	Z,J.4268
        LD	A,(OLDSCR)
        AND	A
        LD	A,E
        JR	Z,J$4262
        CP	32+1			; screenmode 1, 32 colums max
        JP	NC,J.4268
J$4262:
	CP	40+1
        JR	C,J.4268		; weird code, not needed at all

        CP	80+1			; screenmode 0, 80 colums max
J.4268:	JP	NC,J.422D		; illegal function call
        LD	A,(LINLEN)
        CP	E
        JR	Z,J.42AE		; screen width not changed, just quit
        CALL	C.4B33			; clear screen
        LD	A,E
        LD	(LINLEN),A              ; new screen width
        CALL	C.42B9			; initialize CLMLST
        LD	A,(OLDSCR)
        DEC	A                       ; text screen 1 ?
        LD	A,E
        JR	NZ,J$428A               ; nope,
        LD	(LINL32),A              ; new screen 1 width
        CALL	C.4B33			; clear screen
        JR	J.42AE			; quit

J$428A:	LD	C,40+1
        LD	A,(LINL40)
        CP	C                       ; text screen 0 in TEXT80 mode ?
        LD	A,E
        LD	(LINL40),A              ; new screen 0 width
        PUSH	AF
        CALL	C.4B33			; clear screen
        POP	AF
        JR	C,J$429F		; was in TEXT40 mode
        CP	C
        JR	NC,J.42AE		; was in TEXT80 mode, new is TEXT80 mode, quit
        LD	C,A                     ; was in TEXT80 mode, new is TEXT40 mode
J$429F:	CP	C
        JR	C,J.42AE		; not changed, quit
        PUSH	AF
        PUSH	HL
        XOR	A			; screenmode 0
        CALL	C.43CB			; chgmod
        POP	HL
        POP	AF
        LD	E,A
        CALL	C.42B9			; initialize CLMLST
J.42AE:	DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.WIDT+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine initialize CLMLST
;	     Inputs  A = E = screen width
;	     Outputs ________________________

C.42B9:	SUB	14
        JR	NC,C.42B9
        ADD	A,14+14
        CPL
        INC	A
        ADD	A,E
        LD	(CLMLST),A
        RET

;	  Subroutine SCREEN statement
;	     Inputs  ________________________
;	     Outputs ________________________

C$42C6:	CP	","
        JR	Z,J$42E4
        CALL	C.4215			; evaluate byte operand
        CP	3+1
        JP	NC,J.422D		; max screenmode=3, illegal function call
        PUSH	HL
        CALL	C.43CB			; chgmod
        LD	A,(LINLEN)
        LD	E,A
        CALL	C.42B9			; initialize CLMLST
        POP	HL
        DEC	HL
        CALL	C.420F			; get next BASIC char
        JR	Z,J.4333		; end of statement, quit
J$42E4:	CALL	C.4248
        DEFB	","			; check for ,
        CP	","
        JR	Z,J$4308
        CALL	C.4215			; evaluate byte operand 
        CP	3+1
        JP	NC,J.422D		; spritemode must be 0-3, illegal function call
        LD	A,(RG1SAV)
        AND	0FCH
        OR	E
        LD	(RG1SAV),A
        PUSH	HL
        CALL	C$421B			; clear sprites (mode 1 sprites)
        POP	HL
        DEC	HL
        CALL	C.420F			; get next BASIC char
        JR	Z,J.4333		; end of statement, quit
J$4308:	CALL	C.4248
        DEFB	","			; check for ,
        CP	","
        JR	Z,J$4318
        CALL	C.4215			; evaluate byte operand 
        LD	(CLIKSW),A
        JR	Z,J.4333
J$4318:	CALL	C.4248
        DEFB	","			; check for ,
        CP	","
        JR	Z,J$4329
        CALL	C$435F			; evaluate cassettespeed operand and set it up
        DEC	HL
        CALL	C.420F			; get next BASIC char
        JR	Z,J.4333
J$4329:	CALL	C.4248
        DEFB	","			; check for ,
        CALL	C.4215			; evaluate byte operand 
        LD	(NTMSXP),A
J.4333:	DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.SCRE+4

;	  Subroutine take control from caller
;	     Inputs  ________________________
;	     Outputs ________________________

J.433B:	LD	HL,0
        ADD	HL,SP
J$433F:	LD	E,(HL)
        INC	HL
        LD	D,(HL)                  ; get word from stack
        INC	HL
        EX	DE,HL
        OR	A
        SBC	HL,BC                   ; check if word equals return address (very dangerous methode, bound to go wrong!)
        EX	DE,HL
        JR	NZ,J$433F               ; nope, next
        LD	D,H
        LD	E,L
        DEC	DE
        OR	A
        SBC	HL,SP
        LD	B,H
        LD	C,L                     ; size of stack after return address
        LD	H,D
        LD	L,E
        INC	DE
        INC	DE
        LDDR                            ; move stack content
        POP	DE
        POP	DE
        POP	HL
        POP	BC
        POP	AF
        EI
        RET

;	  Subroutine evaluate cassettespeed operand and set it up
;	     Inputs  ________________________
;	     Outputs ________________________

C$435F:	CALL	C.4215			; evaluate byte operand 
        DEC	A
        CP	1+1
        JP	NC,J.422D		; illegal function call
        PUSH	HL
        LD	BC,5
        AND	A
        LD	HL,CS1200
        JR	Z,J$4373
        ADD	HL,BC
J$4373:	LD	DE,LOW
        LDIR
        POP	HL
        RET

;	  Subroutine hide sprites
;	     Inputs  ________________________
;	     Outputs ________________________

C.437A:	LD	A,(FORCLR)
        LD	E,A
        LD	HL,(ATRBAS)
        LD	BC,32*256+0
J$4384:	CALL	C.4530                  ; check if in v9338 graphic screen mode (mode 2 sprites)
        LD	A,209                   ; special Y coordinate to disable mode 1 sprite
        JR	C,J$438D		; nope,
        LD	A,217                   ; special Y coordinate to disable mode 2 sprite
J$438D:	CALL	C.4759                  ; write byte to VRAM (128K)
        INC	HL
        INC	HL
        LD	A,C
        CALL	C.4759                  ; write byte to VRAM (128K)
        INC	HL
        INC	C                       ; next sprite pattern (assume 8x8 sprite)
        LD	A,(RG1SAV)
        RRC	A
        RRC	A                       ; 16x16 sprites ?
        JR	NC,J$43A4               ; nope,
        INC	C
        INC	C
        INC	C                       ; yep, sprite pattern up by 4
J$43A4:	LD	A,E
        CALL	C.4759                  ; write byte to VRAM (128K)
        INC	HL
        DJNZ	J$4384
        CALL	C.4530                  ; check if in v9338 graphic screen mode (multi color sprites)
        RET	C			; nope, quit
        LD	HL,(ATRBAS)
        LD	BC,00200H
        SBC	HL,BC
        LD	A,(FORCLR)
        JP	C.4C33                  ; fill VRAM

;	  Subroutine H.TOTE handler
;	     Inputs  A = text screen mode
;	     Outputs ________________________

C$43BD:	CALL	C.43CB			; chgmod
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.TOTE+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine chgmod
;	     Inputs  ________________________
;	     Outputs ________________________

C.43CB:	CP	3+1
        RET	NC
        LD	HL,I$43DB
        LD	C,A
        LD	B,0
        ADD	HL,BC
        ADD	HL,BC
        LD	C,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,C
        JP	(HL)

I$43DB:	DEFW	C.43E3
        DEFW	C.4418
        DEFW	C.4446
        DEFW	C.4485

;	  Subroutine chgmod screen mode 0
;	     Inputs  ________________________
;	     Outputs ________________________

C.43E3:	XOR	A
        LD	(OLDSCR),A
        CALL	C.44C3                  ; initalize color palette, vertical scroll, disable display output
        LD	A,(LINL40)
        LD	(LINLEN),A              ; current screen width
        LD	HL,00800H
        LD	(TXTCOL),HL
        LD	HL,(TXTNAM)
        LD	(NAMBAS),HL
        LD	HL,(TXTCGP)
        CP	40+1
        JR	C,J$4406
        LD	HL,01000H
J$4406:	LD	(CGPBAS),HL
        CALL	C$457D                  ; initialize screen mode 0 name, character, pattern, attribute address

J$440C:	CALL	C.4C10
        CALL	C.4BAB                  ; clear text screen
        CALL	C$4C79			; initialize patterngenerator with msx characterset
        JP	C.453C			; wait for finished vertical retrace and enable vdp display output

;	  Subroutine chgmod screen mode 1
;	     Inputs  ________________________
;	     Outputs ________________________

C.4418:	LD	A,1
        LD	(OLDSCR),A
        CALL	C.44C3                  ; initalize color palette, vertical scroll, disable display output
        LD	A,(LINL32)
J$4423:	LD	(LINLEN),A              ; current screen width
        LD	HL,(T32NAM)
        LD	(NAMBAS),HL
        LD	HL,(T32CGP)
        LD	(CGPBAS),HL
        LD	HL,(T32PAT)
        LD	(PATBAS),HL
        LD	HL,(T32ATR)
        LD	(ATRBAS),HL
        CALL	C$45D7                  ; initialize screen mode 1 name, character, pattern, attribute address
        CALL	C.437A                  ; hide sprites
        JR	J$440C

;	  Subroutine chgmod screen mode 2
;	     Inputs  ________________________
;	     Outputs ________________________

C.4446:	LD	A,2
        CALL	C.44C3                  ; initalize color palette, vertical scroll, disable display output
        LD	HL,(GRPATR)
        CALL	C$446F
        PUSH	HL
        CALL	C$460D                  ; initialize screen mode 2 name, character, pattern, attribute address
        POP	HL
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        XOR	A
        LD	B,3
J.445C:	OUT	(98H),A
        INC	A
        JR	NZ,J.445C
        DJNZ	J.445C
        CALL	C.4BDC                  ; clear screen 2/4
J$4466:	CALL	C.4C10
        CALL	C.437A                  ; hide sprites
        JP	C.453C			; wait for finished vertical retrace and enable vdp display output

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$446F:	LD	(ATRBAS),HL
        LD	HL,(GRPPAT)
        LD	(PATBAS),HL
        LD	HL,(GRPCGP)
        LD	(CGPBAS),HL
        LD	HL,(GRPNAM)
        LD	(NAMBAS),HL
        RET

;	  Subroutine chgmod screen mode 3
;	     Inputs  ________________________
;	     Outputs ________________________

C.4485:	LD	A,3
        CALL	C.44C3                  ; initalize color palette, vertical scroll, disable display output
        LD	HL,(MLTPAT)
        LD	(PATBAS),HL
        LD	HL,(MLTATR)
        LD	(ATRBAS),HL
        LD	HL,(MLTCGP)
        LD	(CGPBAS),HL
        LD	HL,(MLTNAM)
        LD	(NAMBAS),HL
        PUSH	HL
        CALL	C$4654                  ; initialize screen mode 3 name, character, pattern, attribute address
        POP	HL
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        LD	DE,6
J$44AD:	LD	C,04H	; 4 
J$44AF:	LD	A,D
        LD	B,20H	; " "
J$44B2:	OUT	(98H),A
        INC	A
        DJNZ	J$44B2
        DEC	C
        JR	NZ,J$44AF
        LD	D,A
        DEC	E
        JR	NZ,J$44AD
        CALL	C.4BF4                  ; clear screen 3
        JR	J$4466

;	  Subroutine initalize color palette, vertical scroll, disable display output
;	     Inputs  ________________________
;	     Outputs ________________________

C.44C3:	LD	(SCRMOD),A
        XOR	A
        LD	(DPPAGE),A              ; display page is 0
        LD	(ACPAGE),A              ; active page is 0
        LD	HL,00100H
        LD	(ASPCT1),HL
        LD	(ASPCT2),HL
        CALL	C.4A13                  ; wait for VDP command to finish
        CALL	C$4546			; wait for finished vertical retrace and disable vdp display output
        CALL	C$46F7			; initialize color palette
        LD	B,0
        LD	C,23
        JP	C.4551			; vertical scroll 0

;	  Subroutine get VRAM address color palette
;	     Inputs  (SCRMOD) = screen mode
;	     Outputs HL = VRAM address

C$44E6:	PUSH	AF
        LD	A,(SCRMOD)
        LD	HL,I$450A
        PUSH	BC
        INC	A
        LD	C,A
        LD	B,00H
        LD	A,(LINLEN)
        CP	40+1                    ; TEXT40 mode ?
        JR	NC,J$44FA
        DEC	BC                      ; yep, use entry 0
J$44FA:	ADD	HL,BC
        ADD	HL,BC
        POP	BC
        LD	A,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,A
        PUSH	DE
        LD	E,D
        LD	D,00H
        ADD	HL,DE
        ADD	HL,DE
        POP	DE
        POP	AF
        RET

I$450A:	DEFW	00400H
        DEFW	00F00H
        DEFW	02020H
        DEFW	03C00H
        DEFW	02020H

;	  Subroutine wait for finished vertical retrace
;	     Inputs  ________________________
;	     Outputs ________________________

C.4514:	LD	A,2
        CALL	C.4A20                  ; read VDP status register 2
        AND	40H
        JR	NZ,C.4514
J$451D:	LD	A,2
        CALL	C.4A20                  ; read VDP status register 2
        AND	40H
        JR	Z,J$451D
        RET

;	  Subroutine set functionkey display mode and check if in graphic screen mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.4527:	LD	(CNSDFG),A

;	  Subroutine check if in graphic screen mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.452A:	LD	A,(SCRMOD)
        CP	02H
        RET

;	  Subroutine check if in v9338 graphic screen mode (multi color sprites)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4530:	LD	A,(SCRMOD)
        CP	04H
        RET

;	  Subroutine check if in v9338 graphic screen mode (bitmap)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4536:	LD	A,(SCRMOD)
        CP	05H
        RET

;	  Subroutine wait for finished vertical retrace and enable vdp display output
;	     Inputs  ________________________
;	     Outputs ________________________

C.453C:	CALL	C.4514			; wait for finished vertical retrace
        LD	A,(RG1SAV)
        OR	60H                     ; enable display, enable vertical retrace interrupt
        JR	J$454E

;	  Subroutine wait for finished vertical retrace and disable vdp display output
;	     Inputs  ________________________
;	     Outputs ________________________

C$4546:	CALL	C.4514			; wait for finished vertical retrace
        LD	A,(RG1SAV)
        AND	3FH                     ; reset unused bit, disable display
J$454E:	LD	B,A
        LD	C,1

;	  Subroutine write VDP register
;	     Inputs  ________________________
;	     Outputs ________________________

C.4551:	LD	A,I
        PUSH	AF                      ; save current interrupt state
        LD	A,B
        DI
        OUT	(99H),A
        LD	A,C
        OR	80H
        OUT	(99H),A
        PUSH	HL
        PUSH	BC
        PUSH	DE
        LD	D,B
        LD	A,C
        LD	B,0
        CP	8
        JR	NC,J$456D
        LD	HL,RG0SAV
        JR	J$4574

J$456D:	CP	18H
        JR	NC,J$4576
        LD	HL,RG8SAV-8
J$4574:	ADD	HL,BC
        LD	(HL),D
J$4576:	POP	DE
        POP	BC
        POP	HL
        POP	AF
        RET	PO
        EI
        RET

;	  Subroutine initialize screen mode 0 name, character, pattern, attribute address
;	     Inputs  ________________________
;	     Outputs ________________________

C$457D:	CALL	C.46DB                  ; set 192 lines
        LD	A,(LINLEN)
        CP	40+1                    ; TEXT80 mode ?
        LD	B,0
        JR	C,J$458B
        LD	B,4
J$458B:	LD	C,10H
        CALL	C.46E4                  ; initialize vdp mode
        LD	A,(LINLEN)
        CP	40+1                    ; TEXT80 mode ?
        LD	A,(DPPAGE)
        JR	NC,J$45AD               ; yep,
        ADD	A,A
        LD	HL,(TXTCGP)
        LD	B,00H
        CALL	C.4694                  ; initialize character address
        ADD	A,A
        LD	HL,(TXTNAM)
        CALL	C.4688                  ; initialize name address
        JP	J.4802                  ; initialize VDP registers

J$45AD:	LD	A,(DPPAGE)
        PUSH	AF
        ADD	A,A
        ADD	A,A
        LD	B,00H
        LD	HL,(CGPBAS)
        CALL	C.4694                  ; initialize character address
        ADD	A,A
        LD	B,03H	; 3 
        LD	HL,(TXTNAM)
        CALL	C.4688                  ; initialize name address
        POP	AF
        LD	HL,(TXTCOL)
        LD	E,00H
        SRL	A
        RR	E
        LD	D,A
        LD	B,7
        CALL	C.46A2                  ; initialize color address
        JP	J.4802                  ; initialize VDP registers

;	  Subroutine initialize screen mode 1 name, character, pattern, attribute address
;	     Inputs  ________________________
;	     Outputs ________________________

C$45D7:	CALL	C.46DB                  ; set 192 lines
        LD	BC,0
        CALL	C.46E4                  ; initialize vdp mode
        LD	A,(DPPAGE)
        LD	C,A
        LD	B,00H
        LD	HL,(T32CGP)
        ADD	A,A
        ADD	A,A
        ADD	A,A
        CALL	C.4694                  ; initialize character address
        LD	HL,(T32PAT)
        CALL	C.46CE                  ; initialize pattern address
        LD	HL,(T32NAM)
        ADD	A,A
        CALL	C.4688                  ; initialize name address
        LD	E,B
        LD	D,C
        LD	HL,(T32COL)
        CALL	C.46A2                  ; initialize color address
        SRL	D
        RR	E
        LD	HL,(T32ATR)
        JR	J.464E

;	  Subroutine initialize screen mode 2 name, character, pattern, attribute address
;	     Inputs  ________________________
;	     Outputs ________________________

C$460D:	XOR	A
        PUSH	AF
        LD	BC,00200H
        CALL	C.46E4                  ; initialize vdp mode
        CALL	C.46DB                  ; set 192 lines
        LD	A,(DPPAGE)
        LD	C,A
        LD	B,03H	; 3 
        LD	HL,(GRPCGP)
        ADD	A,A
        ADD	A,A
        ADD	A,A
        CALL	C.4694                  ; initialize character address
        LD	HL,(GRPPAT)
        CALL	C.46CE                  ; initialize pattern address
        LD	HL,(GRPNAM)
        ADD	A,A
        LD	B,00H
        CALL	C.4688                  ; initialize name address
        LD	E,B
        LD	D,C
        LD	B,7FH
        LD	HL,(GRPCOL)
        CALL	C.46A2                  ; initialize color address
        SRL	D
        RR	E
        POP	AF
        LD	B,A
        LD	HL,(GRPATR)
        JR	Z,J.464E
        LD	HL,(ATRBAS)

J.464E:	CALL	C$46B9                  ; initialize attribute address
        JP	J.4802                  ; initialize VDP registers

;	  Subroutine initialize screen mode 3 name, character, pattern, attribute address
;	     Inputs  ________________________
;	     Outputs ________________________

C$4654:	CALL	C.46DB                  ; set 192 lines
        LD	BC,00008H
        CALL	C.46E4                  ; initialize vdp mode
        LD	A,(DPPAGE)
        LD	C,A
        LD	B,00H
        LD	HL,(MLTCGP)
	ADD	A,A
        ADD	A,A
        ADD	A,A
        CALL	C.4694                  ; initialize character address
        LD	HL,(MLTPAT)
        CALL	C.46CE                  ; initialize pattern address
        LD	HL,(MLTNAM)
        ADD	A,A
        LD	B,00H
        CALL	C.4688                  ; initialize name address
        LD	E,B
        LD	D,C
        SRL	D
        RR	E
        LD	B,00H
        LD	HL,(MLTATR)
        JR	J.464E

;	  Subroutine initialize name address
;	     Inputs  
;	     Outputs ________________________

C.4688:	LD	L,A
        SRL	H
        SRL	H
        ADD	A,H
        OR	B
        LD	(RG2SAV),A
        LD	A,L
        RET

;	  Subroutine initialize character address
;	     Inputs  ________________________
;	     Outputs ________________________

C.4694:	LD	L,A
        SRL	H
        SRL	H
        SRL	H
        ADD	A,H
        OR	B
        LD	(RG4SAV),A
        LD	A,L
        RET

;	  Subroutine initialize color address
;	     Inputs  ________________________
;	     Outputs ________________________

C.46A2:	PUSH	AF
        XOR	A
        ADD	HL,HL
        ADC	A,A
        ADD	HL,HL
        ADC	A,A
        LD	L,H
        LD	H,A
        ADD	HL,DE
        LD	A,L
        OR	B
        LD	(RG3SAV),A
        LD	A,H
        LD	(RG10SAV),A
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.46B6:	LD	HL,(ATRBAS)

;	  Subroutine initialize attribute address
;	     Inputs  ________________________
;	     Outputs ________________________

C$46B9:	PUSH	AF
        XOR	A
        ADD	HL,HL
        ADC	A,A
        LD	L,H
        LD	H,A
        ADD	HL,DE
        LD	A,L
        OR	B
        LD	(RG5SAV),A
        LD	A,H
        LD	(RG11SAV),A
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.46CB:	LD	HL,(PATBAS)

;	  Subroutine initialize pattern address
;	     Inputs  ________________________
;	     Outputs ________________________

C.46CE:	LD	L,A
        SRL	H
        SRL	H
        SRL	H
        ADD	A,H
        LD	(RG6SAV),A
        LD	A,L
        RET

;	  Subroutine set 192 lines
;	     Inputs  ________________________
;	     Outputs ________________________

C.46DB:	LD	A,(RG9SAV)
        AND	7FH
        LD	(RG9SAV),A
        RET

;	  Subroutine initialize vdp mode
;	     Inputs  B = M5 M4 M3, C = M1 M2
;	     Outputs ________________________

C.46E4:	LD	A,(RG0SAV)
        AND	0F1H
        OR	B
        LD	(RG0SAV),A
        LD	A,(RG1SAV)
        AND	0E7H
        OR	C
        LD	(RG1SAV),A
        RET

;	  Subroutine initialize color palette
;	     Inputs  ________________________
;	     Outputs ________________________

C$46F7:	PUSH	HL
        LD	HL,I$470B
        LD	B,16
        LD	D,0
J$46FF:	LD	A,(HL)
        INC	HL
        LD	E,(HL)
        INC	HL
        CALL	C$472B                  ; write color palette
        INC	D
        DJNZ	J$46FF
        POP	HL
        RET

I$470B:	DEFB	000H,000H
        DEFB	000H,000H
        DEFB	011H,006H
        DEFB	033H,007H
        DEFB	017H,001H
        DEFB	027H,003H
        DEFB	051H,001H
        DEFB	027H,006H
        DEFB	071H,001H
        DEFB	073H,003H
        DEFB	061H,006H
        DEFB	064H,006H
        DEFB	011H,004H
        DEFB	065H,002H
        DEFB	055H,005H
        DEFB	077H,007H

;	  Subroutine write color palette
;	     Inputs  D = color number, A = , E =
;	     Outputs ________________________

C$472B:	PUSH	BC
        PUSH	HL
        LD	B,D
        LD	C,16
        PUSH	AF
        CALL	C.4551                  ; write VDP register
        POP	AF
        OUT	(9AH),A
        PUSH	AF
        POP	AF
        LD	A,E
        OUT	(9AH),A
        CALL	C$44E6                  ; get VRAM address color palette
        PUSH	AF
        CALL	C.4F56                  ; start VRAM access
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        EX	(SP),HL
        EX	(SP),HL
        POP	AF
        OUT	(99H),A
        PUSH	AF
        POP	AF
        LD	A,E
        OUT	(99H),A
        CALL	C.4F5E                  ; stop VRAM access
        POP	HL
        POP	BC
        RET

;	  Subroutine write byte to VRAM
;	     Inputs  HL = VRAM address (16K), (ACPAGE) = active page
;	     Outputs ________________________
;	     Remark  UNUSED

?.4756:	CALL	C.476A                  ; mask VRAM address to 16K

;	  Subroutine write byte to VRAM (128K)
;	     Inputs  HL = VRAM address, (ACPAGE) = active page
;	     Outputs ________________________

C.4759:	PUSH	AF
	CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        POP	AF
        OUT	(98H),A
        RET

;	  Subroutine read byte from VRAM (16K)
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4761:	CALL	C.476A                  ; mask VRAM address to 16K
        CALL	C.4771                  ; setup VRAM latch for VRAM read operation (16K)
        IN	A,(98H)
        RET

;	  Subroutine mask VRAM address to 16K
;	     Inputs  ________________________
;	     Outputs ________________________

C.476A:	PUSH	AF
        LD	A,H
        AND	3FH
        LD	H,A
        POP	AF
        RET

;	  Subroutine setup VRAM latch for VRAM read operation (16K)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4771:	LD	A,L
        DI
        OUT	(99H),A
        LD	A,H
        AND	3FH                     ; setup for VRAM read
        OUT	(99H),A
        EI
        RET

;	  Subroutine setup VRAM latch for VRAM write operation (128K)
;	     Inputs  HL = VRAM address, (ACPAGE) = active page
;	     Outputs ________________________

C.477C:	PUSH	BC
        PUSH	DE
        PUSH	HL
        EX	DE,HL
        CALL	C.47C5                  ; convert to absolute VRAM address
        LD	A,H
        AND	3FH
        OR	40H                     ; setup for VRAM write
        JR	J.47AA

;	  Subroutine setup for VRAM write
;	     Inputs  HL = VRAM adddress, (ACPAGE) = active page
;	     Outputs ________________________
;	     Remark  (ACPAGE) <> 0 does not work due bug

C$478A:	PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,(ACPAGE)
        AND	A			; active page is 0 ?
        LD	D,A
        CALL	NZ,C.47C5               ; nope, convert to absolute VRAM address
        LD	A,H
        AND	3FH
        OR	40H                     ; setup for VRAM write
        JR	J.47AA

;	  Subroutine setup for VRAM read
;	     Inputs  HL = VRAM adddress, (ACPAGE) = active page
;	     Outputs ________________________
;	     Remark  (ACPAGE) <> 0 does not work due bug

C$479C:	PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	A,(ACPAGE)
        AND	A			; active page is 0 ?
        LD	D,A
        CALL	NZ,C.47C5               ; nope, convert to absolute VRAM address
        LD	A,H
        AND	3FH                     ; setup for VRAM read
J.47AA:	PUSH	AF
        LD	A,H
        AND	0C0H
        OR	D
        RLC	A
        RLC	A
        DI
        OUT	(99H),A
        LD	A,128+14
        OUT	(99H),A                 ; write VRAM address latch b16-14
        LD	A,L
        OUT	(99H),A
        POP	AF
        OUT	(99H),A                 ; write VRAM address latch b13-b0
        EI
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine convert to absolute VRAM address
;	     Inputs  DE = VRAM address
;	     Outputs DHL = VRAM address

C.47C5:	LD	A,(SCRMOD)
        LD	C,A			; current screenmode
        LD	A,(ACPAGE)
        AND	A			; active page is 0 ?
        LD	HL,I$47D5
        JR	NZ,J$47DD               ; nope, calculate absolute address
        EX	DE,HL
        LD	D,A			; D=0 (b16) VRAM address
        RET

I$47D5:	DEFW	C.47E6
        DEFW	C.47F4
        DEFW	C.47F4
        DEFW	C.47F4

J$47DD:	LD	B,0
        ADD	HL,BC
        ADD	HL,BC
        LD	C,(HL)
        INC	HL
        LD	H,(HL)
        LD	L,C
        JP	(HL)

C.47E6:	LD	A,(LINLEN)
        CP	40+1                    ; TEXT40 mode ?
        LD	A,(ACPAGE)		; active page
        JR	C,J$47F6                ; TEXT40 mode,
        JR	J$47F5                  ; TEXT80 mode,

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.47F2:	ADD	A,A
        ADD	A,A

C.47F4:	ADD	A,A
J$47F5:	ADD	A,A
J$47F6:	ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        LD	H,A
        LD	A,00H
        LD	L,A
        ADC	A,A
        ADD	HL,DE
        LD	D,A
        RET

;	  Subroutine initialize VDP registers
;	     Inputs  ________________________
;	     Outputs ________________________

J.4802:	PUSH	AF
        PUSH	BC
        PUSH	DE
        PUSH	HL
        CALL	C.4F46                  ; start VDP register access
        DI
        XOR	A
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; control register pointer = 0
        CALL	C.4514			; wait for finished vertical retrace
        LD	HL,RG0SAV
        LD	B,8
J$4819:	LD	A,(HL)
        INC	HL
        OUT	(9BH),A
        DJNZ	J$4819
        LD	HL,RG8SAV
        LD	B,16
J$4824:	LD	A,(HL)
        INC	HL
        OUT	(9BH),A
        DJNZ	J$4824
        EI
        CALL	C.4F4E                  ; stop VDP register access
        POP	HL
        POP	DE
        POP	BC
        POP	AF
        RET

;	  Subroutine evaluate logical operation
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4833:	AND	A
        JR	Z,J$485F
        PUSH	BC
        LD	B,A
        CALL	C.4536                  ; check if in v9338 graphic screen mode (bitmap)
        LD	A,B
        POP	BC
        RET	C                       ; nope, quit
        CP	0F8H                    ; XOR ?
        JR	Z,J$485D
        CP	0F7H                    ; OR ?
        JR	Z,J$485A
        CP	0F6H                    ; AND ?
        JR	Z,J$4857
        CP	0C3H                    ; PRESET ?
        JR	Z,J$4854
        CP	0C2H                    ; PSET ?
        SCF
        RET	NZ                      ; nope, quit with
        XOR	A
        DEFB	0C2H
J$4854:	LD	A,4
        DEFB	0C2H
J$4857:	LD	A,1
        DEFB	0C2H
J$485A:	LD	A,2
        DEFB	0C2H
J$485D:	LD	A,3
J$485F:	OR	D
        LD	(DFAF7),A               ; save logical operation
        RET

;	  Subroutine draw box line
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4864:	CALL	C.4AAA
        CALL	C.4CCC
        CALL	C.4AAA
        CALL	C.4CCC
        CALL	C.4CA5
        JR	Z,C.48A6                ; draw line and quit
        CALL	C,C$4CCF
        CALL	C.4CB7
        JR	Z,C.48A6                ; draw line and quit
        CALL	C,C.4CC2
        LD	HL,(GYPOS)
        PUSH	HL
        PUSH	DE
        EX	DE,HL
        CALL	C.48A6                  ; draw line
        POP	HL
        LD	(GYPOS),HL
        EX	DE,HL
        CALL	C.48A6                  ; draw line
        POP	HL
        DEC	HL
        INC	DE
        LD	(GYPOS),HL
        LD	HL,(GXPOS)
        PUSH	BC
        LD	C,L
        LD	B,H
        CALL	C.48A6                  ; draw line
        POP	HL
        LD	(GXPOS),HL
        LD	C,L
        LD	B,H

;	  Subroutine draw line
;	     Inputs  ________________________
;	     Outputs ________________________

C.48A6:	PUSH	BC
        PUSH	DE
        PUSH	HL
        LD	HL,(GYPOS)
        PUSH	HL
        LD	HL,(GXPOS)
        PUSH	HL
        CALL	C.4AAA
        CALL	C.4CCC
        CALL	C.4AAA
        CALL	C.4CB7
        CALL	C,C.4CCC
        PUSH	DE
        PUSH	HL
        EX	AF,AF'
        XOR	A
        EX	AF,AF'
        CALL	C.4CA5
        EX	DE,HL
        JR	NC,J$48CF
        EX	AF,AF'
        OR	04H
        EX	AF,AF'
J$48CF:	POP	HL
        CALL	C.4242			; compare
        JR	C,J$48DA
        EX	DE,HL
        EX	AF,AF'
        OR	01H
        EX	AF,AF'
J$48DA:	EX	(SP),HL
        CALL	C.4F46                  ; start VDP register access
        CALL	C.4A13                  ; wait for VDP command to finish
        LD	A,36
        DI
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; control register pointer = 36
        LD	A,C
        OUT	(9BH),A
        LD	A,B
        OUT	(9BH),A                 ; set DX
        LD	A,L
        OUT	(9BH),A
        LD	A,(ACPAGE)		; active page
        OUT	(9BH),A                 ; set DY
        LD	A,E
        OUT	(9BH),A
        LD	A,D
        OUT	(9BH),A                 ; set NX
        POP	HL
        LD	A,L
        OUT	(9BH),A
        LD	A,H
        OUT	(9BH),A                 ; set NY
        LD	A,(ATRBYT)
        OUT	(9BH),A                 ; set attribute
        EX	AF,AF'
        OUT	(9BH),A                 ; set argument
        LD	A,(DFAF7)               ; logical operation
        AND	0FH
        OR	70H                     ; vdp LINE cmd
        EI
        POP	HL
        LD	(GXPOS),HL
        POP	HL
        LD	(GYPOS),HL
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine draw box filled
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4921:	CALL	C.4AAA
        CALL	C.4F46                  ; start VDP register access
        LD	L,C
        LD	H,B
        LD	A,E
        CALL	C.4A3B                  ; set DX and DY
        CALL	C.4CCC
        CALL	C.4AAA
        CALL	C.4CCC
        EX	AF,AF'
        XOR	A
        EX	AF,AF'
        CALL	C.4CA5
        JR	NC,J$4941
        OR	04H	; 4 
        EX	AF,AF'
J$4941:	INC	HL
        PUSH	HL
        CALL	C.4CB7
        JR	NC,J$494C
        EX	AF,AF'
        OR	08H	; 8 
        EX	AF,AF'
J$494C:	INC	HL
        POP	DE
        CALL	C.4A5A                  ; set NX and NY
        EX	AF,AF'
        CALL	C.4A71                  ; set argument
        EX	AF,AF'
        LD	A,(ATRBYT)
        CALL	C.4A87                  ; set attribute
        AND	0FH
        ADD	A,80H                   ; LMMV cmd
        CALL	C.4A7C                  ; start vdp cmd
        JP	C.4F4E                  ; stop VDP register access

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4966:	LD	B,4
        JR	J.4974

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.496A:	LD	B,6
        JR	J.4974

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.496E:	LD	B,2
        JR	J.4974

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4972:	LD	B,0
J.4974:	PUSH	BC
        CALL	C$49B3                  ; set SX, SY, attribute
        POP	AF
        DI
        OUT	(99H),A
        LD	A,128+45
        OUT	(99H),A                 ; set argument
        LD	A,60H
        OUT	(99H),A
        LD	A,128+46
        OUT	(99H),A                 ; vdp SEARCH cmd
        CALL	C.4A13                  ; wait for VDP command to finish
        AND	10H
        RET	Z
        LD	A,08H
        DI
        OUT	(99H),A
        LD	A,128+15
        OUT	(99H),A
        IN	A,(99H)
        LD	L,A
        LD	A,09H
        OUT	(99H),A
        LD	A,128+15
        OUT	(99H),A
        IN	A,(99H)
        PUSH	AF
        XOR	A
        OUT	(99H),A
        LD	A,128+15
        OUT	(99H),A
        EI
        POP	AF
        AND	01H	; 1 
        LD	H,A
        SCF
        RET

;	  Subroutine set SX, SY, attribute
;	     Inputs  A = attribute
;	     Outputs ________________________

C$49B3:	PUSH	AF
        CALL	C.4A13                  ; wait for VDP command to finish
        LD	A,32
        DI
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; control register pointer = 32
        LD	A,L
        OUT	(9BH),A
        LD	A,H
        OUT	(9BH),A                 ; set SX
        LD	A,E
        OUT	(9BH),A
        LD	A,(ACPAGE)		; active page
        OUT	(9BH),A                 ; set SY
        POP	AF
        OUT	(99H),A
        LD	A,128+44
        OUT	(99H),A                 ; set attribute
        EI
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.49D7:	PUSH	DE
        CALL	C$4A35                  ; set SX and SY
        XOR	A
        CALL	C.4A71                  ; set argument
        LD	A,40H                   ; POINT cmd
        CALL	C.4A7C                  ; start vdp cmd
        CALL	C.4A13                  ; wait for VDP command to finish
        LD	A,7
        CALL	C.4A20                  ; read VDP status register 7
        EI
        POP	DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.49EF:	CALL	C.4F46                  ; start VDP register access
        CALL	C.4A3B                  ; set DX and DY
        LD	A,44
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; control register pointer = 44
        LD	A,(ATRBYT)
        OUT	(9BH),A                 ; set attribute
        XOR	A
        OUT	(9BH),A                 ; argument = 0
        LD	A,(DFAF7)               ; logical operation
        AND	0FH
        OR	50H                     ; vdp PSET cmd
        OUT	(9BH),A
        CALL	C.4F4E                  ; stop VDP register access
        EI
        RET

;	  Subroutine wait for VDP command to finish
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A13:	LD	A,2
        CALL	C.4A20                  ; read VDP status register 2
        EI
        RRC	A
        JR	C,C.4A13
        RLC	A
        RET

;	  Subroutine read VDP status register
;	     Inputs  A = status register
;	     Outputs ________________________

C.4A20:	DI
        OUT	(99H),A
        LD	A,128+15
        OUT	(99H),A
        PUSH	HL
        POP	HL
        IN	A,(99H)
        PUSH	AF
        XOR	A
        OUT	(99H),A
        LD	A,128+15
        OUT	(99H),A
        POP	AF
        RET

;	  Subroutine set SX and SY
;	     Inputs  ________________________
;	     Outputs ________________________

C$4A35:	PUSH	AF
        LD	A,32                    ; SX
        PUSH	AF
        JR	J$4A3F

;	  Subroutine set DX and DY
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A3B:	PUSH	AF
        LD	A,36                    ; DX
        PUSH	AF
J$4A3F:	CALL	C.4A13                  ; wait for VDP command to finish
        DI
        POP	AF
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; set control register pointer
        LD	A,L
        OUT	(9BH),A
        LD	A,H
        OUT	(9BH),A                 ; set SX or DX
        POP	AF
        OUT	(9BH),A
        LD	A,(ACPAGE)		; active page
        OUT	(9BH),A                 ; set SY or DY
        EI
        RET

;	  Subroutine set NX and NY
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A5A:	LD	A,40
        DI
        OUT	(99H),A
        LD	A,128+17
        OUT	(99H),A                 ; control register pointer = 40
        LD	A,E
        OUT	(9BH),A
        LD	A,D
        OUT	(9BH),A                 ; set NX
        LD	A,L
        OUT	(9BH),A
        LD	A,H
        OUT	(9BH),A                 ; set NY
        EI
        RET

;	  Subroutine set argument
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A71:	PUSH	AF
        DI
        OUT	(99H),A
        LD	A,128+45
        OUT	(99H),A
        EI
        POP	AF
        RET

;	  Subroutine start vdp cmd
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A7C:	PUSH	AF
        DI
        OUT	(99H),A
        LD	A,128+46
        OUT	(99H),A
        EI
        POP	AF
        RET

;	  Subroutine set attribute
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A87:	PUSH	AF
        DI
        OUT	(99H),A
        LD	A,128+44
        OUT	(99H),A                 ; set attribute
        EI
        POP	AF
        RET

;	     Data    __________________________
;	     Remark  UNUSED

?.4A92:	DEFB	000H,060H,000H,000H,000H,000H,000H,000H

;	     Data    vdp register 8-23

I$4A9A:	DEFB	000H,002H,000H,000H,000H,000H,000H,000H
        DEFB	000H,000H,000H,000H,000H,03BH,005H,000H

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4AAA:	CALL	C.4536                  ; check if in v9338 graphic screen mode (bitmap)
        JP	NC,J$4AF0               ; yep,
        PUSH	HL
        PUSH	BC
        LD	B,01H	; 1 
        EX	DE,HL
        LD	A,H
        ADD	A,A
        JR	NC,J$4ABE
        LD	HL,0
        JR	J$4AC8

J$4ABE:	LD	DE,192
        CALL	C.4242			; compare
        JR	C,J$4ACA
        EX	DE,HL
        DEC	HL
J$4AC8:	LD	B,00H
J$4ACA:	EX	(SP),HL
        LD	A,H
        ADD	A,A
        JR	NC,J$4AD4
        LD	HL,0
        JR	J$4ADE

J$4AD4:	LD	DE,256
        CALL	C.4242			; compare
        JR	C,J$4AE0
        EX	DE,HL
        DEC	HL
J$4ADE:	LD	B,00H
J$4AE0:	POP	DE
        SRL	L
        SRL	L
        SRL	E
        SRL	E
        LD	A,B
        RRC	A
        LD	C,L
        LD	B,H
        POP	HL
        RET

J$4AF0:	PUSH	HL
        PUSH	BC
        LD	B,01H	; 1 
        EX	DE,HL
        LD	A,H
        ADD	A,A
        JR	NC,J$4AFE
        LD	HL,0
        JR	J$4B08

J$4AFE:	LD	DE,212
        CALL	C.4242			; compare
        JR	C,J$4B0A
        EX	DE,HL
        DEC	HL
J$4B08:	LD	B,00H
J$4B0A:	EX	(SP),HL
        LD	A,H
        ADD	A,A
        JR	NC,J$4B14
        LD	HL,0
        JR	J$4B28

J$4B14:	LD	A,(SCRMOD)
        AND	02H	; 2 
        LD	DE,512
        JR	NZ,J$4B21
        LD	DE,512
J$4B21:	CALL	C.4242			; compare
        JR	C,J$4B2A
        EX	DE,HL
        DEC	HL
J$4B28:	LD	B,00H
J$4B2A:	LD	A,B
        RRC	A
        LD	B,H
        LD	C,L
        POP	DE
        POP	HL
        RET

;	  Subroutine CLS basic statement
;	     Inputs  ________________________
;	     Outputs ________________________
;	     Remark  UNUSED

?.4B32:	RET	NZ

;	  Subroutine clear screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B33:	PUSH	AF
        PUSH	DE
        PUSH	HL
        PUSH	BC
        CALL	C$4B3F
        POP	BC
        POP	HL
        POP	DE
        POP	AF
        RET

;	  Subroutine clear screen
;	     Inputs  ________________________
;	     Outputs ________________________

C$4B3F:	CALL	C.4530                  ; check if in v9338 graphic screen mode (multi color sprites)
        JP	Z,C.4BDC		; screen 4, clear screen 2/4
        JR	NC,J$4B53		; screen 5-8, clear screen 5-8
        CALL	C.452A                  ; check if in graphic screen mode
        JP	Z,C.4BDC		; screen 2, clear screen 2/4
        JP	NC,C.4BF4		; screen 3, clear screen 3
        JP	C.4BAB			; screen 0-1, clear text screen

;	  Subroutine clear screen 5-8
;	     Inputs  ________________________
;	     Outputs ________________________

J$4B53:	PUSH	AF
        PUSH	DE
        PUSH	HL
        CALL	C.4A13                  ; wait for VDP command to finish
        LD	A,(BAKCLR)
        CALL	C$4B8C
        CALL	C.4A87                  ; set attribute
        XOR	A
        LD	H,A
        LD	L,A
        CALL	C.4A3B                  ; set DX and DY
        XOR	A
        CALL	C.4A71                  ; set argument
        LD	A,(SCRMOD)
        AND	02H
        LD	DE,00100H
        JR	Z,J$4B79
        LD	DE,00200H
J$4B79:	LD	HL,000D4H
        CALL	C.4A5A                  ; set NX and NY
        LD	A,0C0H                  ; HMMV cmd
        CALL	C.4A7C                  ; start vdp cmd
        CALL	C.4A13                  ; wait for VDP command to finish
        POP	HL
        POP	DE
        POP	BC
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4B8C:	LD	B,A
        LD	A,(SCRMOD)
        CP	8
        LD	A,B
        RET	Z
        RLC	A
        RLC	A
        RLC	A
        RLC	A
        OR	B
        LD	B,A
        LD	A,(SCRMOD)
        CP	6
        LD	A,B
        RET	NZ
        RRC	A
        RRC	A
        OR	B
        RET

;	  Subroutine clear text screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BAB:	LD	A,(SCRMOD)
        AND	A
        LD	HL,(NAMBAS)
        JR	NZ,J$4BC5
        LD	A,(LINLEN)
        CP	40+1
        JR	NC,J$4BC0
        LD	BC,003C0H
        JR	J.4BC8

J$4BC0:	LD	BC,00780H
        JR	J.4BC8

J$4BC5:	LD	BC,00300H
J.4BC8:	LD	A," "
        CALL	C.4C33                  ; fill VRAM
        CALL	C.4C09                  ; cursor position to home
        LD	HL,LINTTB
        LD	B,18H
J$4BD5:	LD	(HL),B
        INC	HL
        DJNZ	J$4BD5
        JP	J$4203                  ; display/erase function keys

;	  Subroutine clear screen 2/4
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BDC:	CALL	C.4C5D
        LD	BC,01800H
        PUSH	BC
        LD	HL,(GRPCOL)
        LD	A,(BAKCLR)
        CALL	C.4C33                  ; fill VRAM
        LD	HL,(GRPCGP)
        POP	BC
        XOR	A
J$4BF1:	JP	C.4C33                  ; fill VRAM

;	  Subroutine clear screen 3
;	     Inputs  ________________________
;	     Outputs ________________________

C.4BF4:	CALL	C.4C5D
        LD	HL,BAKCLR
        LD	A,(HL)
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        OR	(HL)
        LD	HL,(MLTCGP)
        LD	BC,00600H
        JP	J$4BF1                  ; fill VRAM

;	  Subroutine cursor position to home
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C09:	LD	HL,00101H
        LD	(CSRY),HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C10:	CALL	C.4536                  ; check if in v9338 graphic screen mode (bitmap)
        JR	NC,J$4C58               ; yep,
        CALL	C.4C66
        DEC	A
        JP	M,J$4C4B
        PUSH	AF
        CALL	C.4C5D
        POP	AF
        RET	NZ
        LD	HL,BAKCLR
        LD	A,(FORCLR)
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        OR	(HL)
        LD	HL,(T32COL)
        LD	BC,32

;	  Subroutine fill VRAM
;	     Inputs  HL = VRAM address, BC = size, A = byte
;	     Outputs ________________________

C.4C33:	PUSH	AF
        CALL	C.4F56                  ; start VRAM access
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        LD	A,C
        OR	A
        JR	Z,J$4C3F
        INC	B
J$4C3F:	POP	AF
J.4C40:	OUT	(98H),A
        DEC	C
        JR	NZ,J.4C40
        DJNZ	J.4C40
        CALL	C.4F5E                  ; stop VRAM access
        RET

J$4C4B:	LD	HL,BAKCLR
        LD	A,(FORCLR)
        ADD	A,A
        ADD	A,A
        ADD	A,A
        ADD	A,A
        OR	(HL)
        JR	J$4C60

J$4C58:	CP	08H
        CALL	NZ,C.4C66

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C5D:	LD	A,(BDRCLR)
J$4C60:	LD	B,A
        LD	C,7
        JP	C.4551                  ; write VDP register

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C66:	PUSH	AF
        LD	A,(BAKCLR)
        AND	0FH
        LD	(BAKCLR),A
        LD	A,(FORCLR)
        AND	0FH
        LD	(FORCLR),A
        POP	AF
        RET

;	  Subroutine initialize patterngenerator with msx characterset
;	     Inputs  ________________________
;	     Outputs ________________________

C$4C79:	CALL	H.INIP
        CALL	C.4F56                  ; start VRAM access
        LD	HL,(CGPBAS)
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        LD	A,(CGPNT+0)
        LD	HL,(CGPNT+1)
        LD	BC,256*8
        PUSH	AF
J$4C8F:	POP	AF
        PUSH	AF
        PUSH	BC
        DI
        CALL	C$4209			; RDSLT
        EI
        POP	BC
        OUT	(98H),A
        INC	HL
        DEC	BC
        LD	A,C
        OR	B
        JR	NZ,J$4C8F
        CALL	C.4F5E                  ; stop VRAM access
        POP	AF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CA5:	LD	HL,(GXPOS)
        LD	A,L
        SUB	C
        LD	L,A
        LD	A,H
        SBC	A,B
        LD	H,A
J$4CAE:	RET	NC
        XOR	A
        SUB	L
        LD	L,A
        SBC	A,H
        SUB	L
        LD	H,A
        SCF
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CB7:	LD	HL,(GYPOS)
        LD	A,L
        SUB	E
        LD	L,A
        LD	A,H
        SBC	A,D
        LD	H,A
        JR	J$4CAE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CC2:	PUSH	HL
        LD	HL,(GYPOS)
        EX	DE,HL
        LD	(GYPOS),HL
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CCC:	CALL	C.4CC2

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4CCF:	PUSH	HL
        PUSH	BC
        LD	HL,(GXPOS)
        EX	(SP),HL
        LD	(GXPOS),HL
        POP	BC
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CDB:	PUSH	HL
        PUSH	AF
        LD	HL,GRPHED
        XOR	A
        CP	(HL)
        LD	(HL),A
        JR	Z,J$4CF2
        POP	AF
        SUB	40H
        CP	20H
        JR	C,J$4CF0
        ADD	A,40H
J$4CEE:	CP	A
        SCF
J$4CF0:	POP	HL
        RET

J$4CF2:	POP	AF
        CP	01H
        JR	NZ,J$4CEE
        LD	(HL),A
        POP	HL
        RET

;	  Subroutine H.CHPU handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$4CFA:	PUSH	HL
        PUSH	DE
        PUSH	BC
        PUSH	AF
        CALL	C.452A                  ; check if in graphic screen mode
        JR	NC,J$4D15		; yep,
        CALL	C.50F4
        POP	AF
        PUSH	AF
        CALL	C.4D81
        CALL	C.509F
        LD	A,(CSRX)
        DEC	A
        LD	(TTYPOS),A
J$4D15:	POP	AF
        POP	BC
        POP	DE
        POP	HL
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.CHPU+4
        LD	HL,0
        ADD	HL,SP
J$4D25:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        EX	DE,HL
        OR	A
        SBC	HL,BC
        EX	DE,HL
        JR	NZ,J$4D25
        LD	D,H
        LD	E,L
        DEC	DE
        OR	A
        SBC	HL,SP
        LD	B,H
        LD	C,L
        LD	H,D
        LD	L,E
        PUSH	DE
        LD	DE,10
        ADD	HL,DE
        POP	DE
        EX	DE,HL
        LDDR
        POP	DE
        POP	DE
        POP	DE
        POP	DE
        POP	DE
        POP	DE
        POP	HL
        POP	BC
        POP	AF
        EI
        RET

;	  Subroutine setup for OTIR/INIR
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D4E:	EX	DE,HL
        LD	A,C
        OR	A
        LD	A,B
        LD	B,C
        RET	Z
        INC	A
        RET

;	  Subroutine copy VRAM to memory
;	     Inputs  HL = VRAM address, DE = memory address, BC = size
;	     Outputs ________________________

C$4D56:	CALL	C.4F56                  ; start VRAM access
        CALL	C$479C                  ; setup for VRAM read
        CALL	C.4D4E                  ; setup for OTIR/INIR
        LD	C,98H
J$4D61:	INIR
        DEC	A
        JR	NZ,J$4D61
        EX	DE,HL
        CALL	C.4F5E                  ; stop VRAM access
        RET

;	  Subroutine copy memory to VRAM
;	     Inputs  HL = memory address, DE = VRAM address, BC = size
;	     Outputs ________________________

C$4D6B:	EX	DE,HL
        CALL	C.4F56                  ; start VRAM access
        CALL	C$478A                  ; setup for VRAM write
        CALL	C.4D4E                  ; setup for OTIR/INIR
        LD	C,98H
J$4D77:	OTIR
        DEC	A
        JR	NZ,J$4D77
        EX	DE,HL
        CALL	C.4F5E                  ; stop VRAM access
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4D81:	CALL	C.4CDB
        RET	NC
        LD	C,A
        JR	NZ,J$4D95
        LD	HL,ESCCNT
        LD	A,(HL)
        AND	A                       ; in ESC sequence ?
        JP	NZ,J$4E31               ; yep, handle
        LD	A,C
        CP	20H                     ; control character ?
        JR	C,J$4DB6                ; yep, handle
J$4D95:	LD	HL,(CSRY)               ; get cursor position
        CP	7FH                     ; DEL control code ?
        JP	Z,J$5067                ; yep, handle
        CALL	C.4EC3                  ; write character to VRAM
        CALL	C.4F69                  ; next column
        RET	NZ
        XOR	A
        CALL	C$4F35
        LD	H,1

;	  Subroutine cursor to new line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DAA:	CALL	C.4F86                  ; cursor down
        RET	NZ
        CALL	C.4F8E                  ; set cursor position
        LD	L,1
        JP	C.4FAD

J$4DB6:	LD	HL,C.4DD1-2
        LD	C,12

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DBB:	INC	HL
        INC	HL
        AND	A
        DEC	C
        RET	M
        CP	(HL)
        INC	HL
        JR	NZ,C.4DBB
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        LD	HL,(CSRY)               ; get cursor position
        CALL	C.4DCF
        XOR	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4DCF:	PUSH	BC
        RET

C.4DD1:	DEFB	7
        DEFW	C.4221                  ; beep
        DEFB	8
        DEFW	C.4F71                  ; cursor left
        DEFB	9
        DEFW	C.4F96                  ; cursor to next tab
        DEFB	10
        DEFW	C.4DAA                  ; cursor to new line
        DEFB	11
        DEFW	C.4FA4                  ; cursor to home
        DEFB	12
        DEFW	C.4BAB                  ; clear text screen
        DEFB	13
        DEFW	C.4FA6                  ; cursor to begin of line
        DEFB	27
        DEFW	C.4E2B                  ; start ESC sequence
        DEFB	28
        DEFW	C.4F80                  ; cursor right with warp around
        DEFB	29
        DEFW	C.4F71                  ; cursor left
        DEFB	30
        DEFW	C.4F7C                  ; cursor up
        DEFB	31
        DEFW	C.4F86                  ; cursor down

I$4DF5:	DEFB	"j"
        DEFW	C.4BAB                  ; clear text screen
        DEFB	"E"
        DEFW	C.4BAB                  ; clear text screen
        DEFB	"K"
        DEFW	C.5072                  ; erase to end of line
        DEFB	"J"
        DEFW	C.508F                  ; erase to end of screen
        DEFB	"l"
        DEFW	C.5070                  ; erase line
        DEFB	"L"
        DEFW	C.4FFB                  ; insert line
        DEFB	"M"
        DEFW	C.4FAA                  ; delete line
        DEFB	"Y"
        DEFW	C.4E28                  ; in ESC Y sequence
        DEFB	"A"
        DEFW	C.4F7C                  ; cursor up
        DEFB	"B"
        DEFW	C.4F86                  ; cursor down
        DEFB	"C"
        DEFW	C.4F69                  ; cursor right
        DEFB	"D"
        DEFW	C.4F7A                  ; cursor left
        DEFB	"H"
        DEFW	C.4C09                  ; cursor position to home
        DEFB	"x"
        DEFW	C.4E22                  ; in ESX x sequence
        DEFB	"y"
        DEFW	C.4E25                  ; in ESX y sequence

C.4E22:	LD	A,1                     ; start of ESC x sequence
        DEFB	1
C.4E25:	LD	A,2                     ; start of ESX y sequence
        DEFB	1
C.4E28:	LD	A,4                     ; start of ESC Y sequence
        DEFB	1
C.4E2B:	LD	A,0FFH                  ; start of ESC sequence
        LD	(ESCCNT),A
        RET

J$4E31:	JP	P,J$4E3F
        LD	(HL),00H
        LD	A,C
        LD	HL,I$4DF5-2
        LD	C,15
        JP	C.4DBB

J$4E3F:	DEC	A
        JR	Z,J$4E60
        DEC	A
        JR	Z,J$4E6A
        DEC	A
        LD	(HL),A
        LD	A,(LINLEN)
        LD	DE,CSRX
        JR	Z,J$4E55
        LD	(HL),03H	; 3 
        CALL	C.4F3C                  ; get last line
        DEC	DE
J$4E55:	LD	B,A
        LD	A,C
        SUB	20H	; " "
        CP	B
        INC	A
J$4E5B:	LD	(DE),A
        RET	C
        LD	A,B
        LD	(DE),A
        RET

J$4E60:	LD	(HL),A
        LD	A,C
        SUB	34H	; "4"
        JR	Z,J$4E71
        DEC	A
        JR	Z,J$4E78
        RET

J$4E6A:	LD	(HL),A
        LD	A,C
        SUB	34H	; "4"
        JR	NZ,J$4E75
        INC	A
J$4E71:	LD	(CSTYLE),A
        RET

J$4E75:	DEC	A
        RET	NZ
        INC	A
J$4E78:	LD	(CSRSR),A
        RET

;	  Subroutine read cursor character pattern
;	     Inputs  ________________________
;	     Outputs ________________________

C$4E7C:	PUSH	HL
        LD	C,8
        JR	J$4E8B

;	  Subroutine read line from VRAM
;	     Inputs  L = line
;	     Outputs ________________________
;	     Remark  UNUSED

?.4E81:	PUSH	HL
        LD	H,1                     ; col 1
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        LD	A,(LINLEN)
        LD	C,A
J$4E8B:	LD	B,0
        LD	DE,LINWRK
        CALL	C$4D56                  ; copy VRAM to memory
        POP	HL
        RET

;	  Subroutine write cursor character pattern
;	     Inputs  ________________________
;	     Outputs ________________________

C$4E95:	PUSH	HL
        LD	C,8
        JR	J$4EA4

;	  Subroutine write line to VRAM
;	     Inputs  L = line
;	     Outputs ________________________
;	     Remark  UNUSED

?.4E9A:	PUSH	HL
        LD	H,1                     ; col 1
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        LD	A,(LINLEN)
        LD	C,A
J$4EA4:	LD	B,0
        EX	DE,HL
        LD	HL,LINWRK
        CALL	C$4D6B                  ; copy memory to VRAM
        POP	HL
        RET

;	  Subroutine read character from VRAM
;	     Inputs  H = col, L = line
;	     Outputs ________________________

C.4EAF:	PUSH	HL
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        CALL	C.4F56                  ; start VRAM access
        CALL	C.4771                  ; setup VRAM latch for VRAM read operation (16K)
        EX	(SP),HL
        EX	(SP),HL
        IN	A,(98H)
        CALL	C.4F5E                  ; stop VRAM access
        LD	C,A
        POP	HL
        RET

;	  Subroutine write character to VRAM
;	     Inputs  H = col, L = line
;	     Outputs ________________________

C.4EC3:	PUSH	HL
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        CALL	C.4F56                  ; start VRAM access
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        LD	A,C
        OUT	(98H),A
        CALL	C.4F5E                  ; stop VRAM access
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4ED5:	CALL	C.4F56                  ; start VRAM access
        CALL	C.4771                  ; setup VRAM latch for VRAM read operation (16K)
        EX	DE,HL
        LD	C,98H
        INIR
        JP	C.4F5E                  ; stop VRAM access

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4EE3:	CALL	C.4F56                  ; start VRAM access
        EX	DE,HL
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        EX	DE,HL
        LD	C,98H
        OTIR
        JP	C.4F5E                  ; stop VRAM access

;	  Subroutine convert coordinate to VRAM address
;	     Inputs  H = col, L = line
;	     Outputs HL = VRAM address

C.4EF2:	PUSH	BC
        DEC	H
        DEC	L
        LD	E,H
        LD	H,00H
        LD	D,H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        LD	C,L
        LD	B,H
        ADD	HL,HL
        ADD	HL,HL
        LD	A,(SCRMOD)
        AND	A
        LD	A,(LINLEN)
        JR	Z,J$4F0D
        SBC	A,22H
        JR	J.4F1A

J$4F0D:	CP	40+1
        JR	C,J$4F17
        ADD	HL,BC
        ADD	HL,HL
        SBC	A,52H
        JR	J.4F1A

J$4F17:	ADD	HL,BC
        SBC	A,2AH
J.4F1A:	ADD	HL,DE
        CPL
        AND	A
        RRA
        LD	E,A
        ADD	HL,DE
        EX	DE,HL
        LD	HL,(NAMBAS)
        ADD	HL,DE
        POP	BC
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F27:	PUSH	HL
        LD	DE,LINTTB-1
        LD	H,00H
        ADD	HL,DE
        LD	A,(HL)
        EX	DE,HL
        POP	HL
        AND	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F33:	DEFB    03EH

C$4F34: XOR     A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F35:	PUSH	AF
        CALL	C.4F27			; get LINTTB entry
        POP	AF
        LD	(DE),A
        RET

;	  Subroutine get last line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F3C:	LD	A,(CNSDFG)
        PUSH	HL
        LD	HL,CRTCNT
        ADD	A,(HL)
        POP	HL
        RET

;	  Subroutine start VDP register access
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F46:	PUSH	AF
        LD	A,(DFB02)
        OR	01H
        JR	J.4F64

;	  Subroutine stop VDP register access
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F4E:	PUSH	AF
        LD	A,(DFB02)
        AND	0FEH
        JR	J.4F64

;	  Subroutine start VRAM access
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F56:	PUSH	AF
        LD	A,(DFB02)
        OR	80H
        JR	J.4F64

;	  Subroutine stop VRAM access
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F5E:	PUSH	AF
        LD	A,(DFB02)
        AND	7FH
J.4F64:	LD	(DFB02),A
        POP	AF
        RET

;	  Subroutine cursor right
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F69:	LD	A,(LINLEN)
        CP	H                       ; already at the end of line ?
        RET	Z                       ; yep, quit
        INC	H
        JR	C.4F8E                  ; set cursor position

;	  Subroutine cursor left
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F71:	CALL	C.4F7A
        RET	NZ
        LD	A,(LINLEN)
        LD	H,A
        DEFB	011H

C.4F7A: DEC     H
        DEFB    03EH

;	  Subroutine cursor up
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F7C:	DEC	L                       ; already on the first line ?

        RET	Z                       ; yep, quit
        JR	C.4F8E                  ; set cursor position

;	  Subroutine cursor right with warp around
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F80:	CALL	C.4F69                  ; cursor right
        RET	NZ
        LD	H,1

;	  Subroutine cursor down
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F86:	CALL	C.4F3C                  ; get last line
        CP	L                       ; already on the last line ?
        RET	Z                       ; yep, quit
        JR	C,J$4F92
        INC	L

;	  Subroutine set cursor position
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F8E:	LD	(CSRY),HL
        RET

J$4F92:	DEC	L
        XOR	A
        JR	C.4F8E                  ; set cursor position

;	  Subroutine cursor to next tab
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F96:	LD	A," "
        CALL	C.4D81
        LD	A,(CSRX)
        DEC	A
        AND	07H
        JR	NZ,C.4F96
        RET

;	  Subroutine cursor to home
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FA4:	LD	L,1

;	  Subroutine cursor to begin of line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FA6:	LD	H,1
        JR	C.4F8E                  ; set cursor position

;	  Subroutine delete line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FAA:	CALL	C.4FA6                  ; cursor to begin of line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FAD:	CALL	C.4F3C                  ; get last line
        SUB	L
        RET	C
        JP	Z,J.504C
        PUSH	HL
        PUSH	AF
        LD	C,A
        LD	B,00H
        CALL	C.4F27			; get LINTTB entry
        LD	L,E
        LD	H,D
        INC	HL
        LDIR
        LD	HL,FSTPOS
        DEC	(HL)
        POP	AF
        POP	HL
        PUSH	AF
        LD	A,(LINLEN)
        CP	40+1
        JR	NC,J$4FE1
        POP	AF
J$4FD1:	PUSH	AF
        INC	L
        CALL	C.5119
        DEC	L
        CALL	C.5142
        INC	L
        POP	AF
        DEC	A
        JR	NZ,J$4FD1
        JR	J$4FF8

J$4FE1:	POP	AF
J$4FE2:	PUSH	AF
        INC	L
        CALL	C.511A
        DEC	L
        CALL	C.5143
        INC	L
        CALL	C.5133
        DEC	L
        CALL	C.515D
        INC	L
        POP	AF
        DEC	A
        JR	NZ,J$4FE2
J$4FF8:	JP	J.504C

;	  Subroutine insert line
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FFB:	CALL	C.4FA6                  ; cursor to begin of line

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4FFE:	CALL	C.4F3C                  ; get last line
        LD	H,A
        SUB	L
        RET	C
        JP	Z,J.504C
        LD	L,H
        PUSH	HL
        PUSH	AF
        LD	C,A
        LD	B,00H
        CALL	C.4F27			; get LINTTB entry
        LD	L,E
        LD	H,D
        PUSH	HL
        DEC	HL
        LDDR
        POP	HL
        LD	(HL),H
        POP	AF
        POP	HL
        PUSH	AF
        LD	A,(LINLEN)
        CP	29H	; ")"
        JR	NC,J$5033
        POP	AF
J$5023:	PUSH	AF
        DEC	L
        CALL	C.5119
        INC	L
        CALL	C.5142
        DEC	L
        POP	AF
        DEC	A
        JR	NZ,J$5023
        JR	J$504A

J$5033:	POP	AF
J$5034:	PUSH	AF
        DEC	L
        CALL	C.511A
        INC	L
        CALL	C.5143
        DEC	L
        CALL	C.5133
        INC	L
        CALL	C.515D
        DEC	L
        POP	AF
        DEC	A
        JR	NZ,J$5034
J$504A:	LD	H,1
J.504C:	PUSH	HL
        LD	HL,(CSRY)               ; save cursor position
        EX	(SP),HL
        LD	(CSRY),HL               ; set new cursor position
        CALL	C$505C
        POP	HL
        LD	(CSRY),HL               ; restore cursor position
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$505C:	LD	A,1BH
        CALL	C.41FD                  ; output to current channel
        LD	A,"l"
        CALL	C.41FD                  ; output to current channel
        RET

J$5067:	CALL	C.4F71                  ; cursor left
        RET	Z
        LD	C," "
        JP	C.4EC3                  ; write character to VRAM

;	  Subroutine erase line
;	     Inputs  ________________________
;	     Outputs ________________________

C.5070:	LD	H,1

;	  Subroutine erase to end of line
;	     Inputs  ________________________
;	     Outputs ________________________

C.5072:	CALL	C.4F33
        PUSH	HL
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        CALL	C.4F56                  ; start VRAM access
        CALL	C.477C                  ; setup VRAM latch for VRAM write operation (128K)
        POP	HL
J$5080:	LD	A," "
        OUT	(98H),A
        INC	H
        LD	A,(LINLEN)
        CP	H
        JR	NC,J$5080
        CALL	C.4F5E                  ; stop VRAM access
        RET

;	  Subroutine erase to end of screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.508F:	PUSH	HL
        CALL	C.5072                  ; erase to end of line
        POP	HL
        CALL	C.4F3C                  ; get last line
        CP	L
        RET	C
        RET	Z
        LD	H,1
        INC	L
        JR	C.508F

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.509F:	LD	A,(CSRSR)
        AND	A
        RET	Z
        CALL	C.50A8                  ; display cursor
        RET

;	  Subroutine display cursor
;	     Inputs  ________________________
;	     Outputs ________________________

C.50A8:	CALL	C.452A                  ; check if in graphic screen mode
        RET	NC			; yep, quit
        LD	HL,(CSRY)               ; get cursor position
        PUSH	HL
        CALL	C.4EAF                  ; read character from VRAM
        LD	(CURSAV),A
        LD	L,A
        LD	H,00H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        EX	DE,HL
        LD	HL,(CGPBAS)
        PUSH	HL
        ADD	HL,DE
        CALL	C$4E7C                  ; read cursor character pattern
        LD	HL,LINWRK+7
        LD	B,8
        LD	A,(CSTYLE)
        AND	A
        JR	Z,J.50D2
        LD	B,3
J.50D2:	LD	A,(HL)
        CPL
        LD	(HL),A
        DEC	HL
        DJNZ	J.50D2
        POP	HL
        LD	BC,007F8H
        ADD	HL,BC
        CALL	C$4E95                  ; write cursor character pattern
        POP	HL
        LD	C,0FFH
        JP	C.4EC3                  ; write character to VRAM

;	  Subroutine H.DSPC handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$50E6:	CALL	C.50A8                  ; display cursor
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.DSPC+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.50F4:	LD	A,(CSRSR)
        AND	A
        RET	Z
        CALL	C.50FD                  ; erase cursor
        RET

;	  Subroutine erase cursor
;	     Inputs  ________________________
;	     Outputs ________________________

C.50FD:	CALL	C.452A                  ; check if in graphic screen mode
        RET	NC			; yep, quit
        LD	HL,(CSRY)               ; get cursor position
        LD	A,(CURSAV)
        LD	C,A
        JP	C.4EC3                  ; write character to VRAM

;	  Subroutine H.ERAC handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$510B:	CALL	C.50FD                  ; erase cursor
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.ERAC+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5119: DEFB    0F6H
C.511A:	XOR     A
        PUSH	HL
        PUSH	AF
        LD	H,1                     ; col 1
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        POP	AF
        LD	A,(LINLEN)
        JR	NZ,J$512A
        SUB	28H	; "("
J$512A:	LD	B,A
J$512B:	LD	DE,LINWRK
        CALL	C$4ED5
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5133:	PUSH	HL
        LD	A,(LINLEN)
        SUB	40
        INC	A
        LD	H,A
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        LD	B,40
        JR	J$512B

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5142: DEFB    0F6H

C.5143:	XOR     A
        PUSH	HL
        PUSH	AF
        LD	H,1                     ; col 1
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        POP	AF
        LD	A,(LINLEN)
        JR	NZ,J$5153
        SUB	40
J$5153:	LD	B,A
J$5154:	EX	DE,HL
        LD	HL,LINWRK
        CALL	C$4EE3
        POP	HL
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.515D:	PUSH	HL
        LD	A,(LINLEN)
        SUB	27H	; "'"
        LD	H,A
        CALL	C.4EF2                  ; convert coordinate to VRAM address
        LD	B,40
        JR	J$5154

;	  Subroutine H.ERAF handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$516B:	XOR	A                       ; disable function key display
        CALL	C.4527                  ; set functionkey display mode and check if in graphic screen mode
        RET	NC                      ; not in textmode, quit
        PUSH	HL
        LD	HL,(CRTCNT)
        CALL	C.5070                  ; erase line
        POP	HL
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.ERAF+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine H.DSPF handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$5183:	LD	A,0FFH                  ; enable function key display
        CALL	C.4527                  ; set functionkey display mode and check if in graphic screen mode
        RET	NC                      ; not in textmode, quit
        PUSH	HL
        LD	A,(CSRY)                ; get line of cursor position
        LD	HL,CRTCNT
        CP	(HL)                    ; cursor on last line ?
        LD	A,0AH                   ; new line
        JR	NZ,J$5198
        CALL	C.41FD                  ; output to current channel (screen scrolls up)
J$5198:	LD	A,(NEWKEY+6)
        RRC	A                       ; SHIFT pressed ?
        LD	HL,FNKSTR+0*16
        LD	A,1
        JR	C,J$51A8                ; nope, display F1-F5
        LD	HL,FNKSTR+5*16
        XOR	A
J$51A8:	LD	(FNKSWI),A
        CALL	C.5221                  ; blank LINWRK
        LD	C,05H	; 5 
        LD	A,(LINLEN)
        CP	40+1
        JR	NC,J$51E0
        CALL	C.522F
        JR	C,J$51CE
J$51BC:	PUSH	BC
        LD	C,00H
J$51BF:	CALL	C.523D
        DJNZ	J$51BF
        LD	A,10H	; 16 
        SUB	C
        LD	C,A
        ADD	HL,BC
        INC	DE
        POP	BC
        DEC	C
        JR	NZ,J$51BC
J$51CE:	LD	HL,(CRTCNT)
        CALL	C.5142
        POP	HL
J$51D5:	DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.DSPF+4
        JP	J.433B                  ; take control from caller and quit

J$51E0:	PUSH	AF
        CALL	C.522F
        POP	AF
        SUB	40
J$51E7:	PUSH	BC
        LD	C,00H
J$51EA:	EX	AF,AF'
        CALL	C.523D
        EX	AF,AF'
        DEC	A
        CALL	Z,C.5211
        DJNZ	J$51EA
        DEC	A
        JR	NZ,J$51FC
        CALL	C.5211
        DEC	DE
J$51FC:	EX	AF,AF'
        LD	A,10H	; 16 
        SUB	C
        LD	C,A
        ADD	HL,BC
        EX	AF,AF'
        INC	DE
        POP	BC
        DEC	C
        JR	NZ,J$51E7
        LD	HL,(CRTCNT)
        CALL	C.515D
        POP	HL
        JR	J$51D5

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5211:	PUSH	BC
        PUSH	HL
        LD	HL,(CRTCNT)
        CALL	C.5143
        CALL	C.5221                  ; blank LINWRK
	POP	HL
        POP	BC
        LD	A,0FFH
        RET

;	  Subroutine blank LINWRK
;	     Inputs  ________________________
;	     Outputs ________________________

C.5221:	LD	DE,LINWRK
        PUSH	DE
        LD	B,40
        LD	A," "
J$5229:	LD	(DE),A
        INC	DE
        DJNZ	J$5229
        POP	DE
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.522F:	SUB	04H	; 4 
        RET	C
        LD	B,0FFH
J$5234:	INC	B
        SUB	05H	; 5 
        JR	NC,J$5234
        LD	A,B
        SUB	01H	; 1 
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.523D:	LD	A,(HL)
        INC	HL
        INC	C
        CALL	C.4CDB
        JR	NC,C.523D
        JR	NZ,J$524B
        CP	20H	; " "
        JR	C,J$524C
J$524B:	LD	(DE),A
J$524C:	INC	DE
        RET

;	  Subroutine H.PINL handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$524E:	CALL	C$525C
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.PINL+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$525C:	LD	A,(AUTFLG)
        AND	A
        JR	NZ,C.528C
        LD	L,00H
        JR	J$5294

;	  Subroutine H.QINL handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$5266:	CALL	C$5282
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.QINL+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine H.INLI handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$5274:	CALL	C.528C
        DI
        PUSH	AF
        PUSH	BC
        PUSH	HL
        PUSH	DE
        LD	BC,H.INLI+4
        JP	J.433B                  ; take control from caller and quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5282:	LD	A,"?"
        CALL	C.41FD                  ; output to current channel
        LD	A," "
        CALL	C.41FD                  ; output to current channel

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.528C:	LD	HL,(CSRY)               ; get cursor position
        DEC	L
        CALL	NZ,C.4F33
        INC	L
J$5294:	LD	(FSTPOS),HL
        XOR	A
        LD	(INTFLG),A
J$529B:	CALL	C$41F7			; chget
        LD	HL,I$52F1-2
        LD	C,11
        CALL	C.4DBB
        PUSH	AF
        CALL	NZ,C.52B3
        POP	AF
        JR	NC,J$529B
        LD	HL,BUFMIN
        RET	Z
        CCF
C.52B2: RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.52B3:	PUSH	AF
	CP	09H	; 9 
        JR	NZ,J$52C7
        POP	AF
J$52B9:	LD	A,20H	; " "
        CALL	C.52B3
        LD	A,(CSRX)
        DEC	A
        AND	07H	; 7 
        JR	NZ,J$52B9
        RET

J$52C7:	POP	AF
        LD	HL,INSFLG
        CP	01H	; 1 
        JR	Z,J$52DA
        CP	20H	; " "
        JR	C,J$52DE
        PUSH	AF
        LD	A,(HL)
        AND	A
        CALL	NZ,C$53AC
        POP	AF
J$52DA:	CALL	C.41FD                  ; output to current channel
        RET

J$52DE:	LD	(HL),00H
        CALL	C.41FD                  ; output to current channel
        DEFB	03EH
J$52E4:	DEFB	03EH

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.52E5:	XOR	A
        PUSH	AF
        CALL	C.50F4
        POP	AF
        LD	(CSTYLE),A
        JP	C.509F

I$52F1:	DEFB	8
        DEFW	C.541D
        DEFB	18
        DEFW	C.539F
        DEFB	27
        DEFW	C.52B2
        DEFB	2
        DEFW	C.54CA
        DEFB	6
        DEFW	C.54B4
        DEFB	14
        DEFW	C.5493
        DEFB	5
        DEFW	C.5475
        DEFB	3
        DEFW	C.537F
        DEFB	13
        DEFW	C.5312
        DEFB	21
        DEFW	C.546A
        DEFB	127
        DEFW	C.540A

C.5312:	CALL	C.552A
        LD	A,(AUTFLG)
        AND	A
        JR	Z,J$531D
        LD	H,01H	; 1 
J$531D:	PUSH	HL
        CALL	C.50F4
        POP	HL
        LD	DE,BUF
        LD	B,0FEH
        DEC	L
J$5328:	INC	L
J$5329:	PUSH	DE
        PUSH	BC
        CALL	C.4EAF                  ; read character from VRAM
        POP	BC
        POP	DE
        AND	A
        JR	Z,J$5347
        CP	20H	; " "
        JR	NC,J$5342
        DEC	B
        JR	Z,J.5357
        LD	C,A
        LD	A,01H	; 1 
        LD	(DE),A
        INC	DE
        LD	A,C
        ADD	A,40H	; "@"
J$5342:	LD	(DE),A
        INC	DE
        DEC	B
        JR	Z,J.5357
J$5347:	INC	H
        LD	A,(LINLEN)
        CP	H
        JR	NC,J$5329
        PUSH	DE
        CALL	C.4F27			; get LINTTB entry
        POP	DE
        LD	H,01H	; 1 
        JR	Z,J$5328
J.5357:	DEC	DE
        LD	A,(DE)
        CP	20H	; " "
        JR	Z,J.5357
        PUSH	HL
        PUSH	DE
        CALL	C.509F
        POP	DE
        POP	HL
        INC	DE
        XOR	A
        LD	(DE),A
J.5367:	LD	A,0DH	; 13 
        AND	A
J$536A:	PUSH	AF
        CALL	C.4F33
        CALL	C$553E                  ; change cursor position
        LD	A,0AH	; 10 
        CALL	C.41FD                  ; output to current channel
        XOR	A
        LD	(INSFLG),A
        POP	AF
        SCF
        POP	HL
        RET

J$537E:	INC	L
C.537F:	CALL	C.4F27			; get LINTTB entry
        JR	Z,J$537E
        CALL	C.52E5			; change to block cursor
        XOR	A
        LD	(BUF+0),A
        LD	H,01H	; 1 
        PUSH	HL
        CALL	GICINI
        CALL	C$5555			; excute ON STOP GOSUB valid ?
        POP	HL
        JR	C,J.5367		; yep,
        LD	A,(BASROM)
        AND	A			; running BASIC ROM program ?
        JR	NZ,J.5367		; yep,
        JR	J$536A

C.539F:	LD	HL,INSFLG
        LD	A,(HL)
        XOR	0FFH
        LD	(HL),A
        JP	Z,C.52E5		; change to block cursor
        JP	J$52E4			; change to insert cursor

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$53AC:	CALL	C.50F4
        LD	HL,(CSRY)               ; get cursor position
        LD	C," "
J$53B4:	PUSH	HL
J$53B5:	PUSH	BC
        CALL	C.4EAF                  ; read character from VRAM
        POP	DE
        PUSH	BC
        LD	C,E
        CALL	C.4EC3                  ; write character to VRAM
        POP	BC
        LD	A,(LINLEN)
        INC	H
        CP	H
        LD	A,D
        JR	NC,J$53B5
        POP	HL
        CALL	C.4F27			; get LINTTB entry
        JR	Z,J$5405
        LD	A,C
        CP	" "
        PUSH	AF
        JR	NZ,J.53DE
        LD	A,(LINLEN)
        CP	H
        JR	Z,J.53DE
        POP	AF
        JP	C.509F

J.53DE:	CALL	C$4F34
        INC	L
        PUSH	BC
        PUSH	HL
        CALL	C.4F3C                  ; get last line
        CP	L
        JR	C,J$53EF
        CALL	C$4FFE
        JR	J$53FE

J$53EF:	LD	HL,CSRY                 ; get cursor position
        DEC	(HL)
        JR	NZ,J$53F6
        INC	(HL)
J$53F6:	LD	L,1
        CALL	C.4FAD
        POP	HL
        DEC	L
        PUSH	HL
J$53FE:	POP	HL
        POP	BC
        POP	AF
        JP	Z,C.509F
        DEC	L
J$5405:	INC	L
        LD	H,01H	; 1 
        JR	J$53B4

C.540A:	LD	A,(LINLEN)
        CP	H
        JR	NZ,J$5415
        CALL	C.4F27			; get LINTTB entry
        JR	NZ,J.5451
J$5415:	LD	A,1CH
        CALL	C.41FD                  ; output to current channel
        LD	HL,(CSRY)               ; get cursor position
C.541D:	PUSH	HL
        CALL	C.50F4
        POP	HL
        DEC	H
        JP	NZ,J$5436
        INC	H
        PUSH	HL
        DEC	L
        JR	Z,J.5435
        LD	A,(LINLEN)
        LD	H,A
        CALL	C.4F27			; get LINTTB entry
        JR	NZ,J.5435
        EX	(SP),HL
J.5435:	POP	HL
J$5436:	LD	(CSRY),HL               ; set cursor position
J$5439:	LD	A,(LINLEN)
        CP	H
        JR	Z,J.5451
        INC	H
J$5440:	CALL	C.4EAF                  ; read character from VRAM
        DEC	H
        CALL	C.4EC3                  ; write character to VRAM
        INC	H
        INC	H
        LD	A,(LINLEN)
        INC	A
        CP	H
        JR	NZ,J$5440
        DEC	H
J.5451:	LD	C," "
        CALL	C.4EC3                  ; write character to VRAM
        CALL	C.4F27			; get LINTTB entry
        JP	NZ,C.509F
        PUSH	HL
        INC	L
        LD	H,1                     ; col = 1
        CALL	C.4EAF                  ; read character from VRAM
        EX	(SP),HL
        CALL	C.4EC3                  ; write character to VRAM
        POP	HL
        JR	J$5439

C.546A:	CALL	C.50F4
        CALL	C.552A
        LD	(CSRY),HL               ; set cursor position
        JR	J.547A

C.5475:	PUSH	HL
        CALL	C.50F4
        POP	HL
J.547A:	CALL	C.4F27			; get LINTTB entry
        PUSH	AF
        CALL	C.5072                  ; erase to end of line
        POP	AF
        JR	NZ,J.5489
        LD	H,01H	; 1 
        INC	L
        JR	J.547A

J.5489:	CALL	C.509F
        XOR	A
        LD	(INSFLG),A
        JP	C.52E5			; change to block cursor

C.5493:	CALL	C.50F4
        LD	HL,(CSRY)               ; get cursor position
        DEC	L
J$549A:	INC	L
        CALL	C.4F27			; get LINTTB entry
        JR	Z,J$549A
        LD	A,(LINLEN)
        LD	H,A
        INC	H
J$54A5:	DEC	H
        JR	Z,J$54AF
        CALL	C.4EAF                  ; read character from VRAM
        CP	20H	; " "
        JR	Z,J$54A5
J$54AF:	CALL	C.4F80                  ; cursor right with warp around
        JR	J.5489

C.54B4:	CALL	C.50F4
        CALL	C.54F0
J$54BA:	CALL	C.54E0
        JR	Z,J.5489
        JR	C,J$54BA
J$54C1:	CALL	C.54E0
        JR	Z,J.5489
        JR	NC,J$54C1
        JR	J.5489

C.54CA:	CALL	C.50F4
J$54CD:	CALL	C.54F0
        JR	Z,J.5489
        JR	NC,J$54CD
J$54D4:	CALL	C.54F0
        JR	Z,J.5489
        JR	C,J$54D4
        CALL	C.4F80                  ; cursor right with warp around
        JR	J.5489

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.54E0:	LD	HL,(CSRY)               ; get cursor position
        CALL	C.4F80                  ; cursor right with warp around
        CALL	C.4F3C                  ; get last line
        LD	E,A
        LD	A,(LINLEN)
        LD	D,A
        JR	J$54F9

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.54F0:	LD	HL,(CSRY)               ; get cursor position
        CALL	C.4F71                  ; cursor left
        LD	DE,00101H
J$54F9:	LD	HL,(CSRY)               ; get cursor position
        CALL	C.4242			; compare
        RET	Z
        LD	DE,I$5526
        PUSH	DE
        CALL	C.4EAF                  ; read character from VRAM
        CP	30H	; "0"
        CCF
        RET	NC
        CP	3AH	; ":"
        RET	C
        CP	41H	; "A"
        CCF
        RET	NC
        CP	5BH	; "["
        RET	C
        CP	61H	; "a"
        CCF
        RET	NC
        CP	7BH	; "{"
        RET	C
        CP	86H
        CCF
        RET	NC
        CP	0A0H
        RET	C
        CP	0A6H
        CCF
I$5526:	LD	A,00H
        INC	A
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.552A:	DEC	L
        JR	Z,J$5532
        CALL	C.4F27			; get LINTTB entry
        JR	Z,C.552A
J$5532:	INC	L
        LD	A,(FSTPOS)
        CP	L
        LD	H,01H	; 1 
        RET	NZ
        LD	HL,(FSTPOS)
        RET

;	  Subroutine change cursor position
;	     Inputs  ________________________
;	     Outputs ________________________

C$553E:	LD	A,1BH
        CALL	C.41FD                  ; output to current channel
        LD	A,"Y"
        CALL	C.41FD                  ; output to current channel
        LD	A,L
        ADD	A,1FH
        CALL	C.41FD                  ; output to current channel
        LD	A,H
        ADD	A,1FH
        CALL	C.41FD                  ; output to current channel
        RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5555:	LD	A,(TRPTBL+01EH)
        RRCA
        RET	NC
        LD	HL,(TRPTBL+01EH)
        LD	A,H
        OR	L
        RET	Z
        LD	HL,(CURLIN)
        INC	HL
        LD	A,H
        OR	L
        RET	Z
        SCF
        RET

        DEFS	08000H-$,0FFH

        END
