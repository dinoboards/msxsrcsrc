;  
;   MGINST -> Source re-created by Z80DIS 2.2
;      Z80DIS was written by Kenneth Gielow
;                            Palo Alto, CA
;
	.Z80
	ORG	0100H

WBOOT	EQU	0000H	; JC--I
I.0004	EQU	0004H	; ----I
BDOS	EQU	0005H	; JC--I
CPMADR	EQU	0006H	; --SLI
VDP.DR	EQU	0006H
VDP.DW	EQU	0007H
RDSLT	EQU	000CH	; -C--I
WRSLT	EQU	0014H	; -C---
CALSLT	EQU	001CH	; -C---
ENASLT	EQU	0024H	; -C---
IDBYT2	EQU	002DH	; ---LI

FCB1	EQU	005CH	; ----I
DBUF	EQU	0080H	; ---L-

X.4000	EQU	4000H	; -CS-I
I.4010	EQU	4010H	; ----I
I.4013	EQU	4013H	; ----I
BASENT	EQU	4022H	; J----
C.402D	EQU	402DH	; -C---
I.4092	EQU	4092H	; ----I
D.40FF	EQU	40FFH	; ---L-
C.4100	EQU	4100H	; -C---
I.41C1	EQU	41C1H	; ----I
D.5000	EQU	5000H	; --S--
I$5F18	EQU	5F18H	; ----I

I$5F30	EQU	5F30H	; ----I
D.5F80	EQU	5F80H	; --S-I
D.5F88	EQU	5F88H	; --S-I
D.5F90	EQU	5F90H	; --S-I
I.5F98	EQU	5F98H	; ----I
I.5FA0	EQU	5FA0H	; ----I
I.5FF0	EQU	5FF0H	; ----I
D.6000	EQU	6000H	; --S-I
D.6800	EQU	6800H	; --S-I
I.6FC0	EQU	6FC0H	; ----I
D$6FC5	EQU	6FC5H	; --S--
I$6FCB	EQU	6FCBH	; ----I
D$6FEF	EQU	6FEFH	; --S--
I$6FFA	EQU	6FFAH	; ----I
D.7000	EQU	7000H	; --S-I
C$7067	EQU	7067H	; -C---
I$70BF	EQU	70BFH	; ----I
I$710C	EQU	710CH	; ----I
I$7159	EQU	7159H	; ----I
I$71A6	EQU	71A6H	; ----I
I.7404	EQU	7404H	; ----I
D.7405	EQU	7405H	; ---LI

C.7417	EQU	7417H	; -C---
C.741A	EQU	741AH	; -C---
C.745C	EQU	745CH	; -C---
C.7473	EQU	7473H	; -C---
C.7492	EQU	7492H	; -C--I
C.74A4	EQU	74A4H	; -C---
C.74A9	EQU	74A9H	; -C---
C.74B3	EQU	74B3H	; -C---
C$74C5	EQU	74C5H	; -C---
C.74CB	EQU	74CBH	; -C--I
C.74D0	EQU	74D0H	; -C---
J$74D3	EQU	74D3H	; J----
C.74DD	EQU	74DDH	; -C---
C.74E2	EQU	74E2H	; -C---
C.74FE	EQU	74FEH	; -C---
C.7509	EQU	7509H	; -C---
J$750C	EQU	750CH	; J----
C.7515	EQU	7515H	; -C--I
C.752F	EQU	752FH	; -C--I
C.7534	EQU	7534H	; JC--I
C.7540	EQU	7540H	; -C---
C.7545	EQU	7545H	; -C---
C.754E	EQU	754EH	; -C--I
C.7553	EQU	7553H	; -C---
C.7568	EQU	7568H	; -C--I
C.756D	EQU	756DH	; JC--I
C.7579	EQU	7579H	; -C---
C.757E	EQU	757EH	; -C---
C$7582	EQU	7582H	; -C---
C.7586	EQU	7586H	; -C---
C.75AA	EQU	75AAH	; -C--I
C$75B5	EQU	75B5H	; -C---
C$75BE	EQU	75BEH	; -C---
C.75DD	EQU	75DDH	; -C--I
C$75E6	EQU	75E6H	; -C---
C$75F1	EQU	75F1H	; -C---
C.7619	EQU	7619H	; -C---
C$7640	EQU	7640H	; -C---
C.764C	EQU	764CH	; -C---
C$7662	EQU	7662H	; -C---
C.7674	EQU	7674H	; -C---
C.7696	EQU	7696H	; -C---
C.769A	EQU	769AH	; -C--I
C.76A8	EQU	76A8H	; -C---
C.76AC	EQU	76ACH	; -C--I
C.76BA	EQU	76BAH	; -C---
C.76D9	EQU	76D9H	; -C--I
C.76EB	EQU	76EBH	; -C--I
C$7736	EQU	7736H	; -C---
C$7748	EQU	7748H	; -C---
C.7755	EQU	7755H	; -C---
C.7767	EQU	7767H	; -C---
C$776C	EQU	776CH	; -C---
C$777E	EQU	777EH	; -C---
C.7786	EQU	7786H	; -C---
C.7798	EQU	7798H	; -C---
C$77A5	EQU	77A5H	; -C---
C$77B7	EQU	77B7H	; -C---
C.77C3	EQU	77C3H	; -C---
C.77D5	EQU	77D5H	; -C---
C$77DA	EQU	77DAH	; -C---
C$77EC	EQU	77ECH	; -C---
D$7800	EQU	7800H	; --S--
C.7807	EQU	7807H	; -C---
C.7819	EQU	7819H	; -C---
J$7849	EQU	7849H	; J----
C$784D	EQU	784DH	; -C---
J$7856	EQU	7856H	; J----
J$785B	EQU	785BH	; J----
C$785F	EQU	785FH	; -C---
J$7868	EQU	7868H	; J----
J$7874	EQU	7874H	; J----
J$7886	EQU	7886H	; J----
J$78AD	EQU	78ADH	; J----
J$78C1	EQU	78C1H	; J----
J$78CC	EQU	78CCH	; J----
J$78E0	EQU	78E0H	; J----
C.799E	EQU	799EH	; JC--I
C.79AD	EQU	79ADH	; JC--I
C.79B2	EQU	79B2H	; JC--I
C.79B8	EQU	79B8H	; JC---
C.79BD	EQU	79BDH	; JC---
C.79BE	EQU	79BEH	; JC--I
C.79C6	EQU	79C6H	; JC---
C.79CB	EQU	79CBH	; JC---
J$79E0	EQU	79E0H	; J----
J$79E4	EQU	79E4H	; J----
J$79E5	EQU	79E5H	; J----
J$79E9	EQU	79E9H	; J----
C$7A23	EQU	7A23H	; -C---
C$7A28	EQU	7A28H	; -C---
J$7A8D	EQU	7A8DH	; J----
C.7A92	EQU	7A92H	; JC---
C$7A97	EQU	7A97H	; -C---
J$7B37	EQU	7B37H	; J----
J$7B3C	EQU	7B3CH	; J----
J$7B41	EQU	7B41H	; J----
I$7B43	EQU	7B43H	; ----I
J$7B46	EQU	7B46H	; J----
I$7B48	EQU	7B48H	; ----I
J$7B4D	EQU	7B4DH	; J----
C$7B51	EQU	7B51H	; -C---
J$7B52	EQU	7B52H	; J----
C$7B56	EQU	7B56H	; -C---
C$7BBC	EQU	7BBCH	; -C---
C$7BC1	EQU	7BC1H	; -C---
C$7C04	EQU	7C04H	; -C---
C.7C05	EQU	7C05H	; -C---
C$7C07	EQU	7C07H	; -C---
C.7C08	EQU	7C08H	; -C---
J$7C66	EQU	7C66H	; J----
J$7C6E	EQU	7C6EH	; J----
I$7C7E	EQU	7C7EH	; ----I
I$7C86	EQU	7C86H	; ----I
I$7CDE	EQU	7CDEH	; ----I
I.7CE1	EQU	7CE1H	; ----I
I$7CE6	EQU	7CE6H	; ----I
I.7CE9	EQU	7CE9H	; ----I
C$7D32	EQU	7D32H	; -C---
C$7D3A	EQU	7D3AH	; -C---
I$7D44	EQU	7D44H	; ----I
I$7D4C	EQU	7D4CH	; ----I
I$7D6E	EQU	7D6EH	; ----I
I$7D76	EQU	7D76H	; ----I
I$7DB0	EQU	7DB0H	; ----I
I$7DB4	EQU	7DB4H	; ----I
I$7DB8	EQU	7DB8H	; ----I
I$7DBA	EQU	7DBAH	; ----I
I$7DBC	EQU	7DBCH	; ----I
C.7DC0	EQU	7DC0H	; -C---
I$7DC2	EQU	7DC2H	; ----I
C.7DC8	EQU	7DC8H	; -C---

I.7E00	EQU	7E00H	; ----I
I.7F00	EQU	7F00H	; ----I
D.7F80	EQU	7F80H	; ---L-
D.7F81	EQU	7F81H	; ---L-
D.7F87	EQU	7F87H	; ---L-
D.7F88	EQU	7F88H	; ---L-
D.7F90	EQU	7F90H	; ---L-
D.7F91	EQU	7F91H	; ---L-
D.7F99	EQU	7F99H	; --SL-
D.7F9A	EQU	7F9AH	; ---L-
D.7FA0	EQU	7FA0H	; ---L-
D.7FA2	EQU	7FA2H	; ---L-
D.7FA4	EQU	7FA4H	; ---L-
D.7FA6	EQU	7FA6H	; ---L-
D.7FA8	EQU	7FA8H	; ---L-
D.7FAA	EQU	7FAAH	; ---L-
I.7FB0	EQU	7FB0H	; ----I
I.7FC0	EQU	7FC0H	; ----I
I.7FCC	EQU	7FCCH	; ----I
J.7FD0	EQU	7FD0H	; J---I
I.7FDA	EQU	7FDAH	; ----I
I.7FE0	EQU	7FE0H	; ----I
D.7FFE	EQU	7FFEH	; --S--

D.8000	EQU	8000H	; ---LI
I$8008	EQU	8008H	; ----I
D$800C	EQU	800CH	; --S--
D.801B	EQU	801BH	; --S--
D.8100	EQU	8100H	; --SL-
I.8200	EQU	8200H	; ----I
I.A000	EQU	0A000H	; ----I
I.A100	EQU	0A100H	; ----I
I.A180	EQU	0A180H	; ----I
D.A192	EQU	0A192H	; --SL-
D.A200	EQU	0A200H	; ---LI
I$A202	EQU	0A202H	; ----I
I$A20A	EQU	0A20AH	; ----I
D.A300	EQU	0A300H	; ---LI
D$A302	EQU	0A302H	; ---L-
I$A304	EQU	0A304H	; ----I
D.A400	EQU	0A400H	; ---LI
I$A402	EQU	0A402H	; ----I
D.A500	EQU	0A500H	; ---LI
I$A502	EQU	0A502H	; ----I
I.A508	EQU	0A508H	; ----I
I$B2CC	EQU	0B2CCH	; ----I
C$B47B	EQU	0B47BH	; -C---
I$BF9E	EQU	0BF9EH	; ----I

J$C87B	EQU	0C87BH	; J----

I.F1C9	EQU	0F1C9H			; strout
J.F2C0	EQU	0F2C0H			; old H.TIMI
D.F2C5	EQU	0F2C5H			; pointer to memory mapper table
D.F2CF	EQU	0F2CFH                  ; BDOS data segment
D.F2D0	EQU	0F2D0H                  ; BDOS code segment
I.F2D5	EQU	0F2D5H			; old EXTBIO
D.F2E2	EQU	0F2E2H	; --S--
D.F2FD	EQU	0F2FDH			; bootdrive
I.F300	EQU	0F300H			; pointer to diskerror handler
D.F313	EQU	0F313H			; DOS2 version
I.F314	EQU	0F314H			; TPA segment page 0
D.F33F	EQU	0F33FH			; driveid (used in PROMPT), CTRL key status in DISK init
RAMAD0	EQU	0F341H	; --S--
RAMAD1	EQU	0F342H	; --SL-
RAMAD2	EQU	0F343H	; ---L-
RAMAD3	EQU	0F344H	; --S--
$SECBUF	EQU	0F34DH	; --SL-
$DIRBU	EQU	0F351H	; ---L-
XFER	EQU	0F36EH	; -C---
C.F37D	EQU	0F37DH	; -C---

I.F384	EQU	0F384H	; ----I

LINLEN	EQU	0F3B0H	; ---L-
LPTPOS	EQU	0F415H	; ---L-
KBUF	EQU	0F41FH	; ----I
TTYPOS	EQU	0F661H	; ---L-
AUTLIN	EQU	0F6ABH	; ---L-
HOKVLD	EQU	0FB20H	; ----I
DRVINF	EQU	0FB21H	; ----I
DRVINT	EQU	0FB29H	; ----I
JIFFY	EQU	0FC9EH	; ---L-
EXPTBL	EQU	0FCC1H	; ---L-
DEVICE	EQU	0FD99H	; --SLI
H.TIMI	EQU	0FD9FH	; --SLI
H.RUNC	EQU	0FECBH	; ----I

J.0100:	JP	J.049B

	DEFB	13
I$0104:	DEFB	"MEGA-SCSI kernel installer ver 2.15",13,10
	DEFB	"      Copyright (c) by K.Tsujikawa.",13,10,13,10
	DEFB	"$"

	DEFB	13
I.0152:	DEFB	"Usage:  MGINST filename.ext [/D] [/Sxx]",13,10,13,10
	DEFB	"          /D  :Initialize S-RAM data",13,10
	DEFB	"          /Sxx:Direct MEGA-SCSI slot",13,10
	DEFB	"           (xx:Slot number (HEX))",13,10
	DEFB	"$"

?.01ED:	DEFB	13
	DEFB	" (^_^)/~",13,10
	DEFB	26
	DEFB	"Illegal DOS kernel !",13,10
	DEFB	"$"

I$0210:	DEFB	"File access error !",13,10
	DEFB	"$"


I$0226:	DEFB	13,10
	DEFB	"Install complete. Thank you !",13,10,13,10
	DEFB	"Please reset your MSX to reboot ..."
	DEFB	"$"

I$026D:	DEFB	"Bad ERAMDISK !",13,10
	DEFB	"$"

I$027E:	DEFB	"Illegal memory size !",13,10
	DEFB	"$"

I$0296:	DEFB	"Unknown cartridge !",13,10
	DEFB	"$"

I$02AC:	DEFB	"Please install on MSX2 or later !",13,10
	DEFB	"$"

I.02D0:	DEFB	"Illegal function call !",13,10
	DEFB	"$"

?.02EA:	DEFB	"Break point !",13,10
	DEFB	"$"

I$02FA:	DEFB	"pass1 ...Illegal DOS kernel !",13,10
	DEFB	"$"

I.031A:	DEFB	"pass2 ...Illegal DOS kernel !",13,10
	DEFB	"$"

I$033A:	DEFB	"Target SLOT    : "
	DEFB	"$"

I$034C:	DEFB	"Local RAM size : "
	DEFB	"$"

?.035E:	DEFB	"Table updating ... OK",13,10
	DEFB	"$"

I$0376:	DEFB	"Table updating ... Error !",13,10
	DEFB	"$"

I$0393:	DEFB	"$"

I$0394:	DEFB	"Initialize S-RAM data !",13,10,13,10
	DEFB	"$"

I$03B0:	DEFB	"Hit any key to install ...",13,10
	DEFB	"$"

I$03CD:	DEFB	"k Bytes",13,10
	DEFB	"$"

I.03D7:	DEFB	"Hardware type  : ESE-RAM",13,10,13,10
	DEFB	"$"

I.03F4:	DEFB	"Hardware type  : ESE-SCC",13,10,13,10
	DEFB	"$"

I.0411:	DEFB	"Hardware type  : MEGA-SCSI",13,10,13,10
	DEFB	"$"

I.0430:	DEFB	"Hardware type  : MEGA-SCSI with SCC",13,10,13,10
	DEFB	"$"

I$0458:	DEFB	"Hardware type  : Unexpected type !",13,10,13,10
	DEFB	"$"

I$047F:	DEFB	"."
	DEFB	"$"
	DEFB	"h --- OK",13,10
	DEFB	"$"

I$048C:	DEFB	"x"
	DEFB	"$"
	DEFB	"h --- NG !"

I.0498:	DEFB	13,10

I$049A:	DEFB	"$"

J.049B:	LD	SP,(CPMADR)
	LD	DE,I$0104
	LD	C,09H
	CALL	BDOS			; print string
	LD	HL,3E00H
	ADD	HL,SP
	JP	NC,WBOOT
	LD	HL,(WBOOT+1)
	LD	(D.25F6),HL		; store current WBOOT handler
	LD	HL,I$050E
	LD	(WBOOT+1),HL		; install WBOOT handler
	CALL	C$054E			; determine VDP I/O data ports
	JR	C,J.0511
	CALL	C$057A
	JR	C,J.0511
	CALL	C$06F0
	JR	C,J.0511
	CALL	C$05C7
	JR	C,J.0511
	CALL	C$0604
	JR	C,J.0511
	CALL	C$07B8			; determine ESE hardware type
	JR	C,J.0511
	CALL	C$0C32			; pass1 DOS kernel dump
	JR	C,J.0511
	CALL	C$1FF7
	JR	C,J.0511
	CALL	C$0938
	JR	C,J.0511
	XOR	A
	LD	(D$0545),A
	CALL	C$0D09			; pass2 DOS kernel dump
	JR	C,J.0511
	CALL	C$0A4A			; ?? unkown function ??
	JR	C,J.0511
	CALL	C$0671			; write MEGASCSI config (requested or required)
	JR	C,J.0511
	CALL	C$2080			; construct boot sector and FAT data
	JR	C,J.0511
	CALL	C$20DD			; initialize boot sector, FAT sectors and root directory (requested or required)
	JR	C,J.0511
	CALL	C$215C			; copy system files (requested or required)
	JR	C,J.0511
	LD	DE,I$0226		; install complete
	JR	J.0511

I$050E:	LD	DE,I$049A
J.0511:	LD	(D.25F8),DE
	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENASLT
	LD	HL,(CPMADR)
	LD	DE,X.4000+1
	XOR	A
	SBC	HL,DE
	LD	C,L
	LD	B,H
	LD	HL,X.4000
	LD	(HL),A
	LDIR
	LD	DE,FCB1
	LD	C,10H
	CALL	BDOS			; close FCB
	LD	DE,(D.25F8)
	LD	C,09H
	CALL	BDOS			; print string
	LD	HL,(D.25F6)
	LD	(WBOOT+1),HL		; restore WBOOT handler
D$0545:	RST	00H			; quit program

	LD	C,08H
	CALL	BDOS			; get character
	EI
J$054C:	JR	J$054C			; wait forever

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$054E:	XOR	A
	LD	(D.25E1),A
	LD	(D.25E2),A
	LD	A,(EXPTBL+0)
	LD	HL,IDBYT2
	CALL	RDSLT
	OR	A			; MSX1 ?
	RET	Z			; yep, quit
	LD	A,(EXPTBL+0)
	LD	HL,VDP.DR
	CALL	RDSLT
	LD	(D.25E1),A		; I/O port VDP data read
	LD	A,(EXPTBL+0)
	LD	HL,VDP.DW
	CALL	RDSLT
	LD	(D.25E2),A		; I/O port VDP data write
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$057A:	XOR	A
	LD	(D.25E4),A		; reset initialize data flag
	LD	B,4
	LD	DE,DRVINF
J$0583:	LD	A,(DE)			; entry used (drives > 0) ?
	INC	DE
	OR	A
	LD	A,(DE)			; slotid
	INC	DE
	CALL	NZ,C.059B		; yep, check if MEGASCSI disk interface
	JR	C,J$0596		; MEGASCSI found, register slotid and quit
	DJNZ	J$0583
	LD	A,1
	LD	(D.25E4),A		; set initialize data flag
	LD	A,0FFH			; invalid slotid
J$0596:	LD	(D.25EC),A		; MEGASCSI slotid
	XOR	A
	RET

;	  Subroutine check if MEGASCSI disk interface
;	     Inputs  ________________________
;	     Outputs ________________________

C.059B:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	B,8
	LD	C,A
	LD	DE,I.7FE0		; MEGASCSI ID TEXT
	LD	HL,I$05BF
J$05A7:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	A,C
	EX	DE,HL
	CALL	RDSLT
	POP	BC
	POP	DE
	POP	HL
	XOR	(HL)
	JR	NZ,J$05BA
	INC	DE
	INC	HL
	DJNZ	J$05A7
	SCF
J$05BA:	LD	A,C
	POP	BC
	POP	DE
	POP	HL
	RET

I$05BF:	DEFB	"MEGASCSI"

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$05C7:	LD	HL,(D.25EB)
	ADD	HL,HL
	SBC	A,A
	AND	18H
	AND	H
	LD	L,A
	LD	A,H
	AND	06H	; 6 
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	OR	L
	LD	L,A
	LD	H,00H
	LD	DE,0FD0BH
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	INC	HL
	LD	A,(HL)
	CP	0EDH
	JR	NZ,J.05FD
	INC	HL
	LD	A,(HL)
	CP	0B0H
	JR	NZ,J.05FD
	INC	HL
	LD	A,(HL)
	CP	0C9H
	JR	NZ,J.05FD
	LD	A,(D.25EC)		; MEGASCSI slotid
	CALL	C.059B			; check if MEGASCSI disk interface
	CCF
	RET	NC			; found, quit
J.05FD:	LD	A,1
	LD	(D.25E4),A		; set initialize data flag
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0604:	LD	BC,256-1
	LD	DE,I.A000+1
	LD	HL,I.A000
	LD	(HL),0
	LDIR
	LD	BC,128-1
	LD	DE,I.A100+1
	LD	HL,I.A100
	LD	(HL),0
	LDIR
	LD	BC,128-1
	LD	DE,I.A180+1
	LD	HL,I.A180
	LD	(HL),0
	LDIR
	LD	A,(D.25E4)
	OR	A			; initialize data ?
	RET	NZ			; yep, quit
	LD	A,86H			; read extended partition
	LD	BC,I.1000
	LD	DE,16
	LD	HL,I.A000
J$063B:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.066D		; error,
	ADD	HL,DE
	INC	C
	DJNZ	J$063B
	LD	A,84H			; read DOS partition
	LD	BC,I.0800
	LD	DE,16
	LD	HL,I.A100
J$064F:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.066D		; error,
	ADD	HL,DE
	INC	C
	DJNZ	J$064F
	LD	A,0A2H			; get host scsi id, number of retries
	LD	DE,16
	LD	HL,I.A180
J$0660:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.066D		; error,
	ADD	HL,DE
	ADD	A,2
	CP	0ACH
	JR	C,J$0660
	RET

J.066D:	LD	DE,I.02D0		; illegal function call
	RET

;	  Subroutine write MEGASCSI config (requested or required)
;	     Inputs  ________________________
;	     Outputs ________________________

C$0671:	LD	A,(D.25E4)
	OR	A			; initialize data ?
	RET	NZ			; yep, quit
	LD	A,87H			; write extended partition
	LD	BC,I.1000
	LD	DE,16
	LD	HL,I.A000
J$0681:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.06B3
	ADD	HL,DE
	INC	C
	DJNZ	J$0681
	LD	A,85H			; write DOS partition
	LD	BC,I.0800
	LD	DE,16
	LD	HL,I.A100
J$0695:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.06B3
	ADD	HL,DE
	INC	C
	DJNZ	J$0695
	LD	A,0A3H			; set host scsi id, number of retries
	LD	DE,16
	LD	HL,I.A180
J$06A6:	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	JR	C,J.06B3
	ADD	HL,DE
	ADD	A,2
	CP	0ACH
	JR	C,J$06A6
	RET

J.06B3:	LD	DE,I.02D0		; illegal function call
	RET

;	  Subroutine check for MEGASCSI BIOS and execute function (with register save)
;	     Inputs  A = function
;	     Outputs ________________________

C.06B7:	PUSH	AF
	LD	A,(D.25EC)		; MEGASCSI slotid
	CALL	C.059B			; check if MEGASCSI disk interface
	JR	NC,J.06EC		; not found, quit with error
	POP	AF
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	CALL	C$06D8			; execute MEGASCSI BIOS function
	POP	BC
	LD	A,B
	POP	BC
	POP	DE
	POP	HL
	RET

;	  Subroutine check for MEGASCSI BIOS and execute function
;	     Inputs  A = function
;	     Outputs ________________________

C$06CE:	PUSH	AF
	LD	A,(D.25EC)		; MEGASCSI slotid
	CALL	C.059B			; check if MEGASCSI disk interface
	JR	NC,J.06EC		; not found, quit
	POP	AF

;	  Subroutine execute MEGASCSI BIOS function
;	     Inputs  A = function
;	     Outputs ________________________

C$06D8:	PUSH	IX
	PUSH	IY
	LD	IX,I.7FCC		; MEGASCSI BIOS entry
	LD	IY,(D.25EB)
	CALL	CALSLT
	POP	IY
	POP	IX
	RET

J.06EC:	POP	AF
	SCF
	SBC	A,A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$06F0:	XOR	A
	LD	(D.25E0),A		; verbose = disabled
	LD	(D.25E3),A
	LD	(D.25E5),A
	LD	A,(DBUF+0)
	ADD	A,81H
	LD	L,A
	LD	H,00H
	LD	(HL),00H
	LD	DE,I.0152		; usage
	LD	HL,DBUF+1
J.070A:	LD	A,(HL)
	INC	HL
	CP	"/"
	JR	Z,J.071A
	OR	A
	JR	NZ,J.070A
	LD	A,(D.25EC)		; MEGASCSI slotid
	INC	A			; MEGASCSI found ?
	RET	NZ			; yep, quit
	SCF
	RET

J.071A:	LD	A,(HL)
	AND	0DFH
	CP	"S"
	JR	NZ,J$072A
	CALL	C$0759			; evaluate hexdecimal number
	LD	A,E
	LD	(D.25EC),A		; store MEGASCSI slotid
	JR	J.070A

J$072A:	CP	"D"
	JR	NZ,J$0738
	LD	A,1
	LD	(D.25E4),A		; set initialize data flag
	LD	(D.25E5),A
	JR	J.070A

J$0738:	CP	"V"
	JR	NZ,J$0743
	LD	A,1
	LD	(D.25E0),A		; verbose = enabled
	JR	J.070A

J$0743:	LD	A,(HL)
	INC	HL
	CP	"/"
	JR	NZ,J$0752
	LD	A,(D.25E3)
	INC	A
	LD	(D.25E3),A
	JR	J.071A

J$0752:	OR	A
	LD	DE,I.0152		; usage
	RET	Z
	SCF
	RET

;	  Subroutine evaluate hexdecimal number
;	     Inputs  ________________________
;	     Outputs ________________________

C$0759:	LD	DE,0
J$075C:	INC	HL
	LD	A,(HL)
	SUB	"0"
	RET	C
	CP	9+1
	JR	C,J$076E
	AND	0DFH
	SUB	07H
	RET	C
	CP	15+1
	CCF
	RET	C
J$076E:	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	ADD	A,E
	LD	E,A
	JR	J$075C

;	  Subroutine open specified file
;	     Inputs  ________________________
;	     Outputs ________________________

C.0782:	LD	DE,I.0152		; usage
	LD	A,(FCB1+1)
	CP	" "			; file specified ?
	SCF
	RET	Z			; nope, quit with error
	CP	"-"			; only option specified ?
	SCF
	RET	Z			; yep, quit with error
	LD	B,25
	LD	HL,FCB1+12
J$0795:	LD	(HL),0
	INC	HL
	DJNZ	J$0795			; initialize FCB
	LD	DE,D.8000
	LD	C,1AH
	CALL	BDOS			; set DMA address
	LD	DE,FCB1
	LD	C,0FH
	CALL	BDOS			; open FCB
	OR	A
	LD	HL,1
	LD	(FCB1+14),HL		; record size = 1 byte
	LD	DE,I$0210		; file access error
	SCF
	RET	NZ
	XOR	A
	RET

;	  Subroutine determine ESE hardware type
;	     Inputs  ________________________
;	     Outputs ________________________

C$07B8:	LD	A,(D.25EC)		; MEGASCSI slotid
	LD	H,HIGH 4000H
	CALL	ENASLT
	LD	A,(D.40FF)		; current DOS2 segment
	CP	3			; valid DOS2 segment ?
	JR	C,J$07C9		; yep, store current DOS2 segment
	LD	A,3			; assume current DOS2 segment = 3 (running a DOS1 kernel as part of a DOS2 ROM)
J$07C9:	LD	(D.25E6),A
	LD	DE,I$026D		; bad ERAMDISK
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	(D.5000),A		; select bank 0 in 4000H-5FFFH, SCC mapper
	INC	A
	LD	(D.6800),A		; select bank 1 in 6000H-7FFFH, ASCII mapper, write disabled
	LD	(D.7000),A		; select bank 1 in 6000H-7FFFH, SCC mapper
	LD	A,(D.40FF)
	OR	A			; DOS2 segment = 0 ?
	JR	Z,J$07EA		; yep, running a DOS2 ROM
	XOR	A
	LD	(D.25E6),A		; current DOS2 segment = 0 (running a DOS1 only kernel)
J$07EA:	LD	HL,X.4000
	LD	A,(HL)
	CPL
	LD	(HL),A
	CP	(HL)
	CPL
	LD	(HL),A
	SCF
	JP	Z,J.090C		; RAM, quit with error (should be read only)
	LD	A,80H
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	A,(HL)
	CPL
	LD	(HL),A
	CP	(HL)
	CPL
	LD	(HL),A
	SCF
	JP	NZ,J.090C		; not RAM, quit with error (should be writeable)
	LD	BC,128*256+0
	LD	DE,D.8000
J$0811:	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,C			; bank
	AND	3FH			; mask off for SCC
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	LD	A,C
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	AND	40H
	OR	10H
	LD	(D.7FFE),A		; MA19, SCC bank write enabled
	LD	A,(HL)
	LD	(DE),A			; store orginal
	INC	C
	INC	DE
	DJNZ	J$0811			; next bank
	LD	BC,128*256+127
J$0834:	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,C
	AND	3FH
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	LD	A,C
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	AND	40H
	OR	10H
	LD	(D.7FFE),A		; MA19, SCC bank write enabled
	LD	(HL),C			; update with bank number
	DEC	C
	DEC	DE
	DJNZ	J$0834			; next bank
	LD	BC,128*256+0
J$0856:	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,C
	AND	3FH
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	LD	A,C
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	AND	40H
	OR	10H
	LD	(D.7FFE),A		; MA19, SCC bank write enabled
	LD	A,C
	CP	(HL)			; RAM on this bank ?
	JR	NZ,J$0877		; nope, quit
	INC	C
	DJNZ	J$0856
J$0877:	LD	A,C
	LD	(D.25EE),A		; store number of banks
	LD	DE,I$027E		; illegal memory size
	CP	16			; at least 16 banks (128 Kb) ?
	JP	C,J.090C		; nope, quit with error
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	INC	A
	LD	(D.5000),A		; select bank 1 in 4000H-5FFFH, SCC mapper
	LD	A,(HL)
	LD	DE,I$0296		; unknown cartridge
	CP	1+1
	CCF				; bank should be 0 (ASCII ) or 1 (SCC)
	JP	C,J.090C		; nope, quit with error
	LD	B,A
	RRA				; bank = 0 ?
	LD	DE,I.03D7		; ESE RAM
	JR	NC,J$08A2		; yep, ESE RAM
	LD	DE,I.03F4		; ESE SCC
J$08A2:	LD	A,7FH
	LD	(D.6000),A		; enable SCSI controller (ASCII based)
	LD	A,40H
	LD	(D.7FFE),A		; enable SCSI controller (SCC based)
	LD	HL,I.5FF0
	LD	A,(HL)			; read Bus Device ID
	LD	(D.8100),A		; store current value
	LD	A,1
	LD	C,0
J$08B7:	LD	(HL),C			; new Bus Device ID
	CP	(HL)			; readback correctly as bit mapped ?
	JR	NZ,J.08D8		; nope, no SCSI controller
	INC	C			; update Bus Device ID
	ADD	A,A			; update bit map
	JR	NC,J$08B7		; not done, next
	LD	A,(D.8100)		; restore orginal value
	LD	C,8
J$08C4:	ADD	A,A
	DEC	C
	JR	NC,J$08C4		; convert bit mapped to Bus Device ID
	LD	A,C
	LD	(D.8100),A		; update
	SET	1,B			; ESE hardware with SCSI controller
	BIT	0,B
	LD	DE,I.0411		; ESE SCSI
	JR	Z,J.08D8
	LD	DE,I.0430		; ESE WAVESCSI
J.08D8:	LD	A,(D.8100)
	LD	(HL),A			; restore orginal value
	LD	A,B
	LD	(D.25ED),A		; ESE hardware type
	LD	A,(D.25EE)
	LD	B,A			; number of banks
	LD	C,0			; bank 0
	LD	HL,D.8000
J$08E9:	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,C
	AND	3FH
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	LD	A,C
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	AND	40H
	OR	10H
	LD	(D.7FFE),A		; MA19, SCC bank write enabled
	LD	A,(HL)
	LD	(X.4000),A		; restore orginal value
	INC	C
	INC	HL
	DJNZ	J$08E9			; next bank
	XOR	A			; all good
J.090C:	PUSH	DE
	PUSH	AF
	CALL	C.0920			; select driver bank
	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENASLT
	POP	AF
	POP	DE
	RET	C
	LD	C,9
	XOR	A
	RET

;	  Subroutine select driver bank
;	     Inputs  ________________________
;	     Outputs ________________________

C.0920:	PUSH	AF
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	A,(D.25E6)		; current DOS2 segment
	ADD	A,A			; calculate bank
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write disabled
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	INC	A
I$0930:	LD	(D.6800),A		; select bank in 6000H-7FFFH, ASCII mapper, write disabled
	LD	(D.7000),A		; select bank in 6000H-7FFFH, SCC mapper
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0938:	LD	DE,I.0498		; new line string
	LD	C,09H
	CALL	BDOS			; print string
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	JR	Z,J$0952		; nope, skip MSX1 check
	LD	A,(D.25E1)		; I/O port VDP data read
	LD	HL,(D.25E2)		; I/O port VDP data write
	OR	L			; MSX1 ?
	SCF
	LD	DE,I$02AC
	RET	Z			; yep, quit
J$0952:	LD	DE,I$033A
	LD	C,09H
	CALL	BDOS			; print string
	LD	A,(D.25EC)		; MEGASCSI slotid
	CALL	C.0B74			; print byte in hex
	LD	DE,I.0498		; new line string
	LD	C,09H
	CALL	BDOS			; print string
	LD	DE,I$034C
	LD	C,09H
	CALL	BDOS			; print string
	CALL	C$0A08
	LD	DE,I$03CD
	LD	C,09H
	CALL	BDOS			; print string
	LD	A,(D.25ED)		; ESE hardware type
	OR	A
	LD	DE,I.03D7		; ESE RAM
	JR	Z,J.0999
	DEC	A
	LD	DE,I.03F4		; ESE SCC
	JR	Z,J.0999
	DEC	A
	LD	DE,I.0411		; ESE SCSI
	JR	Z,J.0999
	DEC	A
	LD	DE,I.0430		; ESE WAVESCSI
	JR	Z,J.0999
	LD	DE,I$0458		; unknown ESE type
J.0999:	LD	C,09H
	CALL	BDOS			; print string
	LD	A,(D.25E4)
	OR	A			; initialize data ?
	JR	NZ,J.09E5		; yep,

	LD	A,0A0H			; get ESE info
	LD	HL,D.8000
	CALL	C$06CE			; check for MEGASCSI BIOS and execute function
	LD	DE,I.02D0		; illegal function call
	RET	C			; error, quit
	LD	HL,(D.25ED)		; ESE hardware type
	CP	L			; same hardware type ?
	JR	NZ,J.09D8		; nope,
	LD	A,0A4H
	LD	HL,D.8000
	CALL	C.06B7			; check for MEGASCSI BIOS and execute function (with register save)
	LD	DE,I.02D0		; illegal function call
	RET	C
	LD	A,(D.25EE)		; number of banks
	LD	HL,(D.8000)
	CP	L
	JR	NZ,J.09D8
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	LD	A,2			; assume DOS1, 2 banks
	JR	Z,J$09D5		; nope,
	LD	A,8			; DOS2, 8 banks
J$09D5:	CP	H
	JR	Z,J.09E5
J.09D8:	LD	A,1
	LD	(D.25E4),A		; set initialize data flag
	LD	DE,I$0376		; table update error
	LD	C,09H
	CALL	BDOS			; print string

J.09E5:	LD	A,(D.25E4)
	OR	A			; initialize data ?
	LD	DE,I$0393		; empty string
	JR	Z,J$09F1		; nope,
	LD	DE,I$0394		; initialize string
J$09F1:	LD	C,09H
	CALL	BDOS			; print string
	LD	DE,I$03B0		; hit any key sting
	LD	C,09H
I.09FB:	CALL	BDOS			; print string
	LD	C,08H
	CALL	BDOS			; get key
	XOR	A
	LD	(D.25E6),A		; current DOS2 segment = 0
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0A08:	LD	BC,(D.25ED)
	LD	DE,8
	LD	HL,0
J$0A12:	ADD	HL,DE
	DJNZ	J$0A12
	LD	DE,1000
	CALL	C.0A2A
	LD	DE,100
	CALL	C.0A2A
	LD	DE,10
	CALL	C.0A2A
	LD	DE,1

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.0A2A:	CALL	C$0A3D
	INC	B
	DEC	B
	RET	Z
	PUSH	BC
	PUSH	HL
	ADD	A,"0"
	LD	E,A
	LD	C,02H
	CALL	BDOS			; print character
	POP	HL
	POP	BC
	RET
;
;	-----------------
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C$0A3D:	LD	A,0FFH
J$0A3F:	INC	A
	OR	A
	SBC	HL,DE
	JR	NC,J$0A3F
;
	ADD	HL,DE
	OR	A
	RET	Z
;
	INC	B
	RET

;	  Subroutine ?? unkown function ??
;	     Inputs  ________________________
;	     Outputs ________________________

C$0A4A:	XOR	A
	RET

?.0A4C:	LD	A,(D.25E4)
	OR	A			; initialize data ?
	RET	Z			; nope, quit
	LD	A,(D.A192)
	OR	A			; first data bank = 0 ?
	JR	NZ,J$0A64		; nope,
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	LD	A,2			; assume DOS1, 2 banks
	JR	Z,J$0A61		; nope,
	LD	A,8			; DOS2, 8 banks
J$0A61:	LD	(D.A192),A		; update first data bank
J$0A64:	LD	A,(D.25EC)		; MEGASCSI slotid
	LD	H,HIGH 4000H
	CALL	ENASLT
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,(D.A192)		; first data bank
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	XOR	A
	LD	(X.4000),A
	CALL	C.0920			; select driver bank
	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENASLT
	XOR	A
	RET
;
;	-----------------
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C$0A94:	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENASLT
	LD	BC,2000H		; 8Kb
	LD	DE,D.8000
	LD	HL,X.4000
	LDIR				; copy to segment
	LD	A,(D.25EC)		; MEGASCSI slotid
	LD	H,HIGH 4000H
	CALL	ENASLT
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,(D.25E7)
	ADD	A,A
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	BC,2000H		; 8Kb
	LD	DE,X.4000
	LD	HL,D.8000
	LDIR
	CALL	C.0920			; select driver bank
	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENALST
	LD	BC,2000H		; 8Kb
	LD	DE,D.8000
	LD	HL,D.6000
	LDIR
	LD	A,(D.25EC)		; MEGASCSI slotid
	LD	H,HIGH 4000H
	CALL	ENASLT
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,(D.25E7)
	ADD	A,A
	INC	A
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	BC,2000H		; 8Kb
	LD	DE,X.4000
	LD	HL,D.8000
	LDIR
	CALL	C.0920			; select driver bank
	LD	A,(RAMAD1)
	LD	H,HIGH 4000H
	CALL	ENASLT
;
	EI
	RET

;	  Subroutine search pattern
;	     Inputs  HL = pointer to patch data
;	     Outputs DE = pointer, HL = updated pointer to patch data

C$0B21:	LD	BC,4000H
	LD	DE,X.4000
	EX	DE,HL
J$0B28:	LD	A,(DE)
	OR	A			; 0 byte ?
	JR	Z,J.0B42		; yep, do not care, continue
	CP	(HL)			; found ?
	JR	Z,J.0B42		; yep, continue
J$0B2F:	INC	HL
	DEC	BC			; update count
	LD	A,B
	OR	C			; at end of the area ?
	JR	NZ,J$0B28		; nope, try again
J$0B35:	LD	A,(DE)
	INC	DE
	INC	A			; end marker ?
	JR	NZ,J$0B35		; nope, skip next
	INC	DE
	INC	DE
	EX	DE,HL
	LD	DE,0
	SCF				; not found
	RET

J.0B42:	PUSH	BC			; store counter
	PUSH	DE			; store pointer to pattern
	PUSH	HL			; store pointer
J$0B45:	INC	DE
	INC	HL
	LD	A,(DE)
	INC	A			; end marker ?
	JR	Z,J$0B5B		; yep,
	DEC	A			; 0 byte ?
	JR	Z,J$0B51		; yep, do not care
	CP	(HL)			; still ok ?
	JR	NZ,J$0B56		; nope,
J$0B51:	DEC	BC			; update count
	LD	A,B
	OR	C			; at end of area ?
	JR	NZ,J$0B45		; nope, continue
J$0B56:	POP	HL			; restore pointer
	POP	DE			; restore pointer to pattern
	POP	BC			; restore counter
	JR	J$0B2F			; try again

J$0B5B:	EX	DE,HL
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)			; get offset
	INC	HL
	EX	DE,HL
	POP	HL			; restore pointer
	ADD	HL,BC			; add offset
	LD	BC,0
	ADD	HL,BC			; ??
	POP	BC			; discard pointer to pattern
	POP	BC			; discard counter
	EX	DE,HL
	XOR	A			; found
	RET

;	  Subroutine print word in hex
;	     Inputs  ________________________
;	     Outputs ________________________

C$0B6D:	PUSH	HL
	LD	A,H
	CALL	C.0B74			; print byte in hex
	POP	HL
	LD	A,L

;	  Subroutine print byte in hex
;	     Inputs  ________________________
;	     Outputs ________________________

C.0B74:	PUSH	AF
	RRA
	RRA
	RRA
	RRA
	CALL	C$0B7D			; print nibble in hex
	POP	AF

;	  Subroutine print nibble in hex
;	     Inputs  ________________________
;	     Outputs ________________________

C$0B7D:	AND	0FH
	CP	9+1
	JR	C,J$0B85
	ADD	A,7
J$0B85:	ADD	A,"0"
	LD	E,A
	LD	C,02H
	JP	BDOS			; print character

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.0B8D:	PUSH	HL
	LD	DE,I$2484
	LD	A,(D.25E8)		; DOS2 ROM ?
	LD	HL,(D.25ED)		; ESE hardware type
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	OR	L
	LD	C,A
	LD	A,(D.25EE)
	LD	B,A			; number of banks
	LD	A,(D.25E7)
	BIT	0,C			; SCC controller ?
	LD	HL,I$25FA		; initialize DOS1 driver for ASCII mapper
	JR	Z,J$0BAE		; nope,
	LD	HL,I$32CC		; initialize DOS1 driver for SCC mapper
J$0BAE:	EX	(SP),HL
	RET

;	  Subroutine copy jump entry
;	     Inputs  HL = source, DE = destination
;	     Outputs ________________________

C.0BB0:	PUSH	BC
	LD	BC,3
	LDIR
	POP	BC
	RET

;	  Subroutine put entry point on list
;	     Inputs  ________________________
;	     Outputs ________________________

C.0BB8:	PUSH	HL
	LD	HL,(D.25EF)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(D.25EF),HL
	POP	HL
	RET

;	  Subroutine get entry point from list
;	     Inputs  ________________________
;	     Outputs ________________________

C.0BC5:	PUSH	HL
	LD	HL,(D.25EF)
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	(D.25EF),HL
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.0BD2:	PUSH	AF
	PUSH	HL
	CALL	C.0BC5			; get entry point from list
	LD	HL,0
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	POP	AF
	RET

;	  Subroutine patch (embedded)
;	     Inputs  ________________________
;	     Outputs ________________________

C.0BDF:	EX	(SP),HL
	CALL	C$0BE5			; patch
	EX	(SP),HL
	RET

;	  Subroutine patch
;	     Inputs  HL = pointer to patch data
;	     Outputs ________________________

C$0BE5:	CALL	C$0B21			; search pattern
	PUSH	HL			; store pointer in patch data
	PUSH	DE			; store pointer
	EX	DE,HL
	INC	DE
	LD	A,(D.25E0)
	OR	A			; verbose enabled ?
	LD	C,09H
	CALL	NZ,BDOS			; yep, print string
	POP	HL			; restore pointer
	PUSH	HL			; store pointer
	LD	A,(D.25E0)
I.0BFA:	OR	A			; verbose enabled ?
	CALL	NZ,C$0B6D		; yep, print word in hex
	POP	BC			; restore pointer
	POP	HL			; restore pointer in patch data
	PUSH	BC			; store pointer
	LD	A,B
	OR	C
	JR	Z,J$0C07
	LD	A,0FFH
J$0C07:	XOR	(HL)
	INC	HL
	LD	C,A
	LD	A,(D.25E9)
	AND	C
	PUSH	AF			; store status
	PUSH	HL			; store pointer
	LD	DE,I$047F		; ok string
	LD	HL,I$048C		; not ok string
	JR	Z,J$0C19		; status = ok,
	EX	DE,HL			; not ok string
J$0C19:	LD	A,(D.25E0)
	OR	A			; verbose enabled ?
	JR	Z,J$0C21		; nope, skip
	INC	DE
	INC	DE			; to full string
J$0C21:	LD	C,09H
	CALL	BDOS			; print string
	POP	HL			; restore pointer
J$0C27:	LD	A,(HL)
	CP	"$"
	INC	HL
	JR	NZ,J$0C27
	POP	AF
	POP	DE
	RET	Z			; status = ok, quit
	SCF				; error
	RET

;	  Subroutine pass1 DOS kernel dump
;	     Inputs  ________________________
;	     Outputs ________________________

C$0C32:	CALL	C.0782			; open specified file
	RET	C			; eror, quit
	LD	A,(FCB1+16+2)
	OR	A			; file larger than 64 KB ?
	LD	C,10H
	JR	Z,J$0C42		; nope, DOS1 ROM
	LD	A,1			; DOS2 ROM
	LD	C,1
J$0C42:	LD	(D.25E8),A
	LD	A,C
	LD	(D.25E9),A
	XOR	A
	LD	(D.25E7),A		; current segment = 0
J$0C4D:	LD	HL,2000H		; 8 Kb
	LD	DE,FCB1
	LD	C,27H
	CALL	BDOS			; read blocks from FCB
	OR	A
	JR	NZ,J.0CB5		; error, quit with pass1 error
	LD	BC,2000H		; 8 Kb
	LD	DE,X.4000
	LD	HL,D.8000
	LDIR				; copy to segment
	LD	HL,2000H
	LD	DE,FCB1
	LD	C,27H
	CALL	BDOS			; read blocks from FCB
	OR	A
	JR	NZ,J.0CB5		; error, quit with pass1 error
	LD	BC,2000H
	LD	DE,D.6000
	LD	HL,D.8000
	LDIR				; copy to segment
	CALL	C$0CBA			; execute pass1 handler
	PUSH	AF
	LD	DE,I.0498		; new line string
	LD	C,09H
	CALL	BDOS			; print string
	POP	AF
	JR	C,J.0CB5		; error, quit with pass1 error
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	JR	Z,J$0CAB		; nope, skip next segments
	CALL	C$0CDC
	JR	C,J.0CB5		; error, quit with pass1 error
	LD	A,(D.25E9)
	ADD	A,A
	LD	(D.25E9),A
	LD	A,(D.25E7)
	INC	A
	LD	(D.25E7),A		; update segment
	CP	3+1			; done all segments ?
	JR	C,J$0C4D		; nope, next segment
J$0CAB:	LD	DE,FCB1
	LD	C,10H
	CALL	BDOS			; close FCB
	OR	A
	RET	Z
J.0CB5:	LD	DE,I$02FA		; pass1 illegal kernel
	SCF
	RET

;	  Subroutine execute pass1 handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$0CBA:	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	LD	HL,I$0E0A
	JR	Z,J.0CDB		; nope,
	LD	A,(D.25E7)
	OR	A			; current segment = 0 ?
	LD	HL,I$1084
	JR	Z,J.0CDB		; yep,
	DEC	A			; current segment = 1 ?
	LD	HL,I$1450
	JR	Z,J.0CDB		; yep,
	DEC	A			; current segment = 2 ?
	LD	HL,J.16D4
	JR	Z,J.0CDB		; yep,
	LD	HL,I$1702
J.0CDB:	JP	(HL)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0CDC:	LD	A,(D.25E7)
	OR	A
	RET	Z
	LD	BC,(D.25E2)		; I/O port VDP data write
	INC	C
	DI
	OUT	(C),A
	LD	A,8EH
	OUT	(C),A
	XOR	A
	OUT	(C),A
	LD	A,40H	; "@"
	OUT	(C),A
	EI
	EX	(SP),HL
	EX	(SP),HL
	DEC	C
	LD	DE,X.4000
	LD	HL,X.4000
J$0CFE:	LD	A,(HL)
	INC	HL
	OUT	(C),A
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,J$0CFE
;
	XOR	A
	RET

;	  Subroutine pass2 DOS kernel dump
;	     Inputs  ________________________
;	     Outputs ________________________

C$0D09:	CALL	C.0782			; open specified file
	RET	C			; error, quit
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	LD	A,16
	JR	Z,J$0D17		; nope,
	LD	A,1
J$0D17:	LD	(D.25E9),A
	XOR	A
	LD	(D.25E7),A		; current segment = 0
	LD	HL,2000H		; 8Kb
	LD	DE,FCB1
	LD	C,27H
	CALL	BDOS			; read blocks from FCB
	OR	A
	JR	NZ,J.0D9B		; error, pass2 illegal kernel, restore H.TIMI handler
	LD	BC,2000H		; 8Kb
	LD	DE,X.4000
	LD	HL,D.8000
	LDIR				; copy to segment 0 (bank 0)
	LD	HL,2000H		; 8Kb
	LD	DE,FCB1
	LD	C,27H
	CALL	BDOS			; read blocks from FCB
	OR	A
	JR	NZ,J.0D9B		; ,pass2 illegal kernel, restore H.TIMI handler
	LD	BC,2000H		; 8Kb
	LD	DE,D.6000
	LD	HL,D.8000
	LDIR				; copy to segment 0 (bank 1)
	LD	A,0C9H
	LD	BC,5
	LD	DE,I.25F1
	LD	HL,H.TIMI
	DI
	LDIR				; store H.TIMI
	LD	(H.TIMI+0),A		; disable H.TIMI handler(s)
	EI
J$0D62:	CALL	C$0DB5
	JR	C,J.0D9B		; ,pass2 illegal kernel, restore H.TIMI handler
	CALL	C$0A94
	JR	C,J.0D9B		; ,pass2 illegal kernel, restore H.TIMI handler
	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	JR	Z,J$0D89		; nope,
	CALL	C$0DD7
	JR	C,J.0D9B		; ,pass2 illegal kernel, restore H.TIMI handler
	LD	A,(D.25E9)
	ADD	A,A
	LD	(D.25E9),A
	LD	A,(D.25E7)
	INC	A
	LD	(D.25E7),A		; update segment
	CP	3+1			; done all segments ?
	JR	C,J$0D62		; nope, next segment
J$0D89:	CALL	C$0D9F			; restore H.TIMI handler
	LD	DE,FCB1
	LD	C,10H
	CALL	BDOS			; close FCB
	OR	A			; error ?
	RET	Z			; nope, quit
	LD	DE,I.031A		; pass2 illegal kernel
	SCF
	RET

J.0D9B:	LD	DE,I.031A		; pass2 illegal kernel
	SCF

;	  Subroutine restore H.TIMI handler
;	     Inputs  ________________________
;	     Outputs ________________________

C$0D9F:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	BC,5
	LD	DE,H.TIMI
	LD	HL,I.25F1
	DI
	LDIR
	EI
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0DB5:	LD	A,(D.25E8)
	OR	A			; DOS2 ROM ?
	LD	HL,I$19CB
	JR	Z,J.0DD6		; nope,
	LD	A,(D.25E7)
	OR	A			; segment 0 ?
	LD	HL,I$1A78
	JR	Z,J.0DD6		; yep,
	DEC	A			; segment 1 ?
	LD	HL,I$1B98
	JR	Z,J.0DD6		; yep,
	DEC	A			; segment 2 ?
	LD	HL,I$1C23
	JR	Z,J.0DD6		; yep,
	LD	HL,I$1C9D
J.0DD6:	JP	(HL)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$0DD7:	LD	A,(D.25E7)
	INC	A
	CP	3+1
	RET	NC
	LD	BC,(D.25E2)		; I/O port VDP data write
	INC	C
	DI
	OUT	(C),A
	LD	A,8EH
	OUT	(C),A
	XOR	A
	OUT	(C),A
	XOR	A
	OUT	(C),A
	EI
	EX	(SP),HL
	EX	(SP),HL
	LD	BC,(D.25E1)		; I/O port VDP data read
	LD	DE,X.4000
	LD	HL,X.4000
J$0DFD:	EX	(SP),HL
	EX	(SP),HL
I$0DFF:	IN	A,(C)
	LD	(HL),A
	INC	HL
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,J$0DFD
;
	XOR	A
	RET

; pass1, DOS1 handler

I$0E0A:	LD	HL,D.A500
	LD	(D.25EF),HL
	CALL	C.0BDF			; patch (embedded)


	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	PUSH	HL
	POP	IX
	RET

	CALL	0
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SCF
	ADC	A,A
	LD	C,A


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H
	DEFB	"SETPTR ___3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	HL,H.RUNC
	LD	B,5
J$0E44:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$0E44
	LD	HL,DEVICE


	DEFB	0FFH
	DEFW	0
	DEFB	19H
	DEFB	"R_RUNC 0__3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	A,(H.TIMI+0)
	CP	0C9H
	JR	Z,J$0E6E
J$0E6E:	PUSH	HL
	LD	A,(DEVICE)
	LD	HL,DRVINT


	DEFB	0FFH
	DEFW	0
	DEFB	18H
	DEFB	"IWKEND ___3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	PUSH	AF
	CALL	C.402D
	LD	B,4
	LD	DE,DRVINT
	LD	HL,DRVINF+0*2+1
	CP	(HL)

	DEFB	0FFH
	DEFW	0
	DEFB	18H
	DEFB	"INTEND ___3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CALL	0
	DI
	LD	A,(DEVICE)
	DEFB	0
	RET	M
J$0EC1:	JP	NZ,0
	LD	HL,HOKVLD
	BIT	0,(HL)

	DEFB	0FFH
	DEFW	0
	DEFB	18H
	DEFB	"INIFDC ___3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	ADD	A,L
	CP	09H	; 9 
	LD	A,L
	JR	C,J$0EED
	LD	A,08H	; 8 
	SUB	C

J$0EED:	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H
	DEFB	"DRIVES ___3N : "
	DEFB	"$"

J$0F01:	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


J$0F08:	LD	HL,DEVICE
	INC	(HL)
	RET

?.0F0D:	LD	HL,H.RUNC
	LD	B,5
J$0F12:	LD	(HL),0C9H
	INC	HL
J$0F15:	DJNZ	J$0F12

J$0F17:	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H
	DEFB	"INIWRK ___3N : "
	DEFB	"$"

	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	DEFB	"SYSTEM",0
	DEFW	0
	DEFB	"FORMAT"

	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	19H
	DEFB	"STATEM 0__3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	PUSH	HL
	DEFB	0,0,0
	LD	BC,21
J$0F63:	LDIR
J$0F65:	POP	HL

	
	DEFB	0FFH
	DEFW	1
	DEFB	19H
	DEFB	"DFDPB0 0__3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	C,A
J$0F82:	LD	B,1
	LD	HL,($DIRBU)
	PUSH	HL
	XOR	A
	LD	E,A
	LD	D,A
	CALL	C.0144


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H
	DEFB	"DFDPB1 ___3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CP	8
	RET	NC
	LD	HL,0
	CALL	0
J$0FB2:	RET	C
	EX	DE,HL
	CALL	0
	LD	(HL),E
	INC	HL
	LD	(HL),D

	DEFB	0FFH
	DEFW	3
	DEFB	18H
	DEFB	"GETWK0 ___3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
J$0FD2:	CALL	C.0BDF			; patch (embedded)


	LD	HL,I.F300
	LD	DE,I.F1C9
	DEFB	0
	SBC	HL,DE
	CALL	NC,0
	RET	C

	DEFB	0FFH
	DEFW	0
	DEFB	18H
	DEFB	"GETWK1 ___3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)

	RST	30H
	DEFB	0
	DEFW	0
	RET

?.1002:	LD	HL,DRVINF
	LD	B,4
	XOR	A
	ADD	A,(HL)
	JP	C,0
	INC	HL
	INC	HL

	DEFB	0FFH
	DEFW	2
	DEFB	18H
	DEFB	"S_RUNC ___3N : "
	DEFB	"$"


	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	A,(LINLEN)
	LD	B,A
	LD	A,(TTYPOS)
	JR	Z,J$1037
	LD	B,80
	LD	A,(LPTPOS)
J$1037:	DEFB	0
	JR	Z,J$103A
J$103A:	ADD	A,0
	CP	B
	JR	NC,J.103F
J.103F:	LD	A," "
	RST	18H

	DEFB	0FFH
	DEFW	18
	DEFB	19H
	DEFB	"WIDFIX 0__3N ; "
	DEFB	"$"
	RET	C

	CALL	C.0BB8			; put entry point on list
J$105A:	CALL	C.0BDF			; patch (embedded)


	EX	DE,HL
	SBC	HL,DE
	LD	DE,(D.F2E2)
	XOR	A
	LD	(DE),A
J$1066:	INC	DE
	DEC	HL
	LD	A,H
	OR	L

	DEFB	0FFH
	DEFW	8
	DEFB	18H
	DEFB	"(OKEI) ___3N ; "
	DEFB	"$"


J$107E:	RET	C
	CALL	C.0BB8			; put entry point on list
	XOR	A
	RET

; pass1, DOS2 segment 0 handler

I$1084:	LD	HL,I$5F18
	LD	(X.1DC9),HL
	LD	HL,D.A200
	LD	(D.25EF),HL
	CALL	C.0BDF			; patch (embedded)


	LD	A,(D.F313)		; DOS2 version
	CP	0
	JR	NC,J$10B6
	CALL	0
	RET	C
	LD	A,0
	LD	(D.F313),A		; update DOS2 version


	DEFB	0FFH
	DEFW	4
	DEFB	1
	I$454B
	LD	D,D
	LD	D,(HL)
	LD	B,L
	LD	D,D
	JR	NZ,J$10DF
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$10EF
;
	JR	NZ,J$10DB
J$10B6	EQU	$-1

J$10B7:	RET	C
	LD	HL,0
	ADD	HL,DE
	LD	A,(HL)
	CP	23H			; kernel 2.3 ?
	LD	A,4
	JR	C,J$10C6		; nope,
	LD	(D.25E8),A		; DOS2 ROM
J$10C6:	CALL	C.0BDF			; patch (embedded)


	CALL	C.4100
	RET	C
	LD	HL,5
	ADD	HL,SP
	IN	A,(0A8H)
	RRD
	LD	(HL),A


	DEFB	0FFH
	DEFW	0FFFEH
	DEFB	1
	I$4152
J$10DB	EQU	$-1
	LD	C,L
	LD	B,E
	LD	C,B
J$10DF:	LD	C,E
	JR	NZ,J$1112
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$1122
;
	JR	NZ,J$110E
;
	RET	C
;
	LD	HL,C.0000
	ADD	HL,DE
J$10EF:	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	(D$1E23),BC
	CALL	C.0BDF			; patch (embedded)


	CALL	X.4000
	EX	AF,AF'
	XOR	A
	CALL	C.0000
	EX	AF,AF'
	RET

?.1103:	DEFB	0DDH		; << Illegal Op Code Byte >>
;	-----------------
;


	DEFB	0FFH
	DEFW	6
	DEFB	7
	LD	B,E
	LD	C,B
	LD	B,A
	LD	B,D
	LD	C,(HL)
	LD	C,E
J$110E:	JR	NZ,J$1140
;
	LD	SP,I.5F32
J$1112	EQU	$-1
	LD	E,A
	JR	NZ,J$1150
;
	JR	NZ,J$113C
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	A,(HL)
	INC	HL
	LD	H,(HL)
J$1122:	LD	L,A
	PUSH	HL
	POP	IX
	RET

	IN	A,(0A8H)
	AND	0CH


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	1
	I$4553
	LD	D,H
	LD	D,B
	LD	D,H
	LD	D,D
	JR	NZ,J$1167
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$1177
J$113C	EQU	$-1
;
	JR	NZ,J$1163
;
	RET	C
;
J$1140:	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	HL,H.RUNC
	LD	B,5
J$114B:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$114B
	LD	HL,DEVICE


	DEFB	0FFH
	DEFW	0
	DEFB	19H
	LD	D,D
	LD	E,A
	LD	D,D
	LD	D,L
	LD	C,(HL)
	LD	B,E
	JR	NZ,J$118F
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
J$1163:	JR	NZ,J$119F
;
	JR	NZ,J$118B
;
J$1167:	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	EX	DE,HL
	CALL	C.402D
	PUSH	AF
	LD	A,(DEVICE)
	LD	HL,DRVINT
	CALL	0
	ADD	HL,BC
	ADD	HL,BC
	POP	AF
	LD	(HL),A
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	RET


	DEFB	0FFH
	DEFW	0
	DEFB	1
	I$5749
J$118B:	LD	C,E
	LD	B,L
	LD	C,(HL)
	LD	B,H
J$118F:	JR	NZ,J$11C1
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$11D1
;
	JR	NZ,J$11BD
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	RET

?.11A1:	PUSH	HL
	PUSH	BC
	IN	A,(0A8H)
	CALL	0
	JR	Z,J$11AA
J$11AA:	RLCA
	RLCA
	JR	J$11AE


	DEFB	0FFH
	DEFW	0
	DEFB	1
	I.4E49
	LD	D,H
	LD	B,L
	LD	C,(HL)
	LD	B,H
	JR	NZ,J$11EA
;
	LD	E,A
	LD	E,A
	LD	E,A
J$11BD:	LD	E,A
	JR	NZ,J$11FA
;
	JR	NZ,J$11E6
J$11C1	EQU	$-1
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	DI
	LD	A,(IDBYT2)
	NOP
	RET	Z
	LD	A,(DEVICE)


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	1
	I.4E49
	LD	C,C
	LD	B,(HL)
	LD	B,H
	LD	B,E
	JR	NZ,J$120E
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$121E
;
	JR	NZ,J$120A
;
J$11E6:	RET	C
;
	LD	(D$1E2B),DE
J$11EA	EQU	$-1
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	ADD	A,L
	CP	8+1
	JR	C,J$11F8
	LD	A,8
J$11F8:	SUB	C
	JR	Z,J$11FB
J$11FB:	LD	(DE),A
	INC	DE


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	1
	I$5244
	LD	C,C
	LD	D,(HL)
	LD	B,L
	LD	D,E
	JR	NZ,J$1239
;
	LD	E,A
J$120A:	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$1249
J$120E	EQU	$-1
;
	JR	NZ,J$1235
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	HL,DEVICE
	INC	(HL)
	RET

?.121D:	LD	HL,DEVICE
	INC	(HL)
	DEC	(HL)
	RET	NZ
	INC	(HL)
	RET


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	1
	I.4E49
	LD	C,C
	LD	D,A
	LD	D,D
	LD	C,E
	JR	NZ,J$1261
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
J$1235:	JR	NZ,J$1271
;
	JR	NZ,J$125D
;
J$1239:	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	D,E
	LD	E,C
	LD	D,E
	LD	D,H
	LD	B,L
	LD	C,L
	DEFB	0,0,0
J$1249:	LD	B,(HL)
	LD	C,A
	LD	D,D
	LD	C,L
	LD	B,C
	LD	D,H


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	19H
	LD	D,E
	LD	D,H
	LD	B,C
	LD	D,H
	LD	B,L
	LD	C,L
	JR	NZ,J$128B
;
	LD	E,A
	LD	E,A
J$125D:	INC	SP
	LD	C,(HL)
	JR	NZ,J$129B
;
J$1261:	JR	NZ,J$1287
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	PUSH	HL
	DEFB	0,0,0
	LD	BC,21
J$1271:	LDIR
	POP	HL


	DEFB	0FFH
	DEFW	1
	DEFB	19H
	LD	B,H
	LD	B,L
	LD	B,(HL)
	LD	B,H
	LD	D,B
	LD	B,D
	JR	NZ,J$12B0
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$12C0
;
	JR	NZ,J$12AC
J$1287	EQU	$-1
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CALL	0
	JR	C,J$1294
J$1294:	EX	DE,HL
	CALL	0
	LD	(HL),E
	INC	HL
	LD	(HL),D
J$129B:	LD	HL,(AUTLIN)
	LD	DE,512
	RST	20H
	JR	NC,J$12A8
	LD	(AUTLIN),DE


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	1
	I$4547
J$12AC	EQU	$-2
	LD	D,H
	LD	D,A
J$12B0:	LD	D,D
	LD	C,E
	JR	NZ,J$12E4
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$12F4
;
	JR	NZ,J$12E0
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
J$12C0:	CALL	C.0BDF			; patch (embedded)


	CALL	C.402D
	LD	HL,H.RUNC
	LD	(HL),0F7H
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(HL),0


	DEFB	0FFH
	DEFW	12
	DEFB	1
	I.5F53
	LD	D,D
	LD	D,L
	LD	C,(HL)
	LD	B,E
	JR	NZ,J$130F
;
	LD	E,A
J$12E0:	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$131F
J$12E4	EQU	$-1
;
	JR	NZ,J$130B
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	A,(LINLEN)
	LD	B,A
	LD	A,(TTYPOS)
	JR	Z,J$12FC
	LD	B,80
	LD	A,(LPTPOS)
J$12FC:	NOP
	JR	Z,J$12FF
J$12FF:	ADD	A,0
	CP	B
	JR	NC,J$1304
J$1304:	LD	A," "
	RST	18H


	DEFB	0FFH
	DEFW	18
	DEFB	19H
J$130B:	LD	D,A
	LD	C,C
	LD	B,H
	LD	B,(HL)
J$130F:	LD	C,C
	LD	E,B
	JR	NZ,J$1343
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$1354
;
	JR	NZ,J$133F
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
J$131F:	CALL	C.0BDF			; patch (embedded)


	LD	HL,H.TIMI
	PUSH	HL
	LD	DE,J.F2C0
	LD	BC,5
	LDIR
	POP	HL
	LD	DE,0
	CALL	0
	LD	HL,0*256 + 0CAH
	LD	DE,I.F2D5
	LD	BC,5
	PUSH	HL
J$133F:	LDIR
	POP	HL


	DEFB	0FFH
J$1343:	DEFW	14
	DEFB	1
	I.5F53
	LD	D,H
	LD	C,C
	LD	C,L
	LD	C,C
	JR	NZ,J$137E
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$138E
;
J$1354:	JR	NZ,J$137A
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	LD	HL,0
	ADD	HL,DE
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	(D.25EA),BC
	CALL	C.0BDF			; patch (embedded)


	PUSH	AF
	CALL	0
	CALL	0
	POP	AF
	JP	J.F2C0

?.1373:	LD	DE,DRVINF
	LD	HL,DRVINT


	DEFB	0FFH
J$137A:	DEFW	0
	DEFB	1
	I$5F4D
J$137E	EQU	$-1
	LD	D,H
	LD	C,C
	LD	C,L
	LD	C,C
	JR	NZ,J$13B5
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$13C5
;
	JR	NZ,J$13B1
;
	RET	C
J$138E:	CALL	C.0BB8			; put entry point on list
	LD	A,(D.25E8)
	CP	04H	; 4 
	CCF
	RET	NC
	LD	HL,I$0930
	LD	(X.1DC9),HL
	CALL	C.0BDF			; patch (embedded)


	LD	(DEVICE),A
	XOR	A
	CALL	C.0141
	BIT	1,A


	DEFB	0FFH
	DEFW	10
	DEFB	1
	4843
	LD	B,A
J$13B1:	LD	B,E
	LD	D,B
	LD	D,L
	JR	NZ,J$13E6
J$13B5	EQU	$-1
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$13F7
;
	JR	NZ,J$13E2
;
	RET	C
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F6C),HL
J$13C5	EQU	$-1
	LD	(D$1F1F),HL
	LD	(D$1ED2),HL
	LD	(D$1E85),HL
	CALL	C.0BDF			; patch (embedded)


	LD	E,0DH	; 13 
	CALL	0
	LD	E,0AH	; 10 
	JP	0

?.13DC:	XOR	A
	CALL	C.0141
	BIT	1,A


	DEFB	0FFH
	DEFW	18
	DEFB	1
	I.4843
J$13E6	EQU	$-2
	LD	B,A
	LD	B,E
	LD	D,B
	LD	D,L
	JR	NZ,J$141E
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$142F
;
	JR	NZ,J$141A
;
	RET	C
;
J$13F7:	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F73),HL
	LD	(D$1F26),HL
	LD	(D$1ED9),HL
	LD	(D$1E8C),HL
	CALL	C.0BDF			; patch (embedded)


	LD	A,(RAMAD2)
	LD	H,HIGH 8000H
	CALL	ENASLT
	DI
	LD	HL,J.F2C0
	LD	DE,H.TIMI
	LD	BC,5
	LDIR
J$141E:	LD	HL,I.F2D5
	LD	DE,0*256 + 0CAH
	LD	BC,5
	LDIR


	DEFB	0FFH
	DEFW	0FFFBH
	DEFB	1
	I.4843
J$142F:	LD	B,A
	LD	B,E
	LD	D,B
	LD	D,L
	JR	NZ,J$1465
;
	LD	E,A
	LD	E,A
	LD	E,A
	LD	E,A
	JR	NZ,J$1476
;
	JR	NZ,J.1461
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F7A),HL
	LD	(D$1F2D),HL
	LD	(D$1EE0),HL
	LD	(D$1E93),HL
	XOR	A
	RET

; pass1, DOS2 segment 1 handler

I$1450:	LD	DE,J.1461
	LD	HL,I.7FE0		; MEGASCSI ID TEXT
J$1456:	LD	A,(DE)
	INC	DE
	OR	A
	JR	Z,J$146A
	CP	(HL)
	INC	HL
	JR	Z,J$1456
;
	JR	J$1470
;
;	-----------------
J.1461:	LD	C,L
	LD	B,L
	LD	B,A
	LD	B,C
J$1465:	LD	D,E
	LD	B,E
	LD	D,E
	LD	C,C
	NOP
J$146A:	LD	HL,(I.7FDA+2)
	LD	(D.25EA),HL
J$1470:	LD	HL,D.A300
	LD	(D.25EF),HL
J$1476:	CALL	C.0BDF			; patch (embedded)


	LD	C,L
	LD	D,E
	LD	E,B
	DEC	L
	LD	B,H
	LD	C,A
	LD	D,E
	LD	(D$8220),A
	CALL	Z,C$6683
;
	ADD	A,E
	LD	B,D
	ADD	A,E
	LD	E,B
	ADD	A,E
	LD	C,(HL)
	ADD	A,D
	RET	P
;
	ADD	A,E
	LD	L,B
	ADD	A,E
	ADC	A,C
	ADD	A,E
	LD	B,E
	ADD	A,E
	LD	(HL),L
	JR	NZ,J$1497
J$1497	EQU	$-1
;
	LD	B,L
	NOP
	LD	(BC),A
	LD	B,H
	LD	D,L
	LD	C,L
	LD	C,L
	LD	E,C
	JR	NZ,J$14C2
;
	LD	E,A
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$14E3
;
	JR	NZ,J$14CF
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CALL	X.4000
	EX	AF,AF'
	XOR	A
	CALL	0
	EX	AF,AF'
	RET

?.14BC:	DEFB	0DDH		; << Illegal Op Code Byte >>


	DEFB	0FFH
	DEFW	6
	DEFB	7
	LD	B,E
J$14C2:	LD	C,B
	LD	B,A
	LD	B,D
	LD	C,(HL)
	LD	C,E
	JR	NZ,J$14F9
;
	LD	SP,I.5F32
	LD	E,A
	JR	NZ,J$1509
;
J$14CF:	JR	NZ,J$14F5
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list


	LD	A,(D.25E8)
	CP	04H	; 4 
	CCF
	RET	NC
;
	CALL	C.0BDF			; patch (embedded)


	EX	AF,AF'
	CALL	0
J$14E3:	PUSH	IX
	LD	IX,0
	DEFB	0,0,0
	PUSH	AF
	XOR	A
	LD	IX,0
	DEFB	0,0,0
J$14F5:	POP	AF
	POP	IX
	PUSH	AF
J$14F9:	EX	AF,AF'


	DEFB	0FFH
	DEFW	8
	DEFB	2
	LD	B,A
	LD	B,L
	LD	D,H
	LD	B,E
	LD	D,B
	LD	D,L
	JR	NZ,J$1565
;
	LD	SP,I.5F5F
J$1509:	LD	E,A
	JR	NZ,J$1547
;
	JR	NZ,J$1532
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F81),HL
	LD	(D$1F34),HL
	LD	(D$1EE7),HL
	LD	(D$1E9A),HL
	CALL	C.0BDF			; patch (embedded)


	EX	AF,AF'
	CALL	0
	PUSH	IX
	LD	IX,0
	DEFB	0,0,0
	PUSH	AF
	XOR	A
	LD	IX,0
	DEFB	0,0,0
	POP	AF
	POP	IX
	PUSH	AF
	EX	AF,AF'


	DEFB	0FFH
	DEFW	17
	DEFB	2
	LD	B,E
	LD	C,B
	LD	B,A
	LD	B,E
	LD	D,B
	LD	D,L
J$1547:	JR	NZ,J$15A8
;
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$158A
;
	JR	NZ,J$1575
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F88),HL
	LD	(D$1F3B),HL
	LD	(D$1EEE),HL
	LD	(D$1EA1),HL
	CALL	C.0BDF			; patch (embedded)


J$1565:	CALL	CALSLT
	EX	AF,AF'
	POP	AF
	PUSH	IX
	LD	IX,0
	DEFB	0,0,0
	POP	IX
J$1575:	EX	AF,AF'


	DEFB	0FFH
	DEFW	9
	DEFB	2
	LD	B,E
	LD	C,B
	LD	B,A
	LD	B,E
	LD	D,B
	LD	D,L
	JR	NZ,J$15E1
;
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$15C3
;
	JR	NZ,J$15AE
;
J$158A:	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F8F),HL
	LD	(D$1F42),HL
	LD	(D$1EF5),HL
	LD	(D$1EA8),HL
	CALL	C.0BDF			; patch (embedded)


	LD	(DE),A
	LD	HL,(D.F2C5)
	LD	A,(HL)
	PUSH	HL
	LD	(RAMAD3),A
	LD	(RAMAD1),A
	LD	(RAMAD0),A
	LD	H,HIGH 8000H
	CALL	ENASLT
	POP	HL
	INC	HL
	LD	A,(HL)
	DEFB	0,0,0,0,0,0,0,0,0
	DEC	A
	LD	(D.F2CF),A
	DEC	A
J$15C3:	LD	(D.F2D0),A
	SUB	4
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),0


	DEFB	0FFH
	DEFW	22
	DEFB	2
	LD	C,L
	LD	B,C
	LD	D,B
	DEC	L
	LD	C,D
	LD	D,D
	JR	NZ,J$1638
;
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$161A
;
	JR	NZ,J$1605
;
J$15E1:	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F96),HL
	LD	(D$1F49),HL
	LD	(D$1EFC),HL
	LD	(D$1EAF),HL
	CALL	C.0BDF			; patch (embedded)


	LD	(DE),A
	LD	HL,(D.F2C5)
	LD	A,(HL)
	PUSH	HL
	LD	(RAMAD3),A
	LD	(RAMAD1),A
	LD	(RAMAD0),A
	LD	H,HIGH 8000H
	CALL	ENASLT
	POP	HL
	INC	HL
	LD	A,(HL)
	DEFB	0,0,0,0,0,0,0,0,0
	DEC	A
	LD	(D.F2CF),A
	DEC	A
J$161A:	LD	(D.F2D0),A
	SUB	4
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),0


	DEFB	0FFH
	DEFW	2DH
	DEFB	2
	LD	C,L
	LD	B,C
	LD	D,B
	DEC	L
	LD	SP,I$2030
	LD	E,A
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$1671
;
	JR	NZ,J$165C
;
J$1638:	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1F9D),HL
	LD	(D$1F50),HL
	LD	(D$1F03),HL
	LD	(D$1EB6),HL
	CALL	C.0BDF			; patch (embedded)


	LD	HL,(D.F2C5)
	LD	A,(HL)
	INC	HL
	PUSH	HL
	CALL	0
	DEC	HL
	DEC	(HL)
	DEC	HL
	DEC	(HL)
	DEFB	0,0,0
J$165C:	DEFB	0,0,0,0,0
	EX	DE,HL
	LD	B,4
J$1664:	DEC	(HL)
	INC	HL
	DJNZ	J$1664
	POP	HL


	DEFB	0FFH
	DEFW	14
	DEFB	2
	LD	C,L
	LD	B,C
	LD	D,B
	DEC	L
J$1671:	LD	B,(HL)
	LD	C,H
	JR	NZ,J.16D4
;
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$16B6
;
	JR	NZ,J$16A1


	RET	C
	CALL	C.0BB8			; put entry point on list

	EX	DE,HL
	LD	(D$1FA4),HL
	LD	(D$1F57),HL
	LD	(D$1F0A),HL
	LD	(D$1EBD),HL
	INC	HL
	INC	HL
	LD	(D$1FAB),HL
	LD	(D$1F5E),HL
	LD	(D$1F11),HL
	LD	(D$1EC4),HL
	CALL	C.0BDF			; patch (embedded)


	LD	A,B
	DEC	A
J$16A1:	AND	02H	; 2 
	LD	B,A
	INC	HL
	LD	A,(HL)
	DEC	HL
	DEC	A
	AND	02H	; 2 
	CP	B
	LD	A,C
	POP	BC


	DEFB	0FFH
	DEFW	0FFFAH
	DEFB	2
	LD	C,L
	LD	B,C
	LD	D,B
	DEC	L
	LD	D,B
J$16B6:	LD	D,D
	JR	NZ,J$1718
;
	LD	SP,I.5F5F
	LD	E,A
	JR	NZ,J$16FA
;
	JR	NZ,J$16E5
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list


	EX	DE,HL
	LD	(D$1FB2),HL
	LD	(D$1F65),HL
	LD	(D$1F18),HL
	LD	(D$1ECB),HL
	XOR	A
	RET

; pass1, DOS2 segment 2 handler

J.16D4:	LD	HL,D.A400
	LD	(D.25EF),HL
	CALL	C.0BDF			; patch (embedded)


	CALL	X.4000
	EX	AF,AF'
	XOR	A
	CALL	0
J$16E5:	EX	AF,AF'
	RET

?.16E7:	DEFB	0DDH		; << Illegal Op Code Byte >>


	DEFB	0FFH
	DEFW	6
	DEFB	7
	LD	B,E
	LD	C,B
	LD	B,A
	LD	B,D
	LD	C,(HL)
	LD	C,E
	JR	NZ,J$1724
;
	LD	SP,I.5F32
	LD	E,A
	JR	NZ,J$1734
;
J$16FA:	JR	NZ,J$1720
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
	XOR	A
	RET

; pass1, DOS2 segment 3 handler

I$1702:	LD	A,(D.25E8)
	CP	03H	; 3 
	JR	NC,J$173A
;
	LD	HL,D.A500
	LD	(D.25EF),HL
	CALL	C.0BDF			; patch (embedded)


	CALL	X.4000
	EX	AF,AF'
	XOR	A
	CALL	0
	EX	AF,AF'
	RET
;
;	-----------------
?.171C:	DEFB	0DDH		; << Illegal Op Code Byte >>


	DEFB	0FFH
	DEFW	6
J$1720:	DEFB	15
	LD	B,E
	LD	C,B
	LD	B,A
J$1724:	LD	B,D
	LD	C,(HL)
	LD	C,E
	JR	NZ,J$1759
;
	LD	SP,I$2D32
	LD	E,A
	JR	NZ,J$1769
;
	JR	NZ,J$1755
;
	CALL	C.0BB8			; put entry point on list

J$1734:	RET	NC
;
	LD	A,02H	; 2 
	LD	(D.25E8),A
J$173A:	LD	HL,D.A500
	LD	(D.25EF),HL
	CALL	C.0BDF			; patch (embedded)


	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	PUSH	HL
	POP	IX
	RET

?.174B:	CALL	0
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SCF
	ADC	A,A
	LD	C,A


	DEFB	0FFH
J$1755:	DEFW	0FFFDH
	DEFB	18H

J$1759:	LD	B,L
	LD	D,H
	LD	D,B
	LD	D,H
	LD	D,D
	JR	NZ,J$17BF
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$17A0
;
	JR	NZ,J$178C
;
	LD	A,(D.25E8)
J$1769	EQU	$-2
	JR	NC,J$1771
;
	CP	03H	; 3 
	CCF
	RET
;
;	-----------------
J$1771:	CP	03H	; 3 
	JR	NC,J$1780
;
	LD	A,03H	; 3 
	LD	(D.25E8),A
	LD	HL,I$5F30
	LD	(X.1DC9),HL
J$1780:	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	HL,H.RUNC
	LD	B,5
J$178B:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$178B
	LD	HL,DEVICE


	DEFB	0FFH
	DEFW	0
	DEFB	19H
	LD	D,D
	LD	E,A
	LD	D,D
	LD	D,L
	LD	C,(HL)
	LD	B,E
	JR	NZ,J$17CF
;
	LD	E,A
J$17A0:	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$17DF
;
	JR	NZ,J$17CB
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	A,(H.TIMI+0)
	CP	0C9H
	JR	Z,J$17B5
J$17B5:	PUSH	HL
	LD	A,(DEVICE)
	LD	HL,DRVINT


	DEFB	0FFH
	DEFW	0
	DEFB	18H

?.17C1:	LD	D,A
	LD	C,E
	LD	B,L
	LD	C,(HL)
	LD	B,H
	JR	NZ,J$1827
;
	LD	E,A
	LD	E,A
	INC	SP
J$17CB:	LD	C,(HL)
	JR	NZ,J$1808
;
	JR	NZ,J$17F4
J$17CF	EQU	$-1
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
;
	CALL	C.0BDF			; patch (embedded)


	PUSH	AF
	CALL	C.402D
	LD	B,4
	LD	DE,DRVINT
	LD	HL,DRVINF+0*2+1
	CP	(HL)


	DEFB	0FFH
	DEFW	0
	DEFB	18H

?.17E9:	LD	C,(HL)
	LD	D,H
	LD	B,L
	LD	C,(HL)
	LD	B,H
	JR	NZ,J$184F
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
J$17F4:	JR	NZ,J$1830
;
	JR	NZ,J$181C
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CALL	0
	DI
	LD	A,(DEVICE)
	DEFB	0
	RET	M
J$1808:	JP	NZ,0
	LD	HL,HOKVLD
	BIT	0,(HL)


	DEFB	0FFH
	DEFW	0
	DEFB	18H
;
;	-----------------
?.1815:	LD	C,(HL)
	LD	C,C
	LD	B,(HL)
	LD	B,H
	LD	B,E
	JR	NZ,J$187B
;
J$181C:	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$185C
;
	JR	NZ,J$1848
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	ADD	A,L
	CP	8+1
	LD	A,L
	JR	C,J$1834
	LD	A,8
	SUB	C


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H
;
;	-----------------
?.1839:	LD	D,D
	LD	C,C
	LD	D,(HL)
	LD	B,L
	LD	D,E
	JR	NZ,J$189F
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$1880
;
	JR	NZ,J$186C
;
J$1848:	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


J$184F:	LD	HL,DEVICE
	INC	(HL)
	RET

?.1854:	LD	HL,H.RUNC
	LD	B,5
J$1859:	LD	(HL),0C9H
	INC	HL
J$185C:	DJNZ	J$1859


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H

?.1863:	LD	C,(HL)
	LD	C,C
	LD	D,A
	LD	D,D
	LD	C,E
	JR	NZ,J$18C9
;
	LD	E,A
	LD	E,A
J$186C:	INC	SP
	LD	C,(HL)
	JR	NZ,J$18AA
;
	JR	NZ,J$1896
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
;
	CALL	C.0BDF			; patch (embedded)


	LD	D,E
	LD	E,C
J$187B:	LD	D,E
	LD	D,H
J$187D:	LD	B,L
	LD	C,L
	DEFB	0
J$1880:	DEFB	0,0
	LD	B,(HL)
	LD	C,A
	LD	D,D
	LD	C,L
	LD	B,C
	LD	D,H


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	19H
	LD	D,E
	LD	D,H
	LD	B,C
	LD	D,H
	LD	B,L
	LD	C,L
	JR	NZ,J$18C4
;
	LD	E,A
	LD	E,A
J$1896:	INC	SP
	LD	C,(HL)
	JR	NZ,J$18D4
;
	JR	NZ,J$18C0
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	PUSH	HL
	DEFB	0,0,0
	LD	BC,21
J$18AA:	LDIR
J$18AC:	POP	HL


	DEFB	0FFH
	DEFW	1
	DEFB	19H
	LD	B,H
	LD	B,(HL)
	LD	B,H
	LD	D,B
	LD	B,D
	JR	NC,J$18D8
;
	JR	NC,J$1919
;
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$18F9
;
	JR	NZ,J$18E5
J$18C0	EQU	$-1
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	LD	C,A
J$18C9:	LD	B,1
	LD	HL,($DIRBU)
	PUSH	HL
	XOR	A
	LD	E,A
	LD	D,A
	CALL	C.0144


	DEFB	0FFH
	DEFW	0FFFDH
	DEFB	18H

?.18DA:	LD	B,(HL)
	LD	B,H
	LD	D,B
	LD	B,D
	LD	SP,I.5F20
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
J$18E5:	JR	NZ,J$1921
;
	JR	NZ,J$190D
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	CP	8
	RET	NC
	LD	HL,0
	CALL	0
J$18F9:	RET	C
	EX	DE,HL
	CALL	0
	LD	(HL),E
	INC	HL
I.1900:	LD	(HL),D


	DEFB	0FFH
	DEFW	3
	DEFB	18H

?.1906:	LD	B,L
	LD	D,H
	LD	D,A
	LD	C,E
	JR	NC,J$192C
;
	LD	E,A
J$190D:	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J.194D
;
	JR	NZ,J$1939
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
;
J$1919:	CALL	C.0BDF			; patch (embedded)


	LD	HL,I.F300
	LD	DE,I.F1C9
	DEFB	0
	SBC	HL,DE
	CALL	NC,0
	RET	C


	DEFB	0FFH
	DEFW	0
	DEFB	18H

?.192E:	LD	B,L
	LD	D,H
	LD	D,A
	LD	C,E
	LD	SP,I.5F20
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
J$1939:	JR	NZ,J.1975
;
	JR	NZ,J$1961
;
	RET	C
	CALL	C.0BB8			; put entry point on list
	CALL	C.0BDF			; patch (embedded)


	RST	30H
	DEFB	0
	DEFW	0
	RET

?.1949:	LD	HL,DRVINF
	LD	B,4
	XOR	A
	ADD	A,(HL)
	JP	C,0
	INC	HL
	INC	HL


	DEFB	0FFH
	DEFW	2
	DEFB	18H
;
;	-----------------
?.195A:	LD	E,A
	LD	D,D
	LD	D,L
	LD	C,(HL)
	LD	B,E
	JR	NZ,J$19C0
;
J$1961:	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$19A1
;
	JR	NZ,J$198D
;
	RET	C
;
	CALL	C.0BB8			; put entry point on list
;
	CALL	C.0BDF			; patch (embedded)


	LD	A,(LINLEN)
	LD	B,A
	LD	A,(TTYPOS)
	JR	Z,J$197E
	LD	B,80
	LD	A,(LPTPOS)
J$197E:	DEFB	0
	JR	Z,J$1981
J$1981:	ADD	A,0
	CP	B
	JR	NC,J$1986
J$1986:	LD	A," "
	RST	18H


	DEFB	0FFH
	DEFW	12H
	DEFB	19H
J$198D:	LD	D,A
	LD	C,C
	LD	B,H
	LD	B,(HL)
	LD	C,C
	LD	E,B
	JR	NZ,J$19C5
;
	LD	E,A
	LD	E,A
	INC	SP
	LD	C,(HL)
	JR	NZ,J$19D6
;
	JR	NZ,J$19C1
;
	RET	C
	CALL	C.0BB8			; put entry point on list
J$19A1:	CALL	C.0BDF			; patch (embedded)


	EX	DE,HL
	SBC	HL,DE
	LD	DE,(D.F2E2)
	XOR	A
	LD	(DE),A
J$19AD:	INC	DE
	DEC	HL
	LD	A,H
	OR	L


	DEFB	0FFH
	DEFW	8
	DEFB	18H

?.19B6:	LD	C,A
	LD	C,E
	LD	B,L
	LD	C,C
	ADD	HL,HL
	JR	NZ,J$1A1C
;
	LD	E,A
	LD	E,A
	INC	SP
J$19C0:	LD	C,(HL)
J$19C1:	JR	NZ,J$19FE
;
	JR	NZ,J$19E9
;
J$19C5:	RET	C
	CALL	C.0BB8			; put entry point on list
	XOR	A
	RET

; DOS1 ROM

I$19CB:	LD	BC,I.0BFA
	LD	DE,I.7405+1
	LD	HL,D.7405
	LD	(HL),0
	LDIR				; clean up driver area
	LD	HL,I.A508
	LD	(D.25EF),HL
	LD	HL,D.A500
	CALL	C.0B8D
	LD	DE,I.4010
	CALL	C.0BB0			; copy jump entry (DSKIO)
	CALL	C.0BB0			; copy jump entry (DSKCHG)
	CALL	C.0BB0			; copy jump entry (GETDPB)
	CALL	C.0BB0			; copy jump entry (CHOICE)
	CALL	C.0BB0			; copy jump entry (DSKFMT)
	CALL	C.0BB0			; copy jump entry (MTOFF)
	LD	A,(D.25ED)		; ESE hardware type
	RRA				; ASCII controller ?
	LD	BC,68H*256+60H
	JR	NC,J$1A05		; yep, use ASCII addressing
	LD	BC,70H*256+50H		; nope, use SCC addressing
J$1A05:	PUSH	HL
	LD	HL,I.41C1
	LD	(X.4000+2),HL
	LD	HL,I.41C1
	LD	(HL),0AFH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3CH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	CALL	C.0BC5			; get entry point from list
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	HL,0
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	LD	A,(HL)
	INC	HL
	LD	(DE),A
	INC	DE
	LD	A,(HL)
	LD	(DE),A
	CALL	C.0BD2
	LD	A,0CH
	LD	(DE),A
	CALL	C.0BD2
	LD	A,00H
	LD	(DE),A
	XOR	A
	RET

; DOS2 ROM, segment 0

I$1A78:	LD	BC,J.103F
	LD	DE,I$6FC0+1
	LD	HL,I.6FC0
	LD	(HL),0
	LDIR				; clean up driver area
	LD	HL,(D.A200)
	LD	BC,0
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,I$2FC0
	LD	HL,X.4000
J$1A95:	LD	A,(HL)
	INC	HL
	CP	E
	JR	NZ,J.1AA4
	LD	A,(HL)
	CP	D
	JR	NZ,J.1AA4
	DEC	HL
	LD	(HL),0D0H
	INC	HL
	LD	(HL),7FH
J.1AA4:	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$1A95
	LD	HL,I$A20A
	LD	(D.25EF),HL
	LD	HL,I$A202
	CALL	C.0B8D
	LD	DE,I.4010
	CALL	C.0BB0			; copy jump entry (DSKIO)
	CALL	C.0BB0			; copy jump entry (DSKCHG)
	CALL	C.0BB0			; copy jump entry (GETDPB)
	CALL	C.0BB0			; copy jump entry (CHOICE)
	CALL	C.0BB0			; copy jump entry (DSKFMT)
	CALL	C.0BB0			; copy jump entry (MTOFF)
	LD	A,(D.25ED)		; ESE hardware type
	RRA
	LD	BC,68H*256+60H
	JR	NC,J$1AD6
	LD	BC,70H*256+50H
J$1AD6:	PUSH	HL
	LD	HL,I.4092
	LD	(X.4000+2),HL
	LD	HL,I.4092
	LD	(HL),0AFH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3CH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),70H
	LD	BC,S1DC6
	LD	DE,D.7000
	LD	HL,I$1DC6
	LDIR
	POP	HL
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	INC	HL
	INC	HL
	INC	HL
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	INC	HL
	INC	HL
	INC	HL
	CALL	C.0BD2
	LD	A,(HL)
	INC	HL
	LD	(DE),A
	INC	DE
	INC	DE
	INC	DE
	LD	A,(HL)
	LD	(DE),A
	CALL	C.0BD2
	LD	A,0CH	; 12 
	LD	(DE),A
	CALL	C.0BD2
	EX	DE,HL
	LD	(HL),0DBH
	INC	HL
	LD	(HL),7FH
	LD	A,0C3H
	LD	(I.7FDA+1),A
	LD	HL,I.6FC0
	LD	(I.7FDA+2),HL
	CALL	C.0BD2
	EX	DE,HL
	LD	DE,I.6FC0
	LD	BC,63
	LDIR
	LD	HL,I$6FCB
	LD	(D$6FC5),HL
	LD	HL,I$6FFA
	LD	(D$6FEF),HL
	LD	A,(D.25E8)
	CP	04H	; 4 
	CCF
	RET	NC
	CALL	C.0BD2
	EX	DE,HL
	LD	(HL),0C9H
	DEC	HL
	LD	(HL),0C8H
	CALL	C.0BD2
	EX	DE,HL
	DEC	HL
	DEC	HL
	LD	(HL),28H	; "("
	INC	HL
	CALL	C.0BD2
	EX	DE,HL
	SCF
	SBC	HL,DE
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),0C9H
	XOR	A
	RET

; DOS2 ROM, segment 1

I$1B98:	LD	HL,(D.A300)
	LD	E,L
	LD	D,H
	LD	BC,0
	ADD	HL,BC
	XOR	A
J$1BA2:	LD	(HL),A
	INC	DE
	INC	HL
	BIT	7,D
	JR	Z,J$1BA2
	LD	HL,(D$A302)
	LD	BC,0
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,X.4000
	LD	HL,X.4000
J$1BB9:	LD	A,(HL)
	INC	HL
	CP	E
	JR	NZ,J.1BC8
	LD	A,(HL)
	CP	D
	JR	NZ,J.1BC8
	DEC	HL
	LD	(HL),0D0H
	INC	HL
	LD	(HL),7FH
J.1BC8:	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$1BB9
	LD	HL,I$A304
	CALL	C.0B8D
	LD	B,6
	LD	HL,I.4010
J$1BD8:	LD	(HL),37H		; SCF
	INC	HL
	LD	(HL),9FH		; SBC	A,A
	INC	HL
	LD	(HL),0C9H		; RET
	INC	HL
	DJNZ	J$1BD8
	LD	A,(D.25ED)		; ESE hardware type
	RRA
	LD	BC,68H*256+60H
	JR	NC,J$1BEF
	LD	BC,70H*256+50H
J$1BEF:	LD	HL,I.4092
	LD	(X.4000+2),HL
	LD	HL,I.4092
	LD	(HL),0AFH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3CH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),70H
	LD	A,0C3H
	LD	(I.7FDA+1),A
	LD	HL,(D.25EA)
	LD	(I.7FDA+2),HL
	XOR	A
	RET

; DOS2 ROM, segment 2

I$1C23:	LD	HL,(D.A400)
	LD	BC,C.0000
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,X.4000
	LD	HL,X.4000
J$1C33:	LD	A,(HL)
	INC	HL
	CP	E
	JR	NZ,J.1C42
	LD	A,(HL)
	CP	D
	JR	NZ,J.1C42
	DEC	HL
	LD	(HL),0D0H
	INC	HL
	LD	(HL),7FH
J.1C42:	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$1C33
	LD	HL,I$A402
	CALL	C.0B8D
	LD	B,6
	LD	HL,I.4010
J$1C52:	LD	(HL),37H		; SCF
	INC	HL
	LD	(HL),9FH		; SBC	A,A
	INC	HL
	LD	(HL),0C9H		; RET
	INC	HL
	DJNZ	J$1C52
	LD	A,(D.25ED)		; ESE hardware type
	RRA
	LD	BC,68H*256+60H
	JR	NC,J$1C69
	LD	BC,70H*256+50H
J$1C69:	LD	HL,I.4092
	LD	(X.4000+2),HL
	LD	HL,I.4092
	LD	(HL),0AFH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3CH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),70H
	LD	A,0C3H
	LD	(I.7FDA+1),A
	LD	HL,(D.25EA)
	LD	(I.7FDA+2),HL
	XOR	A
	RET

; DOS2 ROM, segment 3

I$1C9D:	LD	A,(D.25E8)
	CP	03H
	JR	NC,J$1D11
	CP	02H
	RET	Z
	LD	HL,(D.A500)
	LD	BC,0
	ADD	HL,BC
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,X.4000
	LD	HL,X.4000
J$1CB7:	LD	A,(HL)
	INC	HL
	CP	E
	JR	NZ,J.1CC6
	LD	A,(HL)
	CP	D
	JR	NZ,J.1CC6
	DEC	HL
	LD	(HL),0D0H
	INC	HL
	LD	(HL),7FH
J.1CC6:	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$1CB7
	LD	A,(D.25ED)		; ESE hardware type
	RRA
	LD	BC,68H*256+60H
	JR	NC,J$1CD7
	LD	BC,70H*256+50H
J$1CD7:	LD	HL,I.4092
	LD	(X.4000+2),HL
	LD	HL,I.4092
	LD	(HL),0AFH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3CH
	INC	HL
	LD	(HL),32H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),70H
	LD	HL,I$A502
	CALL	C.0B8D
	LD	A,0C3H
	LD	(I.7FDA+1),A
	LD	HL,(D.25EA)
	LD	(I.7FDA+2),HL
	XOR	A
	RET

J$1D11:	LD	BC,I.0BFA
	LD	DE,I.7405+1
	LD	HL,D.7405
	LD	(HL),0
	LDIR				; clean up driver area
	LD	HL,I.A508
	LD	(D.25EF),HL
	LD	HL,D.A500
	CALL	C.0B8D
	LD	A,0C9H
	LD	(I.7FDA+1),A
	LD	DE,I.4010
	CALL	C.0BB0			; copy jump entry (DSKIO)
	CALL	C.0BB0			; copy jump entry (DSKCHG)
	CALL	C.0BB0			; copy jump entry (GETDPB)
	CALL	C.0BB0			; copy jump entry (CHOICE)
	CALL	C.0BB0			; copy jump entry (DSKFMT)
	CALL	C.0BB0			; copy jump entry (MTOFF)
	CALL	C.0BD2
	LD	A,(D.25ED)		; ESE hardware type
	RRA
	LD	BC,68H*256+60H
	JR	NC,J$1D53
	LD	BC,70H*256+50H
J$1D53:	PUSH	HL
	LD	HL,I.41C1
	LD	(X.4000+2),HL
	LD	HL,I.41C1
	LD	(HL),3EH	; ">"
	INC	HL
	LD	(HL),06H	; 6 
	INC	HL
	LD	(HL),32H	; "2"
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),3EH	; ">"
	INC	HL
	LD	(HL),01H	; 1 
	INC	HL
	LD	(HL),32H	; "2"
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),00H
	INC	HL
	LD	(HL),70H	; "p"
	POP	HL
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	CALL	C.0BB0			; copy jump entry
	CALL	C.0BD2
	LD	A,(HL)
	INC	HL
	LD	(DE),A
	INC	DE
	LD	A,(HL)
	LD	(DE),A
	CALL	C.0BD2
;
	LD	A,0CH	; 12 
	LD	(DE),A
	CALL	C.0BD2
;
	LD	A,00H
	LD	(DE),A
	XOR	A
	RET


; start MEGASCSI DOS2 driver ASCII+SCC controller


I$1DC6:
	.PHASE	7000H

	CALL	C$7067
X.1DC9:	JR	J$1E2A
;
;	-----------------
?.1DCB:	LD	HL,I$576F
	PUSH	HL
	LD	A,3
	JP	J.7FD0			; switch segment

?.1DD4:	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	(D.5000),A		; select bank in 4000H-5FFFH, SCC mapper
	OR	80H
	LD	(D.6000),A		; select bank in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	A,3
J$1DEA:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	BC,5
	LDIR
	DEC	A
	JR	NZ,J$1DEA
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	A,02H
	LD	(D.5000),A		; select bank 2 in 4000H-5FFFH, SCC mapper
	OR	80H
	LD	(D.6000),A		; select bank 2 in 4000H-5FFFH, ASCII mapper, write enabled
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	A,8
J$1E0D:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	BC,5
	LDIR
	DEC	A
	JR	NZ,J$1E0D
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	LD	(D.5000),A		; select bank 0 in 4000H-5FFFH, SCC mapper

	CALL	0
D$1E23	EQU	$-2
;
	CALL	C.4100
;
	JR	C,X.1DC9
;
J$1E2A:	JP	C.0000
D$1E2B	EQU	$-2

?.1E2D:	LD	A,(IDBYT2)
	OR	A			; MSX1 ?
	SCF
	RET	Z			; yep, quit
	CP	3			; MSX Turbo-R ?
	JR	C,J$1E45		; nope,
	XOR	A
	CALL	C.0141
	AND	04H
	LD	HL,I$70BF
	RET	NZ
	LD	HL,I$710C
	RET

J$1E45:	LD	A,08H
	OUT	(40H),A
	IN	A,(40H)
	XOR	0F7H
	LD	HL,I$71A6
	RET	NZ
	IN	A,(41H)
	OR	A
	RET	M
	LD	A,11
	CALL	C.0141
	AND	02H
	RET	Z
	LD	A,8FH
	LD	E,0CH
	LD	HL,D.6800
	CALL	WRSLT
	LD	A,8FH
	INC	E
	LD	H,6CH
	CALL	WRSLT
	LD	A,8FH
	LD	E,12H
	LD	H,70H
	CALL	WRSLT
	LD	A,8FH
	INC	E
	LD	H,78H
	CALL	WRSLT
	LD	HL,I$7159
	XOR	A
	RET

D$1E85:	DEFB	0,0
	LD	A,82H
	JP	C.0180

D$1E8C:	DEFB	0,0
	LD	A,82H
	JP	C.0180

D$1E93:	DEFB	0,0
	LD	A,80H
	CALL	C.0180

D$1E9A:	DEFB	0,0
	ADD	A,E
	LD	BC,I.D9CD
	POP	AF

D$1EA1:	DEFB	0,0
	ADD	A,B
	LD	BC,I.D9CD
	POP	AF

D$1EA8:	DEFB	0,0
	ADD	A,B
	LD	BC,I.D9CD
	POP	AF

D$1EAF:	DEFB	0,0
	LD	A,(HL)
	BIT	2,A
	JR	Z,J$1EB9

D$1EB6:	DEFB	0,0
	LD	(HL),0AH	; 10 
J$1EB9	EQU	$-1
	LD	DE,I.F314

D$1EBD:	DEFB	0,0
	DEC	(HL)
	DEC	HL
	DEC	(HL)
	DEC	HL
	DEC	(HL)

D$1EC4:	DEFB	0,0
	DEC	(HL)
	DEC	HL
	DEC	(HL)
	DEC	HL
	DEC	(HL)

D$1ECB:	DEFB	0,0
	PUSH	BC
	LD	C,A
	LD	A,(HL)
	OR	A
	JR	Z,J$1ED3
D$1ED2	EQU	$-1
;
J$1ED3:	NOP
	LD	A,81H
	JP	C.0180

D$1ED9:	DEFB	0,0
	LD	A,81H
	JP	C.0180

D$1EE0:	DEFB	0,0
	LD	A,80H
	CALL	C.0180
;
D$1EE7:	DEFB	0,0
	ADD	A,E
	LD	BC,I.D9CD
	POP	AF

D$1EEE:	DEFB	0,0
	ADD	A,B
	LD	BC,I.D9CD
	POP	AF

D$1EF5:	DEFB	0,0
	ADD	A,B
	LD	BC,I.D9CD
	POP	AF
D$1EFC:	DEFB	0,0
	LD	A,(HL)
	JR	J$1F08

?.1F01:	JR	Z,J$1F06
;
D$1F03:	DEFB	0,0
	LD	(HL),06H	; 6 
J$1F06	EQU	$-1
	LD	DE,I.F314
J$1F08	EQU	$-2
D$1F0A:	DEFB	0,0,0,0,0,0,0
D$1F11:	DEFB	0,0,0,0,0,0,0
D$1F18:	DEFB	0,0
	PUSH	BC
	LD	C,A
	LD	A,(HL)
	OR	A
	JR	Z,J$1F20
D$1F1F	EQU	$-1
;
J$1F20:	NOP
	LD	A,00H
	OUT	(41H),A
	RET

D$1F26:	DEFB	0,0
	LD	A,00H
	OUT	(41H),A
	RET

D$1F2D:	DEFB	0,0
	LD	A,01H	; 1 
	OUT	(41H),A
	DEFB	0

D$1F34:	DEFB	0,0
	ADD	A,E
	LD	BC,I$DB00
	LD	B,C

D$1F3B:	DEFB	0,0
	ADD	A,B
	LD	BC,I$D33C
	LD	B,C

D$1F42:	DEFB	0,0
	ADD	A,B
	LD	BC,I$D300
	LD	B,C

D$1F49:	DEFB	0,0
	LD	A,(HL)
	JR	J$1F55
;
;	-----------------
?.1F4E:	JR	Z,J$1F53
;
D$1F50:	DEFB	0,0
	LD	(HL),06H	; 6 
J$1F53	EQU	$-1
	LD	DE,I.F314
J$1F55	EQU	$-2
D$1F57:	DEFB	0,0,0,0,0,0,0
D$1F5E:	DEFB	0,0,0,0,0,0,0
D$1F65:	DEFB	0,0
	PUSH	BC
	LD	C,A
	LD	A,(HL)
	JR	J$1F82
;
;	-----------------
D$1F6C:	DEFB	0,0

	RET
?.1F6F:	RET
?.1F70:	RET
?.1F71:	RET
?.1F72:	RET

D$1F73:	DEFB	0,0

	RET
?.1F76:	RET
?.1F77:	RET
?.1F78:	RET
?.1F79:	RET

D$1F7A:	DEFB	0,0,0,0,0,0,0
D$1F81:	DEFB	0
J$1F82:	DEFB	0
	ADD	A,E
	LD	BC,C.0000
	DEFB	0

D$1F88:	DEFB	0,0
	ADD	A,B
	LD	BC,C.0000
	DEFB	0

D$1F8F:	DEFB	0,0
	ADD	A,B
	LD	BC,C.0000
	DEFB	0

D$1F96:	DEFB	0,0
	LD	A,(HL)
	JR	J$1FA2

?.1F9B:	JR	Z,J$1FA0
;
D$1F9D:	DEFB	0,0
	LD	(HL),06H	; 6 
J$1FA0	EQU	$-1
	LD	DE,I.F314
J$1FA2	EQU	$-2
D$1FA4:	DEFB	0,0,0,0,0,0,0
D$1FAB:	DEFB	0,0,0,0,0,0,0
D$1FB2:	DEFB	0,0
	PUSH	BC
	LD	C,A
	LD	A,(HL)
	JR	J$1FCF

	.PHASE

S1DC6	EQU	$-I$1DC6

; end MEGASCSI driver DOS2 driver ASCII+SCC controller


I.1FB9:	DEFB	"File not found",13,10
	DEFB	"$"

I.1FCA:	DEFB	13,10,13,10,"Format error !",13,10
	DEFB	"$"

I$1FDF:	DEFB	13,10,13,10,"No system files !",13,10
	DEFB	"$"

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C$1FF7:	LD	A,(D.25E8)
	OR	A
	LD	C,2
J$1FFD:	JR	Z,J$2001
	LD	C,8
J$2001:	LD	A,(D.25EE)		; number of banks
	SUB	C
	CP	40H
	LD	BC,1
	JR	C,J$200D
	INC	C
J$200D:	LD	L,A
	LD	H,00H
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,C
J$2015:	LD	(D.2486),A		; update number of sectors per cluster
	LD	(D$248C),HL		; number of sectors on disk
	LD	C,08H	; 8 
	SBC	HL,BC
	LD	C,L
D$2020:	LD	B,H
	LD	DE,I.0200
	LD	HL,C.0000
J$2027:	ADD	HL,DE
	PUSH	HL
J$2029:	PUSH	DE
	PUSH	BC
	LD	E,L
	LD	D,H
J$202D:	ADD	HL,HL
	ADD	HL,DE
	LD	BC,5
I$2030	EQU	$-2
	ADD	HL,BC
	SRL	H
	RR	L
	SRL	H
	RR	L
J$203B:	INC	HL
	LD	A,H
	INC	A
	LD	(D.248F),A		; update number of sectors per FAT
	ADD	A,A
	LD	C,A
	EX	DE,HL
	LD	A,(D.2486)		; number of sectors per cluster
	DEC	A
	JR	Z,J$204B
	ADD	HL,HL
J$204B:	ADD	HL,BC
	POP	BC
	SCF
	SBC	HL,BC
	POP	DE
	POP	HL
	JR	C,J$2056
J$2054:	SBC	HL,DE
J$2056:	SRL	D
	RR	E
J$205A:	JR	NC,J$2027
	LD	C,2CH
	CALL	BDOS			; get time
	LD	BC,I$24A0		; serial in boot sector
	LD	E,L
	LD	HL,(JIFFY)
	LD	A,R
	XOR	E
	AND	7FH
	LD	(BC),A
	INC	BC
	XOR	D
	AND	7FH
	LD	(BC),A
	INC	BC
	XOR	L
	AND	7FH
	LD	(BC),A
	INC	BC
	XOR	H
	AND	7FH
	LD	(BC),A
	INC	BC
	XOR	A
	RET

;	  Subroutine construct boot sector and FAT data
;	     Inputs  ________________________
;	     Outputs ________________________

C$2080:	LD	HL,I$2479
	LD	DE,D.8000
	LD	BC,00C0H
	LDIR				; copy boot sector BPB and boot loader
	LD	L,E
	LD	H,D
	LD	(HL),C
	INC	DE
	LD	BC,512-0C0H-2
	LDIR				; clear remaining space
	LD	(HL),055H
	INC	DE
	INC	HL
	LD	(HL),0AAH		; boot able marker
	INC	DE
	INC	HL
	LD	A,(D.248E)		; media descriptor
	LD	(HL),A
	INC	DE
	INC	HL
	LD	(HL),0FFH
	LDI
	INC	HL
	INC	DE
	XOR	A
	LD	(HL),A
	LD	A,(D.248F)		; number of sectors per FAT
	ADD	A,A
	DEC	A
	LD	B,A
	LD	C,0FCH
	LDIR
	INC	DE
	INC	HL
	LD	A,(D.248E)		; media descriptor
	LD	(HL),A
	INC	DE
	INC	HL
	LD	(HL),0FFH
	LDI
	INC	HL
	INC	DE
	XOR	A
	LD	(HL),A
	LD	A,(D.248F)		; number of sectors per FAT
	ADD	A,A
	DEC	A
	LD	B,A
	LD	C,0FCH
	LDIR
	LD	C,6FH
	CALL	BDOS			; get MSXDOS version number
	LD	A,B
	CP	2
	CCF
	SBC	A,A
	LD	(D.25A2),A		; update MSXDOS2 flag
	XOR	A
	RET

;	  Subroutine initialize boot sector, FAT sectors and root directory (requested or required)
;	     Inputs  ________________________
;	     Outputs ________________________

C$20DD:	LD	A,(D.25E4)
	OR	A			; initialize data ?
	RET	Z			; nope, quit
	LD	HL,D.8000
	LD	DE,0
	LD	BC,(D.248E)		; media descriptor, number of sectors per FAT
	LD	A,B
	ADD	A,A			; FAT sectors (2 FATs)
	ADD	A,1			; + boot sector
	LD	B,A			; number of sectors
	LD	A,(D.25A1)		; function = read/write sector dos partition 0
	SCF				; write sector
	CALL	C.246D			; execute MEGASCSI BIOS function
	LD	DE,I.1FCA		; format error string
	RET	C
	LD	HL,D.8000
	LD	DE,D.8000+1
	LD	BC,7*512-1
	LD	(HL),0
	LDIR
	LD	HL,D.8000
	LD	BC,(D.248E)		; media descriptor, number of sectors per FAT
	LD	A,B
	ADD	A,A			; FAT sectors (2 FATs)
	ADD	A,1			; + boot sector
	LD	E,A
	LD	D,0			; first directory sector
	LD	B,7			; 7 directory sectors
	LD	A,(D.25A1)		; function = read/write sector dos partition 0
	SCF				; write sector
	CALL	C.246D			; execute MEGASCSI BIOS function
	LD	DE,I.1FCA		; format error string
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$2124:	LD	HL,2
	LD	(D.25D0),HL
	LD	A,(D.2486)		; number of sectors per cluster
	LD	(D.25DE),A
	SRL	A
	LD	(D.25DF),A
	LD	HL,(D$2487)		; first FAT sector
	LD	DE,(D.248F)		; number of sectors per FAT
	LD	D,0
	LD	(D.25D6),HL
	ADD	HL,DE
	LD	(D.25D8),HL
	ADD	HL,DE
	LD	(D.25DA),HL
	EX	DE,HL
	LD	HL,(D$248A)		; number of root directory entries
	DEC	HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	L,H
	LD	H,00H
	INC	HL
	ADD	HL,DE
	LD	(D.25DC),HL
	XOR	A
	RET

;	  Subroutine copy system files (requested or required)
;	     Inputs  ________________________
;	     Outputs ________________________

C$215C:	LD	A,(D.25E4)
	OR	A			; initialize data ?
	RET	Z			; nope, quit
	CALL	C$2124
	RET	C
	LD	DE,I.2565
	LD	HL,I.2539		; MSXDOS.SYS
	CALL	C.21DE			; search for file
	RL	C
	PUSH	BC
	LD	DE,I.2582
	LD	HL,I.254F		; COMMAND.COM
	CALL	C.21DE			; search for file
	POP	BC
	RL	C
	PUSH	BC
	LD	DE,I.2573
	LD	HL,I.2544		; MSXDOS2.SYS
	CALL	C.21DE			; search for file
	POP	BC
	RL	C
	PUSH	BC
	LD	DE,I.2591
	LD	HL,I.255A		; COMMAND2.COM
	CALL	C.21DE			; search for file
	POP	BC
	RL	C
	LD	A,C
	AND	0CH			; MSXDOS 1 system files found ?
	JR	Z,J.21A6		; yep,
	LD	A,C
	AND	03H			; MSXDOS 2 system files found ?
	JR	Z,J.21A6		; yep,
	LD	DE,I$1FDF		; no system file string
	SCF
	RET

J.21A6:	PUSH	BC
	LD	A,C
	AND	0CH			; MSXDOS 1 sytem files found ?
	CALL	Z,C$21B6		; yep, copy MSXDOS 1 system files
	POP	BC
	RET	C
	LD	A,C
	AND	03H			; MSXDOS 2 system files found ?
	CALL	Z,C$21CA		; yep, copy MSXDOS 2 system files
	RET

;	  Subroutine copy MSXDOS 1 system files
;	     Inputs  ________________________
;	     Outputs ________________________

C$21B6:	LD	DE,I.2565
	LD	HL,I.2539		; MSXDOS.SYS
	CALL	C.2224			; copy system file
	RET	C
	LD	DE,I.2582
	LD	HL,I.254F		; COMMAND.COM
	CALL	C.2224			; copy system file
	RET

;	  Subroutine copy MSXDOS 2 system files
;	     Inputs  ________________________
;	     Outputs ________________________

C$21CA:	LD	DE,I.2573
	LD	HL,I.2544		; MSXDOS2.SYS
	CALL	C.2224			; copy system file
	RET	C
	LD	DE,I.2591
	LD	HL,I.255A		; COMMAND2.COM
	CALL	C.2224			; copy system file
	RET

;	  Subroutine search for file
;	     Inputs  ________________________
;	     Outputs ________________________

C.21DE:	LD	A,(D.F2FD)		; bootdrive
	LD	(D.25A3),A
	ADD	A,40H
	LD	(DE),A
	LD	A,(D.25A2)
	OR	A			; running MSXDOS2 ?
	JR	NZ,J$2212		; yep, use MSXDOS2 functions
	LD	DE,I.25A4
	LD	BC,11
	LDIR
	LD	HL,I.25AF
	LD	DE,I.25B0
	LD	BC,24
	LDIR
	LD	DE,D.8000
	LD	C,1AH
	CALL	BDOS			; set DMA address
	LD	C,11H
	LD	DE,D.25A3
	CALL	BDOS			; search for first FCB
	JR	J$221D

J$2212:	LD	IX,D.8000
	LD	B,06H
	LD	C,40H
	CALL	BDOS			; find first entry
J$221D:	LD	DE,I.1FB9		; file not found string
	OR	A
	RET	Z
	SCF
	RET

;	  Subroutine copy system file
;	     Inputs  ________________________
;	     Outputs ________________________

C.2224:	LD	A,(D.F2FD))		; bootdrive
	LD	(D.25A3),A
	ADD	A,40H
	LD	(DE),A
	LD	A,(D.25A2)
	OR	A			; running MSXDOS2 ?
	JP	NZ,J$22B5		; yep, use MSXDOS2 functions
	LD	DE,I.25A4
	LD	BC,11
	LDIR
	LD	HL,I.25AF
	LD	DE,I.25B0
	LD	BC,24
	LDIR
	LD	DE,D.8000
	LD	C,1AH
	CALL	BDOS			; set DMA address
	LD	DE,D.25A3
	LD	C,0FH
	CALL	BDOS			; open FCB
	LD	DE,I.1FB9		; file not found string
	OR	A
	SCF
	RET	NZ
	LD	HL,1
	LD	(D$25B1),HL
	CALL	C.234F
	LD	(D.25D4),HL
	LD	E,L
	LD	D,H
	CALL	C.23C3
	XOR	A
	LD	L,A
	LD	H,A
	LD	(D.25CB),HL
	LD	(D.25CD),A
J$2277:	LD	HL,512
	LD	DE,D.25A3
	LD	C,27H
	CALL	BDOS			; read blocks from FCB
	LD	A,H
	OR	L
	JR	Z,J$2296
	LD	HL,D.8000
	LD	DE,I.8200
	LD	BC,512
	LDIR
	CALL	C.2391
	JR	J$2277

J$2296:	CALL	C.23E1
	LD	DE,D.25A3
	LD	C,11H
	CALL	BDOS			; search for first FCB
	LD	HL,32
	LD	(D$800C),HL
	LD	HL,(D.25D4)
	LD	(D.801B),HL
	LD	HL,D.8000+1
	CALL	C.2354
	XOR	A
	RET

J$22B5:	LD	(D.25C8),DE
	LD	DE,I.25A4
	LD	BC,11
	LDIR
	LD	DE,(D.25C8)
	LD	A,01H	; 1 
	LD	C,43H
	CALL	BDOS			; open file handle
	LD	DE,I.1FB9		; file not found string
	OR	A
	SCF
	RET	NZ
	LD	A,B
	LD	(D$25CA),A
	CALL	C.234F
	LD	(D.25D4),HL
	LD	E,L
	LD	D,H
	CALL	C.23C3
	XOR	A
	LD	L,A
	LD	H,A
	LD	(D.25CB),HL
	LD	(D.25CD),A
J$22EA:	LD	HL,512
	LD	DE,D.8000
	LD	BC,(D.25C9)
	LD	C,48H
	CALL	BDOS			; read from file handle
	LD	A,H
	OR	L
	JR	Z,J$230D
	LD	HL,D.8000
	LD	DE,I.8200
	LD	BC,512
	LDIR
	CALL	C.2391
	JR	J$22EA

J$230D:	CALL	C.23E1
	LD	BC,(D.25C9)
	LD	C,45H
	CALL	BDOS			; close file handle
	LD	IX,I$8008
	LD	DE,(D.25C8)
	LD	B,06H
	LD	C,40H
	CALL	BDOS			; find first entry
	LD	HL,D.25A3
	LD	DE,D.8000
	LD	BC,C.000C
	LDIR
	LD	A,20H	; " "
	LD	(DE),A
	INC	DE
	LD	L,E
	LD	H,D
	INC	DE
	LD	BC,10-1
	LD	(HL),0
	LDIR
	LD	HL,(D.25D4)
	LD	(D.801B),HL
	LD	HL,D.8000+1
	CALL	C.2354
	XOR	A
	RET
;
;	-----------------
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.234F:	LD	HL,(D.25D0)
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.2354:	PUSH	HL
	LD	DE,(D.25DA)
	CALL	C.2451			; read sector dos partition 0
	LD	B,10H	; 16 
	LD	DE,32
	LD	HL,I.8200
J$2364:	LD	A,(HL)
	OR	A
	JR	Z,J$236B
	ADD	HL,DE
	DJNZ	J$2364
J$236B:	EX	DE,HL
	POP	HL
	LD	BC,32
	LDIR
	LD	DE,(D.25DA)
	CALL	C.245F			; write sector dos partition 0
	RET

?.237A:	LD	HL,I.8200
	LD	DE,(D.25CB)
	ADD	HL,DE
	LD	(HL),A
	INC	DE
	LD	(D.25CB),DE
	BIT	1,D
	JR	Z,J$238F
	CALL	C.2391
J$238F:	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.2391:	LD	HL,(D.25CE)
	INC	HL
	LD	(D.25CE),HL
	DEC	HL
	EX	DE,HL
	CALL	C.245F			; write sector dos partition 0
	LD	A,(D.25CD)
	INC	A
	LD	HL,(D.25DE)
	CP	L
	JR	C,J$23AB
	CALL	C.23B6
	XOR	A
J$23AB:	LD	(D.25CD),A
	LD	HL,C.0000
	LD	(D.25CB),HL
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.23B6:	LD	HL,(D.25D0)
	LD	E,L
	LD	D,H
	INC	DE
	PUSH	DE
	PUSH	HL
	CALL	C.2408
;
	POP	HL
	POP	DE
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.23C3:	LD	(D.25D0),DE
	LD	(D.25D2),HL
	LD	A,(D.25DF)
	EX	DE,HL
	DEC	HL
	DEC	HL
	INC	A
J$23D1:	DEC	A
	JR	Z,J$23D7
;
	ADD	HL,HL
	JR	J$23D1
;
;	-----------------
J$23D7:	LD	DE,(D.25DC)
	ADD	HL,DE
	LD	(D.25CE),HL
	XOR	A
	RET
;
;	-----------------
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.23E1:	LD	A,(D.25CD)
	LD	HL,(D.25CB)
	OR	L
	OR	H
	JR	Z,J$23FE
;
	LD	DE,(D.25CE)
	CALL	C.245F			; write sector dos partition 0
;
	XOR	A
	LD	L,A
	LD	H,A
	LD	(D.25CD),A
	LD	(D.25CB),HL
	CALL	C.23B6
;
J$23FE:	LD	HL,(D.25D2)
	LD	DE,I$0FFF
	CALL	C.2408
;
	RET
;
;	-----------------
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.2408:	PUSH	DE
	PUSH	HL
	LD	DE,(D.25D6)
	CALL	C.2451			; read sector dos partition 0
	POP	HL
	POP	DE
	LD	C,L
	LD	B,H
	SRL	B
	RR	C
	SBC	A,A
	ADD	HL,BC
	LD	BC,I.8200
	ADD	HL,BC
	OR	A
D$2420:	JR	NZ,J$242B
;
	LD	(HL),E
	INC	HL
	LD	A,(HL)
	AND	0F0H
	OR	D
	LD	(HL),A
	JR	J$2442
;
;	-----------------
J$242B:	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	SLA	E
	RL	D
	LD	A,(HL)
	AND	0FH	; 15 
	OR	E
	LD	(HL),A
	INC	HL
	LD	(HL),D
J$2442:	LD	DE,(D.25D6)
	CALL	C.245F			; write sector dos partition 0
	LD	DE,(D.25D8)
	CALL	C.245F			; write sector dos partition 0
	RET

;	  Subroutine read sector dos partition 0
;	     Inputs  DE = sector
;	     Outputs ________________________

C.2451:	LD	HL,I.8200
	LD	BC,256
	LD	A,(D.25A1)		; function = read/write sector dos partition 0
	OR	A			; read sector
	CALL	C.246D			; execute MEGASCSI BIOS function
	RET

;	  Subroutine write sector dos partition 0
;	     Inputs  DE = sector
;	     Outputs ________________________

C.245F:	LD	HL,I.8200
	LD	BC,256
	LD	A,(D.25A1)		; function = read/write sector dos partition 0
	SCF				; write sector
	CALL	C.246D			; execute MEGASCSI BIOS function
	RET

;	  Subroutine execute MEGASCSI BIOS function
;	     Inputs  ________________________
;	     Outputs ________________________

C.246D:	LD	IX,I.7FCC		; MEGASCSI BIOS entry
	LD	IY,(D.25EB)
	CALL	CALSLT
	RET

I$2479:
        .PHASE	0C000H

        DEFB	0EBH,0FEH		; 00H, x86 JMP +0100H
        DEFB	090H			; 02H, x86 NOP
        DEFB	"MEGASCSI"		; 03H, OEM system name

					;      BPB (BIOS Parameter Block)
I$2484: DEFW	512			; 0BH, bytes per sector
D.2486: DEFB	0			; 0DH, sectors per cluster
D$2487: DEFW	1			; 0EH, reserved sectors (= 1st FAT sector)
        DEFB	2			; 10H, number of FATs
D$248A: DEFW	112			; 11H, number of (root) directory entries
D$248C: DEFW	0			; 13H, total number of sectors on disk
D.248E: DEFB	0FFH			; 15H, media descriptor byte
D.248F: DEFW	0			; 16H, sectors per FAT
        DEFW	0			; 18H, sectors per track
        DEFW	0			; 1AH, number of sides
        DEFW	0			; 1CH, number of hidden sectors

	JR	J$24AF

?.2499:	DEFB	"VOL_ID"
	DEFB	0

I$24A0:	DEFB	0,0,0,0

	DEFB	"NO NAME    "

J$24AF:	RET	NC
	LD	(D$C070),DE
	LD	(D$C07A),A
	LD	(HL),LOW I.C06DH
	INC	HL
	LD	(HL),HIGH I.C06DH
J$24BC:	LD	SP,KBUF+256
	LD	DE,I.C0B4
	LD	C,0FH
	CALL	C.F37D
	OR	A
	JR	NZ,J$24F2
	LD	DE,J.0100
J$24CD:	LD	C,1AH
J$24CF:	CALL	C.F37D
	LD	HL,1
	LD	(D$C0C2),HL
	LD	HL,3F00H
	LD	DE,I.C0B4
	LD	C,27H	; "'"
	CALL	C.F37D
	JP	J.0100

?.24E6:	DEFW	I.C06F

	CALL	0
	LD	A,C
	AND	0FEH
	CP	02H
	JR	NZ,J$24F8
J$24F2:	LD	A,00H
	OR	A
	JP	Z,BASENT
J$24F8:	LD	DE,I$C08E
	LD	C,09H
	CALL	C.F37D
	LD	C,07H
	CALL	C.F37D
	JR	J$24BC

?.2507:	DEFB	"Boot error",13,10
	DEFB	"Press any key for retry"
	DEFB	"$"

	DEFB	0
	DEFB	"MSXDOS  SYS"

	.DEPHASE

I.2539:	DEFB	"MSXDOS  SYS"

I.2544:	DEFB	"MSXDOS2 SYS"

I.254F:	DEFB	"COMMAND COM"

I.255A:	DEFB	"COMMAND2COM"

I.2565:	DEFB	"A:\MSXDOS.SYS",0

I.2573:	DEFB	"A:\MSXDOS2.SYS",0

I.2582:	DEFB	"A:\COMMAND.COM",0

I.2591:	DEFB	"A:\COMMAND2.COM",0

D.25A1:	DEFB	0
D.25A2:	DEFB	0
D.25A3:	DEFB	0
I.25A4:	DEFB	0,0,0,0,0,0,0,0,0,0,0
I.25AF:	DEFB	0
I.25B0:	DEFB	0
D$25B1:	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0
D.25C8:	DEFB	0
D.25C9:	DEFB	0
D$25CA:	DEFB	0
D.25CB:	DEFB	0,0
D.25CD:	DEFB	0
D.25CE:	DEFB	0,0
D.25D0:	DEFB	0,0
D.25D2:	DEFB	0,0
D.25D4:	DEFB	0,0
D.25D6:	DEFW	0
D.25D8:	DEFB	0,0
D.25DA:	DEFB	0,0
D.25DC:	DEFB	0,0
D.25DE:	DEFB	0
D.25DF:	DEFB	0
D.25E0:	DEFB	0
D.25E1:	DEFB	0
D.25E2:	DEFB	0
D.25E3:	DEFB	0
D.25E4:	DEFB	0
D.25E5:	DEFB	0
D.25E6:	DEFB	0
D.25E7:	DEFB	0
D.25E8:	DEFB	0
D.25E9:	DEFB	0
D.25EA:	DEFB	0
D.25EB:	DEFB	0
D.25EC:	DEFB	0
D.25ED:	DEFB	0
D.25EE:	DEFB	0
D.25EF:	DEFW	0
I.25F1:	RET
	RET
	RET
	RET
	RET
;
;	-----------------
D.25F6:	DEFW	0
D.25F8:	DEFW	0

;	  Subroutine initialize DOS1 driver for ASCII mapper
;	     Inputs  ________________________
;	     Outputs ________________________

I$25FA:	PUSH	AF
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	(D$2E91),DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	(D$2F30),DE
	LD	A,B
	LD	(D$3264),A		; number of banks
	LD	A,C
	AND	03H	; 3 
	LD	(D$3012),A
	LD	A,C
	CP	30H	; "0"
	JR	NC,J$2626
	LD	HL,C.0000
	LD	(D$2E9A),HL
	LD	(D$2E9B),HL
	LD	(D$2CA9),HL
J$2626:	PUSH	BC
	CP	10H	; 16 
	LD	A,B
	LD	B,2
	JR	C,J$2630
	LD	B,8
J$2630:	SUB	B
	LD	(D$3267),A		; number of data banks
	LD	A,B
	LD	(D$3265),A		; number of system banks
	LD	(D$3266),A		; first data bank
	LD	BC,48
	LD	DE,J.7FD0		; switch segment
	LD	HL,I$329C
	LDIR
	LD	HL,I.7FCC		; MEGASCSI BIOS entry
	LD	(HL),0FBH		; EI
	INC	HL
	LD	(HL),37H		; SCF
	INC	HL
	LD	(HL),9FH		; SBC	A,A
	INC	HL
	LD	(HL),0C9H		; RET
	POP	BC
	POP	AF
	ADD	A,A
	LD	B,A
	JR	Z,J$2663
	CP	06H	; 6 
	JR	NZ,J.268F
	LD	A,C
	CP	30H	; "0"
	JR	C,J.268F
J$2663:	LD	HL,I$26C3
J$2666:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	BIT	6,D
	JR	Z,J$2679
	PUSH	HL
	LD	HL,I$B2CC
	ADD	HL,DE
	LD	A,(HL)
	XOR	B
	LD	(HL),A
	POP	HL
	JR	J$2666
;
;	-----------------
J$2679:	LD	BC,I.01D0
	LD	DE,I.7E00
	LD	HL,I$30CC
	LDIR
	LD	BC,S26D1
	LD	DE,D.7405
	LD	HL,I$26D1
	LDIR
J.268F:	LD	HL,I$2693
	RET

I$2693:	JP	J$785B
?.2696:	JP	J$79E5
?.2699:	JP	C.7A92
?.269C:	JP	J$7B3C
?.269F:	JP	J$7B52
?.26A2:	JP	J$7B46

?.26A5:	CALL	C$7B56
	CALL	C$7BC1
	CALL	C$7C04
	SCF
	RET
?.26B0:	RET

?.26B1:	LD	HL,I.7404
	LD	A,(D.7405)
	LD	HL,I.0004
	LD	HL,I.F384
	SCF
	LD	A,H
	DEFB	0,0,0,0
I$26C3:	RET	Z
;
	LD	A,E
	CALL	C$B47B
;
	LD	A,C
	RET	NZ
;
	LD	A,C
	ADD	A,B
	LD	(HL),L
	RET	NC
;
	LD	A,C
	DEFB	0,0

; start MEGASCSI DOS1 driver ASCII controller

I$26D1:
	.PHASE	7405H

	LD	SP,HL
	NOP
	LD	(BC),A
	RRCA
	INC	B
	LD	BC,I.0102
	NOP
	LD	(BC),A
	LD	(HL),B
	LD	C,00H
	JP	Z,J.0302
;
	RLCA
	NOP
	JR	J$26E6
;
;	-----------------
?.26E5:	LD	(HL),H
J$26E6:	EXX
	LD	L,A
	EX	AF,AF'
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	BIT	2,H
	LD	H,7FH
	JR	Z,J$26F4
;
	DEC	H
J$26F4:	LD	A,(HL)
	PUSH	HL
	POP	IX
	EXX
	SUB	0FFH
	RET	NC
;
	DEC	A
	RET
;
;	-----------------
?.26FE:	EXX
	LD	C,A
	EX	AF,AF'
	DI
	LD	A,02H	; 2 
	OUT	(99H),A
	LD	A,8FH
	OUT	(99H),A
J$270A:	IN	A,(99H)
	AND	81H
	DEC	A
	JR	Z,J$270A
;
	XOR	A
	OUT	(99H),A
	LD	A,8FH
	OUT	(99H),A
	LD	A,C
	ADD	A,8CH
	LD	C,A
J$271C:	LD	HL,(D.7FAA)
	CALL	C.74DD
;
	JR	Z,J$272D
;
	EX	AF,AF'
	LD	B,7FH
	LD	A,(BC)
	SET	6,A
	EXX
	EI
	RET
;
;	-----------------
J$272D:	IN	A,(0AAH)
	LD	L,A
J$2730:	CALL	C.7473
;
	JR	Z,J$2730
;
J$2735:	CALL	C.7473
;
	JR	NZ,J$2735
;
	LD	A,L
	OUT	(0AAH),A
	JR	J$271C
;
;	-----------------
?.273F:	PUSH	HL
	LD	H,10H	; 16 
	LD	DE,I.7FB0
J$2745:	DJNZ	J$2745
;
J$2747:	PUSH	HL
	LD	A,(DE)
	LD	L,A
	CALL	C.74FE
;
	JR	NZ,J$2765
;
	CALL	C.757E
;
	LD	A,50H	; "P"
	SUB	H
	LD	B,5FH	; "_"
	LD	(BC),A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	L,A
	LD	H,5EH	; "^"
	INC	HL
	RES	7,(HL)
	CALL	C.79CB
;
J$2765:	POP	HL
	INC	DE
	DEC	H
	JR	NZ,J$2747
;
	LD	L,74H	; "t"
	CALL	C.74B3
;
	LD	L,75H	; "u"
	CALL	C.74B3
;
	POP	HL
	INC	H
	LD	A,H
	AND	40H	; "@"
	XOR	L
	OUT	(0AAH),A
	BIT	6,B
	RET
;
;	-----------------
?.277F:	CALL	C.74FE
;
	RET	NZ
;
	EX	AF,AF'
	PUSH	AF
	PUSH	BC
	LD	A,L
	CPL
	AND	81H
	EXX
	RST	30H
;
	ADD	A,B
	ADD	A,B
	LD	BC,I$D9F3
	POP	BC
	POP	AF
	EX	AF,AF'
	LD	B,5FH	; "_"
	RET
;
;	-----------------
?.2797:	PUSH	HL
	LD	HL,I$7CDE
	JR	C,J$27A1
;
	LD	(HL),01H	; 1 
	POP	HL
	RET
;
;	-----------------
J$27A1:	SRA	(HL)
	POP	HL
	CCF
	RET	NC
;
	LD	A,06H	; 6 
	RET
;
;	-----------------
?.27A9:	CALL	C.74E2
;
	RET	NZ
;
	LD	L,H
	PUSH	HL
	LD	A,L
	AND	0FH	; 15 
	LD	H,A
	IN	A,(0AAH)
	AND	0F0H
	OR	H
	OUT	(0AAH),A
	IN	A,(0A9H)
	LD	H,A
	LD	A,L
	RLCA
J$27BF:	RLC	H
	ADD	A,20H	; " "
	JR	NC,J$27BF
;
	XOR	H
	RRA
	SBC	A,A
	POP	HL
	RET
;
;	-----------------
?.27CA:	CALL	C.74E2
;
	RET	NZ
;
J$27CE:	CALL	C.74E2
;
	JR	Z,J$27CE
;
	XOR	A
	RET
;
;	-----------------
?.27D5:	LD	A,(IX)
	LD	(IY+4),0FFH
	LD	(IY+8),00H
	OR	(IY)
	LD	(IY+11),A
	LD	(IY+12),0FH	; 15 
	LD	(IY+13),43H	; "C"
	LD	(IY+14),04H	; 4 
	LD	(IY+2),20H	; " "
J$27F6:	LD	A,(IY+4)
	AND	14H	; 20 
	JR	Z,J$27F6
;
	LD	(IY+4),0FFH
	CP	10H	; 16 
	JR	NZ,J$280F
;
J$2805:	LD	A,(IY+5)
	RLA
	JR	NC,J$2805
;
	RRA
	AND	07H	; 7 
	RET
;
;	-----------------
J$280F:	XOR	A
	LD	(IY+2),A
	LD	(IY+11),A
	LD	A,02H	; 2 
	SCF
	RET
;
;	-----------------
?.281A:	XOR	A
J$281B:	BIT	3,(IY+5)
	JR	NZ,J$281B
;
	BIT	5,(IY+4)
	LD	(IY+4),0FFH
	RET	NZ
;
	LD	(IY+11),A
	LD	(IY+2),A
	LD	A,0CH	; 12 
	SCF
	RET
;
;	-----------------
?.2834:	SCF
	CALL	C.74CB
;
	RET	C
;
	PUSH	AF
	LD	A,7FH
	LD	(D.6000),A
	POP	AF
	LD	IY,I.5FF0
	RET
;
;	-----------------
?.2845:	SCF
	CALL	C.74CB
;
	RET	C
;
	PUSH	AF
	LD	A,81H
	LD	(D.6000),A
	POP	AF
	RET
;
;	-----------------
?.2852:	LD	A,B
	EXX
	LD	E,A
	LD	B,(IX+8)
	LD	C,(IX+9)
	LD	A,B
	SUB	02H	; 2 
	OR	C
	LD	D,A
	EXX
	RET	Z
;
	EXX
	LD	A,B
	OR	C
	EXX
	LD	A,02H	; 2 
	SCF
	RET	Z
;
	EXX
	LD	D,00H
	LD	A,B
	DEC	A
	OR	C
	EXX
	LD	A,0AH	; 10 
	SCF
	RET	NZ
;
	SLA	E
	RL	D
	RL	C
	EXX
	SLA	E
	XOR	A
	EXX
	RET
;
;	-----------------
?.2881:	LD	A,C
	PUSH	DE
	EXX
	POP	HL
	ADD	HL,DE
	ADC	A,D
	LD	D,A
	LD	A,(IX+7)
	SUB	L
	LD	A,(IX+6)
	SBC	A,H
	LD	A,(IX+5)
	SBC	A,D
	EXX
	LD	A,0CH	; 12 
	RET	C
;
	LD	A,E
	ADD	A,(IX+4)
	LD	E,A
	LD	A,D
	ADC	A,(IX+3)
	LD	D,A
	LD	A,C
	ADC	A,(IX+2)
	LD	C,A
	XOR	A
	RET
;
;	-----------------
?.28A9:	XOR	A
	LD	(IY+4),0FFH
	LD	(IY+1),A
	LD	(IY+2),10H	; 16 
J$28B5:	EX	(SP),HL
	EX	(SP),HL
	DEC	A
	JR	NZ,J$28B5
;
	LD	(IY+2),A
	LD	(IY+1),0D8H
	LD	A,(D.7F90)
	LD	(IY),A
	XOR	A
	LD	(IY+2),A
	LD	(IY+3),A
	LD	(IY+8),A
	LD	(IY+11),A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),A
	LD	(IY+5),A
	LD	(IY+1),18H
	RET
;
;	-----------------
J$28E5:	BIT	7,D
	JR	NZ,J.2918
;
	EX	AF,AF'
	DEC	DE
	LD	A,D
	INC	DE
	CP	3EH	; ">"
	PUSH	BC
	LD	B,01H	; 1 
	JR	NC,J$28FC
;
	EX	AF,AF'
	CALL	C.764C
;
J$28F8:	POP	BC
	DJNZ	J$28E5
;
	RET
;
;	-----------------
J$28FC:	EX	AF,AF'
	PUSH	DE
	LD	DE,($SECBUF)
	CALL	C.764C
	POP	DE
	PUSH	HL
	LD	B,02H	; 2 
	LD	HL,($SECBUF)
	CALL	C.79BE
	CALL	XFER
	LD	(D.6000),A
	POP	HL
	JR	J$28F8
;
;	-----------------
J.2918:	EX	AF,AF'
	LD	A,B
	LD	B,02H	; 2 
	CALL	C.7DC0
;
	LD	B,A
	EX	AF,AF'
	BIT	5,H
	JR	Z,J$292B
;
	LD	H,40H	; "@"
	INC	A
	LD	(D.6000),A
J$292B:	DJNZ	J.2918
;
	RET
;
;	-----------------
J$292E:	BIT	7,H
	JR	NZ,J.2962
;
	EX	AF,AF'
	DEC	HL
	LD	A,H
	INC	HL
	CP	3EH	; ">"
	PUSH	BC
	JR	NC,J$2945
;
	EX	AF,AF'
	LD	B,01H	; 1 
	CALL	C.7696
;
J$2941:	POP	BC
	DJNZ	J$292E
;
	RET
;
;	-----------------
J$2945:	EX	AF,AF'
	PUSH	DE
	LD	B,02H	; 2 
	LD	DE,($SECBUF)
	CALL	C.79BE
;
	CALL	XFER
;
	LD	(D.6000),A
	POP	DE
	PUSH	HL
	INC	B
	LD	HL,($SECBUF)
	CALL	C.7696
;
	POP	HL
	JR	J$2941
;
;	-----------------
J.2962:	EX	AF,AF'
	LD	A,B
	LD	B,02H	; 2 
	CALL	C.7DC0
;
	LD	B,A
	EX	AF,AF'
	BIT	5,D
	JR	Z,J$2975
;
	LD	D,40H	; "@"
	INC	A
	LD	(D.6000),A
J$2975:	DJNZ	J.2962
;
	RET
;
;	-----------------
?.2978:	OR	A
J$2979:	LD	E,(HL)
	CALL	C.76BA
;
	RET	NC
;
	LD	(HL),E
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$2979
;
	RET
;
;	-----------------
J$2986:	LD	A,(IY+5)
	BIT	3,A
	RET	Z
;
	RLA
	JR	NC,J$2986
;
	RRA
	AND	07H	; 7 
	XOR	D
	RET	NZ
;
	LD	(IY+8),D
	BIT	0,D
	JR	NZ,J$29A4
;
	LD	(IY+11),E
	LD	(IY+2),0E0H
	JR	J.29AB
;
;	-----------------
J$29A4:	LD	(IY+2),0E0H
	LD	E,(IY+11)
J.29AB:	BIT	7,(IY+5)
	JR	NZ,J.29AB
;
	LD	(IY+2),0C0H
	SCF
	RET
;
;	-----------------
J$29B7:	LD	A,(IY+5)
	RLA
	JR	NC,J$29B7
;
	RRA
	AND	07H	; 7 
	CP	D
	RET	NZ
;
	LD	(IY+4),0FFH
	LD	A,B
	SUB	02H	; 2 
	OR	C
	JR	Z,J$29E1
;
	PUSH	HL
	LD	A,E
	LD	HL,C.0000
J$29D1:	ADD	HL,BC
	DEC	A
	JR	NZ,J$29D1
;
	LD	(IY+12),A
	LD	(IY+13),H
	LD	(IY+14),L
	POP	HL
	JR	J$29EC
;
;	-----------------
J$29E1:	LD	(IY+12),A
	LD	(IY+14),A
	LD	A,E
	ADD	A,A
	LD	(IY+13),A
J$29EC:	LD	(IY+8),D
	LD	(IY+2),80H
	BIT	0,D
	LD	D,40H	; "@"
	JR	Z,J$2A0F
;
	EX	DE,HL
	CALL	C$7748
;
	EX	DE,HL
J$29FE:	RET	C
;
J$29FF:	BIT	4,(IY+4)
	JR	Z,J$29FF
;
J$2A05:	LD	A,(IY+5)
	RLA
	JR	NC,J$2A05
;
	RRA
	AND	07H	; 7 
	RET
;
;	-----------------
J$2A0F:	CALL	C$77B7
;
	JR	J$29FE
;
;	-----------------
J$2A14:	BIT	7,D
	JR	NZ,J.2A64
	PUSH	HL
	LD	L,E
	LD	H,D
	ADD	HL,BC
	DEC	HL
	LD	A,H
	CP	40H	; "@"
	JR	NC,J$2A2E
	LD	HL,X.4000+1
	CALL	C.7798
J$2A28:	POP	HL
	DEC	L
	RET	C
	JR	NZ,J$2A14
;
	RET
;
;	-----------------
J$2A2E:	CALL	C.7767
;
	JR	J$2A28
;
;	-----------------
?.2A33:	DEC	BC
	LD	A,B
	INC	BC
	CP	02H	; 2 
	JR	C,J$2A4A
;
	DEC	B
	DEC	B
	CALL	C.7767
;
	PUSH	BC
	LD	BC,I.0200
	CALL	NC,C$777E
;
	POP	BC
	INC	B
	INC	B
	RET
;
;	-----------------
J$2A4A:	PUSH	DE
	LD	DE,($SECBUF)
	LD	HL,X.4000+1
	CALL	C.7798
	POP	DE
	CALL	C.79BE
	PUSH	BC
	LD	HL,($SECBUF)
	CALL	XFER
	POP	BC
	JP	C.756D
;
;	-----------------
J.2A64:	BIT	0,(IY+6)
	JR	Z,J$2A75
;
	LD	A,(IY+4)
	AND	18H
	JR	Z,J.2A64
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$2A75:	LD	A,L
	PUSH	BC
	CALL	C.7DC0
;
	POP	BC
	DEC	A
	LD	L,A
	LD	H,40H	; "@"
	JR	NZ,J.2A64
;
	XOR	A
	RET
;
;	-----------------
J$2A83:	BIT	7,H
	JR	NZ,J.2AE5
;
	PUSH	HL
	ADD	HL,BC
	DEC	HL
	LD	A,H
	CP	40H	; "@"
	POP	HL
	PUSH	DE
	JR	NC,J$2A9C
;
	LD	E,01H	; 1 
	CALL	C.7819
;
J$2A96:	POP	DE
	DEC	E
	RET	C
;
	JR	NZ,J$2A83
;
	RET
;
;	-----------------
J$2A9C:	CALL	C.77D5
;
	JR	J$2A96
;
;	-----------------
?.2AA1:	DEC	BC
	LD	A,B
	INC	BC
	CP	02H	; 2 
	JR	C,J$2AB8
;
	DEC	B
	DEC	B
	CALL	C.77D5
;
	PUSH	BC
	LD	BC,I.0200
	CALL	NC,C$77EC
;
	POP	BC
	INC	B
	INC	B
	RET
;
;	-----------------
J$2AB8:	CALL	C.79BE
;
	PUSH	BC
	LD	DE,($SECBUF)
	CALL	XFER
;
	POP	BC
	CALL	C.756D
;
	PUSH	HL
	LD	HL,-9
	ADD	HL,BC
	LD	DE,X.4000+1
	LD	HL,($SECBUF)
	JR	NC,J.2AD9
	CALL	C.7819
	POP	HL
	RET
;
;	-----------------
J.2AD9:	BIT	1,(IY+6)
	JR	NZ,J.2AD9
;
	LD	A,C
	LDIR
	LD	C,A
	POP	HL
	RET
;
;	-----------------
J.2AE5:	BIT	1,(IY+6)
	JR	Z,J$2AF6
;
	LD	A,(IY+4)
	AND	18H
	JR	Z,J.2AE5
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$2AF6:	LD	A,E
	PUSH	BC
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
J$2B08:	BIT	1,(IY+6)
	JR	Z,J$2B1B
;
	LD	E,A
	LD	A,(IY+4)
	AND	18H
	LD	A,E
	JR	Z,J$2B08
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$2B1B:	CALL	C.7DC0
;
	POP	BC
	DEC	A
	LD	E,A
	LD	D,40H	; "@"
	JR	NZ,J.2AE5
;
	XOR	A
	RET
;
;	-----------------
?.2B27:	EI
	CALL	C.7417
;
	JR	NZ,J$2B83
;
	JR	NC,J$2B52
;
	EX	AF,AF'
	LD	IX,I.4010
	EX	AF,AF'
	PUSH	AF
	LD	A,(D.7F88)
	DEC	A
	CP	8FH
	JR	C,J$2B44
;
	POP	AF
	EX	AF,AF'
	LD	A,02H	; 2 
	SCF
	RET
;
;	-----------------
J$2B44:	EX	AF,AF'
	LD	A,00H
	LD	IY,(D.7F87)
	CALL	CALSLT
	EX	AF,AF'
	POP	AF
	EX	AF,AF'
	RET
;
;	-----------------
J$2B52:	SCF
	CALL	C.74CB
;
	RET	C
;
	PUSH	HL
	EX	DE,HL
	ADD	HL,HL
	LD	A,L
	OR	40H	; "@"
	AND	5FH	; "_"
	LD	E,00H
	LD	D,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,(D.7F9A)
	OR	80H
	ADD	A,H
	LD	C,E
	LD	(D.6000),A
	POP	HL
	EX	AF,AF'
	JR	NC,J$2B79
;
	EX	AF,AF'
	CALL	C$7662
;
	JR	J$2B7F
;
;	-----------------
J$2B79:	EX	AF,AF'
	EX	DE,HL
	CALL	C.7619
;
	EX	DE,HL
J$2B7F:	XOR	A
	JP	C.79B2
;
;	-----------------
J$2B83:	BIT	7,C
	JR	Z,J$2B89
;
	LD	C,00H
J$2B89:	CALL	C.7586
;
	RET	C
;
	CALL	C$75B5
;
	RET	C
;
	CALL	C.7568
;
	RET	C
;
	EX	AF,AF'
	LD	A,(D.7F91)
	EXX
	LD	D,01H	; 1 
	JR	NC,J.2BAB
;
	DEC	D
	BIT	6,(IX+1)
	JR	Z,J.2BAB
;
	EXX
	LD	A,00H
J$2BA8:	JP	C.79B2
;
;	-----------------
J.2BAB:	EXX
	EX	AF,AF'
	CALL	C.7509
;
	JR	C,J$2BA8
;
	XOR	A
	XOR	A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),0AH	; 10 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),84H
	EX	AF,AF'
	JR	NC,J$2BCF
;
	LD	(IY+10),2AH	; "*"
	JR	J$2BD3
;
;	-----------------
J$2BCF:	LD	(IY+10),28H	; "("
J$2BD3:	EX	AF,AF'
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),C
	LD	(IY+10),D
	LD	(IY+10),E
	LD	(IY+10),A
	PUSH	HL
	EXX
	POP	HL
	PUSH	DE
	LD	(IY+10),A
J$2BED:	BIT	0,(IY+6)
	JR	Z,J$2BED
;
	LD	(IY+10),E
	LD	(IY+10),A
J$2BF9:	BIT	4,(IY+4)
	JR	Z,J$2BF9
;
	CALL	C.76EB
;
	LD	D,03H	; 3 
	CALL	C.76BA
;
	LD	L,E
	LD	D,07H	; 7 
	CALL	C.76BA
;
	CALL	C.754E
;
	POP	DE
	LD	A,L
	OR	A
	EXX
	JR	NZ,J$2C19
;
	LD	B,A
	JR	J.2C7E
;
;	-----------------
J$2C19:	CP	18H
	LD	A,08H	; 8 
	SCF
	JR	Z,J.2C7E
;
	EX	AF,AF'
	DEC	A
	JP	P,J$78E0
;
	CALL	C.7509
;
	JR	C,J.2C7E
;
	XOR	A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),06H	; 6 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),84H
	LD	(IY+10),03H	; 3 
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),04H	; 4 
	LD	(IY+10),A
J$2C51:	BIT	4,(IY+4)
	JR	Z,J$2C51
;
	LD	D,01H	; 1 
	CALL	C.76BA
;
	CALL	C.76BA
;
	CALL	C.76BA
;
	LD	A,E
	PUSH	AF
	CALL	C.76BA
;
	LD	D,03H	; 3 
	CALL	C.76BA
;
	LD	D,07H	; 7 
	CALL	C.76BA
;
	CALL	C.754E
;
	POP	AF
	CP	07H	; 7 
	LD	A,00H
	SCF
	JR	Z,J.2C7E
;
	LD	A,02H	; 2 
J.2C7E:	PUSH	AF
	LD	A,00H
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	XOR	A
	CALL	C.74CB
;
	POP	AF
	RET
;
;	-----------------
J$2C8A:	PUSH	AF
	LD	A,00H
	LD	(D.6000),A		; select bank 0 in 4000H-5FFFH, ASCII mapper, write disabled
	POP	AF
	RET
;
;	-----------------
?.2C92:	CALL	C.79CB
;
	JR	J.2C7E
;
;	-----------------
?.2C97:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,87H
	LD	(D.6000),A		; select bank 7 in 4000H-5FFFH, ASCII mapper, write enabled
	LD	BC,J.01CD
	LD	DE,I.7E00-2000H
	LD	HL,I.7E00
D$2CA9:	LDIR
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	JR	J$2C8A
;
;	-----------------
?.2CB1:	EI
	CALL	C.7417
;
	PUSH	HL
	CALL	C,C$7A28
;
	POP	DE
	LD	B,00H
	RET	C
;
	INC	B
	BIT	7,(IX+1)
	RET	NZ
;
	LD	A,(IX)
	DEC	A
	CP	0FEH
	JR	NC,J$2CD2
;
	INC	A
J$2CCC:	RRCA
	JR	NC,J$2CCC
;
	ADD	A,A
	JR	NZ,J$2CE2
;
J$2CD2:	CALL	C.7579
;
	DEC	B
	RET	C
;
	PUSH	IX
	POP	HL
	INC	HL
	RES	5,H
	SET	7,(HL)
	CALL	C.79C6
;
J$2CE2:	EX	AF,AF'
	EX	DE,HL
	OR	A
	CALL	C.741A
;
	CALL	C$7A97
;
	LD	B,0FFH
	RET	NC
;
	CP	0AH	; 10 
	RET	Z
;
	SCF
	INC	B
	RET
;
;	-----------------
?.2CF4:	JR	NZ,J$2CFD
;
	LD	IX,I.4013
	JP	J$7868
;
;	-----------------
J$2CFD:	CALL	C.7568
;
	RET	C
;
	CALL	C.7509
;
	JP	C,C.79B2
;
	LD	HL,X.4000
	LD	(IY+12),L
	LD	(IY+13),L
	LD	(IY+14),06H	; 6 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),80H
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
J$2D22:	BIT	4,(IY+4)
	JR	Z,J$2D22
;
	LD	D,03H	; 3 
	CALL	C.76BA
;
	LD	H,E
	LD	D,07H	; 7 
	CALL	C.76BA
I$2D32	EQU	$-1
;
	CALL	C.754E
;
	CALL	C.79B2
;
	LD	A,H
	OR	A
	RET	Z
;
	CP	18H
	LD	A,08H	; 8 
	SCF
	RET	Z
;
	CALL	C.7579
;
	RET	C
;
	LD	B,18H
	LD	DE,16-1
	LD	HL,I.7E00-2000H
	LD	A,(IX)
J$2D51:	CP	(HL)
	INC	HL
	JR	NZ,J$2D57
;
	RES	7,(HL)
J$2D57:	ADD	HL,DE
	DJNZ	J$2D51
;
	XOR	A
	JP	C.79C6
;
;	-----------------
?.2D5E:	EI
	OR	A
	CALL	C.7417
;
	PUSH	HL
	LD	HL,($SECBUF)
	LD	DE,C.0000
	LD	BC,I.01FF
	CALL	C$785F
;
	POP	HL
	RET	C
;
	LD	IY,($SECBUF)
	INC	HL
	PUSH	HL
	LD	BC,18
	EX	DE,HL
	LD	HL,D.7405
	LDIR
	POP	HL
	LD	A,(IY+21)
	CP	0F9H
	RET	Z
;
	LD	(HL),A
	INC	HL
	LD	A,(IY+11)
	LD	(HL),A
	INC	HL
	LD	A,(IY+12)
	LD	(HL),A
	INC	HL
	LD	(HL),0FH	; 15 
	INC	HL
	LD	(HL),04H	; 4 
	INC	HL
	LD	A,(IY+13)
	DEC	A
	LD	(HL),A
	INC	HL
	ADD	A,01H	; 1 
	LD	B,00H
J$2DA4:	INC	B
	RRA
	JR	NC,J$2DA4
;
	LD	(HL),B
	INC	HL
	PUSH	BC
	LD	A,(IY+14)
	LD	(HL),A
	INC	HL
	LD	D,(IY+15)
	LD	(HL),D
	INC	HL
	LD	B,(IY+16)
	LD	(HL),B
	INC	HL
J$2DBA:	ADD	A,(IY+22)
	JR	NC,J$2DC0
;
	INC	D
J$2DC0:	DJNZ	J$2DBA
;
	LD	C,A
	LD	B,D
	LD	E,(IY+17)
	LD	D,(IY+18)
	LD	A,D
	OR	A
	LD	A,0FEH
	JR	NZ,J$2DD1
;
	LD	A,E
J$2DD1:	LD	(HL),A
	INC	HL
	DEC	DE
	LD	A,04H	; 4 
J$2DD6:	SRL	D
	RR	E
	DEC	A
	JR	NZ,J$2DD6
;
	INC	DE
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	A,(IY+19)
	SUB	E
	LD	E,A
	LD	A,(IY+20)
	SBC	A,D
	LD	D,A
	POP	AF
J$2DF0:	DEC	A
	JR	Z,J$2DF9
;
	SRL	D
	RR	E
	JR	J$2DF0
;
;	-----------------
J$2DF9:	INC	DE
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	A,(IY+22)
	LD	(HL),A
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	XOR	A
	RET
;
;	-----------------
?.2E08:	CALL	C.7417
;
	LD	HL,C.0000
	RET	NC
;
	LD	HL,I$7B48
	XOR	A
	RET
;
;	-----------------
?.2E14:	NOP
	LD	D,E
	LD	B,E
	LD	D,E
	LD	C,C
	DEC	(HL)
	LD	B,(HL)
	LD	B,(HL)
	JR	NC,J$2E1E
;
J$2E1E:	LD	A,10H	; 16 
D.2E20:	SCF
	RET
;
;	-----------------
?.2E22:	LD	HL,(D.7FA2)
	CALL	C.74DD
;
	JR	NZ,J$2E2C
;
	POP	AF
	RET
;
;	-----------------
J$2E2C:	CALL	C.756D
;
	CALL	C$75F1
;
	LD	HL,(D.7FA4)
	CALL	C.74DD
;
	CALL	Z,C.75DD
;
	CALL	C.79BE
;
	CALL	C.757E
;
	LD	HL,(D.7FA0)
	CALL	C.74DD
;
	JR	NZ,J$2E65
;
	LD	HL,I.7E00-2000H
	LD	DE,I.7E00-2000H+1
	LD	BC,0198H
	LD	(HL),L
	LDIR
	LD	A,0FFH
	LD	(I.7F00-2000H),A
	LD	A,01H	; 1 
	LD	(D.5F80),A
	LD	HL,I.0307
	LD	(D.5F90),HL
J$2E65:	LD	B,18H
	LD	DE,16-1
	LD	HL,I.7E00-2000H
J$2E6D:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,J$2E74
;
	SET	7,(HL)
J$2E74:	ADD	HL,DE
	DJNZ	J$2E6D
;
	LD	HL,(D.7FA8)
	CALL	C.74DD
;
	JR	NZ,J$2E82
;
	LD	(D.5F88),A
J$2E82:	LD	A,(D.7F88)
	CP	0FEH
	JR	NZ,J$2E8A
;
	POP	AF
J$2E8A:	JP	C.79CB
;
;	-----------------
?.2E8D:	PUSH	AF
	PUSH	BC
	PUSH	DE
	CALL	C.0000
D$2E91	EQU	$-2
;
	LD	A,81H
	CALL	C.7C05
;
	LD	A,87H
D$2E9A:	CALL	C.7C05
D$2E9B	EQU	$-2
;
	LD	(HL),01H	; 1 
	INC	HL
	LD	(HL),0EDH
	INC	HL
	LD	(HL),0B0H
	INC	HL
	LD	(HL),0C9H
	LD	A,(D.7F99)
	LD	(D.7000),A
	INC	A
	LD	(D$7800),A
	LD	A,(D.7F88)
	OR	A
	JR	NZ,J$2EC5
;
	LD	HL,(D.7FA6)
	CALL	C.74DD
;
	AND	02H	; 2 
	LD	(D.F33F),A
	JR	J$2ECA
;
;	-----------------
J$2EC5:	LD	HL,DEVICE
	INC	(HL)
	POP	DE
J$2ECA:	LD	HL,(D.7F80)
	POP	DE
	POP	BC
	POP	AF
	RET
;
;	-----------------
?.2ED1:	LD	(D.6000),A
	PUSH	HL
	LD	(D$54CD),HL
	INC	HL
	LD	(D$5651),HL
	LD	(D$569B),HL
	LD	(D$57AC),HL
	LD	(D$5850),HL
	LD	A,(D.7F88)
	OR	A
	LD	HL,I.32CD
	JR	NZ,J$2EFC
	LD	C,256-1
	LD	DE,I.7E00-2000H+1
	LD	HL,I.7E00-2000H
	LD	(HL),L
	LDIR
	LD	HL,I.0118
J$2EFC:	LD	(D.5417),HL
	POP	HL
	JP	C.79BE
;
;	-----------------
?.2F03:	LD	A,(D.7F88)
	OR	A
	JR	Z,J$2F26
	CALL	C.757E
	LD	A,(DRVINF+0*2+1)
	LD	(D.5F88),A
	CALL	C.79CB
	CALL	C.402D
	LD	(DRVINF+0*2+1),A
	LD	(DRVINT+1*3+0),A
	LD	HL,I.7FDA
	LD	(DRVINT+1*3+1),HL
	JR	J.2F2F
;
;	-----------------
J$2F26:	LD	A,(D.7F81)
	OR	A
	JR	Z,J.2F2F
;
	LD	(D.F2FD),A)		; bootdrive
J.2F2F:	JP	C.0000
D$2F30	EQU	$-2
;
;	-----------------
?.2F32:	PUSH	HL
	PUSH	AF
	LD	HL,I$7C7E
J$2F36	EQU	$-1
J$2F37:	SUB	(HL)
	INC	HL
	JR	C,J.2F3F
;
	INC	HL
J$2F3C:	INC	HL
	JR	J$2F37
;
;	-----------------
J.2F3F:	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	POP	AF
	EX	(SP),HL
	LD	IY,I.5FF0
J$2F48	EQU	$-1
	RET
;
;	-----------------
?.2F4A:	EX	AF,AF'
J$2F4B:	CALL	PO,C.087C
;
	POP	HL
	LD	A,H
	EX	AF,AF'
	RET	P
;
	LD	A,H
	JR	Z,J$2F36
;
	LD	A,H
	DJNZ	J$2F3C
;
	LD	A,H
	DJNZ	J$2F4B
;
	LD	A,H
	JR	NZ,J.2F3F
;
	LD	A,H
	INC	B
	OR	7CH	; "|"
	INC	B
	INC	HL
	LD	A,L
	JR	J$2F48
;
;	-----------------
?.2F67:	LD	A,H
	LD	BC,I$7D44
	LD	BC,I.7CE1
	LD	(BC),A
	LD	C,E
	LD	A,L
	LD	(BC),A
	LD	D,D
	LD	A,L
	LD	(BC),A
	LD	E,C
	LD	A,L
	LD	(BC),A
	LD	H,B
	LD	A,L
	LD	(BC),A
	LD	H,A
	LD	A,L
	INC	D
	POP	HL
	LD	A,H
	LD	BC,I$7D6E
	LD	BC,C.75DD
	LD	BC,I.7CE1
	LD	BC,C.74CB
	LD	BC,C.79B2
	LD	BC,C.79BE
	LD	BC,C.7568
	LD	BC,C.756D
	LD	BC,I$7DB0
	LD	BC,C.754E
	LD	BC,I$7DB4
	LD	BC,I$7DBA
	LD	BC,C.76AC
	LD	BC,C.76EB
	RST	38H
	POP	HL
	LD	A,H
	SCF
	SBC	A,A
	RET
;
;	-----------------
?.2FB0:	CALL	C.741A
;
	JP	NC,J$7886
;
	CALL	C.7586
;
	JP	J$78C1
;
;	-----------------
?.2FBC:	CALL	C.741A
;
	JP	J$79E9
I$2FC0	EQU	$-2
;
;	-----------------
?.2FC2:	RRA
	JR	C,J$2FEB
;
	PUSH	HL
	RRA
	LD	BC,I.0800
	LD	DE,16
	LD	HL,I.7F00
	JR	NC,J.2FD5
;
	SLA	B
	DEC	H
J.2FD5:	LD	A,(HL)
	OR	A
	JR	Z,J$2FE2
;
	ADD	HL,DE
	INC	C
	DJNZ	J.2FD5
;
	POP	HL
	LD	A,0CH	; 12 
	SCF
	RET
;
;	-----------------
J$2FE2:	POP	DE
	RES	5,H
	PUSH	BC
	CALL	C$7D32
;
	POP	BC
	RET
;
;	-----------------
J$2FEB:	LD	HL,I.7FC0
	RLA
	LD	D,5FH	; "_"
	BIT	1,A
	JR	Z,J$2FF6
;
	DEC	D
J$2FF6:	LD	B,A
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	E,A
	LD	A,B
	LD	C,10H	; 16 
J.3000:	LD	B,00H
	RRA
	JR	C,J$3006
;
	EX	DE,HL
J$3006:	CALL	C.7579
;
	RET	C
;
	LDIR
	XOR	A
	JP	C.79C6
;
;	-----------------
?.3010:	XOR	A
	LD	A,00H
D$3012	EQU	$-1
	LD	BC,I.0215
	RET
;
;	-----------------
?.3017:	LD	C,02H	; 2 
	LD	DE,D.5F90
	JR	J.3000
;
;	-----------------
?.301E:	LD	C,04H	; 4 
	LD	DE,I.5F98
	JR	J.3000
;
;	-----------------
?.3025:	LD	C,08H	; 8 
	LD	DE,D.5F80
	JR	J.3000
;
;	-----------------
?.302C:	LD	C,08H	; 8 
	LD	DE,D.5F88
	JR	J.3000
;
;	-----------------
?.3033:	LD	C,0CH	; 12 
	LD	DE,I.5FA0
	JR	J.3000
;
;	-----------------
?.303A:	PUSH	HL
	POP	IX
	CALL	C.7568
;
	RET	C
;
	CALL	C.7509
;
	JR	C,J$3079
;
	LD	BC,C.0000
	LD	D,02H	; 2 
	LD	L,(IX+2)
	LD	H,(IX+3)
	CALL	C.76AC
;
	AND	01H	; 1 
	LD	D,A
	LD	L,(IX+4)
	LD	H,(IX+5)
	CALL	C.76AC
;
	LD	D,03H	; 3 
	LD	L,(IX+6)
	LD	H,(IX+7)
	CALL	C.76AC
;
	LD	D,07H	; 7 
	LD	L,(IX+8)
	LD	H,(IX+9)
	CALL	C.76AC
;
	CALL	C.754E
;
J$3079:	JP	C.79B2
;
;	-----------------
?.307C:	LD	A,C
	JP	J$750C

?.3080:	LD	(IY+2),60H
	XOR	A
	RET

?.3086:	LD	(IY+2),40H
	XOR	A
	RET

?.308C:	LDIR
	RET

?.308F:	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0

	.DEPHASE

S26D1	EQU	$-I$26D1

; end MEGASCSI DOS1 driver ASCII controller



I$30CC:
	; extended drive info table (0-15)

	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

	; DOS drive info table (0-7)

	DEFB	255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

	DEFB	1			; number of drives
	DEFB	0			; bootdrive (0 = default bootdrive)

        DEFS	2,0

	DEFB	0,0,0,0			; drive sorting data

	DEFB	0			; virtual FD mode enabled

	DEFS	3,0

	DEFB	0,0,0,0			; virtual FD mode translation (extended partition)

	DEFB	7			; host controller scsi id
	DEFB	3			; number of retries

        DEFS	6,0

D$3264:	DEFB	0			; number of banks
D$3265:	DEFB	0			; number of system banks
D$3266:	DEFB	0			; first data bank
D$3267:	DEFB	0			; number of data banks

        DEFB	0,0,0,0

	DEFB	039H			; bit 3, row 9  = numeric pad 0, select virtual disk file 0
        DEFB	049H			; bit 4, row 9  = numeric pad 1, select virtual disk file 1
        DEFB	059H			; bit 5, row 9  = numeric pad 2, select virtual disk file 2
        DEFB	069H			; bit 6, row 9  = numeric pad 3, select virtual disk file 3
        DEFB	079H			; bit 7, row 9  = numeric pad 4, select virtual disk file 4
        DEFB	00AH			; bit 0, row 10 = numeric pad 5, select virtual disk file 5
        DEFB	01AH			; bit 1, row 10 = numeric pad 6, select virtual disk file 6
        DEFB	02AH			; bit 2, row 10 = numeric pad 7, select virtual disk file 7
        DEFB	03AH			; bit 3, row 10 = numeric pad 8, select virtual disk file 8
        DEFB	04AH			; bit 4, row 10 = numeric pad 9, select virtual disk file 9
        DEFB	07AH			; bit 7, row 10 = numeric pad ., select virtual disk file 10
        DEFB	06AH			; bit 6, row 10 = numeric pad ,, select virtual disk file 11
        DEFB	019H			; bit 1, row 9  = numeric pad +, select virtual disk file 12
        DEFB	05AH			; bit 5, row 10 = numeric pad -, select virtual disk file 13
        DEFB	009H			; bit 0, row 9  = numeric pad *, select virtual disk file 14
        DEFB	029H			; bit 2, row 9  = numeric pad /, select virtual disk file 15

	DEFS	12,0

	EI
	JP	J$7C66


I$329C:	PUSH	AF
	ADD	A,A
	LD	(D.6000),A
	INC	A
	LD	(D.6800),A
	POP	AF
	RET

?.32A7:	RET
?.32A8:	RET
?.32A9:	RET
?.32AA:	RET
?.32AB:	RET

?.32AC:	DEFB	"MEGASCSI"
	DEFB	" ver2.15 by K.Tsujikawa."


;	  Subroutine initialize DOS1 driver for ASCII mapper
;	     Inputs  ________________________
;	     Outputs ________________________

I$32CC:	PUSH	AF
I.32CD:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	(D$3B5E),DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	(D$3C0A),DE
	LD	A,B
	LD	(D$3F36),A		; number of banks
	LD	A,C
	AND	03H	; 3 
	LD	(D$3CEC),A
	LD	A,C
	CP	30H	; "0"
	JR	NC,J$32F8
	LD	HL,0
	LD	(D$3B67),HL
	LD	(D$3B68),HL
	LD	(D$3976),HL
J$32F8:	PUSH	BC
	CP	10H	; 16 
	LD	A,B
	LD	B,2
	JR	C,J$3302
	LD	B,8
J$3302:	SUB	B
	LD	(D$3F39),A		; number of data banks
	LD	A,B
	LD	(D$3F37),A		; number of system banks
	LD	(D$3F38),A		; first data bank
J$330C	EQU	$-1
	LD	BC,48
	LD	DE,J.7FD0		; switch segment
	LD	HL,I$3F6E
	LDIR
	LD	HL,I.7FCC		; MEGASCSI BIOS entry
	LD	(HL),0FBH		; EI
	INC	HL
	LD	(HL),37H		; SCF
J$3320:	INC	HL
	LD	(HL),9FH		; SBC	A,A
	INC	HL
	LD	(HL),0C9H		; RET
	POP	BC
	POP	AF
	ADD	A,A
	LD	B,A
	JR	Z,J$3335
;
J$332C:	CP	06H	; 6 
	JR	NZ,J.3361
	LD	A,C
	CP	30H	; "0"
	JR	C,J.3361
J$3335:	LD	HL,I$3395
J$3338:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	BIT	6,D
	JR	Z,J$334B
	PUSH	HL
	LD	HL,I$BF9E
	ADD	HL,DE
	LD	A,(HL)
	XOR	B
	LD	(HL),A
	POP	HL
	JR	J$3338

J$334B:	LD	BC,I.01D0
	LD	DE,I.7E00
	LD	HL,I$3D9E
	LDIR
	LD	BC,S33A3
	LD	DE,D.7405
	LD	HL,I$33A3
	LDIR
J.3361:	LD	HL,I$3365
	RET


I$3365:	JP	J$7849
?.3368:	JP	J$79E0
?.336B:	JP	J$7A8D
?.336E:	JP	J$7B37
?.3371:	JP	J$7B4D
?.3374:	JP	J$7B41

?.3377:	CALL	C$7B51
	CALL	C$7BBC
	CALL	C$7C07
	SCF
	RET
;
;	-----------------
?.3382:	RET
;
;	-----------------
?.3383:	LD	HL,I.7404
	LD	A,(D.7405)
	LD	HL,I.0004
	LD	HL,I.F384
	CCF
	LD	A,H
	DEFB	0,0,0,0
I$3395:	JP	J$C87B
;
;	-----------------
?.3398:	LD	A,E
	AND	H
	LD	A,C
	XOR	A
	LD	A,C
	LD	B,A
	LD	(HL),L
	JP	NZ,J$0079
;
	NOP

; start MEGASCSI DOS1 driver SCC controller

I$33A3:
	.PHASE	7405H

	LD	SP,HL
	NOP
	LD	(BC),A
	RRCA
	INC	B
	LD	BC,I.0102
	NOP
	LD	(BC),A
	LD	(HL),B
	LD	C,00H
	JP	Z,J.0302
;
	RLCA
	NOP
	JR	J$33B8
;
;	-----------------
?.33B7:	LD	(HL),H
J$33B8:	EXX
	LD	L,A
	EX	AF,AF'
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	BIT	2,H
	LD	H,7FH
	JR	Z,J$33C6
;
	DEC	H
J$33C6:	LD	A,(HL)
	PUSH	HL
	POP	IX
	EXX
	SUB	0FFH
	RET	NC
;
	DEC	A
	RET
;
;	-----------------
?.33D0:	EXX
	LD	C,A
	EX	AF,AF'
	LD	A,C
	ADD	A,8CH
	LD	C,A
J$33D7:	LD	HL,(D.7FAA)
	CALL	C.74A4
;
	JR	Z,J$33E8
;
	EX	AF,AF'
	LD	B,7FH
	LD	A,(BC)
	SET	6,A
	EXX
	EI
	RET
;
;	-----------------
J$33E8:	IN	A,(0AAH)
	LD	L,A
J$33EB:	CALL	C.745C
;
	JR	Z,J$33EB
;
J$33F0:	CALL	C.745C
;
	JR	NZ,J$33F0
;
	LD	A,L
	OUT	(0AAH),A
	JR	J$33D7
;
;	-----------------
?.33FA:	PUSH	HL
	LD	H,10H	; 16 
	LD	DE,I.7FB0
J$3400:	DJNZ	J$3400
;
J$3402:	PUSH	HL
	LD	A,(DE)
	LD	L,A
	CALL	C$74C5
;
	JR	NZ,J$3420
;
	CALL	C.7545
;
	LD	A,50H	; "P"
	SUB	H
	LD	B,5FH	; "_"
	LD	(BC),A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	L,A
	LD	H,5EH	; "^"
	INC	HL
	RES	7,(HL)
	CALL	C.79BD
;
J$3420:	POP	HL
	INC	DE
	DEC	H
	JR	NZ,J$3402
;
	POP	HL
	INC	H
	LD	A,H
	AND	40H	; "@"
	XOR	L
	OUT	(0AAH),A
	BIT	6,B
	RET
;
;	-----------------
?.3430:	PUSH	HL
	LD	HL,I$7CE6
	JR	C,J$343A
;
	LD	(HL),01H	; 1 
	POP	HL
	RET
;
;	-----------------
J$343A:	SRA	(HL)
	POP	HL
	CCF
	RET	NC
;
	LD	A,06H	; 6 
	RET
;
;	-----------------
?.3442:	CALL	C.74A9
;
	RET	NZ
;
	LD	L,H
	PUSH	HL
	LD	A,L
	AND	0FH	; 15 
	LD	H,A
	IN	A,(0AAH)
	AND	0F0H
	OR	H
	OUT	(0AAH),A
	IN	A,(0A9H)
	LD	H,A
	LD	A,L
	RLCA
J$3458:	RLC	H
	ADD	A,20H	; " "
	JR	NC,J$3458
;
	XOR	H
	RRA
	SBC	A,A
	POP	HL
	RET
;
;	-----------------
?.3463:	CALL	C.74A9
;
	RET	NZ
;
J$3467:	CALL	C.74A9
;
	JR	Z,J$3467
;
	XOR	A
	RET
;
;	-----------------
?.346E:	LD	A,(IX)
	LD	(IY+4),0FFH
	LD	(IY+8),00H
	OR	(IY)
	LD	(IY+11),A
	LD	(IY+12),0FH	; 15 
	LD	(IY+13),43H	; "C"
	LD	(IY+14),04H	; 4 
	LD	(IY+2),20H	; " "
J$348F:	LD	A,(IY+4)
	AND	14H	; 20 
	JR	Z,J$348F
;
	LD	(IY+4),0FFH
	CP	10H	; 16 
	JR	NZ,J$34A8
;
J$349E:	LD	A,(IY+5)
	RLA
	JR	NC,J$349E
;
	RRA
	AND	07H	; 7 
	RET
;
;	-----------------
J$34A8:	XOR	A
	LD	(IY+2),A
	LD	(IY+11),A
	LD	A,02H	; 2 
	SCF
	RET
;
;	-----------------
?.34B3:	XOR	A
J$34B4:	BIT	3,(IY+5)
	JR	NZ,J$34B4
;
	BIT	5,(IY+4)
	LD	(IY+4),0FFH
	RET	NZ
;
	LD	(IY+11),A
	LD	(IY+2),A
	LD	A,0CH	; 12 
	SCF
	RET
;
;	-----------------
?.34CD:	SCF
	CALL	C.7492
	RET	C
	PUSH	AF
	LD	A,40H
	LD	(D.7FFE),A		; SPC enabled
	POP	AF
	LD	IY,I.5FF0
	RET
;
;	-----------------
?.34DE:	SCF
	CALL	C.7492
;
	RET	C
;
	PUSH	AF
	LD	A,01H	; 1 
	LD	(D.5000),A
	LD	A,10H
	DI
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	POP	AF
	RET
;
;	-----------------
?.34F1:	LD	A,B
	EXX
	LD	E,A
	LD	B,(IX+8)
	LD	C,(IX+9)
	LD	A,B
	SUB	02H	; 2 
	OR	C
	LD	D,A
	EXX
	RET	Z
;
	EXX
	LD	A,B
	OR	C
	EXX
	LD	A,02H	; 2 
	SCF
	RET	Z
;
	EXX
	LD	D,00H
	LD	A,B
	DEC	A
	OR	C
	EXX
	LD	A,0AH	; 10 
	SCF
	RET	NZ
;
	SLA	E
	RL	D
	RL	C
	EXX
	SLA	E
	XOR	A
	EXX
	RET
;
;	-----------------
?.3520:	LD	A,C
	PUSH	DE
	EXX
	POP	HL
	ADD	HL,DE
	ADC	A,D
	LD	D,A
	LD	A,(IX+7)
	SUB	L
	LD	A,(IX+6)
	SBC	A,H
	LD	A,(IX+5)
	SBC	A,D
	EXX
	LD	A,0CH	; 12 
	RET	C
;
	LD	A,E
	ADD	A,(IX+4)
	LD	E,A
	LD	A,D
	ADC	A,(IX+3)
	LD	D,A
	LD	A,C
	ADC	A,(IX+2)
	LD	C,A
	XOR	A
	RET
;
;	-----------------
?.3548:	XOR	A
	LD	(IY+4),0FFH
	LD	(IY+1),A
	LD	(IY+2),10H	; 16 
J$3554:	EX	(SP),HL
	EX	(SP),HL
	DEC	A
	JR	NZ,J$3554
;
	LD	(IY+2),A
	LD	(IY+1),0D8H
	LD	A,(D.7F90)
	LD	(IY),A
	XOR	A
	LD	(IY+2),A
	LD	(IY+3),A
	LD	(IY+8),A
	LD	(IY+11),A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),A
	LD	(IY+5),A
	LD	(IY+1),18H
	RET
;
;	-----------------
J$3584:	BIT	7,D
	JR	NZ,J.35B7
;
	EX	AF,AF'
	DEC	DE
	LD	A,D
	INC	DE
	CP	3EH	; ">"
	PUSH	BC
	LD	B,01H	; 1 
	JR	NC,J$359B
;
	EX	AF,AF'
	CALL	C.7619
;
J$3597:	POP	BC
	DJNZ	J$3584
;
	RET
;
;	-----------------
J$359B:	EX	AF,AF'
	PUSH	DE
	LD	DE,($SECBUF)
	CALL	C.7619
;
	POP	DE
	PUSH	HL
	LD	B,02H	; 2 
	LD	HL,($SECBUF)
	CALL	C.79AD
;
	CALL	XFER
;
	LD	(D.5000),A
	POP	HL
	JR	J$3597
;
;	-----------------
J.35B7:	EX	AF,AF'
	LD	A,B
	EX	AF,AF'
	BIT	6,A
	JR	Z,J$35C5
;
	LD	B,A
	LD	A,50H
	LD	(D.7FFE),A		; MA19 = 1, SCC bank write enabled
	LD	A,B
J$35C5:	EX	AF,AF'
	LD	B,02H	; 2 
	CALL	C.7DC8
;
	LD	B,A
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	EX	AF,AF'
	BIT	5,H
	JR	Z,J$35DB
;
	LD	H,40H	; "@"
	INC	A
	LD	(D.5000),A
J$35DB:	DJNZ	J.35B7
;
	RET
;
;	-----------------
J$35DE:	BIT	7,H
	JR	NZ,J.3612
;
	EX	AF,AF'
	DEC	HL
	LD	A,H
	INC	HL
	CP	3EH	; ">"
	PUSH	BC
	JR	NC,J$35F5
;
	EX	AF,AF'
	LD	B,01H	; 1 
	CALL	C.7674
;
J$35F1:	POP	BC
	DJNZ	J$35DE
;
	RET
;
;	-----------------
J$35F5:	EX	AF,AF'
	PUSH	DE
	LD	B,02H	; 2 
	LD	DE,($SECBUF)
	CALL	C.79AD
;
	CALL	XFER
;
	LD	(D.5000),A
	POP	DE
	PUSH	HL
	INC	B
	LD	HL,($SECBUF)
	CALL	C.7674
;
	POP	HL
	JR	J$35F1
;
;	-----------------
J.3612:	EX	AF,AF'
	LD	A,B
	EX	AF,AF'
	LD	B,A
	AND	40H
	OR	10H
	DI
	LD	(D.7FFE),A
	LD	A,B
	EX	AF,AF'
	LD	B,02H	; 2 
	CALL	C.7DC8
;
	LD	B,A
	XOR	A
	LD	(D.7FFE),A
	EX	AF,AF'
	BIT	5,D
	JR	Z,J$3635
;
	LD	D,40H	; "@"
	INC	A
	LD	(D.5000),A
J$3635:	DJNZ	J.3612
;
	RET
;
;	-----------------
?.3638:	OR	A
J$3639:	LD	E,(HL)
	CALL	C.76A8
;
	RET	NC
;
	LD	(HL),E
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$3639
;
	RET
;
;	-----------------
J$3646:	LD	A,(IY+5)
	BIT	3,A
	RET	Z
;
	RLA
	JR	NC,J$3646
;
	RRA
	AND	07H	; 7 
	XOR	D
	RET	NZ
;
	LD	(IY+8),D
	BIT	0,D
	JR	NZ,J$3664
;
	LD	(IY+11),E
	LD	(IY+2),0E0H
	JR	J.366B
;
;	-----------------
J$3664:	LD	(IY+2),0E0H
	LD	E,(IY+11)
J.366B:	BIT	7,(IY+5)
	JR	NZ,J.366B
;
	LD	(IY+2),0C0H
	SCF
	RET
;
;	-----------------
J$3677:	LD	A,(IY+5)
	RLA
	JR	NC,J$3677
;
	RRA
	AND	07H	; 7 
	CP	D
	RET	NZ
;
	LD	(IY+4),0FFH
	LD	A,B
	SUB	02H	; 2 
	OR	C
	JR	Z,J$36A1
;
	PUSH	HL
	LD	A,E
	LD	HL,C.0000
J$3691:	ADD	HL,BC
	DEC	A
	JR	NZ,J$3691
;
	LD	(IY+12),A
	LD	(IY+13),H
	LD	(IY+14),L
	POP	HL
	JR	J$36AC
;
;	-----------------
J$36A1:	LD	(IY+12),A
	LD	(IY+14),A
	LD	A,E
	ADD	A,A
	LD	(IY+13),A
J$36AC:	LD	(IY+8),D
	LD	(IY+2),80H
	BIT	0,D
	LD	D,40H	; "@"
	JR	Z,J$36CF
;
	EX	DE,HL
	CALL	C$7736
;
	EX	DE,HL
J$36BE:	RET	C
;
J$36BF:	BIT	4,(IY+4)
	JR	Z,J$36BF
;
J$36C5:	LD	A,(IY+5)
	RLA
	JR	NC,J$36C5
;
	RRA
	AND	07H	; 7 
	RET
;
;	-----------------
J$36CF:	CALL	C$77A5
;
	JR	J$36BE
;
;	-----------------
J$36D4:	BIT	7,D
	JR	NZ,J.3724
;
	PUSH	HL
	LD	L,E
	LD	H,D
	ADD	HL,BC
	DEC	HL
	LD	A,H
	CP	40H	; "@"
	JR	NC,J$36EE
;
	LD	HL,X.4000+1
	CALL	C.7786
;
J$36E8:	POP	HL
	DEC	L
	RET	C
;
	JR	NZ,J$36D4
;
	RET
;
;	-----------------
J$36EE:	CALL	C.7755
;
	JR	J$36E8
;
;	-----------------
?.36F3:	DEC	BC
	LD	A,B
	INC	BC
	CP	02H	; 2 
	JR	C,J$370A
;
	DEC	B
	DEC	B
	CALL	C.7755
;
	PUSH	BC
	LD	BC,I.0200
	CALL	NC,C$776C
;
	POP	BC
	INC	B
	INC	B
	RET
;
;	-----------------
J$370A:	PUSH	DE
	LD	DE,($SECBUF)
	LD	HL,X.4000+1
	CALL	C.7786
;
	POP	DE
	CALL	C.79AD
;
	PUSH	BC
	LD	HL,($SECBUF)
	CALL	XFER
;
	POP	BC
	JP	C.7534
;
;	-----------------
J.3724:	BIT	0,(IY+6)
	JR	Z,J$3735
;
	LD	A,(IY+4)
	AND	18H
	JR	Z,J.3724
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$3735:	LD	A,L
	PUSH	BC
	CALL	C.7DC8
;
	POP	BC
	DEC	A
	LD	L,A
	LD	H,40H	; "@"
	JR	NZ,J.3724
;
	XOR	A
	RET
;
;	-----------------
J$3743:	BIT	7,H
	JR	NZ,J.37A5
;
	PUSH	HL
	ADD	HL,BC
	DEC	HL
	LD	A,H
	CP	40H	; "@"
	POP	HL
	PUSH	DE
	JR	NC,J$375C
;
	LD	E,01H	; 1 
	CALL	C.7807
;
J$3756:	POP	DE
	DEC	E
	RET	C
;
	JR	NZ,J$3743
;
	RET
;
;	-----------------
J$375C:	CALL	C.77C3
;
	JR	J$3756
;
;	-----------------
?.3761:	DEC	BC
	LD	A,B
	INC	BC
	CP	02H	; 2 
	JR	C,J$3778
;
	DEC	B
	DEC	B
	CALL	C.77C3
;
	PUSH	BC
	LD	BC,I.0200
	CALL	NC,C$77DA
;
	POP	BC
	INC	B
	INC	B
	RET
;
;	-----------------
J$3778:	CALL	C.79AD
;
	PUSH	BC
	LD	DE,($SECBUF)
	CALL	XFER
;
	POP	BC
	CALL	C.7534
;
	PUSH	HL
	LD	HL,-9
	ADD	HL,BC
	LD	DE,X.4000+1
	LD	HL,($SECBUF)
	JR	NC,J.3799
;
	CALL	C.7807
;
	POP	HL
	RET
;
;	-----------------
J.3799:	BIT	1,(IY+6)
	JR	NZ,J.3799
;
	LD	A,C
	LDIR
	LD	C,A
	POP	HL
	RET
;
;	-----------------
J.37A5:	BIT	1,(IY+6)
	JR	Z,J$37B6
;
	LD	A,(IY+4)
	AND	18H
	JR	Z,J.37A5
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$37B6:	LD	A,E
	PUSH	BC
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
J$37C8:	BIT	1,(IY+6)
	JR	Z,J$37DB
;
	LD	E,A
	LD	A,(IY+4)
	AND	18H
	LD	A,E
	JR	Z,J$37C8
;
	LD	A,04H	; 4 
	SCF
	RET
;
;	-----------------
J$37DB:	CALL	C.7DC8
;
	POP	BC
	DEC	A
	LD	E,A
	LD	D,40H	; "@"
	JR	NZ,J.37A5
;
	XOR	A
	RET
;
;	-----------------
?.37E7:	EI
	CALL	C.7417
;
	JR	NZ,J$3841
;
	JR	NC,J$3812
;
	EX	AF,AF'
	LD	IX,I.4010
	EX	AF,AF'
	PUSH	AF
	LD	A,(D.7F88)
	DEC	A
	CP	8FH
	JR	C,J$3804
;
	POP	AF
	EX	AF,AF'
	LD	A,02H	; 2 
	SCF
	RET
;
;	-----------------
J$3804:	EX	AF,AF'
	LD	A,00H
	LD	IY,(D.7F87)
	CALL	CALSLT
	EX	AF,AF'
	POP	AF
	EX	AF,AF'
	RET
;
;	-----------------
J$3812:	SCF
	CALL	C.7492
;
	RET	C
;
	PUSH	HL
	EX	DE,HL
	ADD	HL,HL
	LD	A,L
	OR	40H	; "@"
	AND	5FH	; "_"
	LD	E,00H
	LD	D,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	A,(D.7F9A)
	ADD	A,H
	LD	C,E
	LD	(D.5000),A
	POP	HL
	EX	AF,AF'
	JR	NC,J$3837
;
	EX	AF,AF'
	CALL	C$7640
;
	JR	J$383D
;
;	-----------------
J$3837:	EX	AF,AF'
	EX	DE,HL
	CALL	C$75E6
;
	EX	DE,HL
J$383D:	XOR	A
	JP	C.799E
;
;	-----------------
J$3841:	BIT	7,C
	JR	Z,J$3847
;
	LD	C,00H
J$3847:	CALL	C.7553
;
	RET	C
;
	CALL	C$7582
;
	RET	C
;
	CALL	C.752F
;
	RET	C
;
	EX	AF,AF'
	LD	A,(D.7F91)
	EXX
	LD	D,01H	; 1 
	JR	NC,J.3869
;
	DEC	D
	BIT	6,(IX+1)
	JR	Z,J.3869
;
	EXX
	LD	A,00H
J$3866:	JP	C.799E
;
;	-----------------
J.3869:	EXX
	EX	AF,AF'
	CALL	C.74D0
;
	JR	C,J$3866
;
	XOR	A
	XOR	A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),0AH	; 10 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),84H
	EX	AF,AF'
	JR	NC,J$388D
;
	LD	(IY+10),2AH	; "*"
	JR	J$3891
;
;	-----------------
J$388D:	LD	(IY+10),28H	; "("
J$3891:	EX	AF,AF'
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),C
	LD	(IY+10),D
	LD	(IY+10),E
	LD	(IY+10),A
	PUSH	HL
	EXX
	POP	HL
	PUSH	DE
	LD	(IY+10),A
J$38AB:	BIT	0,(IY+6)
	JR	Z,J$38AB
;
	LD	(IY+10),E
	LD	(IY+10),A
J$38B7:	BIT	4,(IY+4)
	JR	Z,J$38B7
;
	CALL	C.76D9
;
	LD	D,03H	; 3 
	CALL	C.76A8
;
	LD	L,E
	LD	D,07H	; 7 
	CALL	C.76A8
;
	CALL	C.7515
;
	POP	DE
	LD	A,L
	OR	A
	EXX
	JR	NZ,J$38D7
;
	LD	B,A
	JR	J.393C
;
;	-----------------
J$38D7:	CP	18H
	LD	A,08H	; 8 
	SCF
	JR	Z,J.393C
;
	EX	AF,AF'
	DEC	A
	JP	P,J$78CC
;
	CALL	C.74D0
;
	JR	C,J.393C
;
	XOR	A
	LD	(IY+12),A
	LD	(IY+13),A
	LD	(IY+14),06H	; 6 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),84H
	LD	(IY+10),03H	; 3 
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),A
	LD	(IY+10),04H	; 4 
	LD	(IY+10),A
J$390F:	BIT	4,(IY+4)
	JR	Z,J$390F
;
	LD	D,01H	; 1 
	CALL	C.76A8
;
	CALL	C.76A8
;
	CALL	C.76A8
;
	LD	A,E
	PUSH	AF
	CALL	C.76A8
;
	LD	D,03H	; 3 
	CALL	C.76A8
;
	LD	D,07H	; 7 
	CALL	C.76A8
;
	CALL	C.7515
;
	POP	AF
	CP	07H	; 7 
	LD	A,00H
	SCF
	JR	Z,J.393C
;
	LD	A,02H	; 2 
J.393C:	PUSH	AF
	XOR	A
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	A,00H
	LD	(D.5000),A
	CALL	C.7492
;
	POP	AF
	RET
;
;	-----------------
J$394B:	PUSH	AF
	LD	A,00H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.5000),A
	POP	AF
	RET
;
;	-----------------
?.3956:	CALL	C.79BD
;
	JR	J.393C
;
;	-----------------
?.395B:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,7
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write disabled
	LD	(D.5000),A
	LD	A,10H
	DI
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	LD	BC,J.01CD
	LD	DE,I.7E00-2000H
	LD	HL,I.7E00
D$3976:	LDIR
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	JR	J$394B
;
;	-----------------
?.397E:	EI
	CALL	C.7417
;
	PUSH	HL
	CALL	C,C$7A23
;
	POP	DE
	LD	B,00H
	RET	C
;
	INC	B
	BIT	7,(IX+1)
	RET	NZ
;
	LD	A,(IX)
	DEC	A
	CP	0FEH
	JR	NC,J$399F
;
	INC	A
J$3999:	RRCA
	JR	NC,J$3999
;
	ADD	A,A
	JR	NZ,J$39AF
;
J$399F:	CALL	C.7540
;
	DEC	B
	RET	C
;
	PUSH	IX
	POP	HL
	INC	HL
	RES	5,H
	SET	7,(HL)
	CALL	C.79B8
;
J$39AF:	EX	AF,AF'
	EX	DE,HL
	OR	A
	CALL	C.741A
;
	CALL	C.7A92
;
	LD	B,0FFH
	RET	NC
;
	CP	0AH	; 10 
	RET	Z
;
	SCF
	INC	B
	RET
;
;	-----------------
?.39C1:	JR	NZ,J$39CA
;
	LD	IX,I.4013
	JP	J$7856
;
;	-----------------
J$39CA:	CALL	C.752F
;
	RET	C
;
	CALL	C.74D0
;
	JP	C,C.799E
;
	LD	HL,X.4000
	LD	(IY+12),L
	LD	(IY+13),L
	LD	(IY+14),06H	; 6 
	LD	(IY+8),02H	; 2 
	LD	(IY+2),80H
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
	LD	(HL),L
J$39EF:	BIT	4,(IY+4)
	JR	Z,J$39EF
;
	LD	D,03H	; 3 
	CALL	C.76A8
;
	LD	H,E
	LD	D,07H	; 7 
	CALL	C.76A8
;
	CALL	C.7515
;
	CALL	C.799E
;
	LD	A,H
	OR	A
	RET	Z
;
	CP	18H
	LD	A,08H	; 8 
	SCF
	RET	Z
;
	CALL	C.7540
;
	RET	C
;
	LD	B,18H
	LD	DE,16-1
	LD	HL,I.7E00-2000H
	LD	A,(IX)
J$3A1E:	CP	(HL)
	INC	HL
	JR	NZ,J$3A24
;
	RES	7,(HL)
J$3A24:	ADD	HL,DE
	DJNZ	J$3A1E
;
	XOR	A
	JP	C.79B8
;
;	-----------------
?.3A2B:	EI
	OR	A
	CALL	C.7417
;
	PUSH	HL
	LD	HL,($SECBUF)
	LD	DE,C.0000
	LD	BC,I.01FF
	CALL	C$784D
;
	POP	HL
	RET	C
;
	LD	IY,($SECBUF)
	INC	HL
	PUSH	HL
	LD	BC,18
	EX	DE,HL
	LD	HL,D.7405
	LDIR
	POP	HL
	LD	A,(IY+21)
	CP	0F9H
	RET	Z
;
	LD	(HL),A
	INC	HL
	LD	A,(IY+11)
	LD	(HL),A
	INC	HL
	LD	A,(IY+12)
	LD	(HL),A
	INC	HL
	LD	(HL),0FH	; 15 
	INC	HL
	LD	(HL),04H	; 4 
	INC	HL
	LD	A,(IY+13)
	DEC	A
	LD	(HL),A
	INC	HL
	ADD	A,01H	; 1 
	LD	B,00H
J$3A71:	INC	B
	RRA
	JR	NC,J$3A71
;
	LD	(HL),B
	INC	HL
	PUSH	BC
	LD	A,(IY+14)
	LD	(HL),A
	INC	HL
	LD	D,(IY+15)
	LD	(HL),D
	INC	HL
	LD	B,(IY+16)
	LD	(HL),B
	INC	HL
J$3A87:	ADD	A,(IY+22)
	JR	NC,J$3A8D
;
	INC	D
J$3A8D:	DJNZ	J$3A87
;
	LD	C,A
	LD	B,D
	LD	E,(IY+17)
	LD	D,(IY+18)
	LD	A,D
	OR	A
	LD	A,0FEH
	JR	NZ,J$3A9E
;
	LD	A,E
J$3A9E:	LD	(HL),A
	INC	HL
	DEC	DE
	LD	A,04H	; 4 
J$3AA3:	SRL	D
	RR	E
	DEC	A
	JR	NZ,J$3AA3
;
	INC	DE
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	A,(IY+19)
	SUB	E
	LD	E,A
	LD	A,(IY+20)
	SBC	A,D
	LD	D,A
	POP	AF
J$3ABD:	DEC	A
	JR	Z,J$3AC6
	SRL	D
	RR	E
	JR	J$3ABD

J$3AC6:	INC	DE
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	A,(IY+22)
	LD	(HL),A
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	XOR	A
	RET

?.3AD5:	CALL	C.7417
	LD	HL,C.0000
	RET	NC
	LD	HL,I$7B43
	XOR	A
	RET

?.3AE1:	NOP
	LD	D,E
	LD	B,E
	LD	D,E
	LD	C,C
	DEC	(HL)
	LD	B,(HL)
	LD	B,(HL)
	JR	NC,J$3AEB
;
J$3AEB:	LD	A,10H	; 16 
	SCF
	RET
;
;	-----------------
?.3AEF:	LD	HL,(D.7FA2)
	CALL	C.74A4
;
	JR	NZ,J$3AF9
;
	POP	AF
	RET
;
;	-----------------
J$3AF9:	CALL	C.7534
;
	CALL	C$75BE
;
	LD	HL,(D.7FA4)
	CALL	C.74A4
;
	CALL	Z,C.75AA
;
	CALL	C.79AD
;
	CALL	C.7545
;
	LD	HL,(D.7FA0)
	CALL	C.74A4
;
	JR	NZ,J$3B32
;
	LD	HL,I.7E00-2000H
	LD	DE,I.7E00-2000H+1
	LD	BC,0198H
	LD	(HL),L
	LDIR
	LD	A,0FFH
	LD	(I.7F00-2000H),A
	LD	A,01H	; 1 
	LD	(D.5F80),A
	LD	HL,I.0307
	LD	(D.5F90),HL
J$3B32:	LD	B,18H
	LD	DE,16-1
	LD	HL,I.7E00-2000H
J$3B3A:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,J$3B41
;
	SET	7,(HL)
J$3B41:	ADD	HL,DE
	DJNZ	J$3B3A
;
	LD	HL,(D.7FA8)
	CALL	C.74A4
;
	JR	NZ,J$3B4F
;
	LD	(D.5F88),A
J$3B4F:	LD	A,(D.7F88)
	CP	0FEH
	JR	NZ,J$3B57
;
	POP	AF
J$3B57:	JP	C.79BD
;
;	-----------------
?.3B5A:	PUSH	AF
	PUSH	BC
	PUSH	DE
	CALL	C.0000
D$3B5E	EQU	$-2
;
	LD	A,01H	; 1 
	CALL	C.7C08
;
	LD	A,07H	; 7 
D$3B67:	CALL	C.7C08
D$3B68	EQU	$-2
;
	LD	(HL),01H	; 1 
	INC	HL
	LD	(HL),0EDH
	INC	HL
	LD	(HL),0B0H
	INC	HL
	LD	(HL),0C9H
	CALL	C.402D
	LD	DE,(D.7F99)
	LD	H,90H
	CALL	WRSLT
	INC	E
	LD	H,0B0H
	CALL	WRSLT
	LD	A,(D.7F88)
	OR	A
	JR	NZ,J$3B9A
	LD	HL,(D.7FA6)
	CALL	C.74A4
	AND	02H	; 2 
	LD	(D.F33F),A
	JR	J$3B9F

J$3B9A:	LD	HL,DEVICE
	INC	(HL)
	POP	DE
J$3B9F:	LD	HL,(D.7F80)
	POP	DE
	POP	BC
	POP	AF
	RET

?.3BA6:	LD	(D.5000),A
	LD	A,10H
	LD	(D.7FFE),A		; MA19 = 0, SCC bank write enabled
	PUSH	HL
	LD	(D$5494),HL
	INC	HL
	LD	(D$562B),HL
	LD	(D$5685),HL
	LD	(D$579A),HL
	LD	(D$583E),HL
	LD	A,(D.7F88)
	OR	A
	LD	HL,I.32CD
	JR	NZ,J$3BD6
	LD	C,0FFH
	LD	DE,I.7E00-2000H+1
	LD	HL,I.7E00-2000H
	LD	(HL),L
	LDIR
	LD	HL,I.0118
J$3BD6:	LD	(D.5417),HL
	POP	HL
	JP	C.79AD
;
;	-----------------
?.3BDD:	LD	A,(D.7F88)
	OR	A
	JR	Z,J$3C00
;
	CALL	C.7545
;
	LD	A,(DRVINF+0*2+1)
	LD	(D.5F88),A
	CALL	C.79BD
	CALL	C.402D
	LD	(DRVINF+0*2+1),A
	LD	(DRVINT+1*3+0),A
	LD	HL,I.7FDA
	LD	(DRVINT+1*3+1),HL
	JR	J.3C09
;
;	-----------------
J$3C00:	LD	A,(D.7F81)
	OR	A
	JR	Z,J.3C09
;
	LD	(D.F2FD),A)		; bootdrive
J.3C09:	JP	C.0000
D$3C0A	EQU	$-2
;
;	-----------------
?.3C0C:	PUSH	HL
	PUSH	AF
	LD	HL,I$7C86
J$3C11:	SUB	(HL)
	INC	HL
	JR	C,J$3C19
;
	INC	HL
	INC	HL
	JR	J$3C11
J$3C18	EQU	$-1
;
;	-----------------
J$3C19:	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	POP	AF
J$3C1E:	EX	(SP),HL
	LD	IY,I.5FF0
J$3C21	EQU	$-2
	RET
;
;	-----------------
?.3C24:	EX	AF,AF'
	CALL	PE,C.087C
;
	JP	(HL)
;
;	-----------------
?.3C29:	LD	A,H
J$3C2A:	EX	AF,AF'
	RET	M
;
	LD	A,H
J$3C2D:	JR	Z,J$3C18
;
	LD	A,H
	DJNZ	J$3C1E
;
	LD	A,H
	DJNZ	J$3C2D
;
	LD	A,H
	JR	NZ,J$3C21
;
	LD	A,H
	INC	B
	CP	7CH	; "|"
	INC	B
	DEC	HL
	LD	A,L
	JR	J$3C2A
;
;	-----------------
?.3C41:	LD	A,H
	LD	BC,I$7D4C
	LD	BC,I.7CE9
	LD	(BC),A
	LD	D,E
	LD	A,L
	LD	(BC),A
	LD	E,D
	LD	A,L
	LD	(BC),A
	LD	H,C
	LD	A,L
	LD	(BC),A
	LD	L,B
	LD	A,L
	LD	(BC),A
	LD	L,A
	LD	A,L
	INC	D
	JP	(HL)
;
;	-----------------
?.3C59:	LD	A,H
	LD	BC,I$7D76
	LD	BC,C.75AA
	LD	BC,I.7CE9
	LD	BC,C.7492
	LD	BC,C.799E
	LD	BC,C.79AD
	LD	BC,C.752F
	LD	BC,C.7534
	LD	BC,I$7DB8
	LD	BC,C.7515
	LD	BC,I$7DBC
	LD	BC,I$7DC2
	LD	BC,C.769A
	LD	BC,C.76D9
	RST	38H
	JP	(HL)
;
;	-----------------
?.3C86:	LD	A,H
	SCF
	SBC	A,A
	RET
;
;	-----------------
?.3C8A:	CALL	C.741A
;
	JP	NC,J$7874
;
	CALL	C.7553
;
	JP	J$78AD
;
;	-----------------
?.3C96:	CALL	C.741A
;
	JP	J$79E4
;
;	-----------------
?.3C9C:	RRA
	JR	C,J$3CC5
;
	PUSH	HL
	RRA
	LD	BC,I.0800
	LD	DE,16
	LD	HL,I.7F00
	JR	NC,J.3CAF
;
	SLA	B
	DEC	H
J.3CAF:	LD	A,(HL)
	OR	A
	JR	Z,J$3CBC
;
	ADD	HL,DE
	INC	C
	DJNZ	J.3CAF
;
	POP	HL
	LD	A,0CH	; 12 
	SCF
	RET
;
;	-----------------
J$3CBC:	POP	DE
	RES	5,H
	PUSH	BC
	CALL	C$7D3A
;
	POP	BC
	RET
;
;	-----------------
J$3CC5:	LD	HL,I.7FC0
	RLA
	LD	D,5FH	; "_"
	BIT	1,A
	JR	Z,J$3CD0
;
	DEC	D
J$3CD0:	LD	B,A
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	E,A
	LD	A,B
	LD	C,10H	; 16 
J.3CDA:	LD	B,00H
	RRA
	JR	C,J$3CE0
;
	EX	DE,HL
J$3CE0:	CALL	C.7540
;
	RET	C
;
	LDIR
	XOR	A
	JP	C.79B8
;
;	-----------------
?.3CEA:	XOR	A
	LD	A,00H
D$3CEC	EQU	$-1
	LD	BC,I.0215
	RET
;
;	-----------------
?.3CF1:	LD	C,02H	; 2 
	LD	DE,D.5F90
	JR	J.3CDA
;
;	-----------------
?.3CF8:	LD	C,04H	; 4 
	LD	DE,I.5F98
	JR	J.3CDA
;
;	-----------------
?.3CFF:	LD	C,08H	; 8 
	LD	DE,D.5F80
	JR	J.3CDA
;
;	-----------------
?.3D06:	LD	C,08H	; 8 
	LD	DE,D.5F88
	JR	J.3CDA
;
;	-----------------
?.3D0D:	LD	C,0CH	; 12 
	LD	DE,I.5FA0
	JR	J.3CDA
;
;	-----------------
?.3D14:	PUSH	HL
	POP	IX
	CALL	C.752F
;
	RET	C
;
	CALL	C.74D0
;
	JR	C,J$3D53
;
	LD	BC,C.0000
	LD	D,02H	; 2 
	LD	L,(IX+2)
	LD	H,(IX+3)
	CALL	C.769A
;
	AND	01H	; 1 
	LD	D,A
	LD	L,(IX+4)
	LD	H,(IX+5)
	CALL	C.769A
;
	LD	D,03H	; 3 
	LD	L,(IX+6)
	LD	H,(IX+7)
	CALL	C.769A
;
	LD	D,07H	; 7 
	LD	L,(IX+8)
	LD	H,(IX+9)
	CALL	C.769A
;
	CALL	C.7515
;
J$3D53:	JP	C.799E
;
;	-----------------
?.3D56:	LD	A,C
	JP	J$74D3
;
;	-----------------
?.3D5A:	LD	(IY+2),60H	; "`"
	XOR	A
	RET
;
;	-----------------
?.3D60:	LD	(IY+2),40H	; "@"
	XOR	A
	RET
;
;	-----------------
?.3D66:	LDIR
	RET
;
;	-----------------
?.3D69:	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0

	.DEPHASE

S33A3	EQU	$-I$33A3

; end MEGASCSI DOS1 driver SCC controller

I$3D9E:
	; extended drive info table (0-15)

	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

	; DOS drive info table (0-7)

	DEFB	255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

	DEFB	1			; number of drives
	DEFB	0			; bootdrive (0 = default bootdrive)

        DEFS	2,0

	DEFB	0,0,0,0			; drive sorting data

	DEFB	0			; virtual FD mode enabled

	DEFS	3,0

	DEFB	0,0,0,0			; virtual FD mode translation (extended partition)

	DEFB	7			; host controller scsi id
	DEFB	3			; number of retries

        DEFS	6,0

D$3F36:	DEFB	0			; number of banks
D$3F37:	DEFB	0			; number of system banks
D$3F38:	DEFB	0			; first data bank
D$3F39:	DEFB	0			; number of data banks

        DEFS	4,0

	DEFB	026H,027H		; reset config  = GRAPH+ESC
	DEFB	026H,038H		; skip megascsi = GRAPH+DEL
	DEFB	026H,037H		; reset scsibus = GRAPH+TAB
	DEFB	016H,016H		; phantom drive = CTRL
	DEFB	026H,028H		; emul fd dis   = GRAPH+INS
	DEFB	046H,046H		; emul fd chg   = CODE

        DEFB	0,0,0,0

	DEFB	039H			; bit 3, row 9  = numeric pad 0, select virtual disk file 0
        DEFB	049H			; bit 4, row 9  = numeric pad 1, select virtual disk file 1
        DEFB	059H			; bit 5, row 9  = numeric pad 2, select virtual disk file 2
        DEFB	069H			; bit 6, row 9  = numeric pad 3, select virtual disk file 3
        DEFB	079H			; bit 7, row 9  = numeric pad 4, select virtual disk file 4
        DEFB	00AH			; bit 0, row 10 = numeric pad 5, select virtual disk file 5
        DEFB	01AH			; bit 1, row 10 = numeric pad 6, select virtual disk file 6
        DEFB	02AH			; bit 2, row 10 = numeric pad 7, select virtual disk file 7
        DEFB	03AH			; bit 3, row 10 = numeric pad 8, select virtual disk file 8
        DEFB	04AH			; bit 4, row 10 = numeric pad 9, select virtual disk file 9
        DEFB	07AH			; bit 7, row 10 = numeric pad ., select virtual disk file 10
        DEFB	06AH			; bit 6, row 10 = numeric pad ,, select virtual disk file 11
        DEFB	019H			; bit 1, row 9  = numeric pad +, select virtual disk file 12
        DEFB	05AH			; bit 5, row 10 = numeric pad -, select virtual disk file 13
        DEFB	009H			; bit 0, row 9  = numeric pad *, select virtual disk file 14
        DEFB	029H			; bit 2, row 9  = numeric pad /, select virtual disk file 15

	DEFS	12,0

	EI
	JP	J$7C6E

I$3F6E:	PUSH	AF
	ADD	A,A
	LD	(D.5000),A
	INC	A
	LD	(D.7000),A
	POP	AF
	RET

?.3F79:	RET
?.3F7A:	RET
?.3F7B:	RET
?.3F7C:	RET
?.3F7D:	RET

?.3F7E:	DEFB	"MEGASCSI"
	DEFB	" ver2.15 by K.Tsujikawa."

	DEFB	0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0

	END
