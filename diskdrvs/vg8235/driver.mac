; Diskdriver Philips VG8235/20 (internal floppydisk controller)
; FDC	WD2793

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by Philips and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders

SECLEN  EQU     512
MYSIZE  EQU     8

; offset	function
; 0		motor off timer
; 1		disk change drive 0 timer
; 2		disk change drive 1 timer
; 3		last used physical drive
; 4		current cylinder drive 0
; 5		current cylinder drive 1
; 6		last used drive (phantom)
; 7		number of physical drives

BASENT  EQU     4022H

D7FF8	EQU	07FF8H			; WD2793
D7FF9	EQU	D7FF8+1			; WD2793
D7FFA	EQU	D7FF8+2			; WD2793
D7FFB	EQU	D7FF8+3			; WD2793
D7FFC	EQU	07FFCH			; b0 = side select
D7FFD	EQU	D7FFC+1			; b7 = motor on/b6 = in use/b1-b0 = drive select
D7FFF	EQU	D7FFC+3			; b7 = IRQ, b6 = DRQ

DBFF8   EQU     D7FF8+4000H
DBFF9   EQU     DBFF8+1
DBFFA   EQU     DBFF8+2
DBFFB   EQU     DBFF8+3
DBFFC   EQU     D7FFC+4000H
DBFFF   EQU     DBFFC+3


I$7405:
; Only supports 3.5 media

        DEFB	0F8h		; Media F8
        DEFW	512		; 80 Tracks
        DEFB	0Fh		; 9 sectors
        DEFB	04h		; 1 side
        DEFB	01h		; 3.5" 360 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	355
        DEFB	2
        DEFW	5

DEFDPB  EQU     $-1

	DEFB	0F9h		; Media F9
        DEFW	512		; 80 Tracks
        DEFB	0Fh		; 9 sectors
        DEFB	04h		; 2 sides
        DEFB	01h		; 3.5" 720 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	14
        DEFW	714
        DEFB	3
        DEFW	7

        DEFB	0FAh		; Media FA
        DEFW	512		; 80 Tracks
        DEFB	0Fh		; 8 sectors
        DEFB	04h		; 1 side
        DEFB	01h		; 3.5" 320 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	10
        DEFW	316
        DEFB	1
        DEFW	3

        DEFB	0FBh		; Media FB
        DEFW	512		; 80 Tracks
        DEFB	0Fh		; 8 sectors
        DEFB	04h		; 2 sides
        DEFB	01h		; 3.5" 640 Kb
        DEFB	02h
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	635
        DEFB	2
        DEFW	5

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

DSKIO:
C.744D:	JP	NC,C.7550               ; read, DSKIO read

; DSKIO write

        CALL	C$7481                  ; write sectors

; DSKIO finish

J.7453:	EI
        CALL	ENAINT                  ; broadcast enable interrupts
        PUSH	AF
        LD	C,60                    ; assume disk change timer = 1 second
        JR	NC,J$745E
        LD	C,0                     ; error, disk change timer = 0 seconds
J$745E:	LD	A,0D0H
        LD	(D7FF8),A               ; force interrupt (reset FDC)
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        EX	(SP),HL
        LD	A,(D7FFB)               ; reset IRQ
        LD	A,(D7FF8)               ; reset DRQ
        LD	(IX+0),2*60             ; motor off timer = 2 seconds
        LD	A,(IX+3)
        AND	A                       ; physical drive 0 ?
        JR	NZ,J$747C               ; nope, drive 1
        LD	(IX+1),C                ; set disk change timer drive 0
        POP	AF
        RET

J$747C:	LD	(IX+2),C                ; set disk change timer drive 1
        POP	AF
        RET

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$7481:	CALL	C.7619                  ; prepare for disk operation
        RET	C
        CALL	DISINT                  ; broadcast disable interrupts
        DI
J$7489:	LD	A,H
        AND	A                       ; transfer from page 2 or 3 ?
        JP	M,J.74B8                ; yep, transfer direct
        CALL	C$7BEC                  ; install relocate write sectors routine in $SECBUF
        CALL	C.7C73                  ; execute routine in $SECBUF
        RET	C                       ; error, quit with error
        INC	B
        DEC	B                       ; sectors left ?
        RET	Z                       ; nope, quit
        CALL	DISINT                  ; broadcast disable interrupts
        DI
        LD	A,H
        AND	A                       ; transfer from page 2 or 3 ?
        JP	M,J.74B8                ; yep, transfer direct
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,($SECBUF)
        PUSH	DE
        LD	BC,SECLEN
        CALL	XFER                    ; first transfer to $SECBUF
        POP	HL
        POP	BC
        POP	DE
        CALL	C.74C3                  ; write sector from $SECBUF
        POP	HL                      ; restore transfer address
        JR	J$74BB

J.74B8:	CALL	C.74C3                  ; write sector
J$74BB:	RET	C                       ; error, quit
        DEC	B                       ; update number of sectors
        RET	Z                       ; done, quit
        CALL	C.76DF                  ; prepare for next sector
        JR	J$7489                  ; next sector

;	  Subroutine write sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.74C3:	LD	E,21
J$74C5:	CALL	C.773C                  ; wait for FDC
        LD	A,0A0H                  ; WRITE SECTOR
        BIT	6,D                     ; double sided media ?
        JR	Z,J.74D6                ; nope, leave side compare disabled
        OR	02H                     ; enable side compare
        BIT	0,D                     ; side 0 ?
        JR	Z,J.74D6                ; yep, search for side 0 in address mark
        OR	08H                     ; search for side 1 in address mark
J.74D6:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,I$74F1
        PUSH	DE
        LD	(D7FF8),A               ; start operation
        LD	BC,D7FFF
J.74E3:	LD	A,(BC)
        ADD	A,A
        RET	P                       ; IRQ, operation finished
        JP	C,J.74E3                ; no DRQ, wait
        LD	A,(HL)
        LD	(D7FFB),A               ; write sector data
        INC	HL
        JP	J.74E3                  ; next

I$74F1:	POP	BC
        POP	DE
        POP	HL
        LD	A,(D7FF8)
        AND	0FCH                    ; ignore DRQ and busy
        RET	Z                       ; no errors, quit
        BIT	6,A                     ; write protect error ?
        JR	NZ,J$7527               ; yep, test source of write protect error
        PUSH	AF                      ; store error flags
        LD	A,(IX+3)                ; physical drive
        OR	0C4H                    ; motor on, in use on, b2=1 (no function)
        LD	(D7FFD),A
        CALL	C.7721                  ; reseek
        POP	AF                      ; restore error flags
        DEC	E                       ; update retries
        JR	NZ,J$74C5               ; next try
        SCF
        LD	E,A
        BIT	7,E                     ; not ready ?
        LD	A,2
        RET	NZ                      ; yep, return not ready error
        BIT	5,E                     ; ?? no function, always 0 ??
        LD	A,10
        RET	NZ                      ; yep, return write fault error
        BIT	4,E                     ; record not found ?
        LD	A,8
        RET	NZ                      ; yep, return record not found error
        BIT	3,E                     ; CRC error ?
        LD	A,4
        RET	NZ                      ; yep, return data (CRC) error
        LD	A,12
        RET                             ; return other error (when data lost error)

J$7527:	LD	A,0D0H
        LD	(D7FF8),A               ; force interrupt (reset FDC)
        EX	(SP),HL
        EX	(SP),HL
        LD	A,80H                   ; READ SECTOR (side compare disabled)
        LD	(D7FF8),A               ; start operation
        EX	(SP),HL
        EX	(SP),HL
        LD	HL,D7FFF
        LD	DE,0
J$753B:	LD	A,(HL)
        ADD	A,A                     ; DRQ ?
        JP	C,J.754D                ; yep, quit with write protect error
        JP	P,J.754D                ; IRQ, quit with write protect error
        DEC	DE
        LD	A,E
        OR	D
        JP	NZ,J$753B
        LD	A,2
        SCF
        RET                             ; quit with not ready error

J.754D:	XOR	A
        SCF
        RET

;	  Subroutine DSKIO read
;	     Inputs  ________________________
;	     Outputs ________________________

C.7550:	CALL	C$7556                  ; read sectors
        JP	J.7453                  ; DSKIO finish

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$7556:	CALL	C.7619                  ; prepare for disk operation
        RET	C

;	  Subroutine read sectors (without disk operation prepare)
;	     Inputs  ________________________
;	     Outputs ________________________

C$755A:	CALL	DISINT                  ; broadcast disable interrupts
        DI
J$755E:	LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.7592                ; yep, direct transfer
        CALL	C$7BD8                  ; install relocate read sectors routine in $SECBUF
        CALL	C.7C73                  ; execute routine in $SECBUF
        RET	C                       ; error, quit with error
        INC	B
        DEC	B                       ; sectors left ?
        RET	Z                       ; nope, quit
        CALL	DISINT                  ; broadcast disable interrupts
        DI
        LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.7592                ; yep, direct transfer
        PUSH	HL
        LD	HL,($SECBUF)
        CALL	C.759D                  ; read sector in $SECBUF
        POP	HL
        RET	C
        PUSH	HL
        PUSH	DE
        PUSH	BC
        EX	DE,HL
        LD	HL,($SECBUF)
        LD	BC,SECLEN
        CALL	XFER                    ; transfer from $SECBUF
        POP	BC
        POP	DE
        POP	HL
        AND	A                       ; reset Cx
        JR	J$7596

J.7592:	CALL	C.759D                  ; read sector
        RET	C                       ; eror, quit with error
J$7596:	DEC	B                       ; update number of sectors
        RET	Z                       ; done, quit
        CALL	C.76DF                  ; prepare for next sector
        JR	J$755E                  ; next sector

;	  Subroutine read sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.759D:	LD	E,21
J$759F:	CALL	C.773C                  ; wait for FDC
        LD	A,80H                   ; READ SECTOR
        BIT	6,D                     ; double sided media ?
        JR	Z,J.75B0                ; nope, leave side compare disabled
        OR	02H                     ; enable side compare
        BIT	0,D                     ; side 0 ?
        JR	Z,J.75B0                ; yep, search for side 0 in address mark
        OR	08H                     ; search for side 1 in address mark
J.75B0:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	BC,D7FFF
        LD	DE,I$75E8
        PUSH	DE
        LD	(D7FF8),A               ; start operation
        LD	DE,0
J.75C0:	LD	A,(BC)
        ADD	A,A
        JP	NC,J.75E0               ; DRQ, go
        RET	P                       ; IRQ, quit
        DEC	E
        JP	NZ,J.75C0               ; try again
        LD	A,(BC)
        ADD	A,A
        JP	NC,J.75E0               ; DRQ, go
        RET	P                       ; IRQ, quit
        DEC	D
        JP	NZ,J.75C0               ; try again
        POP	BC
        POP	BC
        POP	DE
        POP	HL
        JR	J$7615                  ; quit with not ready error

J.75DA:	LD	A,(BC)
        ADD	A,A
        RET	P                       ; IRQ, quit
        JP	C,J.75DA                ; no DRQ, wait
J.75E0:	LD	A,(D7FFB)               ; read sector data
        LD	(HL),A
        INC	HL
        JP	J.75DA                  ; next

I$75E8:	POP	BC
        POP	DE
        POP	HL
        LD	A,(D7FF8)
        AND	9CH                     ; ignore write protect, record type, DRQ, busy
        RET	Z                       ; no error, quit
        PUSH	AF                      ; store error flags
        LD	A,(IX+3)                ; physical drive
        OR	0C4H                    ; motor on, in use on, b2=1 (no function)
        LD	(D7FFD),A
        CALL	C.7721                  ; reseek
        POP	AF                      ; restore error flags
        DEC	E                       ; update retries
        JR	NZ,J$759F               ; next try
        SCF
        LD	E,A
        BIT	7,E                     ; not ready ?
        LD	A,2
        RET	NZ                      ; yep, return not ready error
        BIT	4,E                     ; record not found ?
        LD	A,8
        RET	NZ                      ; yep, record not found error
        BIT	3,E                     ; CRC error ?
        LD	A,4
        RET	NZ                      ; yep, return data (CRC) error
        LD	A,12
        RET                             ; return other error (when lost data)

J$7615:	LD	A,2
        SCF
        RET

;	  Subroutine prepare for disk operation
;	     Inputs  ________________________
;	     Outputs ________________________

C.7619:	PUSH	AF
        PUSH	BC
        PUSH	HL
        CALL	GETWRK
        POP	HL
        POP	BC
        POP	AF

;	  Subroutine prepare for disk operation (pointer to workarea in IX)
;	     Inputs  ________________________
;	     Outputs ________________________

C.7622:	CP	1+1                     ; valid drive ?
        JR	C,J$762A                ; yep, continue
J$7626:	LD	A,12
        SCF
        RET                             ; return other error

J$762A:	PUSH	AF
        LD	A,C
        CP	0F8H                    ; valid media descriptor (0F8-0FFH) ?
        JR	C,J$7634                ; nope, return other error
        CP	0FCH                    ; valid media descriptor (0F8H-0FBH) ?
        JR	C,J$7637                ; yep, continue
J$7634:	POP	AF
        JR	J$7626

J$7637:	EX	(SP),HL
        PUSH	HL
        PUSH	BC
        CALL	C.773C                  ; wait for FDC
        BIT	1,C                     ; 8 sectors per track media ?
        LD	C,E
        LD	B,D
        LD	DE,8
        JR	NZ,J$7647               ; yep,
        INC	DE                      ; 9 sectors per track
J$7647:	CALL	DIV16                   ; calculate track
        LD	A,L
        INC	A                       ; record number (1 based)
        LD	(D7FFA),A               ; record
        LD	L,C
        POP	BC
        POP	AF
        LD	H,A
        XOR	A                       ; assume side 0
        BIT	0,C                     ; double sided media ?
        JR	Z,J.765D                ; nope, cylinder = track
        SRL	L                       ; cylinder = track/2
        JR	NC,J.765D               ; side 0,
        INC	A                       ; side 1
J.765D:	LD	(D7FFC),A               ; select side
        LD	D,A                     ; store side
        LD	A,(IX+7)
        DEC	A                       ; 1 physical drive ?
        JR	Z,J$7668                ; yep, use physical drive 0
        LD	A,H                     ; drive
J$7668:	OR	0C4H                    ; motor on, in use on, b2=1 (no function)
        CALL	DISINT                  ; broadcast disable interrupts
        DI
        LD	(D7FFD),A               ; motor on, in use on, select drive
        LD	A,(IX+0)
        AND	A                       ; motor off timer finished ?
        LD	(IX+0),0FFH             ; motor off timer = disabled
        EI
        CALL	ENAINT                  ; broadcast enable interrupts
        JR	NZ,J$768B               ; nope, skip motor spin up time
        CALL	C.7764                  ; wait motor spin up time (1/4)
        CALL	C.7764                  ; wait motor spin up time (2/4)
        CALL	C.7764                  ; wait motor spin up time (3/4)
        CALL	C.7764                  ; wait motor spin up time (4/4)
J$768B:	LD	A,C
        RRCA
        RRCA
        AND	0C0H
        OR	D
        LD	D,A                     ; media flags + side
        LD	C,L                     ; cylinder
        LD	A,(IX+7)
        DEC	A                       ; 1 physical drive ?
        JR	Z,J$76BE                ; yep, handle phantom drive
        LD	A,(IX+3)
        CP	H                       ; sane physical drive as last operation ?
        JR	Z,J.76D2                ; yep, skip cylinder register swap
        XOR	01H
        LD	(IX+3),A                ; update physical drive
        LD	A,(D7FF9)
        JR	Z,J$76B1
        LD	(IX+4),A                ; update current cylinder drive 0
        LD	A,(IX+5)                ; current cylinder drive 1
        JR	J$76B7

J$76B1:	LD	(IX+5),A                ; update current cylinder drive 1
        LD	A,(IX+4)                ; current cylinder drive 0
J$76B7:	LD	(D7FF9),A
        EX	(SP),HL
        EX	(SP),HL
        JR	J$76D5                  ; seek to cylinder

J$76BE:	LD	A,(IX+6)
        CP	H                       ; same phantom drive as last operation ?
        LD	(IX+6),H                ; update phantom drive
        JR	Z,J.76D2                ; yep, skip swap
        PUSH	IX
        PUSH	DE
        PUSH	BC
        CALL	PROMPT
        POP	BC
        POP	DE
        POP	IX
J.76D2:	LD	A,(D7FF9)               ; request cylinder
J$76D5:	CALL	C$7727                  ; seek to cylinder
        POP	HL
        RET

;	  Subroutine select next track
;	     Inputs  ________________________
;	     Outputs ________________________

C.76DA:	CALL	C.773C                  ; wait for FDC
        JR	J$76F5                  ; select next track

;	  Subroutine prepare for next sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.76DF:	CALL	C.773C                  ; wait for FDC
        INC	H
        INC	H                       ; update transfer address
        LD	A,(D7FFA)
        INC	A
        LD	(D7FFA),A               ; update record
        BIT	7,D                     ; 8 sectors per track media ?
        JR	NZ,J$76F2               ; yep,
        CP	9+1
        RET	C
J$76F2:	CP	8+1
        RET	C
J$76F5:	LD	A,1
        LD	(D7FFA),A               ; record = 1
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7709                ; nope, next cylinder, side 0
        BIT	0,D                     ; side 0 ?
        JR	NZ,J.7709               ; nope, next cylinder, side 0
        SET	0,D                     ; side 1
        LD	(D7FFC),A               ; select side 1
        JR	J$771D

J.7709:	RES	0,D                     ; side 0
        XOR	A
        LD	(D7FFC),A               ; select side 0
        INC	C
        CALL	C.773C                  ; wait for FDC
        LD	A,50H
        LD	(D7FF8),A               ; STEP-IN (next cylinder)
        EX	(SP),HL
        EX	(SP),HL
        CALL	C.773C                  ; wait for FDC
J$771D:	SCF
        CCF                             ; clear Cx (not needed because wait head settle clears Cx)
        JR	J.776A                  ; wait head settle time

;	  Subroutine reseek
;	     Inputs  ________________________
;	     Outputs ________________________

C.7721:	BIT	0,E
        RET	NZ
        CALL	C.7743                  ; seek to cylinder 0

;	  Subroutine seek to cylinder
;	     Inputs  C = cylinder
;	     Outputs ________________________

C$7727:	CALL	C.773C                  ; wait for FDC
        LD	A,C
        LD	(D7FFB),A               ; set cylinder
        EX	(SP),HL
        EX	(SP),HL
        LD	A,10H                   ; SEEK
J$7732:	LD	(D7FF8),A               ; execute operation
        EX	(SP),HL
        EX	(SP),HL
        CALL	C.773C                  ; wait for FDC
        JR	J.776A                  ; wait head settle time

;	  Subroutine wait for FDC
;	     Inputs  ________________________
;	     Outputs ________________________

C.773C:	LD	A,(D7FF8)
        RRA
        JR	C,C.773C
        RET

;	  Subroutine seek to cylinder 0
;	     Inputs  ________________________
;	     Outputs ________________________

C.7743:	LD	A,(D7FF9)
        OR	A                       ; already on cylinder 0 ?
        JR	NZ,J$774C               ; nope,
        CALL	C.7753                  ; step-in 5 times
J$774C:	CALL	C.773C                  ; wait for FDC
        LD	A,02H                   ; RESTORE
        JR	J$7732                  ; execute cylinder operation

;	  Subroutine step-in 5 times
;	     Inputs  ________________________
;	     Outputs ________________________

C.7753:	PUSH	BC
        LD	B,5
J$7756:	CALL	C.773C                  ; wait for FDC
        LD	A,50H                   ; STEP-IN with cylinder update
        LD	(D7FF8),A               ; execute operation
        EX	(SP),HL
        EX	(SP),HL
        DJNZ	J$7756                  ; next
        POP	BC
        RET

;	  Subroutine wait motor spin up time (1/4)
;	     Inputs  ________________________
;	     Outputs ________________________

C.7764:	PUSH	HL
        LD	HL,99E1H
        JR	J.7774

;	  Subroutine wait head settle time
;	     Inputs  ________________________
;	     Outputs ________________________

J.776A:	PUSH	HL
        LD	HL,117BH
        JR	J.7774

;	  Subroutine unused
;	     Inputs  ________________________
;	     Outputs ________________________

?.7770:	PUSH	HL
        LD	HL,012CH

J.7774:	DEC	HL
        LD	A,H
        OR	L
        JR	NZ,J.7774
        POP	HL
        XOR	A
        RET

;	  Subroutine INIHRD
;	     Inputs  ________________________
;	     Outputs ________________________

INIHRD:
	CALL	C.77B3                  ; reset FDC
        LD	A,0C0H                  ; motor on, in use, drive 0
        CALL	C$778A                  ; initialize FDD

                                        ; wierd, it does not initialize drive 1. must be a BUG

;	  Subroutine MTOFF
;	     Inputs  ________________________
;	     Outputs ________________________

MTOFF:
        LD	A,03H
        LD	(D7FFD),A               ; motor off, in use off, drive 3 (deselect drive)
        RET

;	  Subroutine initialize FDD
;	     Inputs  ________________________
;	     Outputs ________________________

C$778A:	LD	(D7FFD),A
        CALL	C.7753                  ; step-in 5 times (BUG: a bit dangerous if FDD already at cylinder 79)
        CALL	C.773C                  ; wait for FDC
        LD	A,02H                   ; RESTORE
        LD	(D7FF8),A               ; execute operation
        EX	(SP),HL
        EX	(SP),HL
        PUSH	DE
        LD	HL,0D6D8H
        LD	D,2                     ; busy counter
J.77A0:	LD	A,(D7FF8)
        RRA                             ; ready ?
        JR	NC,J$77B1               ; yep, quit
        DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J.77A0
        DEC	D
        JR	NZ,J.77A0
        CALL	C.77B3                  ; reset FDC
J$77B1:	POP	DE
        RET

;	  Subroutine reset FDC
;	     Inputs  ________________________
;	     Outputs ________________________

C.77B3:	LD	A,0D0H
        LD	(D7FF8),A               ; force interrupt (reset FDC)
        EX	(SP),HL
        EX	(SP),HL
        LD	A,(D7FF8)               ; reset DRQ
        LD	A,(D7FFD)               ; BUG: should be 7FFB to reset IRQ
        RET

        NOP
        NOP
        NOP                             ; ?? left over from patch ??

;	  Subroutine DRIVES
;	     Inputs  ________________________
;	     Outputs ________________________

DRIVES:
        PUSH	BC
        PUSH	AF
        PUSH	DE
        CALL	GETWRK
        POP	DE
        POP	AF
        PUSH	AF
        PUSH	DE
        JR	Z,J$77F8                ; CTRL pressed, skip drive 1 check
        LD	A,0C1H
        LD	(D7FFD),A               ; motor on, in use, drive 1
        CALL	C.7753                  ; step-in 5 times
        CALL	C.773C                  ; wait for FDC
        LD	A,02H
        LD	(D7FF8),A
        EX	(SP),HL
        EX	(SP),HL
        LD	HL,0D6D8H
        LD	D,2
J.77E7:	LD	A,(D7FF8)
        RRA
        JR	NC,J$77FB
        DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J.77E7
        DEC	D
        JR	NZ,J.77E7
        CALL	C.77B3                  ; reset FDC
J$77F8:	LD	L,1
        DEFB    0C2H                    ; pseudo jp nz,nnnn (skip next instruction)
J$77FB:	LD      L,2
        POP	DE
        LD	(IX+7),L                ; store number of physical drives
        LD	A,03H
        LD	(D7FFD),A               ; motor off, in use off, drive 3 (deselect drive)
        POP	AF
        JR	Z,J$780B                ; CTRL pressed, quit
        LD	L,2                     ; return 2 drives (phantom when needed)
J$780B:	POP	BC
        RET

;	  Subroutine INIENV
;	     Inputs  ________________________
;	     Outputs ________________________

INIENV:
	CALL	GETWRK
        XOR	A
        LD	B,MYSIZE-1
J$7813:	LD	(HL),A
        INC	HL
        DJNZ	J$7813                  ; initialize driver work area
        LD	HL,I$781D
        JP	SETINT                  ; install timer interrupt handler

;	  Subroutine timer interrupt handler
;	     Inputs  ________________________
;	     Outputs ________________________

I$781D:	PUSH	AF                      ; store vdp status register
        CALL	GETWRK
        LD	A,(HL)
        AND	A                       ; motor off timer finished ?
        JR	Z,J.7832                ; yep, skip
        CP	0FFH                    ; motor off timer disabled ?
        JR	Z,J.7832                ; yep, skip
        DEC	A
        LD	(HL),A                  ; update motor off timer
        JR	NZ,J.7832               ; not finished, skip
        LD	A,03H
        LD	(D7FFD),A               ; motor off, in use off, drive 3 (deselect drive)
J.7832:	INC	HL
        LD	A,(HL)
        AND	A                       ; disk change timer drive 0 finished ?
        JR	Z,J$7838                ; yep, skip
        DEC	(HL)                    ; update disk change timer drive 0
J$7838:	INC	HL
        LD	A,(HL)
        AND	A                       ; disk change timer drive 1 finished ?
        JR	Z,J$783E                ; yep, skip
        DEC	(HL)                    ; update disk change timer drive 1
J$783E:	POP	AF                      ; restore vdp status register
        JP	PRVINT                  ; next timer interrupt handler

DSKCHG:
	EI
        PUSH	HL
        PUSH	BC
        PUSH	AF
        CALL	GETWRK
        POP	AF
        POP	BC
        POP	HL
        LD	B,A
        LD	A,(IX+7)
        DEC	A                       ; 1 physical drive ?
        LD	A,B
        JR	NZ,J$7861               ; nope, handle physical drive
        LD	A,(IX+6)
        AND	03H                     ; left over from VG8230 code, not needed
        CP	B                       ; same phantom drive as last operation ?
        LD	A,B                     ; drive
        LD	B,1                     ; 1 sector
        JR	NZ,J$786F               ; nope, use media descriptor methode
        JR	J$7867                  ; yep, use disk change timer method

J$7861:	AND	A
        LD	B,(IX+2)                ; disk change timer drive 1
        JR	NZ,J$786A
J$7867:	LD	B,(IX+1)                ; disk change timer drive 0
J$786A:	INC	B
        DEC	B                       ; disk change timer finished ?
        LD	B,1
        RET	NZ                      ; nope, quit with DISK UNCHANGED
J$786F:	PUSH	BC
        PUSH	HL
        LD	DE,1                    ; 1st FAT sector of 1st FAT
        LD	HL,($SECBUF)
        PUSH	AF                      ; store drive
        CALL	C.7550                  ; DSKIO read
        JR	C,J$7895                ; error, quit with error
        POP	AF                      ; restore drive
        LD	HL,($SECBUF)
        LD	B,(HL)                  ; media descriptor
        POP	HL
        PUSH	BC                      ; store media descriptor
        CALL	C$7899                  ; GETDPB
        LD	A,10
        JR	C,J$7896                ; error, quit with write fault
        POP	AF                      ; restore media descriptor
        POP	BC
        CP	C                       ; same media descriptor ?
        SCF
        CCF                             ; clear Cx
        LD	B,0FFH
        RET	NZ                      ; nope, quit with DISK CHANGED
        INC	B
        RET                             ; quit with DISK CHANGE UNKNOWN

J$7895:	POP	DE
J$7896:	POP	DE
        POP	DE
        RET

;	  Subroutine GETDPB
;	     Inputs  ________________________
;	     Outputs ________________________

GETDPB:
C$7899:	EX	DE,HL
        INC	DE
        DEC	A                       ; drive 1 ?
        JR	NZ,J$78AB               ; nope,
        PUSH	DE
        PUSH	BC
        CALL	GETWRK
        POP	BC
        POP	DE
        LD	A,(IX+7)
        DEC	A                       ; 1 physical drive ?
        JR	NZ,J$78AF               ; nope,
J$78AB:	BIT	0,B                     ; double sided media ?
        JR	NZ,J.78CB               ; yep, quit with error
J$78AF:	LD	A,B
        SUB	0F8H                    ; valid media descriptor (0F8H-0FFH) ?
        RET	C                       ; nope, quit with error
        CP	0FBH+1-0F8H             ; valid media descriptor (0F8H-0FBH) ?
        JR	NC,J.78CB               ; nope, quit with error
        LD	L,A
        LD	H,0
        ADD	HL,HL                   ; *2
        LD	C,L
        LD	B,H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL                   ; *16
        ADD	HL,BC                   ; *18
        LD	BC,I$7405
        ADD	HL,BC
        LD	BC,18
        LDIR
        RET

J.78CB:	SCF
        RET

;	  Subroutine CHOICE
;	     Inputs  ________________________
;	     Outputs ________________________

CHOICE:
	DEC	A                       ; drive 1 ?
        JR	NZ,J$78D9               ; nope (drive 0), no format choice
        CALL	GETWRK
        LD	A,(IX+7)
        DEC	A                       ; 1 physical drive (drive 1 is a phantom drive) ?
        JR	NZ,J$78DD               ; nope, drive 1 is physical, offer format choice
J$78D9:	LD	HL,0
        RET

J$78DD:	LD	HL,I$78E1
        RET

I$78E1:	DEFB	"1 - Single Side ...",13,10
        DEFB	"2 - Double Side ...",13,10
        DEFB	0

;	  Subroutine DSKFMT
;	     Inputs  D = drive, A = format choice, HL = start of format workarea, BC = size of fromat workarea
;	     Outputs ________________________

DSKFMT:
        EI
        PUSH	HL
        LD	HL,-7000
        ADD	HL,BC
        POP	HL
        JR	C,J$791D
        CCF
        LD	A,14
        RET

J$7919:	CCF
J.791A:	LD	A,12
        RET

J$791D:	LD	(HL),D                  ; save drive
        LD	BC,S7B5B+1
        ADD	HL,BC
        PUSH	AF                      ; store format choice
        PUSH	HL                      ; store pointer to format data buffer
        PUSH	DE                      ; store drive
        PUSH	BC
        CALL	GETWRK
        POP	BC
        POP	DE                      ; restore drive
        POP	HL                      ; restore pointer to format data buffer
        POP	AF                      ; restore format choice
        LD	B,(IX+7)
        DEC	B                       ; 1 physical drive ?
        JR	Z,J.7945                ; yep,
        LD	B,D
        DEC	B                       ; drive 1 ?
J$7935:	JR	NZ,J.7945               ; nope, format single sided
        SUB	1                       ; choice 0 ?
        JR	C,J.791A                ; yep, quit with bad parameter
        CP	1+1                     ; valid choice (1 or 2) ?
        JR	NC,J$7919               ; nope, quit with bad parameter
J$793F:	LD	BC,9*256+0F9H
        DEC	A                       ; choice 2 ?
        JR	Z,J.794A                ; yep, format double sided
J.7945:	LD	BC,9*256+0F8H
        JR	J.794A                  ; ?? useless

J.794A:	PUSH	BC                      ; store number of sectors per track, media descriptor
        LD	B,80
        BIT	0,C                     ; single sided ?
        JR	Z,J$7953                ; yep, 80 tracks
        LD	B,160                   ; double sided, 160 tracks
J$7953:	LD	A,D
        PUSH	AF                      ; store drive
J$7955:	PUSH	DE                      ; store drive
        PUSH	HL                      ; store pointer to format data buffer
        PUSH	BC                      ; store number of tracks, media descriptor
        PUSH	AF                      ; store drive
        LD	B,2                     ; first 2 tracks
        LD	DE,0                    ; sector 0 (seek to cylinder 0)
        CALL	C.7622                  ; prepare for disk operation (pointer to workarea in IX)
        JR	C,J.79C9                ; error, quit with error (with DSKIO finish)
        CALL	C.7743                  ; seek to cylinder 0 (but why ? head is already on cylinder 0)
        POP	AF                      ; restore drive
        PUSH	AF                      ; store drive
J$7968:	CALL	C.7AD1                  ; prepare format data
        PUSH	HL
        CALL	C.7A01                  ; format track
        POP	HL
        JR	C,J.79C9                ; error, quit with error (with DSKIO finish)
        DEC	B                       ; update number of tracks
        JR	Z,J$797A                ; done, continue
        CALL	C.76DA                  ; select next track
        JR	J$7968                  ; next track

J$797A:	POP	AF                      ; restore drive
        POP	BC                      ; restore number of tracks, media descriptor
        PUSH	BC                      ; store number of tracks, media descriptor
        PUSH	AF                      ; store drive
        LD	B,1                     ; 1 sector
        LD	DE,0                    ; sector 0
        CALL	C.7550                  ; DSKIO read
        JR	C,J$79C8                ; error, quit with error (skip DSKIO finish)
        POP	AF                      ; restore drive
        POP	BC                      ; restore number of tracks, media descriptor
        POP	HL                      ; restore pointer to format data buffer
        POP	DE                      ; restore drive, but why is it stored ?
        LD	DE,0                    ; sector 0 (seek to cylinder 0)
        CALL	C.7622                  ; prepare for disk operation (pointer to workarea in IX)
        JR	C,J.79CD                ; error, quit with error (with DSKIO finish)
        PUSH	AF                      ; store drive
        CALL	C.7743                  ; seek to cylinder 0
        POP	AF                      ; restore drive
J$7999:	CALL	C.7AD1                  ; prepare format data
        PUSH	HL                      ; store pointer to format data buffer
        CALL	C.7A01                  ; format track
        CALL	C$79DF                  ; verify track
        POP	HL                      ; restore pointer to format data buffer
        JR	C,J.79CD                ; error, quit with error (with DSKIO finish)
        DEC	B                       ; update tracks
        JR	Z,J$79AE                ; done, continue
        CALL	C.76DA                  ; select next track
        JR	J$7999                  ; next track

J$79AE:	CALL	C.7743                  ; seek to cylinder 0
        POP	AF                      ; restore drive
        POP	BC                      ; restore mediadescriptor
        PUSH	AF                      ; store drive
        LD	DE,1                    ; sector 1
        CALL	C$7AA2                  ; prepare FAT and directory sector data
        POP	AF                      ; restore drive
        PUSH	AF                      ; store drive
        CALL	C$79D6                  ; write sector(s)
        JR	C,J$79CE                ; error, quit with error (with DSKIO finish)
        POP	AF                      ; restore drive
        CALL	C$7B7C                  ; write boot sector
        JP	J.7453                  ; DSKIO finish

J$79C8:	CCF                             ; skip DSKIO finish
J.79C9:	POP	HL
        POP	DE
        POP	BC
        POP	BC
J.79CD:	POP	BC
J$79CE:	POP	BC
        JP	C,J.7453                ; DSKIO finish
        SCF                             ; error
        JP	J.791A                  ; bad parameter error

;	  Subroutine write sector(s)
;	     Inputs  ________________________
;	     Outputs ________________________

C$79D6:	PUSH	BC
        PUSH	HL
        SCF                             ; write sector(s)
        CALL	C.744D                  ; DSKIO
        POP	HL
        POP	BC
        RET

;	  Subroutine verify track
;	     Inputs  HL = pointer to format buffer
;	     Outputs ________________________

C$79DF:	RET	C
        LD	A,(RAWFLG)
        OR	A                       ; read after write ?
        RET	Z                       ; nope, quit
        PUSH	BC
        PUSH	DE
        PUSH	HL
        PUSH	AF
        BIT	7,D                     ; 9 sectors per track ?
        LD	B,9
        JR	NZ,J$79F1               ; yep,
        LD	B,8
J$79F1:	LD	A,1
        LD	(D7FFA),A               ; record 1
        CALL	C.773C                  ; wait for FDC
        CALL	C$755A                  ; read sectors (without disk operation prepare)
        POP	HL
        POP	HL
        POP	DE
        POP	BC
        RET

;	  Subroutine format track
;	     Inputs  HL = pointer to format data
;	     Outputs ________________________

C.7A01:	LD	E,21
J$7A03:	CALL	C.773C                  ; wait for FDC
        LD	A,0F0H
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,I$7A4A
        PUSH	DE                      ; return here after IRQ
        CALL	DISINT                  ; broadcast disable interrupts
        DI
        EX	(SP),IY
        EX	(SP),IY
        LD	BC,D7FFF
        LD	DE,0
        LD	(D7FF8),A
J.7A20:	LD	A,(BC)
        ADD	A,A                     ; DRQ ?
        JP	NC,J.7A42               ; yep, go
        RET	P                       ; IRQ, finish
        DEC	E
        JP	NZ,J.7A20               ; next try
        LD	A,(BC)
        ADD	A,A                     ; DRQ ?
        JP	NC,J.7A42               ; yep, go
        RET	P                       ; IRQ, finish
        DEC	D
        JP	NZ,J.7A20               ; next try
        POP	BC
        POP	BC
        POP	DE
        POP	HL
        LD	A,2
        SCF
        RET                             ; quit with not ready error

J.7A3C:	LD	A,(BC)
        ADD	A,A                     ; IRQ ?
        RET	P                       ; yep, finish
        JP	C,J.7A3C                ; no DRQ, wait
J.7A42:	LD	A,(HL)
        LD	(D7FFB),A
        INC	HL
        JP	J.7A3C                  ; next byte

I$7A4A:	POP	BC
        POP	DE
        POP	HL
        EI
        CALL	ENAINT                  ; broadcast enable interrupts
        LD	A,(D7FF8)
        AND	0FCH                    ; ignore drq and busy
        RET	Z                       ; nope, quit
        BIT	6,A                     ; write protect ?
        JR	NZ,J$7A84               ; yep, check write protect source
        PUSH	AF
        LD	A,(IX+3)                ; physical drive
        OR	0C4H                    ; motor on, in use on, b2=1 (no function)
        LD	(D7FFD),A
        CALL	C.7721                  ; reseek
        POP	AF
        DEC	E
        JR	NZ,J$7A03               ; next try
        SCF
        LD	E,A
        BIT	7,E                     ; not ready ?
        LD	A,2
        RET	NZ                      ; yep, quit with not ready error
        BIT	5,E                     ; write fault ?
        LD	A,10
        RET	NZ                      ; yep, quit with write fault error
        BIT	4,E                     ; index pulse detected ?
        LD	A,8
        RET	NZ                      ; nope, quit with record not found
        BIT	3,E                     ; crc error ?
        LD	A,4
        RET	NZ                      ; yep, quit with data (crc) error
        LD	A,16
        RET                             ; quit with other error

J$7A84:	LD	A,0D4H
        LD	(D7FF8),A               ; force interrupt (with IRQ)
        EX	(SP),IY
        EX	(SP),IY
        LD	HL,D7FFF
        LD	DE,4E20H
J$7A93:	LD	A,(HL)
        ADD	A,A                     ; IRQ ?
        JP	P,J.754D                ; yep, quit with write protect error
        DEC	DE
        LD	A,E
        OR	D
        JP	NZ,J$7A93
        LD	A,2
        SCF
        RET                             ; quit with not ready error

;	  Subroutine prepare FAT and directory sector data
;	     Inputs  ________________________
;	     Outputs ________________________

C$7AA2:	PUSH	HL
        PUSH	DE
        LD	B,1                     ; assume 1 FAT sector
        BIT	1,C                     ; 8 sectors per track ?
        JR	NZ,J$7AAB               ; yep,
        INC	B                       ; 9 sectors per track, 2 FAT sectors
J$7AAB:	BIT	0,C                     ; double sided media ?
        JR	Z,J$7AB0                ; nope,
        INC	B                       ; yep, 1 extra FAT sector
J$7AB0:	SLA	B                       ; 2 FATs
        LD	A,7                     ; 7 directory sectors
        ADD	A,B
        LD	B,A                     ; number of FAT and directory sectors
        PUSH	BC
J$7AB7:	LD	DE,SECLEN
J$7ABA:	LD	(HL),0
        INC	HL
        DEC	DE
        LD	A,D
        OR	E
        JR	NZ,J$7ABA
        DJNZ	J$7AB7                  ; clear sector content
        POP	BC
        POP	DE
        POP	HL
        LD	(HL),C
        INC	HL
        LD	(HL),0FFH
        INC	HL
        LD	(HL),0FFH
        DEC	HL
        DEC	HL
        RET

;	  Subroutine prepare format data
;	     Inputs  HL = pointer to format data
;	     Outputs ________________________

C.7AD1:	PUSH	IY
        PUSH	HL
        PUSH	IX
        PUSH	BC
        PUSH	DE
        LD	BC,-S7B5B
        ADD	HL,BC
        PUSH	HL
        POP	IX                      ; store record format data
        LD	DE,I$7B5B               ; format data record
        LD	B,S7B5B
J$7AE4:	LD	A,(DE)
        LD	(HL),A
        INC	HL
        INC	DE
        DJNZ	J$7AE4                  ; copy format data record
        LD	DE,I$7B50               ; format data pre record
        CALL	C.7B3C                  ; construct format data
        CALL	C$7B1B                  ; update format data record
        POP	DE
        PUSH	DE
        BIT	7,D                     ; 9 sectors per track ?
        LD	B,9
        JR	Z,J.7AFD                ; yep,
        LD	B,8
J.7AFD:	PUSH	IX
        POP	DE                      ; format data record
        CALL	C.7B3C                  ; construct format data
        INC	(IX+10)                 ; update record
        DJNZ	J.7AFD                  ; next record
        LD	DE,1024
J$7B0B:	LD	(HL),4EH
        INC	HL
        DEC	DE
        LD	A,D
        OR	E
        JR	NZ,J$7B0B               ; construct format data post record
        POP	DE
        POP	BC
        POP	IX
        POP	HL
        POP	IY
        RET

;	  Subroutine update format data record
;	     Inputs  ________________________
;	     Outputs ________________________

C$7B1B:	POP	IY                      ; restore return address
        POP	DE                      ; restore media flags
        POP	BC                      ; restore cylinder
        PUSH	BC                      ; store cylinder
        PUSH	DE                      ; store media flags
        PUSH	IY                      ; store return address
        BIT	6,D                     ; double sided media ?
        JR	Z,J$7B2B                ; nope, side 0
        BIT	0,D                     ; side 1 ?
        JR	NZ,J$7B2F               ; yep, side 1
J$7B2B:	LD	D,0
        JR	J$7B31

J$7B2F:	LD	D,1                     ; side = 1
J$7B31:	LD	(IX+6),C                ; cylinder
        LD	(IX+8),D                ; side
        LD	(IX+10),1               ; record = 1
        RET

;	  Subroutine construct format data
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B3C:	PUSH	BC
        PUSH	DE
J$7B3E:	LD	A,(DE)
        LD	C,A
        INC	A                       ; end of table ?
        JR	Z,J$7B4D                ; yep, quit
        INC	DE
        LD	A,(DE)
        LD	B,A
        INC	DE
J$7B47:	LD	(HL),C
        INC	HL
        DJNZ	J$7B47
        JR	J$7B3E

J$7B4D:	POP	DE
        POP	BC
        RET

; format data pre record

I$7B50:	DEFB    04EH,80
        DEFB    000H,12
        DEFB    0F6H,3
        DEFB    0FCH,1
        DEFB    04EH,26
        DEFB    0FFH

; format data record

I$7B5B:	DEFB    000H,12
        DEFB    0F5H,3
        DEFB    0FEH,1
        DEFB    000H,1
        DEFB    000H,1
        DEFB    001H,1
        DEFB    002H,1
        DEFB    0F7H,1
        DEFB    04EH,24
        DEFB    000H,12
        DEFB    0F5H,3
        DEFB    0FBH,1
        DEFB    0E5H,0
        DEFB    0E5H,0
        DEFB    0F7H,1
        DEFB    04EH,54
        DEFB    0FFH

S7B5B   EQU     $-I$7B5B

;	  Subroutine write boot sector
;	     Inputs  ________________________
;	     Outputs ________________________

C$7B7C:	PUSH	BC
        PUSH	DE
        PUSH	HL
        PUSH	IX
        PUSH	HL
        POP	IX
        SCF                             ; write sector
        PUSH	AF
        PUSH	HL
        PUSH	BC
        LD	BC,S7F26-12
        PUSH	HL
        POP	DE
        LD	HL,I$7F26
        LDIR
        POP	BC
        BIT	0,C                     ; double sided media ?
        JR	Z,J$7BAB                ; nope, BPB already ok
        LD	(IX+19),LOW 1440
        LD	(IX+20),HIGH 1440
        LD	(IX+21),0F9H
        LD	(IX+22),3
        LD	(IX+26),2
J$7BAB:	LD	B,1                     ; 1 sector
        POP	HL
        POP	AF
        PUSH	HL
        LD	DE,0                    ; sector 0 (boot sector)
        CALL	C.744D                  ; DSKIO
        POP	HL
        LD	BC,-34
        ADD	HL,BC
        LD	BC,1*256+1
J$7BBE:	PUSH	BC
J$7BBF:	LD	DE,SECLEN
J$7BC2:	LD	(HL),0
        INC	HL
        DEC	DE
        LD	A,D
        OR	E
        JR	NZ,J$7BC2
        DJNZ	J$7BBF
        POP	BC
        DEC	C
        JR	NZ,J$7BBE
        POP	IX
        POP	HL
        POP	DE
        POP	BC
        RET

OEMSTA:
	SCF
        RET

;	  Subroutine install relocate read sectors routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C$7BD8:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	HL,I$7C79
        LD	DE,($SECBUF)
        LD	BC,S7C79
        LDIR
        LD	HL,I$7C47               ; relocation table read sectors
        JR	J.7BFE


;	  Subroutine install relocate write sectors routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C$7BEC:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	HL,I$7DC7
        LD	DE,($SECBUF)
        LD	BC,S7DC7
        LDIR
        LD	HL,I$7C1F
J.7BFE:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	A,E
        OR	D
        JR	Z,J$7C1B
        PUSH	HL
        LD	HL,($SECBUF)
        ADD	HL,DE
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        EX	DE,HL
        LD	HL,($SECBUF)
        ADD	HL,BC
        EX	DE,HL
        LD	(HL),D
        DEC	HL
        LD	(HL),E
        POP	HL
        JR	J.7BFE

J$7C1B:	POP	BC
        POP	DE
        POP	HL
        RET

; relocation table write sectors

I$7C1F: DEFW    Y0006
        DEFW    Y0024
        DEFW    Y0029
        DEFW    Y003D
        DEFW    Y004A
        DEFW    Y0052
        DEFW    Y0062
        DEFW    Y0067
        DEFW    Y006F
        DEFW    Y00A5
        DEFW    Y00AB
        DEFW    Y00D1
        DEFW    Y0102
        DEFW    Y010C
        DEFW    Y0116
        DEFW    Y0119
        DEFW    Y0129
        DEFW    Y013E
        DEFW    Y014C
        DEFW    0

; relocation table read sectors

I$7C47: DEFW    X0006
        DEFW    X0024
        DEFW    X0029
        DEFW    X0040
        DEFW    X004C
        DEFW    X0051
        DEFW    X0056
        DEFW    X005B
        DEFW    X0067
        DEFW    X006F
        DEFW    X007F
        DEFW    X0084
        DEFW    X0088
        DEFW    X00C0
        DEFW    X00F1
        DEFW    X00FB
        DEFW    X0105
        DEFW    X0108
        DEFW    X0118
        DEFW    X012D
        DEFW    X013B
        DEFW    0

;	  Subroutine execute routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C.7C73:	PUSH	HL
        LD	HL,($SECBUF)
        EX	(SP),HL
        RET

; relocatable read sectors routine

I$7C79:
        .PHASE  0

X0000:	PUSH	HL
        PUSH	DE
        PUSH	BC
        CALL	GETSLT
X0006:  LD	(X00B3+1),A
        LD	H,HIGH 8000H
        CALL	ENASLT
        EI
        LD	A,(RAMAD1)
        LD	H,HIGH 4000H
        CALL	ENASLT
        EI
        POP	BC
        POP	DE
        POP	HL
        CALL	DISINT                  ; broadcast disable interrupts
        DI
J$7C98:	DEC	HL
        LD	A,H
        ADD	A,HIGH SECLEN
        INC	HL
X0024:  JP	M,X00A3
        LD	E,21
X0029:
J$7CA2:	CALL	X011D
        LD	A,80H
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7CB3                ; nope, leave side compare disabled
        OR	02H                     ; enable side compare
        BIT	0,D                     ; side 0 ?
        JR	Z,J.7CB3                ; yep, search for side 0 in address mark
        OR	08H                     ; search for side 1 in address mark
J.7CB3:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	BC,DBFFF
X0040:  LD	DE,X0072
        PUSH	DE
        LD	(DBFF8),A
        LD	DE,0
X004A:  LD	A,(BC)
        ADD	A,A
X004C:  JP	NC,X006A
        RET	P
        DEC	E
X0051:  JP	NZ,X004A
        LD	A,(BC)
        ADD	A,A
X0056:  JP	NC,X006A
        RET	P
        DEC	D
X005B:  JP	NZ,X004A
        POP	BC
        POP	BC
        POP	DE
        POP	HL
        JR	J$7D19

X0064:	LD	A,(BC)
        ADD	A,A
        RET	P
X0067:  JP	C,X0064
X006A:  LD	A,(DBFFB)
        LD	(HL),A
        INC	HL
X006F:  JP	X0064

X0072:	POP	BC
        POP	DE
        POP	HL
        LD	A,(DBFF8)
        AND	9CH
        JR	NZ,J$7CFD
        DEC	B
        JR	Z,J$7D1C
X007F:  CALL	X00C0
        JR	J$7C98

X0084:
J$7CFD:	JP	M,X00A0
        PUSH	AF
X0088:  CALL	X0102
        POP	AF
        DEC	E
        JR	NZ,J$7CA2
        LD	E,A
        BIT	4,E
        LD	A,8
        JR	NZ,J.7D1B
        BIT	3,E
        LD	A,4
        JR	NZ,J.7D1B
        LD	A,12
        JR	J.7D1B

X00A0:
J$7D19:	LD	A,2
J.7D1B:	SCF
X00A3:
J$7D1C:	PUSH	HL
        PUSH	DE
        PUSH	BC
        PUSH	AF
        LD	A,(RAMAD2)
        LD	H,HIGH 8000H
        CALL	ENASLT
        CALL	$DOSON
        EI
X00B3:  LD	A,0
        LD	H,HIGH 4000H
        CALL	ENASLT
        EI
        POP	AF
        POP	BC
        POP	DE
        POP	HL
        RET

X00C0:	CALL	X011D
        INC	H
        INC	H
        LD	A,(DBFFA)
        INC	A
        LD	(DBFFA),A
        BIT	7,D                     ; 8 sectors per track media ?
        JR	NZ,J$7D4C               ; yep,
        CP	9+1
        RET	C
J$7D4C:	CP	8+1
        RET	C
        LD	A,1
        LD	(DBFFA),A               ; record = 1
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7D63
        BIT	0,D                     ; side 0 ?
        JR	NZ,J.7D63               ; nope, next cylinder, side 0
        SET	0,D                     ; side 1
        LD	(DBFFC),A               ; select side 1
        JR	J$7D77

J.7D63:	RES	0,D                     ; side 0
        XOR	A
        LD	(DBFFC),A               ; select side 0
        INC	C                       ; next cylinder
X00F1:  CALL	X011D
        LD	A,50H
        LD	(DBFF8),A               ; STEP-IN (next cylinder)
        EX	(SP),HL
        EX	(SP),HL
X00FB:  CALL	X011D
J$7D77:	SCF
        CCF
        JR	J.7DBB

X0102:	BIT	0,E
        RET	NZ
X0105:  CALL	X0124
X0108:  CALL	X011D
        LD	A,C
        LD	(DBFFB),A
        EX	(SP),HL
        EX	(SP),HL
        LD	A,10H
J$7D8C:	LD	(DBFF8),A
        EX	(SP),HL
        EX	(SP),HL
X0118:  CALL	X011D
        JR	J.7DBB

X011D:
J$7D96:	LD	A,(DBFF8)
        RRA
        JR	C,J$7D96
        RET

X0124:	LD	A,(DBFF9)
        OR	A
        JR	NZ,J$7DB4
        PUSH	BC
        LD	B,5
X012D:
J$7DA6:	CALL	X011D
        LD	A,50H
        LD	(DBFF8),A
        EX	(SP),HL
        EX	(SP),HL
        DEC	B
        JR	NZ,J$7DA6
        POP	BC
X013B:
J$7DB4:	CALL	X011D
        LD	A,2
        JR	J$7D8C

J.7DBB:	PUSH	HL
        LD	HL,117BH
J$7DBF:	DEC	HL
        LD	A,H
        OR	L
        JR	NZ,J$7DBF
        POP	HL
        XOR	A
        RET

        .DEPHASE

S7C79   EQU     $-I$7C79


; relocatable write sectors routine

I$7DC7:
        .PHASE  0

Y0000:	PUSH	HL
        PUSH	DE
        PUSH	BC
        CALL	GETSLT
Y0006:  LD	(Y00C4+1),A
        LD	H,HIGH 8000H
        CALL	ENASLT
        EI
        LD	A,(RAMAD1)
        LD	H,HIGH 4000H
        CALL	ENASLT
        EI
        POP	BC
        POP	DE
        POP	HL
        CALL	DISINT                  ; broadcast disable interrupts
        DI
J$7DE6:	DEC	HL
        LD	A,H
        ADD	A,HIGH SECLEN
        INC	HL
Y0024:  JP	M,Y00B4
        LD	E,21
Y0029:
J$7DF0:	CALL	Y012E
        LD	A,0A0H
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7E01                ; nope, leave side compare disabled
        OR	02H                     ; enable side compare
        BIT	0,D                     ; side 0 ?
        JR	Z,J.7E01                ; yep, search for side 0 in address mark
        OR	08H                     ; search for side 1 in address mark
J.7E01:	PUSH	HL
        PUSH	DE
        PUSH	BC
Y003D:  LD	DE,Y0055
        PUSH	DE
        LD	(DBFF8),A
        LD	BC,DBFFF
Y0047:  LD	A,(BC)
        ADD	A,A
        RET	P
Y004A:  JP	C,Y0047
        LD	A,(HL)
        LD	(DBFFB),A
        INC	HL
Y0052:  JP	Y0047

Y0055:	POP	BC
        POP	DE
        POP	HL
        LD	A,(DBFF8)
        AND	0FCH
        JR	NZ,J$7E2E
        DEC	B
        JR	Z,J$7E7B
Y0062:  CALL	Y00D1
        JR	J$7DE6

Y0067:
J$7E2E:	JP	M,Y00AE
        BIT	6,A
        JR	NZ,J$7E54
        PUSH	AF
Y006F:  CALL	Y0113
        POP	AF
        DEC	E
        JR	NZ,J$7DF0
        LD	E,A
        BIT	5,E
        LD	A,10
        JR	NZ,J.7E7A
        BIT	4,E
        LD	A,8
        JR	NZ,J.7E7A
        BIT	3,E
        LD	A,4
        JR	NZ,J.7E7A
        LD	A,12
        JR	J.7E7A

J$7E54:	LD	A,0D0H
        LD	(DBFF8),A               ; force interrupt (reset FDC)
        EX	(SP),HL
        EX	(SP),HL
        LD	A,80H
        LD	(DBFF8),A
        EX	(SP),HL
        EX	(SP),HL
        LD	HL,DBFFF
        LD	DE,0
Y00A1:  LD	A,(HL)
        ADD	A,A
        JR	C,J$7E79
Y00A5:  JP	Y00B2

?.7E6F:	DEC	DE
        LD	A,E
        OR	D
Y00AB:  JP	NZ,Y00A1
Y00AE:  LD	A,2
        JR	J.7E7A

Y00B2:
J$7E79:	XOR	A
J.7E7A:	SCF
Y00B4:
J$7E7B:	PUSH	HL
        PUSH	DE
        PUSH	BC
        PUSH	AF
        LD	A,(RAMAD2)
        LD	H,HIGH 8000H
        CALL	ENASLT
        CALL	$DOSON
        EI
Y00C4:  LD	A,0
        LD	H,HIGH 4000H
        CALL	ENASLT
        EI
        POP	AF
        POP	BC
        POP	DE
        POP	HL
        RET

Y00D1:
?.7E98:	CALL	Y012E
        INC	H
        INC	H
        LD	A,(DBFFA)
        INC	A
        LD	(DBFFA),A
        BIT	7,D                     ; 8 sectors per track media ?
        JR	NZ,J$7EAB               ; yep,
        CP	9+1
        RET	C
J$7EAB:	CP	8+1
        RET	C
        LD	A,1
        LD	(DBFFA),A               ; record = 1
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7EC2                ; nope, next cylinder, side 0
        BIT	0,D                     ; side 0 ?
        JR	NZ,J.7EC2
        SET	0,D                     ; side 1
        LD	(DBFFC),A               ; select side 1
        JR	J$7ED6

J.7EC2:	RES	0,D                     ; side 0
        XOR	A
        LD	(DBFFC),A               ; select side 0
        INC	C                       ; update cylinder
Y0102:  CALL	Y012E
        LD	A,50H
        LD	(DBFF8),A               ; STEP-IN (next cylinder)
        EX	(SP),HL
        EX	(SP),HL
Y010C:  CALL	Y012E
J$7ED6:	SCF
        CCF
        JR	J.7F1A

Y0113:	BIT	0,E
        RET	NZ
Y0116:  CALL	Y0135
Y0119:  CALL	Y012E
        LD	A,C
        LD	(DBFFB),A
        EX	(SP),HL
        EX	(SP),HL
        LD	A,10H
J$7EEB:	LD	(DBFF8),A
        EX	(SP),HL
        EX	(SP),HL
Y0129:  CALL	Y012E
        JR	J.7F1A

Y012E:
J$7EF5:	LD	A,(DBFF8)
        RRA
        JR	C,J$7EF5
        RET

Y0135:	LD	A,(DBFF9)
        OR	A
        JR	NZ,J$7F13
        PUSH	BC
        LD	B,5
Y013E:
J$7F05:	CALL	Y012E
        LD	A,50H
        LD	(DBFF8),A
        EX	(SP),HL
        EX	(SP),HL
        DEC	B
        JR	NZ,J$7F05
        POP	BC
Y014C:
J$7F13:	CALL	Y012E
        LD	A,02H
        JR	J$7EEB

J.7F1A:	PUSH	HL
        LD	HL,117BH
J$7F1E:	DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J$7F1E
        POP	HL
        XOR	A
        RET

        .DEPHASE

S7DC7   EQU     $-I$7DC7

I$7F26:
        .PHASE  0C000H

        DEFB	0EBH,0FEH
        DEFB	090H
        DEFB	"NMS  2.2"
        DEFW	512
        DEFB	2
        DEFW	1
        DEFB	2
        DEFW	112
        DEFW	720
        DEFB	0F8H
        DEFW	2
        DEFW	9
        DEFW	1
        DEFW	0

C.C01E:	RET	NC
	LD	(C.C058+1),DE
	LD	(D.C0D0),A
	LD	(HL),LOW C.C056
	INC	HL
	LD	(HL),HIGH C.C056
J$C02B:	LD	SP,KBUF+256
	LD	DE,I.C0AB
	LD	C,0FH
	CALL	BDOS
	INC	A
	JP	Z,J$C063
	LD	DE,0100H
	LD	C,1AH
	CALL	BDOS
	LD	HL,1
	LD	(I.C0AB+14),HL
	LD	HL,4000H-0100H
	LD	DE,I.C0AB
	LD	C,27H
	CALL	BDOS
	JP	0100H

C.C056: DEFW    C.C058

C.C058:	CALL	0
	LD	A,C
	AND	0FEH
	CP	02H
	JP	NZ,J$C06A
J$C063:	LD	A,(D.C0D0)
	AND	A
	JP	Z,BASENT
J$C06A: LD      DE,I$C085
        CALL    C$C077
        LD      C,7
        CALL    BDOS
        JR      J$C02B

C$C077: LD      A,(DE)
        INC     DE
        OR      A
        RET     Z
        PUSH    DE
        LD      E,A
        LD      C,6
        CALL    BDOS
        POP     DE
        JR      C$C077

I$C085:	DEFB	"Boot error",13,10
        DEFB	"Press any key for retry",13,10
        DEFB	0

I.C0AB:	DEFB	0
        DEFB	"MSXDOS  "
        DEFB	"SYS"
        DEFW	0
        DEFW	0
        DEFB	0,0,0,0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0,0,0,0

D.C0D0:	DEFB	0

        .DEPHASE

S7F26   EQU     $-I$7F26

        DEFS    8000H-$,0FFH

        END
