; Diskdriver Yamaha FD-03, version 3.8
; FDC	WD1793

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by Yamaha and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


MYSIZE	EQU	14		; workspace for disk driver
                                ; +0 motor off timer
                                ; +1 b3 = last dskio operation failed, b2 = last dskchg was changed, b1 = 8 sectors per track, b0 = 40 tracks
				;    b7 = other drive b3, b6 = other drive b2, b5 = other drive b1, b4 = other drive b0
                                ; +2 b3 = last dskchg invalid mediabyte, b2 = reshuffle done, b1 = TRoffset invalid, b0 = disk verified ok
				;    b7 = other drive b3, b6 = other drive b2, b5 = other drive b1, b4 = other drive b0
                                ; +3 b3-b0 = TR offset
				;    b7-b4 = TR offset other drive
                                ; +4 b4 = NI0I enabled, b3 = transfer via page 2 driver, b2 = read/write dskio operation, b1 = unused, b0 = current panthom drive
                                ; +5 current physical diskdrive
                                ; +6 current phantom diskdrive
                                ; +7 current track of other diskdrive
                                ; +8 current sector on track
                                ; +9 current diskdrive record mask
                                ; +10 other diskdrive record mask
                                ; +11 track reshuffle tries
                                ; +12 slotid disk driver ROM
                                ; +13 physical diskdrives connected

SECLEN	EQU	512

ENAKRN	EQU	0F368H
BDOS	EQU	0F37DH
DSKBAS	EQU	04022H

ENSTOP	EQU	0FBB0H

D7FC0	EQU	07FC0H			; WD1793 floppy disk controller
D7FC1	EQU	D7FC0+1			; track
D7FC2	EQU	D7FC0+2			; record
D7FC3	EQU	D7FC0+3			; data

D7FE0	EQU	07FE0H			; diskdrive operation/status

D7FF0	EQU	07FF0H			; reset diskchange


DEFDPB:	EQU	$-1
I7405:
	DB	0F8h			; media with 80 tracks, 9 sectors per track, single sided
        DW	512
        DB	00Fh
        DB	004h
        DB	001h
        DB	002h
        DW	1
        DB	2
        DB	112
        DW	12
        DW	355
        DB	2
        DW	5

        DB	0FAh			; media with 80 tracks, 8 sectors per track, single sided
        DW	512
        DB	00Fh
        DB	004h
        DB	001h
        DB	002h
        DW	1
        DB	2
        DB	112
        DW	10
        DW	316
        DB	1
        DW	3

        DB	0FCh			; media with 40 tracks, 9 sectors per track, single sided
        DW	512
        DB	00Fh
        DB	004h
        DB	000h
        DB	001h
        DW	1
        DB	2
        DB	64
        DW	9
        DW	352
        DB	2
        DW	5

        DB	0FEh			; media with 40 tracks, 8 sectors per track, single sided
        DW	512
        DB	00Fh
        DB	004h
        DB	000h
        DB	001h
        DW	1
        DB	2
        DB	64
        DW	7
        DW	314
        DB	1
        DW	3

;	  Subroutine enable disk driver ROM on page 2
;	     Inputs  ________________________
;	     Outputs ________________________

C744D:	PUSH	BC
	PUSH	HL
	CALL	GETSLT
	LD	(IX+12),A
	LD	H,80H
	CALL	ENASLT			; enable disk driver ROM on page 2
	POP	HL
	POP	BC
	RET

;	  Subroutine enable RAM on page 2
;	     Inputs  ________________________
;	     Outputs ________________________

C745D:	PUSH	AF
	PUSH	BC
	PUSH	HL
	LD	A,(RAMAD2)
	LD	H,80H
	CALL	ENASLT
	POP	HL
	POP	BC
	POP	AF
	RET

;	  Subroutine get pointer to workarea
;	     Inputs  ________________________
;	     Outputs ________________________

C746C:	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	GETWRK
	POP	HL
	POP	BC
	POP	AF
	RET

;	  Subroutine DSKFMT
;	     Inputs  ________________________
;	     Outputs ________________________

DSKFMT:
	CALL	C746C			; get pointer to workarea
	CALL	DISINT
	CALL	C7E1C			; select diskdrive variables
	LD	A,D
	CALL	C7AD4			; prepare for diskdrive
	LD	A,D
	AND	A			; drive 0 ?
	JR	NZ,J748C		; nope,
	LD	(D7FF0),A		; reset diskchange diskdrive 0
	JR	J748F

J748C:	LD	A,(D7FF0)		; reset diskchange diskdrive 1
J748F:	DI
	LD	IY,0
	ADD	IY,SP
	PUSH	IY
	POP	DE
	LD	IY,($SECBUF)
	LD	(IY+0),E
	LD	(IY+1),D		; save current stackpointer
	LD	DE,512
	ADD	IY,DE
	LD	SP,IY			; temporary stack in $SECBUF (make sure stack is in page 3)
	CALL	C744D			; enable disk driver ROM on page 2
	CALL	C80D2			; DSKFMT (part 2)
	CALL	C745D			; enable RAM on page 2
	LD	IY,($SECBUF)
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IY
	LD	SP,IY			; restore current stackpointer
	EI
	JR	C,J74F3			; errror, finish dskio operation
	CALL	C7E29			; clear disk flags
	SET	0,(IX+2)		; disk verfified ok
	LD	(IX+9),0FFH		; record mask (all records)
	RES	0,(IX+1)		; 80 tracks
	RES	1,(IX+1)		; 9 sectors per track
	JR	J74F3			; finish dskio operation

;	  Subroutine DSKIO
;	     Inputs  ________________________
;	     Outputs ________________________

DSKIO:
	EI
	CALL	C746C			; get pointer to workarea
	SET	2,(IX+4)		; assume dskio write operation
	JR	C,J74E8
	RES	2,(IX+4)		; dskio read operation
J74E8:	CALL	DISINT
	CALL	C7A06			; preprare for dskio
	JR	C,J74F3			; error, finish dskio operation
	CALL	C7512			; do dskio
J74F3:	PUSH	AF
	RES	3,(IX+1)		; assume last dskio operation succesfull
	JR	NC,J74FE
	SET	3,(IX+1)		; last dskio operation failed
J74FE:	CALL	ENAINT
	CALL	C7819			; terminate fdc command
	LD	A,(D7FC0)		; reset INTRQ
	LD	A,04H
	LD	(D7FE0),A		; ? off, motor on, deselect diskdrive
	LD	(IX+0),4*60		; motor off timer 4 seconds (assume 60Hz ints)
	POP	AF
	RET

;	  Subroutine do dskio
;	     Inputs  ________________________
;	     Outputs ________________________

C7512:	LD	A,H
	AND	A			; transfer address in page 2 or 3 ?
	JP	M,J75DA			; yep, direct accessable dskio

J7517:	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	A,8+1
	JR	NZ,J7521		; nope,
	LD	A,9+1
J7521:	SUB	(IX+8)			; - current record
	CP	B			; all sectors on this track ?
	JR	NC,J752A		; yep,
	LD	C,A			; sectors to end of track
	JR	J752B
J752A:	LD	C,B
J752B:	DEC	HL
	LD	A,(HIGH 6C00H-1)
	CP	H
	INC	HL			; transfer address in 0000H-6C00H range ?
	LD	E,1
	JR	NC,J754A		; yep, transfer can be done via page 2 driver
	DEC	HL
	LD	A,H
	INC	HL
	AND	1EH
	RRCA
	LD	E,A
	LD	A,0FH
	SUB	E
	JR	Z,J756B			; transfer via $SECBUF
	CP	C
	LD	E,0FFH
	JR	Z,J7547
	JR	NC,J754A
J7547:	LD	C,A
	LD	E,0
J754A:	SET	3,(IX+4)		; transfer via page 2 driver
	PUSH	BC
	PUSH	DE
	CALL	C762B			; read/write sectors
	POP	DE
	POP	BC
	RET	C			; unrecoverable error, quit
	LD	A,B
	SUB	C
	LD	B,A			; update sectors left
	RET	Z			; all done, quit
	INC	E
	DEC	E
	JR	Z,J7563
	CALL	C7615			; prepare for first sector on next track
	JR	J7517

J7563:	CALL	C75FD			; prepare for next sector
	LD	A,H
	AND	A
	JP	M,J75DA			; direct accessable dskio

J756B:	BIT	2,(IX+4)		; dskio read operation ?
	JR	Z,J75BA			; yep,
	CALL	C79FD			; check if write protected
	RET	C			; not ready or write protected, quit
	LD	C,1			; 1 record
	PUSH	HL
	CALL	C773A			; verify records
	POP	HL
	RET	C			; error, quit
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	CALL	C7762			; verify records on track
	JP	C,J772A			; error, 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms, clear mask
	CALL	C7762			; verify records on track
	JP	C,J7730			; error, step out without trackupdate and wait 25 ms, clear mask
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	PUSH	HL
	PUSH	BC
	LD	DE,($SECBUF)
	PUSH	DE
	LD	BC,512
	CALL	XFER
	POP	HL			; copy data to $SECBUF
	LD	A,(IX+8)
	LD	(D7FC2),A		; set current record
	LD	C,1			; 1 sector
	RES	3,(IX+4)		; transfer not via page 2 driver
	CALL	C77B4			; write sector
	POP	BC
	POP	HL
	RET	C			; error, quit
	CALL	C7C37			; wait 25 ms
	AND	A
	DEC	B			; more sectors ?
	RET	Z			; nope, quit
	JR	J75D5

J75BA:	PUSH	HL
	LD	HL,($SECBUF)
	LD	C,1			; 1 sector
	CALL	C7627			; read sector (via page 1 driver)
	POP	HL
	RET	C			; error, quit
	PUSH	HL
	PUSH	BC
	EX	DE,HL
	LD	HL,($SECBUF)
	LD	BC,512
	CALL	XFER			; copy to transfer address
	POP	BC
	POP	HL
	DEC	B			; more sectors ?
	RET	Z			; nope, quit
J75D5:	INC	H
	INC	H			; update transfer address
	CALL	C75FD			; prepare for next sector

J75DA:	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	A,8+1
	JR	NZ,J75E4		; nope,
	LD	A,9+1
J75E4:	SUB	(IX+8)			; - current record
	CP	B			; all sectors on this track ?
	JR	NC,J75ED		; yep,
	LD	C,A			; sectors until end of track
	JR	J75EE

J75ED:	LD	C,B
J75EE:	PUSH	BC
	CALL	C7627			; read/write sectors (via page 1 driver)
	POP	BC
	RET	C			; error, quit
	LD	A,B
	SUB	C
	LD	B,A
	RET	Z
	CALL	C7615			; prepare for first sector on next track
	JR	J75DA			; direct access dskio

;	  Subroutine prepare for next sector
;	     Inputs  ________________________
;	     Outputs ________________________

C75FD:	LD	A,(IX+8)		; current record
	INC	A
	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	D,8+1
	JR	NZ,J760B
	LD	D,9+1
J760B:	CP	D
	JR	NC,C7615		; prepare for first sector on next track

;	  Subroutine select sector on track
;	     Inputs  ________________________
;	     Outputs ________________________

C760E:	LD	(D7FC2),A
	LD	(IX+8),A
	RET

;	  Subroutine prepare for first sector on next track
;	     Inputs  ________________________
;	     Outputs ________________________

C7615:	LD	A,1			; sector 1
	CALL	C760E			; select sector on track
	CALL	C7C21			; wait fdc ready
	CALL	C7C28			; 2x step in with, 1x track update
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	INC	(IX+6)			; next track
	RET

;	  Subroutine read/write sectors (via page 1 driver)
;	     Inputs  ________________________
;	     Outputs ________________________

C7627:	RES	3,(IX+4)		; transfer via page 1 driver

;	  Subroutine read/write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C762B:	BIT	2,(IX+4)		; dskio read operation ?
	JP	NZ,J76CA		; nope,

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

	LD	D,3			; 3 full track retries
	JR	J764A

J7636:	PUSH	HL
	CALL	C7B99			; restore (seek to track 0)
	POP	HL
	RET	C
	PUSH	BC
	LD	C,(IX+6)		; current track
	CALL	C7C6A			; seek to track
	POP	BC
	LD	A,(IX+8)
	LD	(D7FC2),A		; set current record
J764A:	LD	(IX+11),0		; track reshuffle tries
J764E:	LD	E,5

J7650:	CALL	C79E6			; check if media in diskdrive
	JR	C,J76B3			; nope,
	PUSH	DE
	BIT	3,(IX+4)		; transfer via page 2 driver ?
	JR	Z,J7661			; nope,
	CALL	C7E57			; read multiple sectors to page 1
	JR	J7664

J7661:	CALL	C77EC			; read multiple sectors
J7664:	POP	DE
	JR	C,J76B3			; unrecoverable error, quit
	JR	Z,J76B9			; no error,
	PUSH	AF
	PUSH	BC
	LD	A,(D7FC2)
	LD	B,(IX+8)
	LD	(IX+8),A		; update current record
	SUB	B
	LD	B,A			; number of records succesfull read
	CALL	C76C5			; update transfer address
	LD	A,C
	SUB	B
	POP	BC
	LD	C,A
	POP	AF
	CP	8
	JR	Z,J7685
	DEC	E
	JR	NZ,J7650		; next try
J7685:	SET	2,(IX+2)		; reshuffle done
	INC	(IX+11)			; increase track reshuffle tries
	LD	E,(IX+11)
	DEC	E			; 01H ?
	JR	Z,J76A9			; yep, 2x step in, 1x step out and retry
	DEC	E			; 02H ?
	JR	NZ,J769D		; nope,
	CALL	C7C4B			; step out without trackupdate
J7698:	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	JR	J764E

J769D:	DEC	E			; 03H ?
	JR	Z,J7698			; yep, 1x step out and retry
	DEC	E			; 04H ?
	JR	NZ,J76AE		; nope,
	CALL	C7C16			; 2x step in without trackupdate
	CALL	C7C19			; step in without trackupdate
J76A9:	CALL	C7BEE			; 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	JR	J764E

J76AE:	DEC	D
	JP	NZ,J7636		; next full track retry
	SCF
J76B3:	PUSH	AF
	CALL	C7C5A			; step according to reshuffle count
	POP	AF
	RET

J76B9:	CALL	C7C5A			; step according to reshuffle count
J76BC:	LD	A,(IX+8)
	ADD	A,C
	DEC	A
	LD	(IX+8),A
	LD	A,C

;	  Subroutine update transfer address
;	     Inputs  ________________________
;	     Outputs ________________________

C76C5:	RLCA
	ADD	A,H
	LD	H,A
	XOR	A
	RET

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

J76CA:	CALL	C79FD			; check if write protected
	RET	C			; not ready or write protected, quit
	LD	A,(D7FC1)
	AND	A			; currently on track 0 ?
	JR	NZ,J76ED		; nope,
	LD	A,(IX+8)
	DEC	A			; record 1 ?
	JR	Z,J76ED			; yep,
	INC	A
	PUSH	HL
	PUSH	BC
	CALL	C7989			; calculate record range mask
	POP	BC
	SRL	H
	RR	L
	LD	A,(IX+9)
	AND	L			; mask with record mask
	CP	L			; less or more records ?
	POP	HL
	JR	Z,J771B			; nope, skip mask update
J76ED:	PUSH	HL
	CALL	C773A			; verify records
	POP	HL
	RET	C
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	LD	D,(IX+9)		; save current record mask
	PUSH	DE
	CALL	C7762			; verify records on track
	POP	DE
	JR	C,J772A			; error, 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	LD	A,(IX+9)
	LD	(IX+9),D		; restore record mask
	LD	D,A
	PUSH	DE
	CALL	C7762			; verify records on track
	POP	DE
	JR	C,J7730			; error, step out without trackupdate and wait 25 ms, clear mask
	LD	A,(IX+9)
	AND	D
	LD	(IX+9),A		; update record mask
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
J771B:	LD	A,(IX+8)
	LD	(D7FC2),A		; set current record
	CALL	C77B4			; write sectors
	RET	C
	CALL	C7C37			; wait 25 ms
	AND	A
	RET

J772A:	PUSH	AF
	CALL	C7BEE			; 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	JR	J7734

J7730:	PUSH	AF
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
J7734:	LD	(IX+9),0		; mask all records off
	POP	AF
	RET

;	  Subroutine verify records
;	     Inputs  ________________________
;	     Outputs ________________________

C773A:	LD	D,3			; 3 tries
J773C:	LD	A,(IX+8)		; current record
	PUSH	DE
	PUSH	BC
	CALL	C78F6			; verify records on track
	POP	BC
	JR	C,J7760			; error,
	SBC	HL,DE			; all records found ?
	JR	Z,J7760			; yep, quit
	POP	DE
	DEC	D			; all trys done ?
	SCF
	LD	A,8
	RET	Z			; yep, quit with record not found error
	CALL	C7B99			; restore (seek to track 0)
	RET	C
	PUSH	BC
	LD	C,(IX+6)		; current track
	CALL	C7C6A			; seek to track
	POP	BC
	JP	J773C			; next try

J7760:	POP	DE
	RET

;	  Subroutine verify records on track
;	     Inputs  ________________________
;	     Outputs ________________________

C7762:	LD	A,(IX+8)		; current record
	PUSH	HL
	PUSH	BC
	CALL	C78F6			; verify records on track
	JR	NC,J7770		; no error,
J776C:	POP	BC
	POP	HL
	SCF				; quit with error
	RET

J7770:	LD	A,(D7FC1)
	AND	A			; currently on track 0 ?
	JR	NZ,J7789		; nope,
	LD	E,(IX+9)
	LD	D,0
	EX	DE,HL			; record mask
	ADD	HL,HL
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A			; invert
	LD	A,D
	AND	H
	LD	H,A
	LD	A,E
	AND	L
	LD	L,A
J7789:	LD	B,15
J778B:	SRL	H
	RR	L
	JR	C,J7796
	DJNZ	J778B
	POP	BC
	POP	HL
	RET

J7796:	DEC	B
	LD	A,15
	SUB	B
	PUSH	AF
	LD	C,1
J779D:	SRL	H
	RR	L
	JR	NC,J77A9
	INC	C
	DJNZ	J779D
	POP	AF
	JR	J776C			; quit with error

J77A9:	DEC	B
	POP	AF
	PUSH	HL
	PUSH	BC
	CALL	C7885			; erase sectors
	POP	BC
	POP	HL
	JR	J778B

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C77B4:	LD	E,5
J77B6:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	PUSH	DE
	BIT	3,(IX+4)		; transfer via page 2 driver ?
	JR	Z,J77C6			; nope,
	CALL	C7E8C			; write multiple sectors from page 1
	JR	J77C9

J77C6:	CALL	C7839			; write multiple sectors
J77C9:	POP	DE
	RET	C			; unrecoverable error, quit
	JP	Z,J76BC			; no error,
	PUSH	AF
	PUSH	BC
	LD	A,(D7FC2)
	LD	B,(IX+8)
	LD	(IX+8),A		; update current record
	SUB	B
	LD	B,A			; number or records successfull written
	CALL	C76C5			; update transfer address
	LD	A,C
	SUB	B
	POP	BC
	LD	C,A
	POP	AF
	CP	8
	SCF
	RET	Z
	DEC	E
	JR	NZ,J77B6
	SCF
	RET

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C77EC:	CALL	C7C21			; wait fdc ready
	PUSH	HL
	PUSH	BC
	LD	B,0
	SLA	C
	LD	DE,I7821
	PUSH	DE
	CALL	C78F1			; disable ints
	LD	A,90H
	LD	(D7FC0),A		; read multiple sectors
J7801:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J7801
	LD	A,(D7FC3)
	LD	(HL),A
	INC	HL
	DJNZ	J7801
	DEC	C
	JP	NZ,J7801
J7812:	LD	B,80
J7814:	LD	A,(DE)
	ADD	A,A
	RET	C
	DJNZ	J7814

;	  Subroutine terminate fdc command
;	     Inputs  ________________________
;	     Outputs ________________________

C7819:	LD	A,0D0H
	LD	(D7FC0),A
	EX	(SP),HL
	EX	(SP),HL
	RET

I7821:	POP	BC
	POP	HL

;	  Subroutine enable ints and check if error (after read)
;	     Inputs  ________________________
;	     Outputs ________________________

C7823:	LD	A,(D7FC0)
	EI
C7827:	AND	1CH			; ignore not ready, write protect, record type, drq and busy bits
	RET	Z			; no errors, quit
	LD	E,A
	BIT	4,E			; record not found ?
	LD	A,8 
	RET	NZ			; yep, return RECORD NOT FOUND error, recoverable
	BIT	3,E			; crc error ?
	LD	A,4
	RET	NZ			; yep, return CRC error, recoverable
J7835:	SCF
	LD	A,12			; return OTHER ERROR, unrecoverable
	RET

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C7839:	CALL	C7C21			; wait fdc ready
	PUSH	HL
	PUSH	BC
	LD	B,0
	SLA	C
	LD	DE,I7862
	PUSH	DE
	CALL	C78F1			; disable ints
	LD	A,0B0H
	LD	(D7FC0),A		; write multiple sectors
J784E:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J784E
	LD	A,(HL)
	LD	(D7FC3),A
	INC	HL
	DJNZ	J784E
	DEC	C
	JP	NZ,J784E
	JP	J7812			; read max 80 bytes and terminate fdc command

I7862:	POP	BC
	POP	HL

;	  Subroutine enable ints and check if error (after write)
;	     Inputs  ________________________
;	     Outputs ________________________

C7864:	LD	A,(D7FC0)
	EI
	AND	5CH			; ignore not ready, record type, drq, busy bits
	RET	Z
	LD	E,A
	BIT	4,E			; record not found ?
	LD	A,8			; RECORD NOT FOUND error, recoverable
	RET	NZ
	BIT	3,E			; crc error ?
	LD	A,4			; CRC error, recoverable
	RET	NZ
	SCF
	BIT	6,E			; write protect ?
	JR	NZ,J787E		; yep, check if really a write protect error
	LD	A,12			; OTHER error, unrecoverable
	RET

J787E:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error, unrecoverable
	XOR	A
	SCF				; WRITE PROTECT error, unrecoverable
	RET

;	  Subroutine erase sectors
;	     Inputs  A = start record, C = number of records
;	     Outputs ________________________

C7885:	LD	(D7FC2),A		; set record
	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	C7C21			; wait fdc ready
	LD	B,0FFH
	SLA	C
	LD	L,1
	BIT	0,(IX+5)		; diskdrive 0 ?
	JR	Z,J789B			; yep,
	INC	L
J789B:	LD	A,0CH			; ? on, motor on
	OR	L
	LD	L,A
	LD	DE,I78CA
	PUSH	DE
	CALL	C78F1			; disable ints
	LD	A,0B0H
	LD	(D7FC0),A		; write multiple sectors
J78AB:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J78AB
	LD	(D7FC3),A		; dummy data
	LD	A,L
	LD	(D7FE0),A		; ? on, motor on, select diskdrive
J78B8:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J78B8
	LD	(D7FC3),A		; dummy data
	DJNZ	J78B8
	DEC	C
	JP	NZ,J78B8
	JP	J7812			; read max 80 bytes and terminate fdc command

I78CA:	LD	A,L
	AND	0F7H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive
	CALL	C7864			; enable ints and check if error (after write)
	POP	HL
	POP	BC
	POP	DE
	RET	C			; error, quit
	LD	A,(D7FC1)
	AND	A			; currently on track 0 ?
	RET	NZ			; nope, quit
	PUSH	HL
	PUSH	BC
	LD	A,D			; start record
	CALL	C7989			; calculate record range mask
	SRL	H
	RR	L
	LD	A,(IX+9)
	OR	L
	LD	(IX+9),A		; update record mask
	POP	BC
	POP	HL
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C78F1:	LD	DE,D7FE0
	DI
	RET

;	  Subroutine verify records on track
;	     Inputs  A = start record, C = number of records
;	     Outputs ________________________

C78F6:	CALL	C7989			; calculate record range mask
	PUSH	HL
	POP	IY			; save mask
	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	LD	D,H
	LD	E,L
	INC	DE
	LD	BC,17-1
	LD	(HL),0
	LDIR
	LD	B,27			;
J790D:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	PUSH	BC
	CALL	C79A4			; read address
	JR	NC,J7922		; no error,
	CP	4			; crc error ?
	JR	Z,J7958			; try next
	POP	BC
	CP	8			; record not found error ?
	SCF
	RET	NZ			; nope, quit
	JR	C795B			; create sectors found bitmask with mask off

J7922:	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	LD	B,0
	DEC	C			; record to zero based
	ADD	HL,BC
	INC	(HL)			; record found
	CALL	C795B			; create sectors found bitmask with mask off
	SBC	HL,DE			; all sector found ?
	JR	NZ,J7937		; nope, continue
	LD	H,D
	LD	L,E
	POP	BC
	RET

J7937:	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	B,8
	JR	NZ,J7946
	LD	B,9
J7946:	LD	A,(HL)
	INC	HL
	CP	5			; record found more than 4 times ?
	JR	NC,J7955		; yep,
	AND	A			; record not found at all ?
	JR	Z,J7958			; yep, next try
	DJNZ	J7946
	POP	BC
	LD	H,D
	LD	L,E
	RET

J7955:	POP	BC
	JR	C795B			; create sectors found bitmask with mask off

J7958:	POP	BC
	DJNZ	J790D

;	  Subroutine create sectors found bitmask with mask off
;	     Inputs  ________________________
;	     Outputs ________________________

C795B:	CALL	C7968			; create sectors found bitmask
	PUSH	IY
	POP	DE			; range mask
	LD	A,H
	AND	D
	LD	H,A
	LD	A,L
	AND	E
	LD	L,A			; mask off
	RET

;	  Subroutine create sectors found bitmask
;	     Inputs  ________________________
;	     Outputs ________________________

C7968:	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	LD	DE,0
	LD	B,9
J7972:	PUSH	HL
	LD	A,(HL)
	AND	A			; record not found ?
	JR	Z,J7983			; yep,
	LD	A,10
	SUB	B
	CALL	C7999			; calculate set mask
	LD	A,D
	OR	H
	LD	D,A
	LD	A,E
	OR	L
	LD	E,A			; set sector bit
J7983:	POP	HL
	INC	HL
	DJNZ	J7972
	EX	DE,HL
	RET

;	  Subroutine calculate record range mask
;	     Inputs  A = start record, C = number of records
;	     Outputs ________________________

C7989:	CALL	C7999			; calculate set mask
J798C:	DEC	C
	RET	Z
	LD	D,H
	LD	E,L
	ADD	HL,HL
	LD	A,D
	OR	H
	LD	H,A
	LD	A,E
	OR	L
	LD	L,A
	JR	J798C

;	  Subroutine calculate set mask
;	     Inputs  ________________________
;	     Outputs ________________________

C7999:	LD	HL,0
	AND	A
	RET	Z
	INC	HL
J799F:	DEC	A
	RET	Z
	ADD	HL,HL
	JR	J799F

;	  Subroutine read address
;	     Inputs  ________________________
;	     Outputs ________________________

C79A4:	LD	DE,I79D5
	PUSH	DE
	CALL	C78F1			; disable ints
	LD	B,3
	LD	A,0C0H
	LD	(D7FC0),A		; read address
J79B2:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J79B2
	LD	A,(D7FC3)
	DJNZ	J79B2
	LD	C,A			; record number
	LD	B,3
J79C0:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J79C0
	LD	A,(D7FC3)
	DJNZ	J79C0
	LD	B,80
J79CD:	LD	A,(DE)
	ADD	A,A
	RET	C
	DJNZ	J79CD
	JP	C7819			; terminate fdc command

I79D5:	CALL	C7823			; enable ints and check if error (after read)
	RET	C			; unrecoverable error, quit
	SCF
	RET	NZ			; recoverable error, quit
	LD	A,(D7FC2)
	CP	(IX+6)			; on current track ?
	RET	Z			; yep, quit
	LD	A,8
	SCF				; RECORD NOT FOUND error
	RET

;	  Subroutine check if media in diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

C79E6:	CALL	C7C21			; wait fdc ready
	PUSH	BC
	LD	B,1
	BIT	0,(IX+5)		; diskdrive 0 ?
	JR	Z,J79F3			; yep,
	INC	B
J79F3:	LD	A,(D7FE0)
	AND	B
	POP	BC
	RET	Z
J79F9:	LD	A,2
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C79FD:	CALL	C7C21			; wait fdc ready
	AND	20H			; write protected ?
	RET	Z			; nope, quit
	JP	J787E			; check if really a write protect error

;	  Subroutine preprare for dskio
;	     Inputs  ________________________
;	     Outputs ________________________

C7A06:	CP	1+1			; driveid valid ?
	JR	NC,J7A13		; nope, quit with OTHER ERROR
	PUSH	AF
	LD	A,C
	AND	0F9H
	CP	0F8H			; single media ?
	JR	Z,J7A16			; yep, continue
	POP	AF
J7A13:	JP	J7835			; nope, quit with OTHER ERROR

J7A16:	RES	0,(IX+1)		; assume 80 tracks
	BIT	2,C			; 80 track media ?
	JR	Z,J7A22
	SET	0,(IX+1)		; 40 tracks media
J7A22:	EX	(SP),HL
	CALL	C7C21			; wait fdc ready
	PUSH	HL
	PUSH	BC
	BIT	1,C			; 8 sectors per track ?
	LD	C,E
	LD	B,D
	SET	1,(IX+1)		; assume 8 sectors per track
	LD	DE,8
	JR	NZ,J7A3A		; yep,
	RES	1,(IX+1)		; 9 sectors per track
	INC	DE
J7A3A:	CALL	DIV16
	LD	E,L
	INC	E			; record number (1 based)
	LD	L,C
	POP	BC
	LD	C,L			; track
	POP	AF
	CALL	C7AD4			; prepare for diskdrive
	POP	HL
	RET	C			; error, quit
	BIT	0,(IX+2)		; disk verified ok ?
	JR	NZ,J7ABD		; yep, skip prepare part 2
	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	BIT	2,(IX+4)		; dskio read operation ?
	JR	NZ,J7A6C		; nope,
	BIT	0,(IX+1)		; 80 tracks media ?
	JR	NZ,J7ABD		; nope, skip prepare part 2
	BIT	2,(IX+2)		; reshuffle done ?
	JR	Z,J7ABD			; nope, skip prepare part 2
	BIT	1,(IX+2)		; TRoffset invalid ?
	JR	NZ,J7ABD		; yep, skip prepare part 2
	JR	J7A82			; prepare part 2

J7A6C:	BIT	1,(IX+2)		; TRoffset invalid ?
	JP	NZ,J7835		; yep, quit with OTHER ERROR
	CALL	C7819			; terminate fdc command
	CALL	C79FD			; check if write protected
	RET	C			; not ready or write protected, quit
	BIT	0,(IX+1)		; 80 tracks media ?
	LD	A,0
	SCF
	RET	NZ			; 40 tracks media, quit with WRITE PROTECT error
J7A82:	PUSH	HL
	PUSH	DE
	PUSH	BC
	DI
	LD	IY,0
	ADD	IY,SP
	PUSH	IY
	POP	DE
	LD	IY,($SECBUF)
	LD	(IY+0),E
	LD	(IY+1),D		; save current stackpointer
	LD	DE,512
	ADD	IY,DE
	LD	SP,IY			; temporary stack in $SECBUF (make sure stack is in page 3)
	CALL	C744D			; enable disk driver ROM on page 2
	CALL	C837C			; prepare for disk io (part 2)
	CALL	C745D			; enable RAM on page 2
	LD	IY,($SECBUF)
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IY
	LD	SP,IY			; restore current stackpointer
	EI
	POP	BC
	POP	DE
	POP	HL
	RET	C
J7ABD:	LD	A,E
	CALL	C760E			; select sector on track
	LD	(IX+6),C		; set current track
	LD	A,(D7FC1)
	CP	C			; same track as current ?
	RET	Z			; yep, quit
	PUSH	AF
	CALL	C7C6A			; seek to track
	POP	AF
	JP	NC,C7C37		; seek was to a lower track: wait 25 ms and quit
	JP	J7BF1			; seek was to a higher track: step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms and quit

;	  Subroutine prepare for diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

C7AD4:	PUSH	AF
	DI
	LD	A,04H
	LD	(D7FE0),A		; ? off, motor on, deselect diskdrive
	LD	A,(IX+0)
	LD	(IX+0),0FFH
	EI
	AND	A			; was motor off ?
	CALL	Z,C7B59			; yep, wait (for motor spin up)
	POP	HL
	LD	A,(IX+13)
	DEC	A			; 2 physical diskdrives ?
	JR	Z,J7AEF			; nope, use diskdrive 0
	LD	A,H
J7AEF:	INC	A
	OR	04H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive
	PUSH	HL
	CALL	C7B62			; wait for index mark
	POP	HL
	RET	C			; timeout, quit with OTHER ERROR
	LD	A,(IX+13)
	DEC	A			; 2 physical diskdrives ?
	JR	Z,J7B36			; nope,
	LD	A,(IX+5)
	CP	H			; same physical diskdrive ?
	RET	Z			; yep, quit

;	  Subroutine switch diskdrive variables
;	     Inputs  ________________________
;	     Outputs ________________________

J7B06:	XOR	01H
	LD	(IX+5),A
	LD	A,(D7FC1)
	PUSH	BC
	LD	B,(IX+7)
	LD	(IX+7),A		; save track of old diskdrive
	LD	A,B
	LD	(D7FC1),A		; set trackregister to track of new diskdrive
	PUSH	IX
	POP	HL
	LD	B,3
J7B1E:	INC	HL
	LD	A,(HL)
	RRCA
	RRCA
	RRCA
	RRCA
	LD	(HL),A
	DJNZ	J7B1E			; switch status flags diskdrive
	LD	B,(IX+10)		; record mask other drive
	LD	A,(IX+9)		; record mask current drive
	LD	(IX+10),A
	LD	(IX+9),B		; switch record mask
	POP	BC
	AND	A
	RET

J7B36:	LD	A,H
	BIT	0,(IX+4)		; currently phantom drive 0
	JR	Z,J7B46			; yep,
	CP	1			; currently phantom drive 1, requested drive also 1 ?
	RET	Z			; yep, quit
	RES	0,(IX+4)		; currently phantom drive 0
	JR	J7B4C

J7B46:	AND	A			; currently phantom drive 0, requested drive also 0 ?
	RET	Z			; yep, quit
	SET	0,(IX+4)		; currently phantom drive 1
J7B4C:	PUSH	IX
	PUSH	DE
	PUSH	BC
	CALL	PROMPT
	POP	BC
	POP	DE
	POP	IX
	AND	A
	RET

;	  Subroutine wait (for motor spin up)
;	     Inputs  ________________________
;	     Outputs ________________________

C7B59:	LD	HL,0
J7B5C:	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,J7B5C
	RET

;	  Subroutine wait for index mark
;	     Inputs  ________________________
;	     Outputs ________________________

C7B62:	CALL	C7819			; terminate fdc command
	LD	HL,0
J7B68:	LD	A,(D7FC0)
	AND	02H			; at index mark ?
	JR	Z,J7B77			; nope, wait for index mark
	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,J7B68
	JP	J7835			; quit with OTHER ERROR

J7B77:	LD	HL,0
J7B7A:	LD	A,(D7FC0)
	AND	02H			; at index mark ?
	RET	NZ			; yep, quit
	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,J7B7A
	JP	J7835			; quit with OTHER ERROR

;	  Subroutine select drive, restore with forced zero
;	     Inputs  ________________________
;	     Outputs ________________________

C7B88:	LD	(D7FE0),A		;
	LD	IX,J7D1E+1-3		; use fake workarea in rom (track offset 2)

;	  Subroutine restore with forced zero
;	     Inputs  ________________________
;	     Outputs ________________________

C7B8F:	LD	A,(IX+3)
	AND	0F0H
	OR	2
	LD	(IX+3),A

;	  Subroutine restore (seek to track 0)
;	     Inputs  ________________________
;	     Outputs ________________________

C7B99:	LD	H,10
J7B9B:	LD	L,0
	PUSH	BC
	LD	B,4
J7BA0:	CALL	C7BEE			; 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	RRA
	RRA				; at track 0 ?
	JR	NC,J7BA9		; nope,
	LD	L,1			; track 0 reached
J7BA9:	DJNZ	J7BA0
	POP	BC
	DEC	L			; track 0 reached ?
	JR	NZ,J7BB4		; nope,
	DEC	H
	JR	NZ,J7B9B		; next
	JR	J7BCC

J7BB4:	CALL	C7C16			; 2x step in without trackupdate
	CALL	C7C2F			; 2x step in without trackupdate, wait 25 ms
	LD	HL,0180H
J7BBD:	CALL	C7C4B			; step out without trackupdate
	RRA
	RRA				; at track 0 ?
	JR	C,J7BCF			; yep,
	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,J7BBD
	LD	(D7FC1),A		; track register = 0
J7BCC:	JP	J7835			; quit with OTHER ERROR

J7BCF:	XOR	A
	LD	(D7FC1),A		; track register = 0
	CALL	C7C37			; wait 25 ms
	CALL	C7C16			; 2x step in without trackupdate
	CALL	C7C16			; 2x step in without trackupdate

;	  Subroutine apply TRoffset
;	     Inputs  ________________________
;	     Outputs ________________________
;			00	2x step out
;			01	1x step out
;			02	1x step in, 1x step out
;			03	2x step in, 1x step out
;			04	3x step in, 1x step out

C7BDC:	LD	A,(IX+3)
	AND	0FH
	SUB	2
	JP	M,J7BFB
	JR	Z,J7BF1			; step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	DEC	A
	JR	Z,C7BEE			; 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms

;	  Subroutine 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7BEB:	CALL	C7C19			; step in without trackupdate

;	  Subroutine 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7BEE:	CALL	C7C19			; step in without trackupdate

;	  Subroutine step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

J7BF1:	CALL	C7C32			; step in without trackupdate, wait 25 ms
	CALL	C7C37			; wait 25 ms

;	  Subroutine step out without trackupdate and wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7BF7:	LD	A,60H			; step out without trackupdate
	JR	J7C34			; execute seek command, wait ready and wait 25 ms

;	  Subroutine __________________________
;	     Inputs  A = ?
;	     Outputs ________________________

J7BFB:	CALL	C7C37			; wait 25 ms
	INC	A			; FFH ?
	JR	Z,J7C04			; yep, step out without trackupdate and wait 25 ms

;	  Subroutine 2x step out without trackupdate and wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

J7C01:	CALL	C7C4B			; step out without trackupdate
J7C04:	JR	C7BF7			; step out without trackupdate and wait 25 ms

;	  Subroutine 5x step out without trackupdate and wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

?7C06:	CALL	C7C48			; 2x step out without trackupdate
	CALL	C7C4B			; step out without trackupdate
	JR	J7C01			; 2x step out without trackupdate and wait 25 ms

;	  Subroutine 7x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

?7C0E:	CALL	C7C16			; 2x step in without trackupdate

;	  Subroutine 5x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7C11:	CALL	C7C16			; 2x step in without trackupdate
	JR	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms

;	  Subroutine 2x step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C7C16:	CALL	C7C19			; step in without trackupdate

;	  Subroutine step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C7C19:	LD	A,40H			; step in without trackupdate
					; execute seek command and wait ready

;	  Subroutine execute seek command and wait ready
;	     Inputs  ________________________
;	     Outputs ________________________

C7C1B:	LD	(D7FC0),A
	EX	(SP),HL
	NOP
	EX	(SP),HL

;	  Subroutine wait fdc ready
;	     Inputs  ________________________
;	     Outputs ________________________

C7C21:	LD	A,(D7FC0)
	RRA
	JR	C,C7C21
	RET

;	  Subroutine 2x step in, 1x track update
;	     Inputs  ________________________
;	     Outputs ________________________

C7C28:	CALL	C7C19			; step in without trackupdate

;	  Subroutine step in, with track update
;	     Inputs  ________________________
;	     Outputs ________________________

C7C2B:	LD	A,50H			; step in with trackupdate
	JR	C7C1B			; execute seek command and wait ready

;	  Subroutine 2x step in without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7C2F:	CALL	C7C19			; step in without trackupdate

;	  Subroutine step in without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7C32:	LD	A,40H			; step in without trackupdate
					; execute seek command, wait ready and wait 25 ms

;	  Subroutine execute seek command, wait ready and wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

J7C34:	CALL	C7C1B			; execute seek command and wait ready

;	  Subroutine wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

C7C37:	PUSH	BC
	LD	BC,0E418H
J7C3B:	DJNZ	J7C3B
	DEC	C
	JR	NZ,J7C3B
	POP	BC
	AND	A
	RET

;	  Subroutine 2x step out without trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

?7C43:	CALL	C7C4B			; step out without trackupdate
	JR	C7BF7			; step out without trackupdate and wait 25 ms

;	  Subroutine 2x step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C7C48:	CALL	C7C4B			; step out without trackupdate

;	  Subroutine step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C7C4B:	LD	A,60H			; step out without trackupdate
	JR	C7C1B			; execute seek command and wait ready

;	  Subroutine 2x step out, 1x trackupdate, wait 25 ms
;	     Inputs  ________________________
;	     Outputs ________________________

?7C4F:	CALL	C7C4B			; step out without trackupdate
	LD	A,70H			; step out with trackupdate
	JR	J7C34			; execute seek command, wait ready and wait 25 ms

;	  Subroutine step out with trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

?7C56:	LD	A,70H			; step out with trackupdate
	JR	C7C1B			; execute seek command and wait ready

;	  Subroutine step according to reshuffle count
;	     Inputs  ________________________
;	     Outputs ________________________

C7C5A:	LD	A,(IX+11)
	AND	A			; 00H ?
	RET	Z			; yep, quit
	DEC	A			; 01H ?
	JR	Z,C7BF7			; yep, step out without trackupdate and wait 25 ms
	DEC	A			; 02H ?
	JR	Z,C7BEE			; yep, 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	DEC	A			; 03H ?
	JR	Z,C7BEB			; yep, 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	JR	J7C01			; 2x step out without trackupdate and wait 25 ms

;	  Subroutine seek to track
;	     Inputs  ________________________
;	     Outputs ________________________

C7C6A:	PUSH	HL
	LD	A,(D7FC1)
	LD	H,A			; current track
	CALL	C7C8A			; seek 1/2 distance
	LD	A,H
	CALL	C7C8A			; seek 1/2 distance
	BIT	0,(IX+1)		; 80 tracks media ?
	JR	Z,J7C84			; yep,
	LD	A,H
	CALL	C7C8A			; seek 1/2 distance
	LD	A,H
	CALL	C7C8A			; seek 1/2 distance
J7C84:	LD	A,C
	LD	(D7FC1),A		; update track register
	POP	HL
	RET

;	  Subroutine seek 1/2 distance
;	     Inputs  A = start track, C = end track
;	     Outputs ________________________

C7C8A:	ADD	A,A
	LD	(D7FC1),A		; fake double start position
	EX	(SP),HL
	EX	(SP),HL
	LD	A,C
	ADD	A,A
	LD	(D7FC3),A		; fake double end position (so number of steps is doubled)
	EX	(SP),HL
	EX	(SP),HL
	LD	A,10H			; seek
	JR	J7C1B			; execute seek command and wait ready

INIHRD:
	CALL	C7819			; terminate fdc command
	LD	HL,D7FF0
	LD	A,(HL)			; reset diskchange diskdrive 1
	LD	(HL),A			; reset diskchange diskdrive 0
	LD	A,05H			; ? off, motor on, select diskdrive 0
	CALL	C7B88			; select drive, restore with forced zero, apply track offset 2
	JR	C,J7CBD			; error,
	LD	A,06H			; ? off, motor on, select diskdrive 1
	CALL	C7B88			; select drive, restore with forced zero, apply track offset 2
	LD	A,1
	JR	C,J7CB4			; error, 1 physical drive found
	INC	A			; 2 physical drives found
J7CB4:	LD	(D7FC3),A
	LD	A,04H
	LD	(D7FE0),A		; ? off, motor on, deselect diskdrive
	RET

J7CBD:	XOR	A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	LD	HL,I7CE6
	CALL	C7CDD			; display string
	LD	B,5
J7CC9:	LD	A,7
	CALL	CHPUT			; beep
	CALL	C7C37			; wait 25 ms
	CALL	C7C37			; wait 25 ms
	DJNZ	J7CC9
	LD	A,0FFH
	LD	(ENSTOP),A
J7CDB:	JR	J7CDB			; wait forever

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________


C7CDD:	LD	A,(HL)
	AND	A
	RET	Z
	CALL	CHPUT
	INC	HL
	JR	C7CDD

I7CE6:	DEFB	7
	DEFB	12
	DEFB	10
	DEFB	" Please Reset MSX",13,10
	DEFB	"  after FDD power on!"
	DEFB	0

DRIVES:
	PUSH	AF
	CALL	C746C			; get pointer to workarea
	XOR	A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	LD	A,(D7FC3)
	LD	H,A			; number of physical drives
J7D1E:	CP	2			; 2 physical drives ?
	JR	C,J7D2D			; nope,
	POP	AF
	LD	L,2			; 2 (physical) drives
	JR	NZ,J7D34
	LD	L,1			; return 1 (physical) drive
	LD	H,1			; 1 physical drive
	JR	J7D34

J7D2D:	POP	AF
	LD	L,2			; 2 (phantom) drives
	JR	NZ,J7D34
	LD	L,1			; CTRL pressed, return 1 (physical) drive
J7D34:	LD	(IX+13),H
	RET

INIENV:
	CALL	GETWRK
J7D3B:	XOR	A
	LD	B,13
J7D3E:	LD	(HL),A
	INC	HL
	DJNZ	J7D3E
	LD	(IX+3),22H		; TRoffset = 2 both diskdrives
	LD	HL,I7D81
	JP	SETINT

OEMSTA:
	DI
	LD	IY,0
	ADD	IY,SP
	PUSH	IY
	POP	DE
	LD	IY,($SECBUF)
	LD	(IY+0),E
	LD	(IY+1),D		; save current stackpointer
	LD	DE,512
	ADD	IY,DE
	LD	SP,IY			; temporary stack in $SECBUF (make sure stack is in page 3)
	CALL	C744D			; enable disk driver ROM on page 2
	CALL	C8527			; OEMSTA (part 2)
	CALL	C745D			; enable RAM on page 2
	LD	IY,($SECBUF)
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IY
	LD	SP,IY			; restore current stackpointer
	EI
	RET

I7D81:	PUSH	AF
	CALL	GETWRK
	LD	A,(HL)
	AND	A
	JR	Z,J7D94
	CP	0FFH
	JR	Z,J7D94
	DEC	A
	LD	(HL),A
	JR	NZ,J7D94
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
J7D94:	POP	AF
	JP	PRVINT

MTOFF:
	CALL	GETWRK
	XOR	A
	LD	(IX+0),A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	RET

DSKCHG:
	CALL	C746C			; get pointer to workarea
	LD	D,A			; diskdrive
	PUSH	HL
	CALL	C7E1C			; select diskdrive variables
	POP	HL
	LD	A,D
	AND	A
	LD	A,(D7FE0)
	JR	Z,J7DC7
	BIT	1,(IX+13)		; 2 physical diskdrives ?
	JR	Z,J7DC7			; nope, use diskdrive 0
	LD	B,A
	AND	02H			; diskdrive ready ?
	JP	NZ,J79F9		; nope, quit with NOT READY error
	LD	A,(D7FF0)		; reset diskchange diskdrive 1
	LD	A,B
	LD	B,08H
	JR	J7DD3

J7DC7:	LD	B,A
	AND	01H			; diskdrive ready ?
	JP	NZ,J79F9		; nope, quit with NOT READY error
	LD	(D7FF0),A		; reset diskchange diskdrive 0
	LD	A,B
	LD	B,04H
J7DD3:	AND	B			; disk change ?
	LD	B,01H			; DISK UNCHANGED
	JR	NZ,J7DEB		; yep,
	BIT	2,(IX+1)		; status previous DSKCHG was CHANGED ?
	JR	Z,J7DEB			; nope,
	BIT	3,(IX+1)		; last dskio operation failed ?
	JR	NZ,J7E0E		; yep, DISK CHANGED
	BIT	3,(IX+2)		; previous DSKCHG had invalid mediabyte ?
	JR	NZ,J7E12		; yep, quit with OTHER error
	RET

J7DEB:	SET	2,(IX+1)		; flag disk changed
	CALL	C7E29			; clear disk flags
	LD	(IX+9),0		; mask off all records
	PUSH	HL
	LD	A,D
	LD	DE,1
	LD	HL,($SECBUF)
	AND	A
	CALL	DSKIO
	JR	C,J7E1A			; error, quit with error
	LD	HL,($SECBUF)
	LD	B,(HL)
	POP	HL
	CALL	GETDPB
	JR	C,J7E12			; error, quit with error
J7E0E:	LD	B,0FFH			; DISK CHANGED
	AND	A
	RET

J7E12:	SET	3,(IX+2)		; invalid mediabyte flag
	LD	A,0AH
	SCF
	RET

J7E1A:	POP	DE
	RET

;	  Subroutine select diskdrive variables
;	     Inputs  ________________________
;	     Outputs ________________________

C7E1C:	BIT	1,(IX+13)		; 2 physical diskdrives ?
	RET	Z			; nope, quit
	LD	A,(IX+5)
	CP	D			; same physical diskdrive ?
	RET	Z			; yep, quit
	JP	J7B06			; switch diskdrive variables

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C7E29:	LD	A,(IX+2)
	AND	0F0H
	LD	(IX+2),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

GETDPB:
	EX	DE,HL
	INC	DE
	LD	A,B
	AND	0F9H			; ignore 40/80 tracks, 8/9 sectors per track
	CP	0F8H			; media descriptor must be 0F8H-0FFH and single sided media
	SCF
	RET	NZ			; nope, quit with error
	LD	A,B
	AND	06H			; 40/80 tracks, 8/9 sectors per track
	LD	L,A
	LD	H,00H
	LD	C,L
	LD	B,H
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,I7405
	ADD	HL,BC
	LD	BC,18
	LDIR
	RET

?7E51:	BIT	2,(IX+4)		; dskio read operation ?
	JR	NZ,C7E8C		; nope,

;	  Subroutine read multiple sectors to page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C7E57:	DI
	LD	IY,0
	ADD	IY,SP
	PUSH	IY
	POP	DE
	LD	IY,($SECBUF)
	LD	(IY+0),E
	LD	(IY+1),D		; save current stackpointer
	LD	DE,512
	ADD	IY,DE
	LD	SP,IY			; temporary stack in $SECBUF (make sure stack is in page 3)
	CALL	C744D			; enable disk driver ROM on page 2
	CALL	C8000			; read multiple sectors to page 1
	CALL	C745D			; enable RAM on page 2
	LD	IY,($SECBUF)
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IY
	LD	SP,IY			; restore current stackpointer
	EI
	RET

;	  Subroutine write multiple sectors from page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C7E8C:	DI
	LD	IY,0
	ADD	IY,SP
	PUSH	IY
	POP	DE
	LD	IY,($SECBUF)
	LD	(IY+0),E
	LD	(IY+1),D		; save current stackpointer
	LD	DE,512
	ADD	IY,DE
	LD	SP,IY			; temporary stack in $SECBUF (make sure stack is in page 3)
	CALL	C744D			; enable disk driver ROM on page 2
	CALL	C806A			; write multiple sectors from page 1
	CALL	C745D			; enable RAM on page 2
	LD	IY,($SECBUF)
	LD	E,(IY+0)
	LD	D,(IY+1)
	PUSH	DE
	POP	IY
	LD	SP,IY			; restore current stackpointer
	EI
	RET

CHOICE:
	LD	HL,0
	RET

	DEFS	08000H-$,0

;	  Subroutine read multiple sectors to page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C8000:	PUSH	HL
	PUSH	BC
	LD	A,(RAMAD1)
	LD	H,40H
	CALL	ENASLT			; enable RAM on page 1
	POP	BC
	POP	HL
	CALL	C8021			; read multiple sectors
	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	ENAKRN			; enable disk kernel ROM on page 1 (make sure SSR are restored)
	LD	A,(IX+12)
	LD	H,40H
	CALL	ENASLT			; enable disk driver ROM on page 1
	POP	HL
	POP	BC
	POP	AF
	RET

;	  Subroutine read multiple sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C8021:	PUSH	HL
	PUSH	BC
	LD	DE,I8053
	PUSH	DE
	LD	DE,D7FE0+04000H
	LD	B,0
	SLA	C
	LD	A,90H
	LD	(D7FC0+04000H),A	; read multiple sectors
J8033:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J8033
	LD	A,(D7FC3+04000H)
	LD	(HL),A
	INC	HL
	DJNZ	J8033
	DEC	C
	JP	NZ,J8033
	LD	B,80
J8046:	LD	A,(DE)
	ADD	A,A
	RET	C
	DJNZ	J8046
	LD	A,0D0H
	LD	(D7FC0+04000H),A	; terminate fdc command
	EX	(SP),HL
	EX	(SP),HL
	RET

I8053:	POP	BC
	POP	HL
	LD	A,(D7FC0+04000H)
	AND	1CH			; ignore not ready, write protect, record type, drq and busy bits
	RET	Z			; no error, quit
	LD	E,A
	BIT	4,E			; record not found error ?
	LD	A,8
	RET	NZ			; yep, return RECORD NOT FOUND error, recoverable
	BIT	3,E			; crc error ?
	LD	A,4
	RET	NZ			; yep, return CRC error, recoverable
	SCF
	LD	A,12			; return OTHER error, not recoverable
	RET

;	  Subroutine write multiple sectors from page 1
;	     Inputs  ________________________
;	     Outputs ________________________

C806A:	PUSH	HL
	PUSH	BC
	LD	A,(RAMAD1)
	LD	H,40H
	CALL	ENASLT			; enable RAM on page 1
	POP	BC
	POP	HL
	CALL	C808B			; write multiple sectors
	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	ENAKRN			; enable disk kernel ROM on page 1 (make sure SSR are restored)
	LD	A,(IX+12)
	LD	H,40H
	CALL	ENASLT			; enable disk driver ROM on page 1
	POP	HL
	POP	BC
	POP	AF
	RET

;	  Subroutine write multiple sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C808B:	PUSH	HL
	PUSH	BC
	LD	DE,I80B6
	PUSH	DE
	LD	DE,D7FE0+04000H
	LD	B,0
	SLA	C
	LD	A,0B0H
	LD	(D7FC0+04000H),A	; write multiple sectors
J809D:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J809D
	LD	A,(HL)
	LD	(D7FC3+04000H),A
	INC	HL
	DJNZ	J809D
	DEC	C
	JP	NZ,J809D
	LD	A,0D0H
	LD	(D7FC0+04000H),A	; terminate fdc command
	EX	(SP),HL
	EX	(SP),HL
	RET

I80B6:	POP	BC
	POP	HL
	LD	A,(D7FC0+04000H)
	AND	5CH			; ignore not ready, record type, drq, busy bits
	RET	Z
	LD	E,A
	BIT	4,E			; record not found ?
	LD	A,8
	RET	NZ			; yep, return RECORD NOT FOUND error, recoverable
	BIT	3,E			; crc error ?
	LD	A,4
	RET	NZ			; yep, return CRC error, recoverable
	SCF
	BIT	6,E			; write protect error ?
	LD	A,0
	RET	NZ			; yep, return WRITE PROTECT error, unrecoverable
	LD	A,12			; OTHER error, unrecoverable
	RET

;	  Subroutine DSKFMT (part 2)
;	     Inputs  ________________________
;	     Outputs ________________________

C80D2:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	CALL	C7B8F			; restore with forced zero
	JR	NC,J80DF		; no error, continue
J80DB:	LD	A,10H
	SCF				; quit with error
	RET

J80DF:	RES	2,(IX+4)		; dskio read operation
	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	CALL	C833E			; erase track
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	CALL	C833E			; erase track
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	LD	C,0			; track 0
	CALL	C81C8			; format track
	RET	C			; error, quit
	LD	(IX+6),0		; set current track 0
	SET	2,(IX+4)		; dskio write operation
	PUSH	HL
	LD	HL,I8A3C
	LD	A,1			; sector 1
	CALL	C760E			; select sector on track
	LD	C,A			; 1 sector
	CALL	C8195			; write sector
	POP	HL
	RET	C			; error, quit
	LD	A,2			; sector 2
	CALL	C8168			; write 1st FAT sector (of first FAT)
	RET	C			; error, quit
	LD	A,4			; sector 4
	CALL	C8168			; write 1st FAT sector (of second FAT)
	RET	C			; error, quit
	CALL	C8173			; read all sectors of track
	RET	C			; error, quit
	CALL	C7C2B			; step in, with track update
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	LD	B,0			; no error
	LD	C,1			; track 1

J8131:	CALL	C833E			; erase track
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	CALL	C833E			; erase track
	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	CALL	C81C8			; format track
	RET	C			; error, quit
	PUSH	BC
	CALL	C8173			; read all sectors of track
	POP	BC
	JR	NC,J814D
	LD	B,A			; save error
J814D:	INC	C
	LD	A,C
	CP	80
	JR	Z,J815B
	CALL	C7C2B			; step in, with track update
	CALL	C7BEB			; 3x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	JR	J8131

J815B:	PUSH	BC
	CALL	C7B99			; restore (seek to track 0)
	POP	BC
	JP	C,J80DB			; error, quit with error
	LD	A,B
	AND	A			; error encountered ?
	RET	Z			; nope, quit
	SCF
	RET				; yep, quit with error

;	  Subroutine write 1st FAT sector
;	     Inputs  A = sector
;	     Outputs ________________________

C8168:	CALL	C760E			; select sector on track
	LD	HL,I8B01
	LD	C,1			; 1 sector
	JP	C8195			; write sector

;	  Subroutine read all sectors of track
;	     Inputs  ________________________
;	     Outputs ________________________

C8173:	LD	A,1
	LD	(D7FC2),A		; record = 1
	LD	D,16
J817A:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	LD	HL,04000H
	LD	A,(D7FC2)
	LD	C,A			; current record
	LD	A,9+1
	SUB	C
	LD	C,A
	PUSH	DE
	CALL	C8021			; read multiple sectors
	POP	DE
	RET	C			; unrecoverable error, quit
	RET	Z			; no error, quit
	DEC	D
	JR	NZ,J817A
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C8195:	LD	E,5
J8197:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	PUSH	DE
	CALL	C808B			; write multiple sectors
	POP	DE
	RET	C			; unrecoverable error, quit
	JP	Z,J76BC			; no error,
	PUSH	AF
	PUSH	BC
	LD	A,(D7FC2)		; current record
	LD	B,(IX+8)
	LD	(IX+8),A		; update current record
	SUB	B
	LD	B,A			; number of records succesfull written
	CALL	C76C5			; update transfer address
	LD	A,C
	SUB	B
	POP	BC
	LD	C,A
	POP	AF
	CP	08H	; 8 
	SCF
	RET	Z
	DEC	E
	JR	NZ,J8197
	SCF
	RET

J81C2:	DI
	CALL	C81C8			; format track
	EI
	RET

;	  Subroutine format track
;	     Inputs  ________________________
;	     Outputs ________________________

C81C8:	CALL	C7C21			; wait fdc ready
	PUSH	HL
	PUSH	BC
	LD	HL,I80B6
	PUSH	HL
	EX	DE,HL
	LD	DE,D7FE0
	EX	DE,HL
	LD	A,0F0H
	LD	E,1
	LD	(D7FC0),A		; format track
	EX	(SP),HL
	EX	(SP),HL
	LD	D,4EH	; "N"
	LD	B,50H	; "P"
J81E3:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J81E3
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J81E3
	LD	D,00H
	LD	B,0CH	; 12 
J81F3:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J81F3
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J81F3
	LD	D,0F6H
	LD	B,03H	; 3 
J8203:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8203
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J8203
J820F:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J820F
	LD	A,0FCH
	LD	(D7FC3),A
	LD	D,4EH	; "N"
	LD	B,32H	; "2"
J821E:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J821E
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J821E

J822A:	LD	D,00H
	LD	B,0CH	; 12 
J822E:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J822E
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J822E
	LD	D,0F5H
	LD	B,03H	; 3 
J823E:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J823E
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J823E
J824A:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J824A
	LD	A,0FEH
	LD	(D7FC3),A
J8255:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8255
	LD	A,C
	LD	(D7FC3),A
J825F:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J825F
	LD	A,00H
	LD	(D7FC3),A
J826A:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J826A
	LD	A,E
	LD	(D7FC3),A
J8274:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8274
	LD	A,02H	; 2 
	LD	(D7FC3),A
J827F:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J827F
	LD	A,0F7H
	LD	(D7FC3),A
	LD	D,4EH	; "N"
	LD	B,16H
J828E:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J828E
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J828E
	LD	D,00H
	LD	B,0CH	; 12 
J829E:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J829E
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J829E
	LD	D,0F5H
	LD	B,03H	; 3 
J82AE:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82AE
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J82AE
J82BA:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82BA
	LD	A,0FBH
	LD	(D7FC3),A
	LD	D,00H
J82C7:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82C7
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J82C7
J82D3:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82D3
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J82D3
J82DF:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82DF
	LD	A,0F7H
	LD	(D7FC3),A
	LD	D,4EH	; "N"
	LD	B,54H	; "T"
J82EE:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J82EE
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J82EE
	INC	E
	LD	A,E
	CP	9+1
	JP	NZ,J822A

	LD	D,4EH	; "N"
	LD	B,00H
J8305:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8305
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J8305
J8311:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8311
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J8311
J831D:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J831D
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J831D
J8329:	LD	A,(HL)
	ADD	A,A
	RET	C
	JP	P,J8329
	LD	A,D
	LD	(D7FC3),A
	DJNZ	J8329
	JP	C7819			; terminate fdc command

;	  Subroutine erase track (DI/EI)
;	     Inputs  ________________________
;	     Outputs ________________________

J8338:	DI
	CALL	C833E			; erase track
	EI
	RET

;	  Subroutine erase track
;	     Inputs  ________________________
;	     Outputs ________________________

C833E:	PUSH	BC
	LD	DE,I8370
	PUSH	DE
	LD	B,1
	BIT	0,(IX+5)		; diskdrive 0 ?
	JR	Z,J834C			; yep,
	INC	B
J834C:	LD	A,0CH			; ? on, motor on
	OR	B
	LD	B,A
	LD	DE,D7FE0
	LD	A,0F0H			; format track
	LD	(D7FC0),A
J8358:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J8358
	LD	(D7FC3),A		; 'random' data
	LD	A,B
	LD	(D7FE0),A		; ? on, motor on, select diskdrive
J8365:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J8365
	LD	(D7FC3),A
	JR	J8365

I8370:	LD	A,B
	AND	0F7H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive
	CALL	C7C37			; wait 25 ms
	POP	BC
	AND	A
	RET

;	  Subroutine prepare for disk io (part 2)
;	     Inputs  ________________________
;	     Outputs ________________________

C837C:	CALL	C7B8F			; restore with forced zero
	RET	C			; error, quit
	LD	HL,0			; reset record counter track offset biased
	LD	DE,0			; reset record counter
	LD	C,40			; track 40
	CALL	C8408			; count records around track
	RET	C			; error, quit
	LD	C,40-3			; track 37
	CALL	C8408			; count records around track
	RET	C			; error, quit
	PUSH	HL
	AND	A
	LD	HL,17
	SBC	HL,DE
	POP	HL			; found less then 18 sectors ?
	JR	NC,J83CF		; yep, quit with OTHER error
	LD	B,H
	LD	C,L
	PUSH	HL
	PUSH	DE
	CALL	DIV16			; record counter track offset biased / record counter track
	ADD	HL,HL
	POP	DE
	LD	A,E
	CP	L
	POP	HL
	JR	C,J83AE
	JR	Z,J83D7			; count records on highest and lowest track as well
J83AC:	JR	J83AF

J83AE:	INC	C
J83AF:	LD	A,C
	CP	7
	JR	Z,J83CF			; quit with OTHER error
	DEC	A
	JR	Z,J83CF			; quit with OTHER error
	DEC	A
	LD	B,A
	LD	A,(IX+3)
	AND	0F0H
	OR	B
	LD	(IX+3),A		; update TRoffset
	CALL	C7BDC			; apply TRoffset
	SET	0,(IX+2)		; disk verified ok
	RES	2,(IX+2)		; reset reshuffle done
	AND	A
	RET

J83CF:	LD	A,12
	SCF
	SET	1,(IX+2)		; TRoffset invalid
	RET

J83D7:	LD	C,78			; track 78
	CALL	C8408			; count records around track
	RET	C			; error, quit
	LD	C,78-3			; track 75
	CALL	C8408			; count records around track
	RET	C			; error, quit
	LD	C,6			; track 6
	CALL	C8408			; count records around track
	RET	C			; error, quit
	LD	C,6-3			; track 3
	CALL	C8408			; count records around track
	RET	C			; error, quit
	LD	B,H
	LD	C,L
	PUSH	HL
	PUSH	DE
	CALL	DIV16			; record counter track offset biased / record counter track
	ADD	HL,HL
	POP	DE
	LD	A,E
	CP	L
	POP	HL
	JR	C,J83AE
	JR	Z,J8401
	JR	J83AC

J8401:	LD	A,3
	CP	C
	JR	C,J83AC
	JR	J83AE

;	  Subroutine count records around track
;	     Inputs  HL = record counter track offset biased so far, DE = record counter so far
;	     Outputs HL = record counter track offset biased updated, DE = record counter updated

C8408:	LD	(IX+6),C		; set current track
	CALL	C7C6A			; seek to track
	CALL	C7C11			; 5x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	LD	B,7
J8413:	CALL	C7BF7			; step out without trackupdate and wait 25 ms
	CALL	C79E6			; check if media in diskdrive
	JR	C,J8442			; nope, quit
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	C8457			; count records on track
	JR	C,J843F			; error, quit
	LD	HL,0
	LD	D,L
J8427:	ADD	HL,DE
	DJNZ	J8427
	LD	B,H
	LD	C,L			; records on track * counter
	POP	HL
	ADD	HL,BC			; add
	LD	B,D
	LD	C,E			; records on track
	POP	DE
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL			; add records on track
	POP	BC
	DJNZ	J8413
J8437:	CALL	C7C16			; 2x step in without trackupdate
	CALL	C7BEE			; 2x step in without trackupdate, wait 50 ms, step out without trackupdate, wait 25 ms
	AND	A
	RET

J843F:	POP	HL
	POP	DE
	POP	BC
J8442:	PUSH	AF
	CALL	C8448
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C8448:	LD	A,07H	; 7 
	CP	B
	JP	Z,J7C09
	DEC	B
	JR	Z,J8437
	LD	A,05H	; 5 
	SUB	B
	JP	J7BE1

;	  Subroutine count records on track
;	     Inputs  ________________________
;	     Outputs E = number of records

C8457:	PUSH	HL
	PUSH	BC
	LD	A,1			; start record = 1
	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	C,8
	JR	NZ,J8465		; nope,
	LD	C,9
J8465:	CALL	C8478
	JR	C,J8475			; error, quit
	LD	E,0
	LD	B,16
J846E:	ADD	HL,HL
	JR	NC,J8472
	INC	E
J8472:	DJNZ	J846E
	AND	A
J8475:	POP	BC
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  A = start record, C = number of records
;	     Outputs ________________________

C8478:	CALL	C7989			; calculate record range mask
	PUSH	HL
	POP	IY			; save mask
	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	LD	D,H
	LD	E,L
	INC	DE
	LD	BC,17-1
	LD	(HL),0
	LDIR
	LD	B,27
J848F:	CALL	C79E6			; check if media in diskdrive
	RET	C			; nope, quit with NOT READY error
	PUSH	BC
	CALL	C84E2			; read address
	JR	NC,J84A5		; no error,
	CP	4			; crc error ?
	JR	Z,J84DC			; yep, try again
	POP	BC
	CP	8			; record not found error ?
	SCF
	RET	NZ			; nope, quit with error
	JP	C795B			; create sectors found bitmask with mask off

J84A5:	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	LD	B,0
	DEC	C			; record zero based
	ADD	HL,BC
	INC	(HL)			; record found
	CALL	C795B			; create sectors found bitmask with mask off
	SBC	HL,DE
	JR	NZ,J84BA
	LD	H,D
	LD	L,E
	POP	BC
	RET

J84BA:	LD	HL,($SECBUF)
	INC	HL
	INC	HL
	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	B,8
	JR	NZ,J84C9		; nope,
	LD	B,9
J84C9:	LD	A,(HL)
	INC	HL
	CP	5
	JR	NC,J84D8
	AND	A
	JR	Z,J84DC
	DJNZ	J84C9
	POP	BC
	LD	H,D
	LD	L,E
	RET

J84D8:	POP	BC
	JP	C795B			; create sectors found bitmask with mask off

J84DC:	POP	BC
	DJNZ	J848F
	JP	C795B			; create sectors found bitmask with mask off

;	  Subroutine read address
;	     Inputs  ________________________
;	     Outputs ________________________

C84E2:	LD	DE,I8513
	PUSH	DE
	LD	DE,D7FE0
	LD	B,3
	LD	A,0C0H
	LD	(D7FC0),A		; read address
J84F0:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J84F0
	LD	A,(D7FC3)
	DJNZ	J84F0
	LD	C,A			; record
	LD	B,3
J84FE:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J84FE
	LD	A,(D7FC3)
	DJNZ	J84FE
	LD	B,80
J850B:	LD	A,(DE)
	ADD	A,A
	RET	C
	DJNZ	J850B
	JP	C7819			; terminate fdc command

I8513:	LD	A,(D7FC0)
	CALL	C7827			; check if errors
	RET	C			; other error, quit
	SCF
	RET	NZ			; crc error or record not found, quit
	LD	A,(D7FC2)
	CP	(IX+6)			; same as current track ?
	RET	Z			; yep, quit
	LD	A,8			; RECORD NOT FOUND error
	SCF
	RET

;	  Subroutine OEMSTA handler
;	     Inputs  ________________________
;	     Outputs ________________________

C8527:	PUSH	HL
	PUSH	IX
	CALL	C746C			; get pointer to workarea
	LD	HL,PROCNM
	LD	A,(HL)
	INC	HL
	CP	"N"
	JP	Z,J8599			; check if CALL NI0I
	CP	"A"
	JP	Z,J867B			; check if CALL ANALYZER
	CP	"D"
	JP	Z,J8695			; check if CALL DRIVECHECK
	BIT	4,(IX+4)		; NI0I enabled ?
	JP	Z,J8623			; nope, quit statement handler
	CP	"G"
	JP	Z,J878D			; check if CALL GAMES
	CP	"R"
	JP	Z,J85F0			; check if CALL RES_A or CALL RES_B
	CP	"_"
	JP	Z,J85D9			; check if CALL _KIO
	CP	"M"
	JP	Z,J86B1			; check if CALL MOERO
	CP	"B"
	JP	NZ,J8623		; nope, quit statement handler

;	  Subroutine check if _BROTHER
;	     Inputs  ________________________
;	     Outputs ________________________

	LD	B,7
	LD	DE,I8592
	CALL	C85CF			; check if statement
	LD	HL,I880B
	CALL	C8634			; display string with sound
	LD	HL,I8830
	CALL	C8634			; display string with sound
	LD	HL,I8848
	CALL	C8634			; display string with sound
	LD	HL,I8867
	CALL	C8634			; display string with sound
	LD	HL,I8883
	CALL	C8634			; display string with sound
	LD	HL,I88A1
	CALL	C8634			; display string with sound
	CALL	C86FB			; ?? sound
	JR	J85E7			; quit statement handler

I8592:	DEFB	"ROTHER",0

;	  Subroutine CALL NI0I
;	     Inputs  ________________________
;	     Outputs ________________________

J8599:	LD	B,4
	LD	DE,I85CB
	CALL	C85CF			; check if statement
	LD	HL,I88B7
	CALL	C8634			; display string with sound
	LD	HL,I88C2
	CALL	C8634			; display string with sound
	BIT	4,(IX+4)
	JR	Z,J85BF
	RES	4,(IX+4)		; NI0I disabled
	LD	HL,I88EC
	CALL	C7CDD			; display string
	JR	J85E7			; quit statement handler

J85BF:	SET	4,(IX+4)		; NI0I enabled
	LD	HL,I88E0
	CALL	C7CDD			; display string
	JR	J85E7			; quit statement handler

I85CB:	DEFB	"I0I",0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C85CF:	LD	C,(HL)
	LD	A,(DE)
	INC	HL
	INC	DE
	CP	C
	JR	NZ,J8622		; quit statement handler
	DJNZ	C85CF
	RET

;	  Subroutine CALL _KIO
;	     Inputs  ________________________
;	     Outputs ________________________

J85D9:	LD	B,4
	LD	DE,I85EC
	CALL	C85CF			; check if statement
	LD	HL,I88F9
J85E4:	CALL	C7CDD			; display string
J85E7:	POP	IX
	POP	HL
	AND	A
	RET

I85EC:	DEFB	"KIO",0

;	  Subroutine CALL RES_A / RES_B
;	     Inputs  ________________________
;	     Outputs ________________________

J85F0:	LD	B,3
	LD	DE,I861F
	CALL	C85CF			; check if statement
	LD	A,(HL)
	INC	HL
	LD	D,0			; assume diskdrive 0
	CP	"A"
	JR	Z,J8606
	CP	"B"
	JR	NZ,J8623		; nope, quit statement handler
	LD	D,1			; diskdrive 1
J8606:	LD	A,(HL)
	AND	A
	JR	NZ,J8623		; nope, quit statement handler
	CALL	C7E1C			; select diskdrive variables
	LD	A,D
	CALL	C7AD4			; prepare for diskdrive
	CALL	C7B8F			; restore with forced zero
	LD	HL,I8628
J8617:	CALL	C7CDD			; display string
	CALL	C74F3			; finish dskio operation
	JR	J85E7			; quit statement handler

I861F:	DEFB	"ES_"

J8622:	POP	HL
J8623:	POP	IX
	POP	HL
	SCF
	RET

I8628:	DEFB	" Restored",13,10
	DEFB	0

;	  Subroutine display string with sound
;	     Inputs  ________________________
;	     Outputs ________________________

C8634:	LD	A,(HL)
	AND	A
	JR	Z,J865F
	CALL	CHPUT
	CALL	C8641
	INC	HL
	JR	C8634

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C8641:	PUSH	HL
	LD	HL,I8651
	CALL	C86FE			; write PSG registers
	LD	B,2
J864A:	CALL	C7C37			; wait 25 ms
	DJNZ	J864A
	POP	HL
	RET

I8651:	DEFB	05CH
	DEFB	000H
	DEFB	012H
	DEFB	000H
	DEFB	008H
	DEFB	007H
	DEFB	006H
	DEFB	080H
	DEFB	010H
	DEFB	010H
	DEFB	010H
	DEFB	0B8H
	DEFB	001H
	DEFB	000H

J865F:	LD	HL,I866D
	CALL	C86FE			; write PSG registers
	LD	B,25
J8667:	CALL	C7C37			; wait 25 ms
	DJNZ	J8667
	RET

I866D:	DEFB	077H
	DEFB	000H
	DEFB	078H
	DEFB	000H
	DEFB	079H
	DEFB	000H
	DEFB	001H
	DEFB	0B8H
	DEFB	010H
	DEFB	010H
	DEFB	010H
	DEFB	000H
	DEFB	01AH
	DEFB	000H

;	  Subroutine CALL ANALYZER
;	     Inputs  ________________________
;	     Outputs ________________________

J867B:	LD	B,8
	LD	DE,I868D
	CALL	C85CF			; check if statement
	LD	HL,I8D01		; start of jumptable
	EI
	CALL	C9000
	JP	J85E7			; quit statement handler

I868D:	DEFB	"NALYZER",0

;	  Subroutine CALL DRIVECHECK
;	     Inputs  ________________________
;	     Outputs ________________________

J8695:	LD	B,10
	LD	DE,I86A7
	CALL	C85CF			; check if statement
	LD	HL,I8D01		; start of jumptable
	EI
	CALL	C9E80
	JP	J85E7			; quit statement handler

I86A7:	DEFB	"RIVECHECK",0

;	  Subroutine CALL MOERO
;	     Inputs  ________________________
;	     Outputs ________________________

J86B1:	LD	B,5
	LD	DE,I86EC
	CALL	C85CF			; check if statement
	LD	HL,I8980
	CALL	C86F1
	LD	HL,I89C8
	CALL	C86F1
	LD	HL,I89E4
	CALL	C86F1
	LD	HL,I89FD
	CALL	C86F1
	LD	HL,I8A1A
	CALL	C86F1
	LD	HL,I8A2C
	CALL	C7CDD			; display string
	LD	B,30
J86DF:	CALL	C7C37			; wait 25 ms
	DJNZ	J86DF
	CALL	C8719
	POP	IX
	POP	HL
	AND	A
	RET

I86EC:	DEFB	"OERO",0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C86F1:	CALL	C7CDD			; display string
	LD	B,30
J86F6:	CALL	C7C37			; wait 25 ms
	DJNZ	J86F6
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C86FB:	LD	HL,I870B

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C86FE:	LD	B,14
	LD	A,0
J8702:	LD	E,(HL)
	CALL	WRTPSG
	INC	HL
	INC	A
	DJNZ	J8702
	RET

I870B:	LD	(HL),00H
	LD	(HL),B
	NOP
	DEFB	0DDH		; << Illegal Op Code Byte >>

	DEFB	0,0
	CP	B
	DJNZ	J8725
	DJNZ	J8717
J8717:	LD	A,(DE)
	NOP
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C8719:	LD	B,46H	; "F"
J871B:	PUSH	BC
	LD	HL,I8762
	CALL	C86FE			; write PSG registers
	POP	BC
	DJNZ	J871B
J8725:	LD	HL,007F2H
J8728:	LD	A,00H
	LD	E,L
	CALL	WRTPSG
	LD	E,H
	INC	A
	CALL	WRTPSG
	INC	HL
	INC	HL
	LD	E,L
	INC	A
	CALL	WRTPSG
	LD	E,H
	INC	A
	CALL	WRTPSG
	DEC	HL
	DEC	HL
	PUSH	HL
	ADD	HL,HL
	LD	E,L
	INC	A
	CALL	WRTPSG
	LD	E,H
	INC	A
	CALL	WRTPSG
	POP	HL
	LD	A,0DH	; 13 
	LD	E,00H
	CALL	WRTPSG
	DEC	HL
	DEC	HL
	PUSH	HL
	LD	DE,001FCH
	AND	A
	SBC	HL,DE
	POP	HL
	JR	NC,J8728
	RET

I8762:	DEFB	0F2H
	DEFB	007H
	DEFB	0F4H
	DEFB	007H
	DEFB	0E4H
	DEFB	00FH
	DEFB	01FH
	DEFB	0B0H
	DEFB	010H
	DEFB	010H
	DEFB	010H
	DEFB	000H
	DEFB	050H
	DEFB	000H

I8770:	DEFB	13,10
	DEFB	" Input WP/MD code..."
	DEFB	5
	DEFB	0

I8788:	DEFB	"AMES",0

;	  Subroutine CALL GAMES
;	     Inputs  ________________________
;	     Outputs ________________________

J878D:	LD	B,5
	LD	DE,I8788
	CALL	C85CF			; check if statement
	EI
	LD	HL,I8770		; WP/MD code string
	CALL	C7CDD			; display string
	CALL	C7819			; terminate fdc command
	LD	D,0			; diskdrive 0
	CALL	C7E1C			; select diskdrive variables
	LD	A,01H
	LD	(D7FE0),A		; ? off, motor off, select diskdrive 0
	LD	B,8
	LD	C,15			; write protect mask, 4x not write protected followed by 4x write protected
J87AD:	CALL	C79E6			; check if media in diskdrive
	JR	C,J87AD			; nope, try again
	CALL	C7C37			; wait 25 ms
	CALL	C79E6			; check if media in diskdrive
	JR	C,J87AD			; nope, try again
	CALL	C7C37			; wait 25 ms
J87BD:	CALL	C7C37			; wait 25 ms
	CALL	C79FD			; check if write protected
	LD	A,1
	JR	C,J87C9			; not ready or write protected,
	LD	A,0
J87C9:	SLA	C
	SBC	A,0
	JR	NZ,J87EE
J87CF:	CALL	C79E6			; check if media in diskdrive
	JR	NC,J87CF		; yep, try again
	CALL	C7C37			; wait 25 ms
	CALL	C79E6			; check if media in diskdrive
	JR	NC,J87CF		; yep, try again
	CALL	C7C37			; wait 25 ms
	DJNZ	J87AD
	LD	A,00H
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	CALL	CA800			; run game
	POP	IX
	POP	HL
	AND	A
	RET

J87EE:	LD	A,00H
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	LD	HL,I87F9
	JP	J85E4

I87F9:	DEFB	7
	DEFB	" not accepted!",13,10
	DEFB	0

I880B:	DEFB	"The disk driver routine on FB-500X",13,10
	DEFB	0

I8830:	DEFB	" is created by Mr.Kio",13,10
	DEFB	0

I8848:	DEFB	"This driver use multi-sector",13,10
	DEFB	0

I8867:	DEFB	"read/write command of FDC",13,10
	DEFB	0

I8883:	DEFB	" ,so R/W speed is very fast",13,10
	DEFB	0

I88A1:	DEFB	" than other MSX-FDD",13,10
	DEFB	0

I88B7:	DEFB	10
	DEFB	"NI0I is",13,10
	DEFB	0

I88C2:	DEFB	" No Index, 0 track Iikagen",13,10
	DEFB	10
	DEFB	0

I88E0:	DEFB	"lock open",13,10
	DEFB	0

I88EC:	DEFB	"lock close",13,10
	DEFB	0

I88F9:	DEFB	"Tongari Boushi no Memole",13,10
	DEFB	"Mariel is a girl who love memole",13,10
	DEFB	"Mariel wa Ka-i-",13,10
	DEFB	"Memole Memolle Memolue",13,10
	DEFB	"Grais no Bakaaa",13,10
	DEFB	"I love Mariel.",13,10
	DEFB	0

I8980:	DEFB	"MOERO is",13,10
	DEFB	" [ Mechanical Offset Error ]",13,10
	DEFB	" [ Recovering Organization ]",13,10
	DEFB	10
	DEFB	0

I89C8:	DEFB	"MOERO group member's list",13,10
	DEFB	0

I89E4:	DEFB	" Moeror:",9,9,"Takahiro Miwa",13,10
	DEFB	0

I89FD:	DEFB	" Moerist:",9,"Hiroshi Nishikawa",13,10
	DEFB	0

I8A1A:	DEFB 	9,9,"Yuji Kiyohara",13,10
	DEFB	0

I8A2C:	DEFB	9,9,"Eiji Tanaka",13,10
	DEFB	0

I8A3C:

        .PHASE	0C000H

        DEFB	0EBH				; x86 JMP +0100H
        DEFB	0FEH
        DEFB	090H				; x86 NOP
        DEFB	"broth3.8"
        DEFW	512
        DEFB	2
        DEFW	1
        DEFB	2
        DEFW	112
        DEFW	02D0H
        DEFB	0F8H
        DEFW	2
        DEFW	9
        DEFW	1
        DEFW	0

        RET	NC
        LD	(DC058+1),DE
        LD	(DC0C4),A
        LD	(HL),LOW DC056
        INC	HL
        LD	(HL),HIGH DC056
J7430:	LD	SP,KBUF+256
        LD	DE,DC09F
        LD	C,0FH	; 15 
        CALL	BDOS
        INC	A
        JP	Z,DC063
        LD	DE,0100H
        LD	C,1AH
        CALL	BDOS
        LD	HL,1
        LD	(DC09F+14),HL
        LD	HL,04000H-0100H
        LD	DE,DC09F
        LD	C,27H	; "'"
        CALL	BDOS
        JP	0100H

DC056:	DEFW	DC058

DC058:	CALL	0
        LD	A,C
        AND	0FEH
        CP	02H	; 2 
        JP	NZ,DC06A
DC063:	LD	A,(DC0C4)
        AND	A
        JP	Z,J4022
DC06A:	LD	DE,DC079
        LD	C,09H	; 9 
        CALL	BDOS
        LD	C,07H	; 7 
        CALL	BDOS
        JR	J7430

DC079:	DEFB	"Boot error",13,10
        DEFB	"Press any key for retry",13,10
        DEFB	"$"

DC09F:	DEFB	0
        DEFB	"MSXDOS  SYS"
        DEFW	0
        DEFW	0
        DEFB	0,0,0,0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0,0,0,0

DC0C4:	DEFB	0

	.DEPHASE

	DEFB	0
	DEFB	0,0,0,0,0,0

I8B01:	DEFB	0F8H,0FFH,0FFH
	DEFS	512-3,0

; jumptable

I8D01:	JP	C79E6			; +00 check if media in diskdrive
?8D04:	JP	C7E1C			; +03 select diskdrive variables
?8D07:	JP	J77EC			; +06 read sectors
?8D0A:	JP	J7839			; +09 write sectors
?8D0D:	JP	J7885			; +12 erase sectors
?8D10:	JP	J79A4			; +15 read address
?8D13:	JP	J81C2			; +18 format track
?8D16:	JP	J8338			; +21 erase track (DI/EI)
?8D19:	JP	J78F6			; +24 verify records on track
?8D1C:	JP	C7C6A			; +27 seek to track
?8D1F:	JP	C7B99			; +30 restore (seek to track 0)
?8D22:	JP	C7B8F			; +33 restore with forced zero

	DEFS	09000H-$,0FFH

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9000:	LD	(DC000),IX		; start of workspace
	LD	(DC002),HL		; start of jumptable
	JP	J9058

;	  Subroutine print text
;	     Inputs  ________________________
;	     Outputs ________________________

C900A:	LD	A,(HL)
	AND	A
	RET	Z
	CALL	CHPUT
	INC	HL
	JR	C900A

I9013:	DEFB	" DISK ANALYZER    build-in version",13,10
	DEFB	9,"Nov.26 '85   Presented by Kio",13,10
	DEFB	0

J9058:	DI
	XOR	A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	LD	(IX+0),A
	EI				; stop diskdrive motor
	CALL	C9547			; terminate fdc command
	CALL	INITXT
	LD	D,0			; diskdrive 0
	LD	IY,I907C
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,3
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: select diskdrive variables

I907C:	LD	A,05H
	LD	(D7FE0),A		; ? off, motor off, select diskdrive 0
	LD	HL,DC004
	LD	DE,DC004+1
	LD	(HL),0
	LD	BC,02A0H-1
	LDIR				; clear disk analyzer workarea
	XOR	A
	LD	(BAKCLR),A
	LD	(BDRCLR),A
	CALL	CHGCLR
	CALL	C9178			; disable kio mode
	LD	HL,I9013
J909E:	CALL	C900A			; print text
	LD	HL,I9131
	LD	(DC00C),HL		; normal prompt
	LD	HL,I9131		; prompt text
	CALL	C900A			; print text
	LD	A,"H"
	CALL	CHPUT
J90B2:	CALL	C925D			; print help

J90B5:	LD	HL,(DC00C)		; prompt text
	CALL	C900A			; print text
J90BB:	CALL	CHGET
	CP	01H			; CTRL-A ?
	JR	Z,J90EE			; yep,
	CALL	C9DEB			; to upper
	LD	HL,I91B4
	CALL	X.C006			; extra keys table (when in kio mode)
	LD	B,A
J90CC:	LD	A,(HL)
	AND	A			; end of key table ?
	JR	Z,J90E9
	CP	B
	INC	HL
	JR	Z,J90D8
	INC	HL
	INC	HL
	JR	J90CC

J90D8:	LD	A,B
	CALL	CHPUT
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
J90E0:	LD	IX,(DC000)		; start of workspace
	LD	DE,J90B5
	PUSH	DE
	JP	(HL)

J90E9:	CALL	BEEP
	JR	J90BB

;	  Subroutine CTRL-A handler
;	     Inputs  ________________________
;	     Outputs ________________________

J90EE:	CALL	CHGET
	CP	"\"
	JR	Z,J913B
	CALL	X.C009			; extra key functions CTRL-A (when in kio mode)
	JR	J90E9

;	  Subroutine extra keys CTRL-A routine
;	     Inputs  ________________________
;	     Outputs ________________________

J90FA:	CP	"K"			; CTRL-A + K
	LD	B,"m"
	LD	HL,I9612
	JR	Z,J912B			; yep, measure
	CP	"Z"			; CTRL-A + Z
	LD	B,"c"
	LD	HL,I9247
	JR	Z,J912B			; yep, change background color
	CP	"J"			; CTRL-A + J
	LD	B,"h"
	LD	HL,C9264
	JR	Z,J912B			; yep, display help2
	CP	"U"			; CTRL-A + U
	LD	B,"f"
	LD	HL,J9C9B
	JR	Z,J912B			; yep, fill buffer
	CP	"O"			; CTRL-A + O
	LD	HL,C98CF		; restore with forced zero
	JR	NZ,J90E9		; no,
	LD	A,"0"
	LD	B,A
	CALL	CHPUT			; display 0
J912B:	LD	A,B
	CALL	CHPUT			; display character function
	JR	J90E0			; execute function

I9131:	DEFB	13,10
	DEFB	":>"
	DEFB	0

I9136:	DEFB	13,10
	DEFB	":p"
	DEFB	0

;	  Subroutine CTRL-A + \
;	     Inputs  ________________________
;	     Outputs ________________________

J913B:	CALL	CHGET
	CP	"k"
	JP	NZ,J90E9
	CALL	CHGET
	CP	"i"
	JP	NZ,J90E9
J914B:	CALL	CHGET
	CP	"o"
	JP	NZ,J90E9

	LD	A,0C3H
	LD	(X.C006+0),A
	LD	(X.C009+0),A
	LD	HL,I9181
	LD	(X.C006+1),HL		; enable extra keys routine
	LD	HL,I9185
	LD	(X.C009+1),HL		; enable extra keys CTRL-A routine
	CALL	C966F
	CALL	C9D24			; to new line
	LD	A,"h"
	CALL	CHPUT
	CALL	C9264			; print help2 info
	JP	J90B5

;	  Subroutine disable kio mode
;	     Inputs  ________________________
;	     Outputs ________________________

C9178:	LD	A,0C9H
	LD	(X.C006),A
	LD	(X.C009),A
	RET

;	  Subroutine extra keys routine
;	     Inputs  ________________________
;	     Outputs ________________________

I9181:	LD	HL,I91A5
	RET

;	  Subroutine extra keys CTRL-A routine
;	     Inputs  ________________________
;	     Outputs ________________________

I9185:	POP	BC
	JP	J90FA

;	  Subroutine quit to BASIC
;	     Inputs  ________________________
;	     Outputs ________________________

C9189:	LD	A,00H
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	POP	BC
	RET				; return to BASIC

;	  Subroutine toggle print
;	     Inputs  ________________________
;	     Outputs ________________________

C9190:	LD	A,(DC005)
	INC	A
	AND	01H
	LD	(DC005),A		; toggle mode
	LD	HL,I9131		; normal prompt
	JR	Z,J91A1
	LD	HL,I9136		; printer prompt
J91A1:	LD	(DC00C),HL
	RET

I91A5:	DEFB	13
	DEFW	C921B			; select record 1
	DEFB	9
	DEFW	C9212			; select next record
	DEFB	'I'
	DEFW	C9A8F			; step in without trackupdate
	DEFB	'O'
	DEFW	C9AC1			; step out without trackupdate
	DEFB	'E'
	DEFW	C9718			; erase track

I91B4:	DEFB	13
	DEFW	C9220			; display track and record
	DEFB	' '
	DEFW	C9220			; display track and record
	DEFB	'M'
	DEFW	C97B7			; motor rpm
	DEFB	'A'
	DEFW	C9551			; read address
	DEFB	'S'
	DEFW	C96C8			; seek to track
	DEFB	'H'
	DEFW	C925D			; help
	DEFB	2
	DEFW	C9189			; quit to BASIC
	DEFB	'R'
	DEFW	C9588			; read sector
	DEFB	'W'
	DEFW	C95AB			; write sector
	DEFB	'X'
	DEFW	C9756			; track, sector change
	DEFB	'D'
	DEFW	C9B6F			; dump sector buffer
	DEFB	'P'
	DEFW	C9C09			; peek/poke sector buffer
	DEFB	'F'
	DEFW	C95D3			; format track
	DEFB	'0'
	DEFW	C98E3			; restore (seek to track 0)
	DEFB	24
	DEFW	C91F1			; select diskdrive
	DEFB	'T'
	DEFW	C96C8			; seek to track
	DEFB	'1'
	DEFW	C9859			; 1F write
	DEFB	'2'
	DEFW	C985D			; 2F write
	DEFB	'6'
	DEFW	C987E			; 6DB6 write
	DEFB	16
	DEFW	C9190			; toggle print
	DEFB	0

;	  Subroutine select diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

C91F1:	LD	A,(IX+5)
	XOR	01H
	LD	D,A
	LD	IY,I920A
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,3
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: select diskdrive variables

I920A:	LD	A,D
	INC	A
	OR	04H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive
	RET

;	  Subroutine select next record
;	     Inputs  ________________________
;	     Outputs ________________________

C9212:	LD	A,(D7FC2)
	INC	A
	LD	(D7FC2),A		; increase record register
	JR	C9220			; display track and record and quit

;	  Subroutine select record 1
;	     Inputs  ________________________
;	     Outputs ________________________

C921B:	LD	A,1
	LD	(D7FC2),A		; record register = 1

;	  Subroutine display track and record
;	     Inputs  ________________________
;	     Outputs ________________________

C9220:	LD	A,1CH
	CALL	CHPUT
	LD	A,1CH
	CALL	CHPUT
	LD	A,"T"
	CALL	CHPUT
	LD	A,(D7FC1)		; current track
	CALL	C9D0B			; print byte in hex
	CALL	C9D2F			; print space
	LD	A,"S"
	CALL	CHPUT
	LD	A,(D7FC2)		; current record
	CALL	C9D0B			; print byte in hex
	CALL	C9D2F			; print space
	RET

;	  Subroutine change background color
;	     Inputs  ________________________
;	     Outputs ________________________

I9247:	LD	A,(DC004)
	INC	A
	LD	(DC004),A
	LD	(BAKCLR),A
	LD	(BDRCLR),A
	CALL	CHGCLR
	LD	A,1EH
	CALL	CHPUT
	RET

;	  Subroutine help
;	     Inputs  ________________________
;	     Outputs ________________________

C925D:	LD	HL,I926B
	CALL	C900A			; print text
	RET

;	  Subroutine help2
;	     Inputs  ________________________
;	     Outputs ________________________

C9264:	LD	HL,I93CA
	CALL	C900A			; print text
	RET

I926B:	DEFB	"elp message:",13,10
	DEFB	"  0",9,"restore",13,10
	DEFB	"  S",9,"Seek",13,10
	DEFB	"  T",9,"Seek",13,10
	DEFB	"  R",9,"Read sector",13,10
	DEFB	"  W",9,"Write sector",13,10
	DEFB	"  A",9,"read Address",13,10
	DEFB	"  M",9,"Motor R.P.M",13,10
	DEFB	"  F",9,"one track Format",13,10
	DEFB	"  1",9,"1F write",13,10
	DEFB	"  2",9,"2F write",13,10
	DEFB	"  6",9,"6DB write",13,10
	DEFB	"  X",9,"track,sector reg. change",13,10
	DEFB	"  D",9,"Dump sector buffer",13,10
	DEFB	"  P",9,"PeekPoke sector buffer",13,10
	DEFB	"select  Drive select",13,10
	DEFB	"ctrl-P  printer switch toggle",13,10
	DEFB	"ctrl-B  return to BASIC",13,10
	DEFB	"  H",9,"Help"
	DEFB	0

I93CA:	DEFB	"elp message others",13,10
	DEFB	"  E,9,"Erase one track",13,10
	DEFB	"  I,9,"step in   one pluse",13,10
	DEFB	"  O,9,"step out  one pluse",13,10
	DEFB	"return  show current TRACK reg.",13,10
	DEFB	",9," and set SECTOR reg. to 1",13,10
	DEFB	"Tab,9,"show current TRACK reg.",13,10
	DEFB	9," and increment SECTOR reg.",13,10
	DEFB	"Graph-F Fill sector buffer",13,10
	DEFB	"Graph-C change background color",13,10
	DEFB	"Graph-M Measuring   [writing MOERO]",13,10
	DEFB	"Graph-0 restore with force ZERO",13,10
	DEFB	"Graph-H Help others"
	DEFB	0

;	  Subroutine check if media in diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

C9533:	LD	IY,I9546
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,0
	ADD	IY,DE
	POP	DE
J9544:	JP	(IY)

I9546:	RET

;	  Subroutine terminate fdc command
;	     Inputs  ________________________
;	     Outputs ________________________

C9547:	LD	A,0D0H
J9549:	LD	(D7FC0),A
	EX	(SP),IY
	EX	(SP),IY
	RET

;	  Subroutine read address
;	     Inputs  ________________________
;	     Outputs ________________________

C9551:	LD	A,(D7FC2)
	PUSH	AF			; save current record
	CALL	C9533			; check if media in diskdrive
	JR	C,J9560			; nope,
	CALL	C9A16			; read address
	JR	Z,J9560			; no error,
	SCF
J9560:	PUSH	AF
	CALL	C963E			; print ok/error
	POP	AF
	JR	C,J9573			; error,
	LD	HL,I9578
	CALL	C900A			; print text
	LD	A,(D7FC2)		; current record (is the track number from the read address operation)
J9570:	CALL	C9D0B			; print byte in hex
J9573:	POP	AF
J9574:	LD	(D7FC2),A		; restore current record
	RET

I9578:	DEFB	" This Track is "
	DEFB	0

;	  Subroutine read sector
;	     Inputs  ________________________
;	     Outputs ________________________

C9588:	CALL	C9533			; check if media in diskdrive
	JP	C,C963E			; not ready, print error
	CALL	C9220			; display track and record
	LD	HL,IC0A4
	LD	C,1			; 1 sector
	LD	IY,I95A9
	PUSH	IY
J959C:	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,6
	ADD	IY,DE
	POP	DE
	JP	(IY)			; read sectors

I95A9:	JR	J95FB

;	  Subroutine write sector
;	     Inputs  ________________________
;	     Outputs ________________________

C95AB:	CALL	C9732			; are you sure ?
	JR	NZ,J9600		; nope, aborted and quit
	CALL	C9533			; check if media in diskdrive
	JP	C,C963E			; not ready, print error
	CALL	C9220			; display track and record
	LD	HL,IC0A4
	LD	C,1			; 1 sector
	LD	IY,I95D1
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,9
	ADD	IY,DE
J95CE:	POP	DE
	JP	(IY)			; write sectors

I95D1:	JR	J95FB

;	  Subroutine format track
;	     Inputs  ________________________
;	     Outputs ________________________

C95D3:	LD	HL,I96FA
	CALL	C900A			; print text
	CALL	C9D76			; get hex byte from keyboard
	JR	C,J9600			; keyboard input canceled, aborted and quit
	INC	B
	DEC	B			; empty input ?
	JR	Z,J9600			; yep, aborted and quit
	LD	C,A
	CALL	C9533			; check if media in diskdrive
	JR	C,C963E			; not ready, print error
	LD	IY,J95FB
	PUSH	IY
J95EE:	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,18
	ADD	IY,DE
	POP	DE
	JP	(IY)			; format track

J95FB:	JR	Z,C963E			; succes, print ok
	SCF
	JR	C963E			; print error

J9600:	LD	HL,I9607
	CALL	C900A			; print text
	RET

I9607:	DEFB	"  aborted."
	DEFB	0

;	  Subroutine measure
;	     Inputs  ________________________
;	     Outputs ________________________

I9612:	LD	A,(D7FC2)
	PUSH	AF			; save current record
	CALL	C98F7			; measure (low level)
	PUSH	AF
	CALL	C963E			; print ok/error
	POP	AF
	JR	C,J962C
	LD	HL,I9631
	CALL	C900A			; print text
	LD	A,(IX+3)
J9629:	CALL	C9D0B			; print byte in hex
J962C:	POP	AF
	LD	(D7FC2),A		; restore current record
	RET

I9631:	DEFB	13,10
	DEFB	" TRoffset:"
	DEFB	0

C963E:	JR	NC,C966F
	AND	A
	JR	Z,J9663
	CP	08H	; 8 
	JR	Z,J9668
	CP	04H	; 4 
	JR	Z,J965E
	CP	0CH	; 12 
	JR	Z,J9659
	CP	02H	; 2 
	JR	Z,J9654
	RET

J9654:	LD	HL,I967D
	JR	J966B

J9659:	LD	HL,I9688
	JR	J966B

J965E:	LD	HL,I969C
	JR	J966B

J9663:	LD	HL,I96B9
	JR	J966B

J9668:	LD	HL,I96A7
J966B:	CALL	C900A			; print text
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C966F:	CALL	C9D2F			; print space
	LD	A,"O"
	CALL	CHPUT
	LD	A,"K"
	CALL	CHPUT
	RET

I967D:	DEFB	" Not ready"
	DEFB	0

I9688:	DEFB	" Lost-D or otherERR"
	DEFB	0

I969C:	DEFB	" CRC error"
	DEFB	0

I96A7:	DEFB	" Record not found"
	DEFB	0

I96B9:	DEFB	" Write Protect"
	DEFB	0

;	  Subroutine seek to track
;	     Inputs  ________________________
;	     Outputs ________________________

C96C8:	LD	HL,I9705
	CALL	C900A			; print text
	CALL	C9D76			; get hex byte from keyboard
	JP	C,J9600			; keyboard input canceled, aborted and quit
	DEC	B
	INC	B			; empty input ?
	JP	Z,J9600			; yep, aborted and quit
	LD	C,A
	LD	A,(D7FC1)
	CP	C			; already on that track ?
	RET	Z			; yep, quit
	PUSH	AF
	LD	IY,I96F3
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,27
	ADD	IY,DE
	POP	DE
	JP	(IY)			; seek to track

I96F3:	POP	AF
	JP	NC,C9AAD		; no error, wait head settle
	JP	J9A67

I96FA:	DEFB	"   FORMAT:  Input Track No.  "
	DEFB	0

;	  Subroutine erase track
;	     Inputs  ________________________
;	     Outputs ________________________

C9718:	CALL	C9732			; are you sure ?
	JP	NZ,J9600		; nope, aborted and quit
J971E:	LD	IY,I9731
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,21
	ADD	IY,DE
	POP	DE
	JP	(IY)

I9731:	RET

;	  Subroutine are you sure ?
;	     Inputs  ________________________
;	     Outputs ________________________

C9732:	LD	HL,I9741
	CALL	C900A			; print text
	CALL	CHGET
	CALL	C9DEB			; to upper
	CP	"Y"
	RET

I9741:	DEFB	" Are you sure? (Y/N)"
	DEFB	0

;	  Subroutine track, sector change
;	     Inputs  ________________________
;	     Outputs ________________________

C9756:	LD	HL,I978E
	CALL	C900A			; print text
	LD	A,(D7FC1)
	CALL	C9D0B			; print byte in hex
	LD	HL,I97AB
	CALL	C900A			; print text
	CALL	C9D76			; get hex byte from keyboard
	INC	B
	DEC	B			; empty input ?
	JR	Z,J9772			; yep, skip track register change
	LD	(D7FC1),A		; update track register
J9772:	LD	HL,I979B
	CALL	C900A			; print text
	LD	A,(D7FC2)
	CALL	C9D0B			; print byte in hex
	LD	HL,I97AB
	CALL	C900A			; print text
J9784:	CALL	C9D76			; get hex byte from keyboard
	INC	B
	DEC	B			; empty input ?
	RET	Z			; yep, quit
	LD	(D7FC2),A		; update sector register
	RET

I978E:	DEFB	" track reg.="
	DEFB	0

I979B:	DEFB	"   sector reg.="
	DEFB	0

I97AB:	DEFB	" new value?"
	DEFB	0

;	  Subroutine motor rpm
;	     Inputs  ________________________
;	     Outputs ________________________

C97B7:	CALL	C9547			; terminate fdc command
	CALL	C9A97			; wait for fdc
J97BD:	LD	BC,0
	LD	HL,D7FC0
J97C3:	LD	A,(HL)
	AND	02H			; at index mark ?
	JR	NZ,J97E4		; yep,
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,J97C3
J97CD:	LD	HL,I97D5
	CALL	C900A			; print text
	SCF
	RET

I97D5:	DEFB	"motor error!",13,10
	DEFB	0

J97E4:	LD	BC,0
	DI
J97E8:	LD	A,(HL)
	AND	02H			; at index mark ?
	JP	Z,J97F5			; nope,
	INC	BC
	LD	A,C
	OR	B
	JR	NZ,J97E8
	JR	J97CD

J97F5:	LD	A,(HL)
	AND	02H			; at index mark ?
	JP	NZ,J9802		; yep,
	INC	BC
	LD	A,C
	OR	B
	JR	NZ,J97F5
	JR	J97CD

J9802:	PUSH	BC
	CALL	C984F
	POP	BC
	LD	A,2
	LD	(VALTYP),A
	LD	(DAC+2),BC
	CALL	FRCDBL
	LD	HL,0153FH
	LD	(ARG+0),HL
	LD	HL,03892H
	LD	(ARG+2),HL
	LD	HL,00011H
	LD	(ARG+4),HL
	LD	HL,0
	LD	(ARG+6),HL
	CALL	C9D2F			; print space
	CALL	DECMUL
	LD	BC,00304H
	LD	A,80H
	CALL	PUFOUT
	CALL	C900A			; print text
	LD	HL,I984C
	CALL	C900A			; print text
	LD	A,(DRVTBL+1)
	LD	H,40H
	CALL	ENASLT
	EI
	RET

I984C:	DEFB	"ms"
	DEFB	0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C984F:	LD	A,(D$FCC1)
	LD	H,40H
	CALL	ENASLT
	EI
	RET

;	  Subroutine 1F write
;	     Inputs  ________________________
;	     Outputs ________________________

C9859:	LD	B,55H
	JR	J985F

;	  Subroutine 2F write
;	     Inputs  ________________________
;	     Outputs ________________________

C985D:	LD	B,00H
J985F:	CALL	C9732			; are you sure ?
	JP	NZ,J9600		; nope, aborted and quit
	LD	DE,I98B4
	PUSH	DE
	LD	DE,D7FE0
	DI
	LD	A,0F0H
	LD	(D7FC0),A		; format track
J9872:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J9872
	LD	A,B
	LD	(D7FC3),A		; write data
	JR	J9872

;	  Subroutine 6DB6DB write
;	     Inputs  ________________________
;	     Outputs ________________________

C987E:	CALL	C9732			; are you sure ?
	JP	NZ,J9600		; nope, aborted and quit
	LD	DE,I98B4
	PUSH	DE
	LD	DE,D7FE0
	DI
	LD	A,0F0H
	LD	(D7FC0),A		; format track
J9891:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J9891
	LD	A,6DH
	LD	(D7FC3),A
J989C:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J989C
	LD	A,0B6H
	LD	(D7FC3),A
J98A7:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J98A7
	LD	A,0DBH
	LD	(D7FC3),A
	JR	J9891

I98B4:	EI
	RET

?98B6:	LD	DE,D7FE0
	DI
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C98BB:	LD	IY,I98CE
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,27
	ADD	IY,DE
	POP	DE
	JP	(IY)

I98CE:	RET

;	  Subroutine restore with forced zero
;	     Inputs  ________________________
;	     Outputs ________________________

C98CF:	LD	IY,I98E2
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,33
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable:

I98E2:	RET

;	  Subroutine restore (seek to track 0)
;	     Inputs  ________________________
;	     Outputs ________________________

C98E3:	LD	IY,I98F6
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,30
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: restore

I98F6:	RET

;	  Subroutine measure (low level)
;	     Inputs  ________________________
;	     Outputs ________________________

C98F7:	CALL	C9533			; check if media in diskdrive
	RET	C			; not ready, quit
	CALL	C98CF			; restore with forced zero
	RET	C			; error, quit
	LD	HL,0
	LD	DE,0
	LD	C,40			; track 40
	CALL	C998A			; count records around track
	RET	C			; error, quit
	CALL	C9D53			; print new line to screen/printer
	LD	C,37			; track 37
	CALL	C998A			; count records around track
	RET	C			; error, quit
	PUSH	HL
	AND	A
	LD	HL,18-1
	SBC	HL,DE
	POP	HL
	JR	NC,J9951
	LD	B,H
	LD	C,L
	PUSH	HL
	PUSH	DE
	CALL	C9DF4			; divide
	ADD	HL,HL
	POP	DE
	LD	A,E
	CP	L
	POP	HL
	JR	C,J9930
	JR	Z,J9959
J992E:	JR	J9931

J9930:	INC	C
J9931:	LD	A,C
	CP	7
	JR	Z,J9951
	DEC	A
	JR	Z,J9951
	DEC	A
	LD	B,A
	LD	A,(IX+3)
	AND	0F0H
	OR	B
	LD	(IX+3),A
	CALL	C9A52
	SET	0,(IX+2)		; disk verified ok
	RES	2,(IX+2)		; reset reshuffle done
	AND	A
	RET

J9951:	LD	A,12
	SCF
	SET	1,(IX+2)		; TRoffset invalid
	RET

J9959:	LD	C,78			; track 78
	CALL	C998A			; count records around track
	RET	C			; error, quit
	LD	C,75			; track 75
	CALL	C998A			; count records around track
	RET	C			; error, quit
	LD	C,6			; track 6
	CALL	C998A			; count records around track
	RET	C			; error, quit
	LD	C,3			; track 3
	CALL	C998A			; count records around track
	RET	C			; error, quit
	LD	B,H
	LD	C,L
	PUSH	HL
	PUSH	DE
	CALL	C9DF4			; divide
	ADD	HL,HL
	POP	DE
	LD	A,E
	CP	L
	POP	HL
	JR	C,J9930
	JR	Z,J9983
	JR	J992E

J9983:	LD	A,3
	CP	C
	JR	C,J992E
	JR	J9930

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C998A:	LD	(IX+6),C		; set track
	CALL	C98BB			; seek to track
	CALL	C9A87			; 5x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle
	LD	B,7
J9995:	CALL	C9A6D			; step out without trackupdate, wait head settle
	CALL	C9533			; check if media in diskdrive
	JR	C,J99C4			; not ready,
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	C99D9			; verify records on track and display info
	JR	C,J99C1			; error,
	LD	HL,0
	LD	D,L
J99A9:	ADD	HL,DE
	DJNZ	J99A9			; number records * counter
	LD	B,H
	LD	C,L
	POP	HL
	ADD	HL,BC
	LD	B,D
	LD	C,E			; number of records
	POP	DE
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL			; + number of records
	POP	BC
	DJNZ	J9995
J99B9:	CALL	C9A8C			; 2x step in without trackupdate
	CALL	C9A64			; 2x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle
	AND	A
	RET

J99C1:	POP	HL
	POP	DE
	POP	BC
J99C4:	PUSH	AF
	CALL	C99CA
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C99CA:	LD	A,07H	; 7 
	CP	B
	JP	Z,J9A7F			; 3x step out without trackupdate, wait head settle
	DEC	B
	JR	Z,J99B9
	LD	A,05H	; 5 
	SUB	B
	JP	J9A57

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C99D9:	PUSH	HL
	PUSH	BC
	LD	A,1
	BIT	1,(IX+1)		; 9 sectors per track ?
	LD	C,8
	JR	NZ,J99E7		; nope,
	LD	C,9
J99E7:	LD	IY,I99FA
	PUSH	IY
	LD	IY,(DC002)		; start of jumptable
	PUSH	DE
	LD	DE,24
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: verify records on track

I99FA:	JR	C,J9A13
	LD	E,0
	LD	B,16
	PUSH	IX
	PUSH	BC
	CALL	C9D53			; print new line to screen/printer
	CALL	C9D35			; print hex word to screen/printer
	POP	BC
	POP	IX
J9A0C:	ADD	HL,HL
	JR	NC,J9A10
	INC	E
J9A10:	DJNZ	J9A0C
	AND	A
J9A13:	POP	BC
	POP	HL
	RET

;	  Subroutine read address
;	     Inputs  ________________________
;	     Outputs ________________________

C9A16:	PUSH	BC
	LD	DE,I9A3B
	PUSH	DE
	LD	DE,D7FE0
	DI
	LD	B,6
	LD	A,0C0H
	LD	(D7FC0),A
J9A26:	LD	A,(DE)
	ADD	A,A
	RET	C
	JP	P,J9A26
	LD	A,(D7FC3)
	DJNZ	J9A26
	LD	B,40
J9A33:	LD	A,(DE)
	ADD	A,A
	RET	C
	DJNZ	J9A33
	JP	C9547			; terminate fdc command

I9A3B:	POP	BC
	LD	A,(D7FC0)
	EI
	AND	1CH			; ignore not ready, write protect, record type, drq and busy bits
	RET	Z			; no error, quit
	LD	E,A
	BIT	4,E			; record not found error ?
	LD	A,8
	RET	NZ			; yep, return RECORD NOT FOUND error, recoverable
	BIT	3,E			; crc error ?
	LD	A,4
	RET	NZ			; yep, CRC error, recoverable
	SCF
	LD	A,12
	RET				; return OTHER error, unrecoverable

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9A52:	LD	A,(IX+3)
	AND	0FH
J9A57:	SUB	2
	JP	M,J9A71
	JR	Z,J9A67
	DEC	A
	JR	Z,C9A64

;	  Subroutine 3x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

J9A61:	CALL	C9A8F			; step in without trackupdate

;	  Subroutine 2x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

C9A64:	CALL	C9A8F			; step in without trackupdate
J9A67:	CALL	C9AA8			; step in without trackupdate, wait head settle
	CALL	C9AAD			; wait head settle

;	  Subroutine step out without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

C9A6D:	LD	A,60H			; step out without trackupdate
	JR	J9AAA

J9A71:	CALL	C9AAD			; wait head settle
	INC	A
	JR	Z,J9A7A

;	  Subroutine 2x step out without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

J9A77:	CALL	C9AC1			; step out without trackupdate
J9A7A:	JR	C9A6D			; step out without trackupdate, wait head settle

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

?9A7C:	CALL	C9ABE			; 2x step out without trackupdate

;	  Subroutine 3x step out without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

J9A7F:	CALL	C9AC1			; step out without trackupdate
	JR	J9A77			; 2x step out without trackupdate, wait head settle

?9A84:	CALL	C9A8C			; 2x step in without trackupdate

;	  Subroutine 5x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

C9A87:	CALL	C9A8C			; 2x step in without trackupdate
	JR	J9A61			; 3x step in without trackupdate, 2x wait head settle, 1x step out, wait head settle

;	  Subroutine 2x step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C9A8C:	CALL	C9A8F			; step in without trackupdate
;
;	  Subroutine step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C9A8F:	LD	A,40H			; step in without trackupdate

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9A91:	LD	(D7FC0),A
	EX	(SP),HL
	NOP
	EX	(SP),HL

;	  Subroutine wait for fdc
;	     Inputs  ________________________
;	     Outputs ________________________

C9A97:	LD	A,(D7FC0)
	RRA
	JR	C,C9A97
	RET

?9A9E:	CALL	C9A8F			; step in without trackupdate
	LD	A,50H			; step in with trackupdate
	JR	C9A91

;	  Subroutine 2x step in without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

?9AA5:	CALL	C9A8F			; step in without trackupdate

;	  Subroutine step in without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

C9AA8:	LD	A,40H			; step in without trackupdate
J9AAA:	CALL	C9A91

;	  Subroutine wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

C9AAD:	PUSH	BC
	LD	BC,24
J9AB1:	DJNZ	J9AB1
	DEC	C
	JR	NZ,J9AB1
	POP	BC
	AND	A
	RET

?9AB9:	CALL	C9AC1			; step out without trackupdate
	JR	C9A6D			; step out without trackupdate, wait head settle

;	  Subroutine 2x step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C9ABE:	CALL	C9AC1			; step out without trackupdate
;
;	  Subroutine step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

C9AC1:	LD	A,60H			; step out without trackupdate
	JR	C9A91

?9AC5:	CALL	C9AC1			; step out without trackupdate
	LD	A,70H			; step out with trackupdate
	JR	J9AAA

?9ACC:	LD	A,20H			; step
	JR	J9AAA

;	  Subroutine get keyboard line input
;	     Inputs  ________________________
;	     Outputs ________________________

C9AD0:	CALL	INLIN
	RET	C
	INC	HL
	PUSH	HL
	LD	B,0
J9AD8:	LD	A,(HL)
	CALL	C9DEB			; to upper
	LD	(HL),A
	INC	HL
	AND	A
	JR	Z,J9AE3
	DJNZ	J9AD8
J9AE3:	POP	HL
	LD	A,B
	NEG
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9AE9:	CALL	C9AD0			; get keyboard line input
	LD	B,A
	LD	IY,DC032
	LD	(IY+0),01H	; 1 
	AND	A
	RET	Z
	CALL	C9B38
	LD	IX,DC034
	DEC	HL
J9AFF:	INC	(IY)
	LD	DE,DC014
	LD	C,00H
J9B07:	INC	HL
	LD	A,(HL)
	CP	2CH	; ","
	JR	Z,J9B1F
	LD	(DE),A
	INC	C
	INC	DE
	DJNZ	J9B07
	LD	HL,DC014
	CALL	C9B45
	LD	(IX+0),L
	LD	(IX+1),H
	RET

J9B1F:	DEC	B
	INC	C
	DEC	C
	JR	Z,J9B32
	PUSH	HL
	LD	HL,DC014
	CALL	C9B45
	LD	(IX+0),L
	LD	(IX+1),H
	POP	HL
J9B32:	INC	IX
	INC	IX
	JR	J9AFF

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9B38:	PUSH	BC
	PUSH	HL
J9B3A:	LD	A,(HL)
	CALL	C9DEB			; to upper
	LD	(HL),A
	INC	HL
	DJNZ	J9B3A
	POP	HL
	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9B45:	PUSH	BC
	PUSH	DE
	LD	A,C
	CP	05H	; 5 
	JR	C,J9B54
	SUB	04H	; 4 
	LD	D,00H
	LD	E,A
	ADD	HL,DE
	LD	A,04H	; 4 
J9B54:	LD	B,A
	EX	DE,HL
	LD	HL,0
	JR	J9B5F

J9B5B:	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
J9B5F:	LD	A,(DE)
	INC	DE
	CALL	C9DA4			; Convert ASCII Hex nibble to byte
	PUSH	DE
	LD	E,A
	LD	D,00H
	ADD	HL,DE
	POP	DE
	DJNZ	J9B5B
	POP	DE
	POP	BC
	RET

;	  Subroutine dump sector buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C9B6F:	LD	HL,I9BC9
	CALL	C900A			; print text
	CALL	C9AE9
	LD	A,(DC032)
	CP	01H	; 1 
	JR	Z,J9B85
	LD	HL,(DC034)
	LD	(DC00E),HL
J9B85:	LD	C,08H	; 8 
	LD	HL,(DC00E)
J9B8A:	LD	B,08H	; 8 
	CALL	C9D35			; print hex word to screen/printer
	LD	A,":"
	CALL	C9D64			; print character to screen/printer
J9B94:	CALL	C9BDA
	CALL	C9D3A			; print hex byte to screen/printer
	CALL	C9D5E			; print space to screen/printer
	CALL	BREAKX
	RET	C
	INC	HL
	DJNZ	J9B94
	LD	DE,8
	AND	A
	SBC	HL,DE
	LD	B,08H	; 8 
J9BAC:	CALL	C9BDA
	CP	20H
	JR	NC,J9BB5
	LD	A,"."
J9BB5:	CALL	C9D64			; print character to screen/printer
	CALL	BREAKX
	RET	C
	INC	HL
	DJNZ	J9BAC
	CALL	C9D53			; print new line to screen/printer
	DEC	C
	JR	NZ,J9B8A
	LD	(DC00E),HL
	RET

I9BC9:	DEFB	13,10
	DEFB	"dump address=?"
	DEFB	0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9BDA:	PUSH	HL
	PUSH	DE
	LD	A,H
	AND	01H	; 1 
	LD	H,A
	LD	DE,IC0A4
	ADD	HL,DE
	LD	A,(HL)
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9BE8:	PUSH	HL
	PUSH	DE
	LD	D,A
	LD	A,H
	AND	01H	; 1 
	LD	H,A
	LD	A,D
	LD	DE,IC0A4
	ADD	HL,DE
	LD	(HL),A
	POP	DE
	POP	HL
	RET

I9BF8:	DEFB	13,10
	DEFB	"peek address=?"
	DEFB	0

;	  Subroutine peek/poke sector buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C9C09	LD	HL,I9BF8
	CALL	C900A			; print text
	CALL	C9AE9
	LD	A,(DC032)
	CP	01H	; 1 
	JR	Z,J9C1F
	LD	HL,(DC034)
	LD	(DC010),HL
J9C1F:	LD	HL,(DC010)
J9C22:	CALL	C9D06			; print word in hex
	LD	A,3AH	; ":"
	CALL	CHPUT
	CALL	C9D2F			; print space
	CALL	C9BDA
	CALL	C9D0B			; print byte in hex
J9C32	EQU	$-1
	CALL	C9D2F			; print space
	PUSH	HL
	CALL	C9AD0			; get keyboard line input
	EX	DE,HL
	POP	HL
	AND	A
	JR	Z,J9C53
	LD	C,A
	LD	A,(DE)
	CP	"."
	JR	Z,J9C59
	CP	"-"
	JR	Z,J9C56
	PUSH	HL
	EX	DE,HL
	CALL	C9B45
	LD	A,L
	POP	HL
	CALL	C9BE8
J9C53:	INC	HL
	JR	J9C22

J9C56:	DEC	HL
	JR	J9C22

J9C59:	LD	(DC010),HL
	RET

I9C5D:	DEFB	"ill sector buffer",13,10
	DEFB	"   <start>,<end>,<data1>,[data2]...",13,10
	DEFB	"   ? "
	DEFB	0

;	  Subroutine fill buffer
;	     Inputs  ________________________
;	     Outputs ________________________

J9C9B:	LD	HL,I9C5D
	CALL	C900A			; print text
	CALL	C9AE9
	LD	A,(DC032)
	CP	03H	; 3 
	JP	C,J9CEC
	LD	HL,(DC036)
	LD	BC,512
	AND	A
	SBC	HL,BC
	JR	NC,J9CEC
J9CB7:	LD	HL,(DC036)
	LD	DE,(DC034)
	AND	A
	SBC	HL,DE
	JR	C,J9CEC
	LD	B,H
	LD	C,L
	INC	BC
	LD	HL,(DC034)
	LD	A,(DC032)
	SUB	03H	; 3 
	LD	D,A
J9CCF:	LD	IX,DC038
	PUSH	DE
J9CD4:	LD	A,(IX+0)
	CALL	C9BE8
	INC	IX
	INC	IX
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	Z,J9CEA
	DEC	D
	JR	NZ,J9CD4
	POP	DE
	JR	J9CCF

J9CEA:	POP	DE
	RET

J9CEC:	LD	HL,I9CF3
	CALL	C900A			; print text
	RET

I9CF3:	DEFB	13,10
	DEFB	"Parameter error!"
	DEFB	0

;	  Subroutine print word in hex
;	     Inputs  ________________________
;	     Outputs ________________________

C9D06:	LD	A,H
	CALL	C9D0B			; print byte in hex
	LD	A,L

;	  Subroutine print byte in hex
;	     Inputs  ________________________
;	     Outputs ________________________

C9D0B:	PUSH	DE
	LD	E,A
	AND	0F0H
	RRCA
	RRCA
	RRCA
	RRCA
	CALL	C9D9B
	CALL	CHPUT
	LD	A,E
	AND	0FH	; 15 
	CALL	C9D9B
	CALL	CHPUT
	POP	DE
	RET

;	  Subroutine to new line
;	     Inputs  ________________________
;	     Outputs ________________________

C9D24:	LD	A,13
	CALL	CHPUT
	LD	A,10
	CALL	CHPUT
	RET

;	  Subroutine print space
;	     Inputs  ________________________
;	     Outputs ________________________

C9D2F:	LD	A," "
	CALL	CHPUT
	RET

;	  Subroutine print hex word to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C9D35:	LD	A,H
	CALL	C9D3A			; print hex byte to screen/printer
	LD	A,L

;	  Subroutine print hex byte to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C9D3A:	PUSH	DE
	LD	E,A
	AND	0F0H
	RRCA
	RRCA
	RRCA
	RRCA
	CALL	C9D9B
	CALL	C9D64			; print character to screen/printer
	LD	A,E
	AND	0FH
	CALL	C9D9B
	CALL	C9D64			; print character to screen/printer
	POP	DE
	RET

;	  Subroutine print new line to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C9D53:	LD	A,13
	CALL	C9D64			; print character to screen/printer
	LD	A,10
	CALL	C9D64			; print character to screen/printer
	RET

;	  Subroutine print space to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C9D5E:	LD	A," "
	CALL	C9D64			; print character to screen/printer
	RET

;	  Subroutine print character to screen/printer
;	     Inputs  ________________________
;	     Outputs ________________________

C9D64:	PUSH	AF
J9D65:	LD	A,(DC005)
	AND	A			; printer output enabled ?
	JR	NZ,J9D6F		; yep, output to screen and printer
	POP	AF
	JP	CHPUT

J9D6F:	POP	AF
	CALL	CHPUT
	JP	LPTOUT

;	  Subroutine get hex byte from keyboard
;	     Inputs  ________________________
;	     Outputs ________________________

C9D76:	CALL	C9AD0			; get keyboard line input
	RET	C			; keyboard input canceled, quit
	AND	A
	RET	Z			; empty line, quit with result 0
	DEC	A			; only 1 character ?
	JR	Z,J9D84			; yep, treat as nibble
	CALL	C9D8A			; Convert ASCII Hex byte to byte
	AND	A
	RET

J9D84:	LD	A,(HL)
	CALL	C9DA4			; Convert ASCII Hex nibble to byte
	AND	A
	RET

;	  Subroutine Convert ASCII Hex byte to byte
;	     Inputs  ________________________
;	     Outputs ________________________

C9D8A:	LD	A,(HL)
	CALL	C9DA4			; Convert ASCII Hex nibble to byte
	RLCA
	RLCA
	RLCA
	RLCA
	LD	C,A
	INC	HL
	LD	A,(HL)
	CALL	C9DA4			; Convert ASCII Hex nibble to byte
	OR	C
	INC	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9D9B:	CP	10
	JR	C,J9DA1
	ADD	A,7
J9DA1:	ADD	A,"0"
	RET

;	  Subroutine Convert ASCII Hex nibble to byte
;	     Inputs  ________________________
;	     Outputs ________________________

C9DA4:	CP	"A"
	JR	C,J9DAA
	SUB	7
J9DAA:	SUB	"0"
	RET

?9DAD:	LD	A,D
	AND	0F0H
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	LD	A,D
	AND	0FH	; 15 
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	LD	A,E
	AND	0F0H
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	LD	A,E
	AND	0FH	; 15 
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	RET

?9DD6:	LD	A,B
	AND	0F0H
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	LD	A,B
	AND	0FH	; 15 
	CALL	C9D9B
	LD	(HL),A
	INC	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C9DEB:	CP	61H
	RET	C
	CP	7BH
	RET	NC
	AND	0DFH
	RET

;	  Subroutine divide
;	     Inputs  ________________________
;	     Outputs ________________________

C9DF4:	LD	HL,0
	LD	A,B
	LD	B,16
	RL	C
	RLA
J9DFD:	RL	L
	RL	H
	JR	C,J9E10
	SBC	HL,DE
	JR	NC,J9E08
	ADD	HL,DE
J9E08:	CCF
J9E09:	RL	C
	RLA
	DJNZ	J9DFD
	LD	B,A
	RET

J9E10:	OR	A
	SBC	HL,DE
	JR	J9E09

	DEFS	09E80H-$,0FFH

;	  Subroutine drive check
;	     Inputs  ________________________
;	     Outputs ________________________

C9E80:	LD	(DC007),HL		; start of jumptable
	LD	(DC005),IX		; start of workspace
	DI
	XOR	A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	LD	(IX+0),A
	EI
	XOR	A
	LD	(BAKCLR),A
	LD	(BDRCLR),A
	CALL	CHGCLR
J9E9A:	CALL	INITXT
	LD	HL,IA0BC
	CALL	CA0B3			; display string
J9EA3:	LD	HL,3*256+6
	CALL	POSIT
	LD	HL,I9ED2
	CALL	CA0B3			; display string
	CALL	CHGET
	LD	IX,(DC005)
	CP	"A"
	JR	Z,J9EF3
	CP	"a"
	JR	Z,J9EF3			; drive check drive 0
	CP	"B"
	JR	Z,J9F29
	CP	"b"
	JR	Z,J9F29			; drive check drive 1
	CP	1BH
	JR	NZ,J9EA3
	XOR	A
	LD	(D7FE0),A		; ? off, motor off, deselect diskdrive
	CALL	CLS
	RET

I9ED2:	DEFB	" Which drive do you test? [A/B] "
	DEFB	0

;	  Subroutine drive check drive 0
;	     Inputs  ________________________
;	     Outputs ________________________

J9EF3:	LD	HL,5*256+14
	CALL	POSIT
	LD	HL,I9F5F
	CALL	CA0B3			; display string
	LD	A,"A"
	CALL	CHPUT
	LD	A,":"
	CALL	CHPUT
	LD	D,00H
	LD	IY,I9F1E
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,3
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: select diskdrive variables

I9F1E:	LD	A,05H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive 0
	CALL	C9F97			; check selected drive
	JP	J9E9A

;	  Subroutine drive check drive 1
;	     Inputs  ________________________
;	     Outputs ________________________

J9F29:	LD	HL,5*256+14
	CALL	POSIT
	LD	HL,I9F5F
	CALL	CA0B3			; display string
	LD	A,"B"
	CALL	CHPUT
	LD	A,":"
	CALL	CHPUT
	LD	D,01H	; 1 
	LD	IY,I9F54
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,3
	ADD	IY,DE
	POP	DE
	JP	(IY)			; jumptable: select diskdrive variables

I9F54:	LD	A,06H
	LD	(D7FE0),A		; ? off, motor on, select diskdrive 1
	CALL	C9F97			; check selected drive
J9F5C:	JP	J9E9A

I9F5F:	DEFB	" Insert new disk in drive "
	DEFB	0

J9F7A:	DEFB	"        then Hit Space Bar  "
	DEFB	0

;	  Subroutine check selected drive
;	     Inputs  ________________________
;	     Outputs ________________________

C9F97:	LD	HL,5*256+15
	CALL	POSIT
	LD	HL,J9F7A
J9FA0:	CALL	CA0B3			; display string
	CALL	CHGET
	CP	1BH			; ESC pressed ?
	RET	Z			; yep, quit
	CP	" "
	JR	NZ,C9F97
	CALL	CA10B			; check selected drive (low level)
	LD	A,(DC000)
	AND	A			; error ?
	JR	Z,J9FE8			; nope, good
J9FB6:	LD	HL,12*256+10
	CALL	POSIT
	LD	HL,IA067		; ng point string
	CALL	CA0B3			; display string
	LD	A,(DC001)		; current ng point
	CALL	C9FF6			; display byte number
	LD	HL,12*256+11
	CALL	POSIT
	LD	HL,JA076		; error type string
	CALL	CA0B3			; display string
J9FD4:	LD	A,(DC000)		; error
	CALL	C9FF6			; display byte number
J9FDA:	LD	HL,12*256+13
	CALL	POSIT
	LD	HL,IA084
	CALL	CA0B3			; display string
	JR	C9F97			; check selected drive and quit

J9FE8:	LD	HL,12*256+10
	CALL	POSIT
	LD	HL,JA0A3
	CALL	CA0B3			; display string
	JR	J9FDA

;	  Subroutine display byte number
;	     Inputs  ________________________
;	     Outputs ________________________

C9FF6:	AND	A
	JR	Z,JA04A
	LD	L,A
	LD	H,0
	XOR	A
	LD	(DC004),A
	JR	JA016

?A002:	LD	A,H
	OR	L
	JR	Z,JA051
	XOR	A
	LD	(DC004),A
	LD	DE,10000
	CALL	CA025
	LD	DE,1000
	CALL	CA025
JA016:	LD	DE,100
	CALL	CA025
	LD	DE,10
	CALL	CA025
	LD	DE,1

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CA025:	LD	A,"0"
JA027:	INC	A
	AND	A
	SBC	HL,DE
	JR	NC,JA027
	ADD	HL,DE
	DEC	A
	PUSH	AF
	LD	A,(DC004)
	AND	A
	JR	NZ,JA046
	POP	AF
	CP	"0"
	JR	NZ,JA040
	LD	A," "
	JP	CHPUT

JA040:	PUSH	AF
	LD	A,01H
	LD	(DC004),A
JA046:	POP	AF
	JP	CHPUT

JA04A:	LD	HL,IA05A
	CALL	CA0B3			; display string
	RET

JA051:	LD	HL,IA058
	CALL	CA0B3			; display string
	RET

IA058:	DEFB	"  "
IA05A:	DEFB	"  0"
	DEFB	0

JA05E:	CP	0AH	; 10 
	JR	C,JA064
	ADD	A,07H	; 7 
JA064:	ADD	A,30H	; "0"
	RET

IA067:	DEFB	7
	DEFB	" N.G.POINT   "
	DEFB	0

JA076:	DEFB	" ERROR TYPE  "
	DEFB	0

IA084:	DEFB	13,10
	DEFB	"       If you want to retry,"
	DEFB	0

JA0A3:	DEFB	" Good!         "
	DEFB	0

;	  Subroutine display string
;	     Inputs  ________________________
;	     Outputs ________________________

CA0B3:	LD	A,(HL)
	AND	A
	RET	Z
	CALL	CHPUT
	INC	HL
	JR	CA0B3

IA0BC:	DEFB	" Self Checker	  Dec.16 '85",13,10
	DEFB	"                Presented by Kio.",13,10
	DEFB	0

JA0FC:	DEFB	"Now Testing..."
	DEFB	0

;	  Subroutine check selected drive (low level)
;	     Inputs  ________________________
;	     Outputs ________________________

CA10B:	CALL	CA351			; terminate fdc command
JA10E:	CALL	INITXT
JA111:	LD	HL,IA0BC
	CALL	CA0B3			; display string
	LD	HL,X.C009
	LD	BC,3*512
JA11D:	LD	(HL),0DBH
	INC	HL
	LD	(HL),06DH
	INC	HL
	LD	(HL),0B6H
	INC	HL
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,JA11D		; create sector data with pattern (9 sectors)
	LD	HL,12*256+10
	CALL	POSIT
	LD	HL,JA0FC
	CALL	CA0B3			; display string
	LD	IX,(DC005)
	XOR	A
	LD	(DC001),A		; ng point = 0
	CALL	CA1E4			; increase ng point (now 1)
	CALL	CA249			; wait for index pulse
	JP	C,JA1DF			; error, save error and quit
	CALL	CA231			; media in diskdrive (test media sensor)
	JP	C,JA1DF			; nope, save error and quit
	CALL	CA274			; test if not on track 0
	JP	C,JA1DF			; error, save error and quit
	CALL	CA3C6			; restore with forced zero
	JP	C,JA1DF			; error, save error and quit
	LD	C,79			; track 79
	LD	IY,IA16F
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,27
	ADD	IY,DE
	POP	DE
	JP	(IY)			; seek to track

IA16F:	CALL	CA284			; test time between index pulses
	JP	C,JA1DF			; of limits, save error and quit
	LD	C,0
	CALL	CA231			; media in diskdrive
	JP	C,JA1DF			; nope, save error and quit
	CALL	CA3B1			; format track (track 0)
	JP	C,JA1DF			; error, save error and quit
	LD	A,0
	LD	(D7FC1),A		; track register = 0
	LD	HL,I.4000
	CALL	CA313			; read sectors from track (track 0)
	JP	C,JA1DF			; error, save error and quit
	LD	A,79
	LD	(D7FC1),A		; track register = 79
	LD	C,79			; track 79
	CALL	CA1E4			; increase ng point (now 2)
	CALL	CA1EC			; test track format, write and read (with 1/4 track offset in/out)
	JR	C,JA1DF			; error, save error and quit
	LD	C,40			; track 40
	LD	IY,IA1B5
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,27
	ADD	IY,DE
	POP	DE
	JP	(IY)			; seek to track

IA1B5:	CALL	CA1E4			; increase ng point
	CALL	CA1EC			; test track format, write and read (with 1/4 track offset in/out)
	JR	C,JA1DF			; error, save error and quit
	LD	C,0			; track 0
	LD	IY,IA1D2
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,27
	ADD	IY,DE
	POP	DE
	JP	(IY)			; seek to track

IA1D2:	CALL	CA1E4			; increase ng point
	CALL	CA1EC			; test track format, write and read (with 1/4 track offset in/out)
	JR	C,JA1DF			; error, save error and quit
	XOR	A
	LD	(DC000),A		; reset error
	RET

JA1DF:	LD	(DC000),A		; error
	SCF
	RET

;	  Subroutine increase ng point
;	     Inputs  ________________________
;	     Outputs ________________________

CA1E4:	LD	A,(DC001)
	INC	A
	LD	(DC001),A
	RET

;	  Subroutine test track format, write and read (with 1/4 track offset in/out)
;	     Inputs  ________________________
;	     Outputs ________________________

CA1EC:	CALL	CA231			; media in diskdrive
	RET	C			; nope, quit
	CALL	CA3B1			; format track
	RET	C			; error, quit
	CALL	CA231			; media in diskdrive
	RET	C			; nope, quit
	CALL	CA2DB			; erase around track
	LD	HL,X.C009
	CALL	CA1E4			; increase ng point (+1)
	CALL	CA332			; write sectors to track
	RET	C			; error, quit
	CALL	CA231			; media in diskdrive
	RET	C			; nope, quit
	CALL	CA2DB			; erase around track
	LD	HL,I.4000		; dummy sector buffer in ROM!
	CALL	CA1E4			; increase ng point (+2)
	CALL	CA313			; read sectors from track
	RET	C			; error, quit
	CALL	CA3ED			; step out without trackupdate, wait head settle
	LD	HL,I.4000		; dummy sector buffer in ROM!
	CALL	CA1E4			; increase ng point (+3)
	CALL	CA313			; read sectors from track
	RET	C			; error, quit
	CALL	CA3E1			; 3x step in without trackupdate, 2x wait head settle, 1x step out without trackupdate, 1x wait head settle
	LD	HL,I.4000		; dummy sector buffer in ROM!
	CALL	CA313			; read sectors from track (+4)
	RET	C			; error, quit
	CALL	CA3ED			; step out without trackupdate, wait head settle
	RET

;	  Subroutine media in diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

CA231:	LD	IY,IA244
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,0
	ADD	IY,DE
	POP	DE
	JP	(IY)

IA244:	RET	NC
	LD	A,72H
	SCF
	RET

;	  Subroutine wait for index pulse
;	     Inputs  ________________________
;	     Outputs ________________________

CA249:	CALL	CA3FC			; wait fdc ready
	CALL	CA351			; terminate fdc command
	LD	HL,0
JA252:	LD	A,(D7FC0)
	AND	02H
	JR	Z,JA262
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,JA252
	LD	A,80H
	SCF
	RET

JA262:	LD	HL,0
JA265:	LD	A,(D7FC0)
	AND	02H
	RET	NZ
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,JA265
	LD	A,80H
	SCF
	RET

;	  Subroutine test if not on track 0
;	     Inputs  ________________________
;	     Outputs ________________________

CA274:	CALL	CA351			; terminate fdc command
	CALL	CA3FC			; wait fdc ready
	LD	A,(D7FC0)
	AND	40H
	RET	Z
	LD	A,50H
	SCF
	RET

;	  Subroutine test time between index pulses
;	     Inputs  ________________________
;	     Outputs ________________________

CA284:	CALL	CA351			; terminate fdc command
	CALL	CA3FC			; wait fdc ready
	LD	BC,0
	LD	HL,D7FC0
JA290:	LD	A,(HL)
	AND	02H
	JR	NZ,JA29E
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,JA290
JA29A:	LD	A,80H
	SCF
	RET

JA29E:	LD	BC,0
	DI
JA2A2:	LD	A,(HL)
	AND	02H
	JP	Z,JA2AF
	INC	BC
	LD	A,C
	OR	B
	JR	NZ,JA2A2
	JR	JA29A

JA2AF:	LD	A,(HL)
	AND	02H
	JP	NZ,JA2BC
	INC	BC
	LD	A,C
	OR	B
	JR	NZ,JA2AF
	JR	JA29A

JA2BC:	EI
	LD	(DC002),BC
	LD	HL,033CBH
	AND	A
	SBC	HL,BC
	JR	C,JA2D7
	LD	HL,0300BH
	AND	A
	SBC	HL,BC
	JR	NC,JA2D3
	AND	A
	RET

JA2D3:	LD	A,09H
	SCF
	RET

JA2D7:	LD	A,10H
	SCF
	RET

;	  Subroutine erase around track
;	     Inputs  ________________________
;	     Outputs ________________________

CA2DB:	PUSH	DE
	CALL	CA3FC			; wait fdc ready
	CALL	CA41E			; 2x step out without trackupdate, wait head settle
	LD	IY,IA2F5
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,21
	ADD	IY,DE
	POP	DE
	JP	(IY)			; erase track (DI/EI)

IA2F5:	CALL	CA3FC			; wait fdc ready
	CALL	CA3DE			; 5x step in without trackupdate, 2x wait head settle, 1x step out without trackupdate, 1x wait head settle
	LD	IY,IA30E
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,21
	ADD	IY,DE
	POP	DE
	JP	(IY)			; erase track (DI/EI)

IA30E:	CALL	CA41E			; 2x step out without trackupdate, wait head settle
	POP	DE
	RET

;	  Subroutine read sectors from track
;	     Inputs  ________________________
;	     Outputs ________________________

CA313:	LD	A,1
	LD	(D7FC2),A		; record 1
	LD	D,5
JA31A:	CALL	CA231			; media in diskdrive
	RET	C			; nope, quit with error
	LD	A,(D7FC2)
	LD	C,A
	LD	A,9+1
	SUB	C
	LD	C,A			; number of sectors
	PUSH	DE
	CALL	CA35B			; read sectors
	POP	DE
	RET	C			; unrecoverable error, quit
	RET	Z			; no error, quit
	DEC	D
	JR	NZ,JA31A		; retry (remainer)
	SCF				; error
	RET

;	  Subroutine write sectors to track
;	     Inputs  ________________________
;	     Outputs ________________________

CA332:	LD	A,1
	LD	(D7FC2),A		; record 1
	LD	D,5
JA339:	CALL	CA231			; media in diskdrive
	RET	C			; nope, quit with error
	LD	A,(D7FC2)
	LD	C,A
	LD	A,9+1
	SUB	C
	LD	C,A			; number of sectors
	PUSH	DE
	CALL	CA380			; write sectors
	POP	DE
	RET	C			; unrecoverable error, quit
	RET	Z			; no error, quit
	DEC	D
	JR	NZ,JA339		; retry (remainer)
	SCF				; error
	RET

;	  Subroutine terminate fdc command
;	     Inputs  ________________________
;	     Outputs ________________________

CA351:	LD	A,0D0H
	LD	(D7FC0),A
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	RET

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

CA35B:	LD	IY,IA36E
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,6
	ADD	IY,DE
	POP	DE
	JP	(IY)			; read sectors

IA36E:	PUSH	AF
	CP	08H			; record not found ?
	LD	E,74
	JR	Z,JA37D			; yep, error 74
	CP	04H			; crc error ?
	LD	E,73
	JR	Z,JA37D			; yep, error 73
	LD	E,75
JA37D:	POP	AF
	LD	A,E
	RET

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

CA380:	LD	IY,JA393
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,9
	ADD	IY,DE
	POP	DE
	JP	(IY)			; write sectors

JA393:	PUSH	AF
	CP	08H
	LD	E,42H
	JR	Z,JA3AE
	CP	04H
	LD	E,41H
	JR	Z,JA3AE
	CP	02H
	LD	E,50H
	JR	Z,JA3AE
	CP	00H
	LD	E,50H
	JR	Z,JA3AE
	LD	E,43H
JA3AE:	POP	AF
	LD	A,E
	RET

;	  Subroutine format track
;	     Inputs  ________________________
;	     Outputs ________________________

CA3B1:	LD	IY,IA3C4
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,18
	ADD	IY,DE
	POP	DE
	JP	(IY)			; format track

IA3C4:	JR	JA393

;	  Subroutine restore with forced zero
;	     Inputs  ________________________
;	     Outputs ________________________

CA3C6:	LD	IY,IA3D9
	PUSH	IY
	LD	IY,(DC007)		; start of jumptable
	PUSH	DE
	LD	DE,33
	ADD	IY,DE
	POP	DE
	JP	(IY)			; restore with forced zero

IA3D9:	RET	NC
	LD	A,81H
	SCF
	RET

;	  Subroutine 5x step in without trackupdate, 2x wait head settle, 1x step out without trackupdate, 1x wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA3DE:	CALL	CA3F1			; 2x step in without trackupdate

;	  Subroutine 3x step in without trackupdate, 2x wait head settle, 1x step out without trackupdate, 1x wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA3E1:	CALL	CA3F4			; step in without trackupdate
	CALL	CA3F4			; step in without trackupdate
	CALL	CA40D			; step in without trackupdate, wait head settle
	CALL	CA412			; wait head settle

;	  Subroutine step out without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA3ED:	LD	A,60H			; step out without trackupdate
	JR	JA40F			; execute, wait head settle

;	  Subroutine 2x step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

CA3F1:	CALL	CA3F4			; step in without trackupdate
;
;	  Subroutine step in without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

CA3F4:	LD	A,40H			; step in without trackupdate

;	  Subroutine execute track command
;	     Inputs  ________________________
;	     Outputs ________________________

CA3F6:	LD	(D7FC0),A
	EX	(SP),HL
	NOP
	EX	(SP),HL

;	  Subroutine wait fdc ready
;	     Inputs  ________________________
;	     Outputs ________________________

CA3FC:	LD	A,(D7FC0)
	RRA
	JR	C,CA3FC
	RET

;	  Subroutine 2x step in without trackupdate, 1x trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

?A403:	CALL	CA3F4			; step in without trackupdate
	LD	A,50H			; step in with trackupdate
	JR	CA3F6

;	  Subroutine 2x step in without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

?A40A:	CALL	CA3F4			; step in without trackupdate

;	  Subroutine step in without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA40D:	LD	A,40H			; step in without trackupdate
JA40F:	CALL	CA3F6

;	  Subroutine wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA412:	PUSH	BC
	LD	BC,24
JA416:	DJNZ	JA416
	DEC	C
	JR	NZ,JA416
	POP	BC
	AND	A
	RET

;	  Subroutine 2x step out without trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

CA41E:	CALL	CA426			; step out without trackupdate
	JR	CA3ED			; step out without trackupdate, wait head settle

;	  Subroutine 2x step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

?A423:	CALL	CA426			; step out without trackupdate

;	  Subroutine step out without trackupdate
;	     Inputs  ________________________
;	     Outputs ________________________

CA426:	LD	A,60H			; step out without trackupdate
	JR	CA3F6

;	  Subroutine 2x step out without trackupdate, 1x trackupdate, wait head settle
;	     Inputs  ________________________
;	     Outputs ________________________

?A42A:	CALL	CA426			; step out without trackupdate
	LD	A,70H			; step out with trackupdate
	JR	JA40F			; execute, wait head settle

	DEFS	0A800H-$,0FFH

;	  Subroutine run game
;	     Inputs  ________________________
;	     Outputs ________________________

CA800:	LD	A,1
	LD	(BDRCLR),A
	CALL	SETGRP
	CALL	INIGRP
	DI
	LD	A,(RG1SAV)
	OR	02H	; 2 
	AND	0FEH
	LD	(RG1SAV),A
	LD	C,1
	LD	B,A
	CALL	WRTVDP
	EI
JA81D:	CALL	CAEC3
	EX	DE,HL
	CALL	CAEB9
	AND	A
	SBC	HL,DE
	LD	(X.C009),HL
	CALL	CAC7C
	CALL	CAD13
	CALL	CAD5C
	CALL	CAE1D
	LD	A,0
	LD	(X.C006),A
	LD	(DC005),A
	LD	(DC00B),A
	LD	(DC00C),A
	LD	HL,2
	LD	(DC007),HL
JA84A:	LD	A,5
	CALL	SNSMAT
	CPL
	AND	0A0H			; 5 or 9 pressed ?
	JP	NZ,JA864		; yep,
	LD	A,(DC005)
	SUB	05H	; 5 
	JR	NZ,JA86F
	ADD	A,05H	; 5 
	LD	(DC005),A
	JP	JA86F

JA864:	LD	A,(DC005)
	ADD	A,05H	; 5 
	CP	0F9H
	JR	C,JA86F
	SUB	05H	; 5 
JA86F:	LD	(DC005),A
	LD	A,2
	CALL	SNSMAT
	CPL
	AND	30H			; 0 or ] pressed ?
	JP	NZ,JA88C		; yep,
	LD	A,(X.C006)
	SUB	05H	; 5 
	JR	NZ,JA886
	ADD	A,05H	; 5 
JA886:	LD	(X.C006),A
	JP	JA89A

JA88C:	LD	A,(X.C006)
	ADD	A,05H	; 5 
	CP	0F9H
	JR	C,JA897
	SUB	05H	; 5 
JA897:	LD	(X.C006),A
JA89A:	CALL	CAB30
	LD	HL,(DC007)
	DEC	HL
	LD	(DC007),HL
	LD	A,H
	OR	L
	JR	NZ,JA8D2
	LD	HL,2
	LD	(DC007),HL
	LD	A,(DC016)
	AND	A
	JR	NZ,JA8C4
	LD	A,(DC015)
	INC	A
	LD	(DC015),A
	JR	NZ,JA8D2
	LD	A,0FFH
	LD	(DC015),A
	JR	JA8D2

JA8C4:	LD	A,(DC015)
	DEC	A
	LD	(DC015),A
	JR	NZ,JA8D2
	LD	A,00H
	LD	(DC016),A
JA8D2:	CALL	RDVDP
	AND	20H	; " "
	JR	Z,JA8F4
	LD	A,(DC014)
	AND	01H	; 1 
	XOR	01H	; 1 
	LD	(DC014),A
	LD	A,(DC016)
	AND	01H	; 1 
	XOR	01H	; 1 
	LD	(DC016),A
	LD	A,(DC015)
	INC	A
	LD	(DC015),A
JA8F4:	LD	A,(DC005)
	LD	B,00H
	CP	33H
	JR	C,JA90D
	INC	B
	CP	66H
	JR	C,JA90D
	INC	B
	CP	99H
	JR	C,JA90D
	INC	B
	CP	0CCH
	JR	C,JA90D
	INC	B
JA90D:	CALL	CAA0C
	LD	A,(X.C006)
	LD	B,00H
	CP	33H
	JR	C,JA929
	INC	B
	CP	66H
	JR	C,JA929
	INC	B
	CP	99H
	JR	C,JA929
	INC	B
	CP	0CCH
	JR	C,JA929
	INC	B
JA929:	CALL	CAA9E
	LD	A,7
	CALL	SNSMAT
	CPL
	AND	04H			; ESC pressed ?
	JP	NZ,JA81D		; yep,
	LD	A,8
	CALL	SNSMAT
	CPL
	AND	0F0H			; cursor key pressed ?
	JR	Z,JA9BF			; nope,
	RLCA
	CALL	C,CA96E			; right pressed,
	RLCA
	CALL	C,CA9A4			; down pressed,
	RLCA
	CALL	C,CA989			; up pressed,
	RLCA
	CALL	C,CA953			; left pressed,
	JR	JA9BF

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CA953:	PUSH	AF
	LD	A,(DC011)
	SUB	14H	; 20 
	LD	(DC011),A
	JR	NC,JA96C
	LD	A,(DC00D)
	DEC	A
	LD	(DC00D),A
	LD	A,(DC00F)
	DEC	A
	LD	(DC00F),A
JA96C:	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CA96E:	PUSH	AF
	LD	A,(DC011)
	ADD	A,14H	; 20 
	LD	(DC011),A
	JR	NC,JA987
	LD	A,(DC00D)
	INC	A
	LD	(DC00D),A
	LD	A,(DC00F)
	INC	A
	LD	(DC00F),A
JA987:	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CA989:	PUSH	AF
	LD	A,(DC012)
	SUB	14H	; 20 
	LD	(DC012),A
	JR	NC,JA9A2
	LD	A,(DC00E)
	DEC	A
	LD	(DC00E),A
	LD	A,(DC010)
	DEC	A
	LD	(DC010),A
JA9A2:	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CA9A4:	PUSH	AF
	LD	A,(DC012)
	ADD	A,14H	; 20 
	LD	(DC012),A
	JR	NC,JA9BD
	LD	A,(DC00E)
	INC	A
	LD	(DC00E),A
	LD	A,(DC010)
	INC	A
	LD	(DC010),A
JA9BD:	POP	AF
	RET

JA9BF:	LD	A,00H
	CALL	CALATR
	LD	A,(DC00E)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00D)
	CALL	WRTVRM
	INC	HL
	INC	HL
	INC	HL
	LD	A,(DC00E)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00D)
	ADD	A,10H	; 16 
	CALL	WRTVRM
	INC	HL
	INC	HL
	INC	HL
	LD	A,(DC010)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00F)
	CALL	WRTVRM
	INC	HL
	INC	HL
	INC	HL
	LD	A,(DC010)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00F)
	SUB	10H	; 16 
	CALL	WRTVRM
	CALL	BREAKX
	JP	NC,JA84A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAA0C:	LD	A,(DC00C)
	CP	B
	RET	Z
	CP	04H	; 4 
	JR	NZ,JAA1D
	LD	A,(DC00E)
	ADD	A,04H	; 4 
	LD	(DC00E),A
JAA1D:	LD	A,B
	LD	(DC00C),A
	CP	04H	; 4 
	JR	NZ,JAA48
	LD	A,00H
	CALL	CALATR
	LD	A,(DC00E)
	SUB	04H	; 4 
	LD	(DC00E),A
	CALL	WRTVRM
	LD	A,01H	; 1 
	CALL	CALATR
	LD	A,(DC00E)
	CALL	WRTVRM
	LD	HL,IAF66
	LD	DE,IB006
	JR	JAA81

JAA48:	PUSH	AF
	LD	A,00H
	CALL	CALATR
	LD	A,(DC00E)
	CALL	WRTVRM
	LD	A,01H	; 1 
	CALL	CALATR
	LD	A,(DC00E)
	CALL	WRTVRM
	POP	AF
	LD	HL,IAEE6
	LD	DE,IAF86
	AND	A
	JR	Z,JAA81
	LD	HL,IAF06
	LD	DE,IAFA6
	DEC	A
	JR	Z,JAA81
	LD	HL,IAF26
	LD	DE,IAFC6
	DEC	A
	JR	Z,JAA81
	LD	HL,IAF46
	LD	DE,IAFE6
JAA81:	PUSH	DE
	PUSH	HL
	LD	A,00H
	CALL	CALPAT
	POP	DE
	EX	DE,HL
	LD	BC,32
	CALL	FCB1
	LD	A,01H	; 1 
	CALL	CALPAT
	POP	DE
	EX	DE,HL
	LD	BC,32
	CALL	FCB1
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAA9E:	LD	A,(DC00B)
	CP	B
	RET	Z
	CP	04H	; 4 
	JR	NZ,JAAAF
	LD	A,(DC010)
	ADD	A,04H	; 4 
	LD	(DC010),A
JAAAF:	LD	A,B
	LD	(DC00B),A
	CP	04H	; 4 
	JR	NZ,JAADA
	LD	A,02H	; 2 
	CALL	CALATR
	LD	A,(DC010)
	SUB	04H	; 4 
	LD	(DC010),A
	CALL	WRTVRM
	LD	A,03H	; 3 
	CALL	CALATR
	LD	A,(DC010)
	CALL	WRTVRM
	LD	HL,IB0A6
	LD	DE,IB146
	JR	JAB13

JAADA:	PUSH	AF
	LD	A,02H	; 2 
	CALL	CALATR
	LD	A,(DC010)
	CALL	WRTVRM
	LD	A,03H	; 3 
	CALL	CALATR
	LD	A,(DC010)
	CALL	WRTVRM
	POP	AF
	LD	HL,IB026
	LD	DE,IB0C6
	AND	A
	JR	Z,JAB13
	LD	HL,IB046
	LD	DE,IB0E6
	DEC	A
	JR	Z,JAB13
	LD	HL,IB066
	LD	DE,IB106
	DEC	A
	JR	Z,JAB13
	LD	HL,IB086
	LD	DE,IB126
JAB13:	PUSH	DE
	PUSH	HL
	LD	A,02H	; 2 
	CALL	CALPAT
	POP	DE
	EX	DE,HL
	LD	BC,32
	CALL	FCB1
	LD	A,03H	; 3 
	CALL	CALPAT
	POP	DE
	EX	DE,HL
	LD	BC,32
	CALL	FCB1
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAB30:	LD	A,(DC014)
	AND	A
	JR	NZ,JAB8C
	LD	A,(DC013)
	LD	B,A
	LD	A,(DC017)
	ADD	A,B
	LD	(DC017),A
	JP	NC,JABDD
	LD	A,(DC018)
	INC	A
	CP	7FH
	JR	C,JAB59
	LD	A,01H	; 1 
	LD	(DC014),A
	LD	A,7FH
	LD	(DC018),A
	JP	JABDD

JAB59:	PUSH	AF
	INC	A
	LD	E,A
	LD	D,00H
	LD	A,(DC01A)
	LD	L,A
	LD	H,00H
	PUSH	DE
	CALL	CAE93
	CALL	RDVRM
	LD	C,A
	POP	DE
	LD	A,E
	AND	07H	; 7 
	LD	B,A
	LD	A,80H
	JR	Z,JAB78
JAB75:	RRCA
	DJNZ	JAB75
JAB78:	AND	C
	JR	Z,JAB85
	LD	A,01H	; 1 
	LD	(DC014),A
	LD	A,00H
	CALL	WRTVRM
JAB85:	POP	AF
	LD	(DC018),A
	JP	JABDD

JAB8C:	LD	A,(DC013)
	LD	B,A
	LD	A,(DC017)
	ADD	A,B
	LD	(DC017),A
	JR	NC,JABDD
	LD	A,(DC018)
	DEC	A
	CP	09H	; 9 
	JR	NC,JABAD
	LD	A,00H
	LD	(DC014),A
	LD	A,09H	; 9 
	LD	(DC018),A
	JR	JABDD

JABAD:	PUSH	AF
	DEC	A
	LD	E,A
	LD	D,00H
	LD	A,(DC01A)
	LD	L,A
	LD	H,00H
	PUSH	DE
	CALL	CAE93
	CALL	RDVRM
	LD	C,A
	POP	DE
	LD	A,E
	AND	07H	; 7 
	LD	B,A
	LD	A,80H
	JR	Z,JABCC
JABC9:	RRCA
	DJNZ	JABC9
JABCC:	AND	C
	JR	Z,JABD9
	LD	A,01H	; 1 
	LD	(DC014),A
	LD	A,00H
	CALL	WRTVRM
JABD9:	POP	AF
	LD	(DC018),A
JABDD:	LD	A,(DC016)
	AND	A
	JR	NZ,JAC27
	LD	A,(DC015)
	LD	B,A
	LD	A,(DC019)
	ADD	A,B
	LD	(DC019),A
	JR	NC,JAC69
	LD	A,(DC01A)
	INC	A
	CP	0BCH
	JR	C,JAC04
	LD	A,01H	; 1 
	LD	(DC016),A
	LD	A,0BCH
	LD	(DC01A),A
	JR	JAC69

JAC04:	PUSH	AF
	LD	L,A
	LD	H,00H
	LD	A,(DC018)
	LD	E,A
	LD	D,00H
	CALL	CAE93
	CALL	RDVRM
	AND	A
	JR	Z,JAC21
	LD	A,01H	; 1 
	LD	(DC016),A
	LD	A,00H
	CALL	WRTVRM
JAC21:	POP	AF
	LD	(DC01A),A
	JR	JAC69

JAC27:	LD	A,(DC015)
	LD	B,A
	LD	A,(DC019)
	ADD	A,B
	LD	(DC019),A
	JR	NC,JAC69
	LD	A,(DC01A)
	DEC	A
	CP	02H	; 2 
	JR	NC,JAC48
	LD	A,00H
	LD	(DC016),A
	LD	A,02H	; 2 
	LD	(DC01A),A
	JR	JAC69

JAC48:	PUSH	AF
	LD	L,A
	LD	H,00H
	LD	A,(DC018)
	LD	E,A
	LD	D,00H
	CALL	CAE93
	CALL	RDVRM
	AND	A
	JR	Z,JAC65
	LD	A,00H
	LD	(DC016),A
	LD	A,00H
	CALL	WRTVRM
JAC65:	POP	AF
	LD	(DC01A),A
JAC69:	LD	A,04H	; 4 
	CALL	CALATR
	LD	A,(DC01A)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC018)
	CALL	WRTVRM
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAC7C:	LD	DE,0
	LD	HL,0
	LD	B,10H	; 16 
JAC84:	PUSH	BC
	PUSH	HL
	PUSH	DE
	CALL	CAE93
	LD	A,0FFH
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	LD	A,44H	; "D"
	CALL	WRTVRM
	POP	DE
	LD	HL,8
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	POP	BC
	DJNZ	JAC84
	LD	DE,00078H
	LD	HL,000BDH
	LD	B,10H	; 16 
JACAB:	PUSH	BC
	PUSH	HL
	PUSH	DE
	CALL	CAE93
	LD	A,0FFH
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	LD	A,44H	; "D"
	CALL	WRTVRM
	POP	HL
	LD	DE,8
	AND	A
	SBC	HL,DE
	EX	DE,HL
	POP	HL
	POP	BC
	DJNZ	JACAB
	LD	DE,0
	LD	HL,0
	LD	B,0BEH
JACD4:	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	CAE93
	LD	A,03H	; 3 
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	LD	A,41H	; "A"
	CALL	WRTVRM
	POP	HL
	INC	HL
	POP	DE
	POP	BC
	DJNZ	JACD4
	LD	DE,DBUF
	LD	HL,000BDH
	LD	B,0BEH
JACF7:	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	CAE93
	LD	A,0C0H
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	LD	A,41H	; "A"
	CALL	WRTVRM
	POP	HL
	DEC	HL
	POP	DE
	POP	BC
	DJNZ	JACF7
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAD13:	LD	DE,8
	LD	HL,8
	LD	B,0AH	; 10 
JAD1B:	PUSH	BC
	LD	C,04H	; 4 
JAD1E:	CALL	CAECE
	AND	0F0H
	JR	Z,JAD1E
	CP	10H	; 16 
	JR	Z,JAD1E
	OR	01H	; 1 
	EX	AF,AF'
JAD2C:	PUSH	DE
	LD	B,0FH	; 15 
JAD2F:	PUSH	BC
	PUSH	HL
	PUSH	DE
	CALL	CAE93
	LD	A,7EH	; "~"
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	EX	AF,AF'
	LD	B,A
	EX	AF,AF'
	LD	A,B
	CALL	WRTVRM
	POP	HL
	LD	DE,8
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	POP	BC
	DJNZ	JAD2F
	POP	DE
	INC	HL
	DEC	C
	JR	NZ,JAD2C
	INC	HL
	INC	HL
	INC	HL
	POP	BC
	DJNZ	JAD1B
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAD5C:	LD	A,00H
	CALL	CALPAT
	EX	DE,HL
	LD	HL,IAEE6
	LD	BC,32
	CALL	FCB1
	LD	A,01H	; 1 
	CALL	CALPAT
	EX	DE,HL
	LD	HL,IAF86
	LD	BC,32
	CALL	FCB1
	LD	A,02H	; 2 
	CALL	CALPAT
	EX	DE,HL
	LD	HL,IB026
	LD	BC,32
	CALL	FCB1
	LD	A,03H	; 3 
	CALL	CALPAT
	EX	DE,HL
	LD	HL,IB0C6
	LD	BC,32
	CALL	FCB1
	LD	A,24H	; "$"
	LD	(DC00D),A
	LD	A,0A0H
	LD	(DC00E),A
	LD	A,54H	; "T"
	LD	(DC00F),A
	LD	A,8CH
	LD	(DC010),A
	LD	A,00H
	CALL	CALATR
	LD	A,(DC00E)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00D)
	CALL	WRTVRM
	INC	HL
	LD	A,00H
	CALL	WRTVRM
	INC	HL
	LD	A,07H	; 7 
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00E)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00D)
	ADD	A,10H	; 16 
	CALL	WRTVRM
	INC	HL
	LD	A,04H	; 4 
	CALL	WRTVRM
	INC	HL
	LD	A,07H	; 7 
	CALL	WRTVRM
	INC	HL
	LD	A,(DC010)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00F)
	CALL	WRTVRM
	INC	HL
	LD	A,08H	; 8 
	CALL	WRTVRM
	INC	HL
	LD	A,0AH	; 10 
	CALL	WRTVRM
	INC	HL
	LD	A,(DC010)
	CALL	WRTVRM
	INC	HL
	LD	A,(DC00F)
	SUB	10H	; 16 
	CALL	WRTVRM
	INC	HL
	LD	A,0CH	; 12 
	CALL	WRTVRM
	INC	HL
	LD	A,0AH	; 10 
	CALL	WRTVRM
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAE1D:	LD	A,04H	; 4 
	CALL	CALPAT
	EX	DE,HL
	LD	HL,IB166
	LD	BC,32
	CALL	FCB1
	CALL	CAECE
	AND	3FH	; "?"
	LD	(DC013),A
	CALL	CAECE
	AND	7FH
	ADD	A,80H
	LD	(DC015),A
	LD	A,01H	; 1 
	LD	(DC016),A
	CALL	CAECE
	AND	01H	; 1 
	LD	(DC014),A
	LD	A,04H	; 4 
	CALL	CALATR
	LD	A,64H	; "d"
	CALL	WRTVRM
	INC	HL
	LD	A,44H	; "D"
	CALL	WRTVRM
	INC	HL
	LD	A,10H	; 16 
	CALL	WRTVRM
	INC	HL
	LD	A,0EH	; 14 
	CALL	WRTVRM
	INC	HL
	LD	A,0D0H
	CALL	WRTVRM
	RET

?AE6E:	PUSH	DE
	CALL	CAE93
	POP	DE
	LD	A,E
	AND	07H	; 7 
	LD	B,A
	LD	A,80H
	JR	Z,JAE7E
JAE7B:	RRCA
	DJNZ	JAE7B
JAE7E:	PUSH	AF
	CALL	RDVRM
	LD	B,A
	POP	AF
	OR	B
	CALL	WRTVRM
	LD	DE,(X.C009)
	ADD	HL,DE
	LD	A,0F1H
	CALL	WRTVRM
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAE93:	LD	A,E
	AND	0F8H
	LD	E,A
	PUSH	HL
	SRL	H
	RR	L
	SRL	H
	RR	L
	SRL	H
	RR	L
	LD	B,H
	LD	C,L
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	AND	A
	SBC	HL,BC
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	POP	BC
	ADD	HL,BC
	ADD	HL,DE
	CALL	CAEB9
	ADD	HL,DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAEB9:	LD	A,(D$F3E3)
	AND	04H	; 4 
	RRCA
	LD	D,A
	LD	E,00H
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAEC3:	LD	A,(D$F3E2)
	AND	80H
	RRCA
	RRCA
	LD	D,A
	LD	E,00H
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

CAECE:	PUSH	BC
	LD	B,04H	; 4 
	PUSH	HL
	LD	HL,DC000
	XOR	A
	LD	C,A
JAED7:	LD	A,(HL)
	ADC	A,A
	ADC	A,A
	XOR	C
	XOR	(HL)
	DEC	A
	LD	(HL),A
	XOR	C
	LD	C,A
	INC	HL
	DJNZ	JAED7
	POP	HL
	POP	BC
	RET

IAEE6:	LD	C,3FH	; "?"
	LD	A,A
	LD	(HL),E
	POP	HL
	POP	HL
	LD	(HL),E
	LD	A,A
	CCF
	RRCA
	INC	BC
	DEFB	0,0,0,0,0,0,0
	RET	NZ
	RET	PO
	RET	M
	CALL	M,C.FFFF
	RST	38H
	RST	38H
	RST	38H
	LD	A,A
	RRCA
	LD	BC,C.0000
IAF06:	LD	C,3FH	; "?"
	LD	A,A
	LD	(HL),E
	POP	HL
	POP	HL
	LD	(HL),E
	LD	A,A
	CCF
	RRCA
	DEFB	0,0,0,0,0,0,0,0
	RET	P
	CALL	M,C.FFFF
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	LD	A,A
	DEFB	0,0,0,0,0
IAF26:	LD	C,3FH	; "?"
	LD	A,A
	LD	(HL),E
	POP	HL
	POP	HL
	LD	(HL),E
	LD	A,A
	CCF
	LD	C,00H
	DEFB	0,0,0,0,0,0
	RET	P
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	DEFB	0,0,0,0,0,0,0
IAF46:	RRCA
	CCF
	LD	A,A
	LD	(HL),E
	POP	HL
	POP	HL
	LD	(HL),E
	LD	A,A
	CCF
	LD	C,00H
	DEFB	0,0,0,0,0
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CALL	M,C.00C0
	DEFB	0,0,0,0,0,0
IAF66:	DEFB	0,0,0
	LD	BC,03F0FH
	LD	A,A
	LD	(HL),E
	POP	HL
	POP	HL
	LD	(HL),E
	LD	A,A
	CCF
	LD	C,00H
	DEFB	0,0,0
	RLCA
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CP	0F8H
	RET	PO
	ADD	A,B
	DEFB	0,0,0
IAF86:	DEFB	0,0,0,0,0,0,0
	ADD	A,B
	RET	NZ
	RET	P
	RET	M
	CP	0FFH
	RST	38H
	CCF
	INC	BC
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0
	ADD	A,B
	ADD	A,B
	ADD	A,B
IAFA6:	DEFB	0,0,0,0,0
	RET	NZ
	RET	P
	CALL	M,C.FFFF
	RST	38H
	RST	38H
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0
	RET	NZ
	RET	PO
	RET	PO
	DEFB	0,0,0,0
IAFC6:	DEFB	0,0
	RET	NZ
	CP	0FFH
	RST	38H
	RST	38H
	RST	38H
	CALL	M,C.0000
	DEFB	0,0,0,0,0,0,0,0,0
	RET	NZ
	RET	PO
	RET	P
	RET	PO
	DEFB	0,0,0,0,0,0,0,0
IAFE6:	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RET	P
	ADD	A,B
	DEFB	0,0,0,0,0,0,0,0,0
	RET	NZ
	RET	PO
	RET	PO
	RET	NZ
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0
IB006:	LD	BC,0FF3FH
	RST	38H
	RST	38H
	CP	0F8H
	RET	PO
	ADD	A,B
	DEFB	0,0,0,0,0,0,0
	RET	NZ
	RET	PO
	RET	PO
	RET	NZ
	ADD	A,B
	DEFB	0,0,0,0,0,0,0,0,0,0,0
IB026:	DEFB	0,0
	INC	BC
	RLCA
	RRA
	CCF
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CP	0F0H
	ADD	A,B
	DEFB	0,0
	LD	(HL),B
	CALL	M,C.CEFE
	ADD	A,A
	ADD	A,A
	ADC	A,0FEH
	CALL	M,C$C0F0
	DEFB	0,0,0,0,0
IB046:	DEFB	0,0
	RRCA
	CCF
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CP	00H
	DEFB	0,0,0,0
	LD	(HL),B
	CALL	M,C.CEFE
	ADD	A,A
	ADD	A,A
	ADC	A,0FEH
	CALL	M,C$00F0
	DEFB	0,0,0,0,0
IB066:	DEFB	0
	RRCA
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	DEFB	0,0,0,0,0,0,0
	LD	(HL),B
	CALL	M,C.CEFE
	ADD	A,A
	ADD	A,A
	ADC	A,0FEH
	CALL	M,C.0070
	DEFB	0,0,0,0,0
IB086:	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CCF
	INC	BC
	DEFB	0,0,0,0,0,0,0
	RET	P
	CALL	M,C.CEFE
	ADD	A,A
	ADD	A,A
	ADC	A,0FEH
	CALL	M,C.0070
	DEFB	0,0,0,0,0
IB0A6:	DEFB	0,0
	RET	PO
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	LD	A,A
	RRA
	RLCA
	LD	BC,C.0000
	DEFB	0,0,0,0
	ADD	A,B
	RET	P
	CALL	M,C.CEFE
	ADD	A,A
	ADD	A,A
	ADC	A,0FEH
	CALL	M,C.0070
	DEFB	0
IB0C6:	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0
	LD	BC,00101H
	DEFB	0,0,0,0,0,0,0
	LD	BC,00F03H
	RRA
	LD	A,A
	RST	38H
	RST	38H
	CALL	M,C.00C0
IB0E6	EQU	$-1
	DEFB	0,0,0,0,0,0,0,0
	INC	BC
	RLCA
	RLCA
	DEFB	0,0,0,0,0,0,0,0,0
	INC	BC
	RRCA
	CCF
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	DEFB	0,0,0,0
IB106:	DEFB	0,0,0,0
	INC	BC
	RLCA
	RRCA
	RLCA
	DEFB	0,0,0,0,0,0,0,0,0,0
	INC	BC
	LD	A,A
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	CCF
	DEFB	0,0,0,0,0,0,0
IB126:	INC	BC
	RLCA
	RLCA
	INC	BC
	DEFB	0,0,0,0,0,0,0,0,0,0,0,0
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RST	38H
	RRCA
	LD	BC,C.0000
	DEFB	0,0,0,0,0,0,0
IB146:	INC	BC
	RLCA
	RLCA
	INC	BC
	LD	BC,C.0000
	DEFB	0,0,0,0,0,0,0,0,0
	ADD	A,B
	CALL	M,C.FFFF
	RST	38H
	LD	A,A
	RRA
	RLCA
	LD	BC,C.0000
	DEFB	0,0,0,0,0
IB166:	JR	NC,JB1E0
	CALL	M,C$68F4
	JR	NC,JB16D
JB16D:	DEFB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DEFB	0,0,0,0,0

	DEFS	08000H-$,0FFH

	END
