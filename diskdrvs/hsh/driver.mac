; Diskdriver NOVAXIS for HSH/MAK SCSI controller
; HDC	WD33C93A

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ? and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders

	.Z80
	ORG	4000H
VDP.DW	EQU	0007H
OUTDO	EQU	0018H
CALSLT	EQU	001CH
ENASLT	EQU	0024H
IDBYT2	EQU	002DH
WRTVDP	EQU	0047H
CHGMOD	EQU	005FH
CHGET	EQU	009FH
CHPUT	EQU	00A2H
POSIT	EQU	00C6H
SNSMAT	EQU	0141H
CALBAS	EQU	0159H
NSTWRT	EQU	0171H
CHGCPU	EQU	0180H
GETCPU	EQU	0183H

M406F	EQU	0406FH			; error
M4666	EQU	04666H			; CHRGTR
M4C64   EQU     04C64H          	; evaluate expression
M517A   EQU     0517AH          	; convert DAC to other type
M521C   EQU     0521CH          	; evaluate byte operand
M5EA4   EQU    	05EA4H          	; get address of variable
M6627	EQU	06627H			; allocate temp string
M67D0   EQU     067D0H          	; free temporary string

D.8000	EQU	8000H	; --SLI
D.8002	EQU	8002H	; --SL-
I$8004	EQU	8004H	; ----I
D.81FC	EQU	81FCH	; --SL-
D.81FD	EQU	81FDH	; --SL-
I.8200	EQU	8200H	; ----I
D.8207	EQU	8207H	; --SL-
D.8209	EQU	8209H	; --S--
D.83F0	EQU	83F0H	; --SL-
D.83F1	EQU	83F1H	; --SL-
I.83F2	EQU	83F2H	; ----I
D.83FA	EQU	83FAH	; --SL-
D.83FB	EQU	83FBH	; --SL-
D.83FD	EQU	83FDH	; --SL-
D.83FE	EQU	83FEH	; --SL-
D.83FF	EQU	83FFH	; --SL-
I.8400	EQU	8400H	; ----I
I.859E	EQU	859EH	; ----I
D$85A0	EQU	85A0H	; ---L-
D$85A2	EQU	85A2H	; ---L-
I.85BE	EQU	85BEH	; ----I
D.85D2	EQU	85D2H	; ---L-
D$85F3	EQU	85F3H	; ---L-
D$85F4	EQU	85F4H	; ---L-
I$85F6	EQU	85F6H	; ----I
D.85FE	EQU	85FEH	; ---LI
I$8600	EQU	8600H	; ----I
I.8700	EQU	8700H	; ----I
I$8708	EQU	8708H	; ----I
I.8800	EQU	8800H	; ----I

I.C000	EQU	0C000H	; ----I
J$CD4F	EQU	0CD4FH	; J----

I$F1C9	EQU	0F1C9H	; ----I
I$F24F	EQU	0F24FH	; ----I
D$F30D	EQU	0F30DH	; ---L-
D.F33F	EQU	0F33FH	; --SL-
D$F342	EQU	0F342H	; ---L-
D.F34D	EQU	0F34DH	; --SL-
I$F355	EQU	0F355H	; ----I
D$F365	EQU	0F365H	; --S--
D$F366	EQU	0F366H	; --S--
C$F368	EQU	0F368H	; -C---

C$F398	EQU	0F398H	; -C---
D$F3AE	EQU	0F3AEH	; --S--
D.F3DC	EQU	0F3DCH	; --SL-
D.F3DD	EQU	0F3DDH	; --S--
I.F55E	EQU	0F55EH	; ----I
D.F663	EQU	0F663H	; --SLI
D.F672	EQU	0F672H	; --SL-
D.F674	EQU	0F674H	; --SL-
I$F698	EQU	0F698H	; ----I
D$F699	EQU	0F699H	; --S--
D.F6A0	EQU	0F6A0H	; --SL-
D.F6AB	EQU	0F6ABH	; --SL-
D$F6B1	EQU	0F6B1H	; --S--
I$F7F6	EQU	0F7F6H	; ----I
D.F7F8	EQU	0F7F8H	; --S-I
D.F7F9	EQU	0F7F9H	; --S--
D$F860	EQU	0F860H	; --S--
D.F862	EQU	0F862H	; --SL-
D.F92C	EQU	0F92CH	; --SL-
HOKVLD	EQU	0FB20H
DRVINF	EQU	0FB21H
NEWKEY	EQU	0FBE5H
D.FC48	EQU	0FC48H	; --SL-
D.FC4A	EQU	0FC4AH	; --SL-
EXPTBL	EQU	0FCC1H
SLTWRK	EQU	0FD09H
PROCNM	EQU	0FD89H
DEVICE	EQU	0FD99H
I$FDEA	EQU	0FDEAH	; ----I
I$FE49	EQU	0FE49H	; ----I
EXTBIO	EQU	0FFCAH
I.FFFF	EQU	0FFFFH	; ----I

; RTC is used in the following way (I am not sure this allowed by the MSX standard)
;
; Bank	Register
; 2	3	b3,b2 = b1,b0 target id
; 2	11	b3 = ASPI support, b2 = multi target support
; 2	12	b3 = b2 target id, b2 = extend partition support, b1,b0 = host id (inverted)-4

I.4000:	DEFB    "AB"
        DEFW    C.456E
        DEFW    C.5BBD
        DEFW    0
        DEFW    0
        DEFS    6,0

	JP	J$4D3B			; DSKIO entrypoint
?.4013:	JP	J$4E4F                  ; DSKCHG entrypoint
?.4016:	JP	C.4E7E                  ; GETDPB entrypoint
?.4019:	JP	J$4F5B                  ; CHOICE entrypoint
?.401C:	JP	J$4F9D                  ; DSKFMT entrypoint
?.401F:	JP	J.4FDA                  ; MTOFF entrypoint
?.4022:	JP	J.46BE
?.4025:	NOP
	JP	J.46BE
?.4029:	JP	J.46BE
?.402C:	NOP
	JP	C.4030			; GETSLT entrypoint

;	  Subroutine GETSLT
;	     Inputs  ________________________
;	     Outputs ________________________

C.4030:	CALL	C.4064
	OR	(HL)
	RET	P
	LD	C,A
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	AND	0CH
	OR	C
	RET

;	  Subroutine GETWRK
;	     Inputs  ________________________
;	     Outputs ________________________

C.403F:	CALL	C.404A			; get SLTWRK entry
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	PUSH	HL
	POP	IX
	RET

;	  Subroutine get SLTWRK entry
;	     Inputs  ________________________
;	     Outputs ________________________

C.404A:	CALL	C.4064
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SCF
	ADC	A,A
	LD	C,A
	LD	A,(HL)
	ADD	A,A
	SBC	A,A
	AND	0CH
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	AND	(HL)
	OR	C
	ADD	A,A
	LD	HL,SLTWRK
	JR	J$4070

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4064:	IN	A,(0A8H)
	NOP
	RRCA
	RRCA
	AND	03H
	LD	HL,EXPTBL
	LD	B,0
J$4070:	LD	C,A
	ADD	HL,BC
	RET

;	  Subroutine SYNCHR
;	     Inputs  ________________________
;	     Outputs ________________________

C.4073:	LD	A,(HL)
	EX	(SP),HL
	CP	(HL)
	INC	HL
	EX	(SP),HL
	JR	NZ,J.408C		; BASIC error: syntax error
	LD	IX,M4666
	CALL	CALBAS			; CHRGTR
	EI
	RET

;	  Subroutine BASIC error: device I/O error
;	     Inputs  ________________________
;	     Outputs ________________________

?.4083:	LD	E,19
	DEFB	001H

;	  Subroutine BASIC error: type mismatch
;	     Inputs  ________________________
;	     Outputs ________________________

J.4086:	LD	E,13
	DEFB	001H

;	  Subroutine BASIC error: illegal function call
;	     Inputs  ________________________
;	     Outputs ________________________

J.4089:	LD	E,5
	DEFB	001H

;	  Subroutine BASIC error: syntax error
;	     Inputs  ________________________
;	     Outputs ________________________

J.408C:	LD	E,2

;	  Subroutine BASIC error
;	     Inputs  ________________________
;	     Outputs ________________________

J$408E:	LD	IX,M406F
	JR	J.40B6

;	  Subroutine allocate temp string
;	     Inputs  ________________________
;	     Outputs ________________________

C$4094:	LD	IX,M6627
	JR	J.40B6

;	  Subroutine get address of variable
;	     Inputs  ________________________
;	     Outputs ________________________

C.409A:	LD	IX,M5EA4
	JR	J.40B6

;	  Subroutine convert DAC to other type
;	     Inputs  ________________________
;	     Outputs ________________________

C$40A0:	LD	IX,M517A
	JR	J.40B6

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

?.40A6:	LD	IX,M4C64
	JR	J.40B6

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

?.40AC:	LD	IX,M67D0
	JR	J.40B6

;	  Subroutine evaluate byte operand
;	     Inputs  ________________________
;	     Outputs ________________________

C.40B2:	LD	IX,M521C
J.40B6:	CALL	CALBAS
	EI
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.40BB:	PUSH	HL
	LD	HL,D.F663
	LD	A,(HL)
	LD	C,A
	LD	(HL),2
	LD	HL,D.F7F8
	CP	2
	JR	Z,J$40DB
	CP	4
	JR	Z,J$40D3
	CP	8
	JP	NZ,J.4086
J$40D3:	PUSH	BC
	CALL	C$40A0			; convert DAC to other type
	POP	BC
	LD	HL,I$F7F6
J$40DB:	LD	B,0
	POP	DE
	LDIR
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.40E1:	PUSH	HL
	PUSH	AF
	CALL	C$4094			; allocate temp string
	LD	DE,(D$F699)
	LD	HL,I.F55E
	POP	AF
	AND	A
	JR	Z,J$40F6
	LD	C,A
	LD	B,0
	LDIR
J$40F6:	POP	DE
	LD	HL,I$F698
	LD	BC,3
	LDIR
	RET

;	  Subroutine CALL SLOW
;	     Inputs  ________________________
;	     Outputs ________________________

J.4100:	LD	A,80H
	JR	J.410A

;	  Subroutine CALL MEDIUM
;	     Inputs  ________________________
;	     Outputs ________________________

J.4104:	LD	A,81H
	JR	J.410A

;	  Subroutine CALL FAST
;	     Inputs  ________________________
;	     Outputs ________________________

J.4108:	LD	A,82H
J.410A:	PUSH	AF
	LD	A,(CHGCPU+0)
	CP	0C3H
	JR	Z,J$4115
	POP	AF
	AND	A
	RET

J$4115:	POP	AF
	PUSH	IX
	PUSH	IY
	CALL	CHGCPU
	POP	IY
	POP	IX
	AND	A
	RET

;	  Subroutine CALL MAP
;	     Inputs  ________________________
;	     Outputs ________________________

J.4123:	DI
	PUSH	HL
	LD	HL,I.C000
	LD	BC,4000H-4
J.412B:	LD	A,3AH
	CPIR
	JR	NZ,J.414E
	INC	HL
	LD	A,(HL)
	CP	0F2H
	JR	NZ,J.412B
	DEC	HL
	LD	A,(HL)
	CP	0C8H
	JR	C,J.412B
	CP	0CBH
	JR	NC,J.412B
	DEC	HL
	LD	(HL),0DBH
	INC	HL
	LD	A,(HL)
	ADD	A,35H
	LD	(HL),A
	INC	HL
	LD	(HL),00H
	JR	J.412B

J.414E:	AND	A
	POP	HL
	EI
	RET

;	  Subroutine CALL MAP2
;	     Inputs  ________________________
;	     Outputs ________________________

J.4152:	DI
	PUSH	HL
	LD	HL,I.C000
	LD	BC,4000H-4
J.415A:	LD	A,3AH
	CPIR
	JR	NZ,J.414E
	INC	HL
	LD	A,(HL)
	CP	0F2H
	JR	NZ,J.415A
	DEC	HL
	LD	A,(HL)
	CP	0C7H
	JR	C,J.415A
	CP	0CBH
	JR	NC,J.415A
	DEC	HL
	LD	(HL),0DBH
	INC	HL
	LD	A,(HL)
	ADD	A,35H
	LD	(HL),A
	INC	HL
	LD	(HL),00H
	JR	J.415A

;	  Subroutine CALL INFO
;	     Inputs  ________________________
;	     Outputs ________________________

J.417D:	PUSH	HL
	CALL	C.46BF			; print string inline code
	DEFB	"Available call statements:",13,10
	DEFB	13,10
	DEFB	"call INFO                     Shows this text",13,10
	DEFB	"call SLOW                     Z80 mode.",13,10
	DEFB	"call MEDIUM                   R800 ROM mode.",13,10
	DEFB	"call FAST                     R800 RAM mode.",13,10
	DEFB	"call MAP                      Fix DOS2 mapper routine",13,10
	DEFB	"call MAP2                     ditto - version 2",13,10
	DEFB	"call HOSTID(variable)         Get SCSI Host ID",13,10
	DEFB	"call SETHOSTID(var.)          Set SCSI Host ID",13,10
	DEFB	"call TARGETID(variable)       Get SCSI Target ID",13,10
	DEFB	"call SETTARGETID(var.)        Set SCSI Target ID",13,10
	DEFB	"call INQUIRY(var,str,str,str) Get INQUIRY of specified Target",13,10
	DEFB	13,10
	DEFB	0
	POP	HL
	AND	A
J$43C3:	RET

;	  Subroutine CALL HOSTID
;	     Inputs  ________________________
;	     Outputs ________________________

J.43C4:	CALL	C.4073
	DEFB	"("
	CALL	C.409A			; get address of variable
	PUSH	DE
J$43CC:	LD	A,(D.F663)
	PUSH	AF
	CALL	C.5935			; get host id from RTC
	LD	(D.F7F8),A
	XOR	A
	LD	(D.F7F9),A
	POP	AF
	LD	(D.F663),A
	EX	(SP),HL
	CALL	C.40BB
	POP	HL
	CALL	C.4073
	DEFB	")"
	RET

;	  Subroutine CALL SETHOSTID
;	     Inputs  ________________________
;	     Outputs ________________________

C$43E8:	CALL	C.40B2			; evaluate byte operand
J$43EB:	CP	4
	JP	C,J.4089		; BASIC error: illegal function call
	CP	7+1
	JP	NC,J.4089		; BASIC error: illegal function call
	CALL	C$50F0			; set host id
	AND	A
	RET

;	  Subroutine CALL TARGETID
;	     Inputs  ________________________
;	     Outputs ________________________

C$43FA:	CALL	C.4073
	DEFB	"("
	CALL	C.409A			; get address of variable
	PUSH	DE
	LD	A,(D.F663)
	PUSH	AF
	CALL	C.5A19			; get target id
	LD	(D.F7F8),A
	XOR	A
	LD	(D.F7F9),A
	POP	AF
	LD	(D.F663),A
	EX	(SP),HL
	CALL	C.40BB
	POP	HL
J$4419:	CALL	C.4073
	DEFB	")"
	RET

;	  Subroutine CALL SETTARGETID
;	     Inputs  ________________________
;	     Outputs ________________________

C$441E:	CALL	C.40B2			; evaluate byte operand
	CP	7
	CCF
	JP	C,J.4089		; BASIC error: illegal function call
	CALL	C.5A3F			; set target id
	AND	A
	RET

;	  Subroutine CALL INQUIRY
;	     Inputs  ________________________
;	     Outputs ________________________

J.442C:	LD	A,(HL)
	CP	"("
	JP	NZ,J.408C		; BASIC error: syntax error
	INC	HL
	CALL	C.40B2			; evaluate byte operand
	AND	A
	JP	M,J.4089		; BASIC error: illegal function call
	CP	7+1
	JP	NC,J.4089		; BASIC error: illegal function call
	LD	IX,(D.F34D)
	LD	(IX+112),A
	LD	A,(HL)
	CP	","
	JP	NZ,J.408C		; BASIC error: syntax error
	INC	HL
	PUSH	IX
	CALL	C.409A			; get address of variable
	POP	IX
	LD	A,(D.F663)
	CP	3
	JP	NZ,J.4086
	LD	(IX+113),D
	LD	(IX+114),E
	LD	A,(HL)
	CP	","
	JP	NZ,J.408C		; BASIC error: syntax error
	INC	HL
	PUSH	IX
	CALL	C.409A			; get address of variable
	POP	IX
	LD	A,(D.F663)
	CP	3
	JP	NZ,J.4086
	LD	(IX+115),D
	LD	(IX+116),E
	LD	A,(HL)
	CP	","
	JP	NZ,J.408C		; BASIC error: syntax error
	INC	HL
	PUSH	IX
	CALL	C.409A			; get address of variable
	POP	IX
	LD	A,(D.F663)
	CP	3
	JP	NZ,J.4086
	LD	(IX+117),D
	LD	(IX+118),E
	LD	A,(HL)
	CP	")"
	JP	NZ,J.408C		; BASIC error: syntax error
	PUSH	HL
	LD	A,(IX+112)
	CALL	C$58BF
	JP	C,J$408E		; BASIC error
	LD	HL,(D.F34D)
	LD	BC,8
	ADD	HL,BC
	LD	DE,I.F55E
	LD	BC,8
	LD	A,C
	LDIR
	PUSH	HL
	LD	H,(IX+113)
	LD	L,(IX+114)
	PUSH	IX
	CALL	C.40E1
	POP	IX
	POP	HL
	LD	DE,I.F55E
	LD	BC,16
	LD	A,C
	LDIR
	PUSH	HL
	LD	H,(IX+115)
	LD	L,(IX+116)
	PUSH	IX
	CALL	C.40E1
	POP	IX
	POP	HL
	LD	DE,I.F55E
	LD	BC,4
	LD	A,C
	LDIR
	LD	H,(IX+117)
	LD	L,(IX+118)
	CALL	C.40E1
	POP	HL
	INC	HL
	AND	A
	RET

;	  Subroutine allocate memory
;	     Inputs  ________________________
;	     Outputs ________________________

C.44F7:	LD	A,L
	OR	H
	RET	Z
	XOR	A
	SUB	L
	LD	L,A
	LD	A,00H
	SBC	A,H
	LD	H,A
	LD	C,L
	LD	B,H
	ADD	HL,SP
	CCF
	RET	C
	LD	DE,(D.FC48)
	SBC	HL,DE
	RET	C
	LD	A,H
	CP	03H	; 3 
	RET	C
	PUSH	BC
	LD	HL,0
	ADD	HL,SP
I.4516:	LD	E,L
	LD	D,H
I.4518:	ADD	HL,BC
	PUSH	HL
	LD	HL,(D.F674)
	AND	A
	SBC	HL,DE
	LD	C,L
	LD	B,H
	INC	BC
	POP	HL
	LD	SP,HL
	EX	DE,HL
	LDIR
	POP	BC
	LD	HL,(D.FC4A)
	ADD	HL,BC
	LD	(D.FC4A),HL
	LD	DE,I$FDEA
	ADD	HL,DE
	LD	(D$F860),HL
	EX	DE,HL
	LD	HL,(D.F672)
	ADD	HL,BC
	LD	(D.F672),HL
	LD	HL,(D.F862)
	ADD	HL,BC
	LD	(D.F862),HL
	LD	HL,(D.F674)
	ADD	HL,BC
	LD	(D.F674),HL
	DEC	HL
	DEC	HL
	LD	(D$F6B1),HL
	LD	L,E
	LD	H,D
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,02H	; 2 
J$455A:	EX	DE,HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	EX	DE,HL
	LD	BC,0*256+7
	LD	(HL),B
	ADD	HL,BC
	LD	(HL),B
	LD	BC,258
	ADD	HL,BC
	DEC	A
	JR	NZ,J$455A
	RET

;	  Subroutine CARTRIDGE INIT
;	     Inputs  ________________________
;	     Outputs ________________________

J.456E:	CALL	C$4710			; initialize interface
	RET	C			; quit
	LD	A,(DEVICE)
	OR	A                       ; abort disksystem init ?
	RET	M			; yep, quit
	JR	NZ,J$457F		; disksystem init already started by an other diskrom, skip init
	CALL	C$4587			; init first disksystem
	RET	C			; error, quit
	JR	J$4583

J$457F:	CALL	C$45FB			; init next disksystem
	RET	C
J$4583:	CALL	C$5FCC
	RET

;	  Subroutine init first disksystem
;	     Inputs  ________________________
;	     Outputs ________________________

C$4587:	LD	HL,HOKVLD
	BIT	0,(HL)			; EXTBIO initialized ?
	JR	NZ,J$459A		; yep, skip
	SET	0,(HL)
	LD	HL,EXTBIO
	LD	B,15
J$4595:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$4595			; initialize EXTBIO
J$459A:	LD	HL,(D.FC48)
	LD	DE,I.C000+1
	RST	20H                     ; at least 16Kb RAM ?
	CCF
	RET	C			; nope, quit
	LD	A,6
	CALL	SNSMAT
	RRCA
	CCF				; SHIFT pressed ?
	RET	C			; yep, quit
	CALL	C$57F3			; determine size of static disk workarea + size of driver workarea
	CALL	C.44F7			; allocate memory
	RET	C			; error, quit
	PUSH	HL
	LD	HL,I$FE49
	LD	BC,I$F1C9
J$45B9:	XOR	A
	LD	(BC),A
	INC	BC
	INC	HL
	LD	A,L
	OR	H
	JR	NZ,J$45B9		; initialize static disk workarea
	LD	HL,SECLEN
	LD	(D.F6AB),HL		; bigest sector size = 512
	LD	B,4*2+4*3
	LD	HL,DRVINF
J$45CC:	LD	(HL),A
	INC	HL
	DJNZ	J$45CC			; initialize DRVINF and DRVINT
	LD	HL,I$F24F
	LD	B,69H
J$45D5:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$45D5			; initialize disk system hooks
	LD	A,0DBH
	LD	HL,0C9A8H
	LD	(D$F365),A
	LD	(D$F366),HL		; initialize read primairy slot entry
	LD	A,6
	CALL	SNSMAT
	AND	02H
	LD	(D.F33F),A		; CTRL key (less drives)
	LD	A,7
	RST	18H			; beep
	LD	C,0			; drive 0
	LD	DE,DRVINF		; free disk interface entry
	EXX
	POP	DE			; start of driver workarea
	JR	J$4632			; continue

;	  Subroutine init next disksystem
;	     Inputs  ________________________
;	     Outputs ________________________

C$45FB:	LD	HL,DRVINF
	LD	B,4
	XOR	A
J$4601:	ADD	A,(HL)
	RET	C			; DRVINF corrupted, quit
	INC	HL
	INC	HL
	DJNZ	J$4601
	CP	8			; already 8 drives registered ?
	CCF
	RET	C			; yep, quit
	LD	HL,(D.F6AB)
	LD	DE,SECLEN
	RST	20H			; sector size of this interface bigger ?
	JR	NC,J$4618
	LD	(D.F6AB),DE		; yep, new bigest sector size
J$4618:	LD	DE,DRVINF
	LD	BC,4*256+0
J$461E:	LD	A,(DE)
	AND	A			; entry free ?
	JR	Z,J$4629		; yep, use it
	ADD	A,C
	LD	C,A			; number of drives registered
	INC	DE
	INC	DE
	DJNZ	J$461E			; next entry
	RET				; no free entry, quit

J$4629:	EXX
	CALL	C$57F8			; determine size of driver workarea
	CALL	C.44F7			; allocate memory
	RET	C			; error, quit
	EX	DE,HL
J$4632:	CALL	C.404A			; get SLTWRK entry
	LD	(HL),E
	INC	HL
	LD	(HL),D			; register start of driver workarea
	EXX
	LD	A,(D.F33F)
	AND	A			; minimize number of drives flag (CTRL pressed)
	LD	A,C
	CALL	C.4828			; InsWork
	ADD	A,L
	CP	8+1
	LD	A,L
	JR	C,J$464A
	LD	A,8
	SUB	C
J$464A:	PUSH	BC
	LD	(DE),A			; register number of drives of interface
	INC	DE
	CALL	C.4030			; GETSLT
	LD	(DE),A			; register slotid of interface
	POP	BC
	LD	B,0
	LD	HL,I$F355
	ADD	HL,BC
	ADD	HL,BC
	PUSH	HL
	DEC	DE
	LD	A,(DE)			; number of drives
	PUSH	AF
	PUSH	DE
	LD	L,A
	LD	H,0
	LD	D,H
	LD	E,L
	ADD	HL,HL
	ADD	HL,HL			; *4
	ADD	HL,DE			; *5
I$4666:	ADD	HL,HL			; *10
	ADD	HL,HL			; *20
	ADD	HL,DE			; *21
	CALL	C.44F7			; allocate memory (DPBs)
	POP	DE
	JR	C,J$46B6		; error, deregister interface and quit
	PUSH	HL
	CALL	C.4CE1			; ClrEndLn
	POP	DE
	POP	BC
	POP	HL
	LD	C,0

J$4678:	LD	(HL),E
	INC	HL
	LD	(HL),D			; register DPB
	INC	HL
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	HL,-512
	ADD	HL,SP
	LD	SP,HL			; allocate temporary space on stack
	LD	(D.F34D),HL		; use this as sector buffer
	LD	A,C
	LD	BC,(DEFDPB+1)		; mediadescriptor
	LD	B,0
	EX	DE,HL
	CALL	C.4E7E			; GETDPB (initialize DPB)
	LD	HL,512
	EX	AF,AF'
	ADD	HL,SP
	EX	AF,AF'
	LD	SP,HL			; dispose temporary space on stack
	POP	HL
	POP	DE
	LD	BC,21
	JR	C,J$46A5		; error, initialize DPB with default DPB
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL			; update pointer to next DPB
	JR	J$46AC			; continue

J$46A5:	PUSH	HL
	LD	HL,DEFDPB
	LDIR
	POP	HL			; initialize DPB with default DPB
J$46AC:	POP	BC
	INC	C
	DJNZ	J$4678			; next DPB
	LD	HL,DEVICE
	INC	(HL)			; update number of disk interfaces
	AND	A
	RET

J$46B6:	POP	AF
	POP	AF
	XOR	A
	LD	(DE),A
	INC	DE
	LD	(DE),A
	SCF
	RET

;	  Subroutine no function
;	     Inputs  ________________________
;	     Outputs ________________________

J.46BE:	RET

;	  Subroutine print string inline code
;	     Inputs  ________________________
;	     Outputs ________________________

C.46BF:	POP	HL
	LD	A,(HL)
	INC	HL
	PUSH	HL
	OR	A
	RET	Z
	RST	18H
	JR	C.46BF

;	  Subroutine restore CPU mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.46C8:	PUSH	AF
	PUSH	IX
	PUSH	IY
	LD	A,(D.F92C)
	JR	J$46ED

;	  Subroutine save CPU mode and switch to driver CPU mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.46D2:	PUSH	AF
	PUSH	IX
	PUSH	IY
	LD	IX,GETCPU
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT
	LD	(D.F92C),A		; save support CPU mode
	CALL	C.5923
	CPL
	RLCA
	RLCA				; b0 = -b6
	AND	01H			; driver CPU mode
J$46ED:	LD	IX,CHGCPU
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT
	POP	IY
	POP	IX
	POP	AF
	RET

DEFDPB	EQU	$-1

	DEFB	0F0H
	DEFW	512
        DEFB	0FH
        DEFB	04H
        DEFB	1FH
        DEFB	06H
	DEFW	1
        DEFB	2
        DEFB	254
        DEFW	41
        DEFW	1300
        DEFB	12
        DEFW	25

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4710:	EI
	LD	A,(IDBYT2)
	CP	1			; MSX1 ?
	RET	C			; yep, quit
	LD	A,6
	CALL	C$7E00			; patch, orginal had CALL SNSMAT
	BIT	2,A			; skip interface (GRAPH pressed) ?
	JR	NZ,J.4722		; nope, continue
	SCF				; yep, quit
	RET

J.4722:	LD	A,80
	LD	(D$F3AE),A
	XOR	A
	CALL	CHGMOD			; force SCREEN 0 width 80

;	  Subroutine initialize
;	     Inputs  ________________________
;	     Outputs ________________________

J$472B:	LD	A,(IDBYT2)
	CP	3			; MSX Turbo-R ?
	PUSH	AF
	CALL	NC,C.46D2		; yep, save CPU mode and switch to driver CPU mode
	CALL	C.5AB8			; print Novaxis version
	LD	BC,128			; size of BIOS area
	LD	HL,I$7F80		; BIOS area
	LD	DE,(D$6B25)		; checksum BIOS area
	CALL	C$4FFA			; validate BIOS area
	JR	C,J$479A		; checksum error, quit with ROM checksum error
	POP	AF
	CALL	C$511A
	RET	C			; error, quit
	CALL	C$5158
	RET	C
	CALL	C.578A
	CALL	C$597E
	CALL	C.46BF			; print string inline code
	DEFB	"Please wait --"
	DEFB	0
	LD	B,1EH
J$4769:	CALL	C$58A4
	CALL	C.5A19			; get target id
	PUSH	BC
	CALL	C.5186			; TstUnitRdy
	POP	BC
	INC	D
	DEC	D			; error ?
	JP	Z,J$5972		; nope, finish initialize
	CP	42H
	CALL	NZ,C.481D		; wait ? ms
	DJNZ	J$4769
	CALL	C.46BF			; print string inline code
	DEFB	13
	DEFB	"Hard disk offline",13,10
	DEFB	0
	SCF
	RET

J$479A:	POP	AF
	CALL	C.46BF			; print string inline code
	DEFB	"ROM checksum error",13,10
	DEFB	0
	JR	J.47E9

J$47B5:	CALL	C.46BF			; print string inline code
	DEFB	"SCSI bus is down",13,10
	DEFB	0
	JR	J.47E9

J$47CD:	CALL	C.46BF			; print string inline code
	DEFB	"Controller test failed",13,10
	DEFB	0

J.47E9:	CALL	C.46BF			; print string inline code
	DEFB	7
	DEFB	"Host interface self test failed",13,10
	DEFB	0
	LD	B,5
J.4811:	CALL	C.481D			; wait ? ms
	DJNZ	J.4811
	SCF
	RET

;	  Subroutine wait ? ms
;	     Inputs  ________________________
;	     Outputs ________________________

C$4818:	LD	HL,01266H
	JR	J.4820

;	  Subroutine wait ? ms
;	     Inputs  ________________________
;	     Outputs ________________________

C.481D:	LD	HL,0B7FBH
J.4820:	LD	A,H
	OR	L
	RET	Z
	EX	(SP),HL
	EX	(SP),HL
	DEC	HL
	JR	J.4820

;	  Subroutine InsWork
;	     Inputs  ________________________
;	     Outputs ________________________

C.4828:	PUSH	AF
J$4829:	PUSH	BC
	PUSH	DE
J$482B:	CALL	C.403F			; GETWRK
	LD	(HL),0
	LD	D,H
	LD	E,L
	INC	DE
	CALL	C$57D5			; determine workarea size
	LDIR				; clear workarea
	LD	A,(IDBYT2)
	CP	3			; MSX Turbo-R ?
	LD	A,1
	JR	Z,J$4842		; hmm, not working in further versions. Should be JR NC,
	DEC	A
J$4842:	PUSH	AF
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A83			; read RTC register
	AND	0CH			; ASPI and multi target support
	SRL	A			; to b2,b1
	LD	D,A
	POP	AF
	OR	D
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	AND	04H			; extend partition support
	SLA	A			; to b3
	OR	D
	LD	(IX+7),A
	LD	HL,I.64EC		; new line string
	CALL	C.5BD0			; print string
	LD	HL,20*256+14
	LD	(D.81FD),HL
	LD	H,1
	CALL	POSIT			; cursor in position
	LD	HL,-512
	ADD	HL,SP
	LD	SP,HL			; allocate space on stack
	CALL	C$48C4			; get pointer to SCSI target ID list
	LD	A,(IY+0)		; SCSI target ID
	LD	C,0			; drives
J.4885:	PUSH	AF
	PUSH	IY
	CALL	C$4904
	POP	IY
	POP	AF
	INC	D
	DEC	D			; error ?
	JR	NZ,J$4896		; yep,
	ADD	A,20H			; next LUN
	JR	NC,J.4885
J$4896:	INC	IY
	LD	A,(IY+0)
	BIT	7,A			; end of SCSI target ID table ?
	JR	Z,J.4885		; nope, next SCSI target
	LD	A,C
	OR	A
	JR	NZ,J$48A6
	INC	C			; increase drives
	LD	A,0F1H			; ?? left over
J$48A6:	LD	L,C
	LD	IX,512
	ADD	IX,SP
	LD	SP,IX			; dispose space on stack
J$48AF:	LD	A,3
	CALL	SNSMAT
	BIT	5,A			; H pressed ?
	JR	Z,J$48AF		; yep, wait until released
	POP	DE
	POP	BC
	POP	AF
	EI
	HALT
	HALT
	HALT
	HALT
	HALT
	HALT
	AND	A
	RET

;	  Subroutine get pointer to SCSI target ID list
;	     Inputs  ________________________
;	     Outputs ________________________

C$48C4:	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A83			; read RTC register
	BIT	2,A			; multi target support ?
	JR	NZ,J$48E4		; yep,
	CALL	C.5A19			; get target id
	LD	IY,I$6B15
	AND	A			; target ID 0 ?
	RET	Z			; yep, quit
	LD	DE,2
J$48DE:	ADD	IY,DE
	DEC	A
	JR	NZ,J$48DE		; update pointer
	RET

J$48E4:	CALL	C.5923
	AND	07H
	LD	IY,I$6A3D-56
	LD	DE,56
	INC	A
	LD	B,A
J$48F2:	ADD	IY,DE
	DJNZ	J$48F2
	CALL	C.5A19			; get target id
	AND	A			; target ID 0 ?
	RET	Z			; yep, quit
	LD	B,A
	LD	DE,8
J$48FF:	ADD	IY,DE
	DJNZ	J$48FF			; update pointer
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4904:	LD	HL,4
	ADD	HL,SP
	LD	(D.F34D),HL		; temporary sector buffer on stack
	PUSH	BC
	PUSH	IX
	PUSH	AF
	LD	E,A
	CALL	C.5923
	INC	A
	ADD	A,E
	AND	07H
	JR	NZ,J$4921
	POP	AF
	POP	IX
	POP	BC
	LD	D,2
	POP	BC
	RET

J$4921:	POP	AF
	PUSH	AF
	CALL	C$5ADF			; print target information
	POP	AF
	POP	IX
	POP	BC
	INC	D
	DEC	D			; error ?
	RET	NZ			; yep, quit
	LD	(D.83FD),A
	LD	A,C
	LD	(D.83FA),A
	LD	(D.83F1),A		; save number of drives
	LD	(D.83FB),IX
	CP	6
	JP	NC,J.4A5C
	CALL	C$4B41			; get partition info
	JP	C,J$4AF7		; error, print number of partitions ERROR
	LD	A,(D.83FF)		; partition style
	CP	1
	JP	Z,J$49E5
	CP	2
	JP	Z,J$495C
	AND	A
	JP	Z,J$4A6F
	LD	A,"N"
	JP	J.4AF9			; print number of partitions NONE

J$495C:	LD	IX,(D.83FB)
	LD	IY,I.8800
	LD	A,(D.83FE)
	LD	B,A
	LD	A,(D.83FA)
	LD	C,A
	LD	DE,8
	PUSH	BC
	PUSH	IX
	PUSH	IY
	LD	IX,I.859E
J$4978:	LD	A,(IX+0)
	RRCA
	XOR	0C0H
	LD	(IY+7),A
	ADD	IX,DE
	ADD	IX,DE
	ADD	IY,DE
	DJNZ	J$4978
	CALL	C.4B0B
	POP	IY
	POP	IX
	POP	BC
	DEC	(IY+0)
	JR	NZ,J$49D0
	LD	A,(D.83FD)
	LD	(IX+0),A
	LD	A,(IY+7)
	LD	(IX+6),A
	CALL	C.580F			; get ASPI and multi target support status
	BIT	1,A			; multi target ?
	JR	Z,J$49B1		; nope,
	LD	A,(IY+7)
	CALL	C.4B30
	LD	A,H
	LD	(DE),A
J$49B1:	LD	A,(IY+1)
	LD	(IX+1),A
	LD	A,(IY+2)
	LD	(IX+2),A
	LD	A,(IY+3)
	LD	(IX+3),A
	LD	A,(IY+4)
	LD	(IX+4),A
	LD	A,(IY+5)
	LD	(IX+5),A
	INC	C
J$49D0:	PUSH	DE
	LD	DE,8
	ADD	IX,DE
	ADD	IY,DE
	POP	DE
	INC	DE
	LD	A,C
	CP	6
	JP	NC,J.4A5C
	DJNZ	J.4A12
	JP	J.4A5C

J$49E5:	LD	IX,(D.83FB)
	LD	IY,I.8800
	LD	A,(D.83FE)
	LD	B,A
	LD	A,(D.83FA)
	LD	C,A
	LD	DE,8
	CALL	C.5923
	ADD	A,10H
	PUSH	BC
	PUSH	IY
	PUSH	AF
	CALL	C.4B30
	POP	AF
J$4A05:	LD	(IY+7),A
	ADD	IY,DE
	DJNZ	J$4A05
	CALL	C.4B0B
	POP	IY
	POP	BC
J.4A12:	DEC	(IY+0)
	JR	NZ,J$4A4B
	LD	A,(D.83FD)
	LD	(IX+0),A
	LD	A,(IY+7)
	LD	(IX+6),A
	CALL	C.580F			; get ASPI and multi target support status
	BIT	1,A			; multi target ?
	JR	Z,J$4A2C		; nope,
	LD	A,H
	LD	(DE),A
J$4A2C:	LD	A,(IY+1)
	LD	(IX+1),A
	LD	A,(IY+2)
	LD	(IX+2),A
	LD	A,(IY+3)
	LD	(IX+3),A
	LD	A,(IY+4)
	LD	(IX+4),A
	LD	A,(IY+5)
	LD	(IX+5),A
	INC	C
J$4A4B:	PUSH	DE
	LD	DE,8
	ADD	IX,DE
	ADD	IY,DE
	POP	DE
	INC	DE
	LD	A,C
	CP	6
	JR	NC,J.4A5C
	DJNZ	J.4A12
J.4A5C:	LD	(D.83FA),A		; current number of drives
	LD	(D.83FB),IX
	PUSH	AF
	LD	A,(D.83F1)
	LD	B,A			; number of drives from other targets
	POP	AF
	SUB	B
	ADD	A,"0"
	JP	J.4AF9			; print number of partitions of this target

J$4A6F:	CALL	C.580F			; get ASPI and multi target support status
	BIT	1,A			; multi target ?
	LD	A,"0"
	JP	Z,J.4AF9		; nope, print number of partitions 0
	CALL	C.403F			; GETWRK
	LD	DE,48
	ADD	IX,DE
	SET	7,(IX+1)
	LD	DE,64
	ADD	HL,DE
	LD	A,(D.83FA)
	LD	D,0
	LD	E,A			; current number of drives
	ADD	HL,DE
	EX	DE,HL
	LD	IX,(D.83FB)
	LD	IY,I.8800
	CALL	C.5935			; get host id from RTC
	LD	H,1
	AND	A
	JR	Z,J$4AA6
	LD	B,A
J$4AA2:	SLA	H
	DJNZ	J$4AA2
J$4AA6:	LD	A,(D.83FE)
	LD	B,A
	LD	A,(D.83FA)
	LD	C,A			; current number of drives
J$4AAE:	DEC	(IY+0)
	JR	NZ,J.4AE2
	LD	A,(IY+6)
	AND	H
	JR	Z,J.4AE2
	LD	A,(D.83FD)
	LD	(IX+0),A
	LD	A,(IY+7)
	LD	(DE),A
	LD	A,(IY+1)
	LD	(IX+1),A
	LD	A,(IY+2)
	LD	(IX+2),A
	LD	A,(IY+3)
	LD	(IX+3),A
	LD	A,(IY+4)
	LD	(IX+4),A
	LD	A,(IY+5)
	LD	(IX+5),A
	INC	C
J.4AE2:	PUSH	DE
	LD	DE,8
	ADD	IX,DE
	ADD	IY,DE
	POP	DE
	INC	DE
	LD	A,C
	CP	6
	JP	NC,J.4A5C
	DJNZ	J$4AAE
	JP	J.4A5C

J$4AF7:	LD	A,"E"			; error

;	  Subroutine print number of partitions
;	     Inputs  ________________________
;	     Outputs ________________________

J.4AF9:	RST	18H
	LD	HL,I.64EC		; new line string
	CALL	C.5BD0			; print string
	LD	IX,(D.83FB)
	LD	A,(D.83FA)
	LD	C,A			; current number of drives
	LD	D,0
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B0B:	CALL	C.580F			; get ASPI and multi target support status
	BIT	1,A			; multi target ?
	RET	Z			; nope, quit
	PUSH	HL
	PUSH	IX
	PUSH	IY
	CALL	C.403F			; GETWRK
	LD	DE,48
	ADD	IX,DE
	LD	DE,64
	ADD	HL,DE
	LD	A,(D.83FA)
	LD	D,0
	LD	E,A			; current number of drives
	ADD	HL,DE
	EX	DE,HL
	POP	IY
	POP	IX
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B30:	XOR	0FFH
	AND	07H
	PUSH	BC
	LD	H,1
	LD	B,A
	AND	A
	JR	Z,J$4B3F
J$4B3B:	SLA	H
	DJNZ	J$4B3B
J$4B3F:	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4B41:	LD	A,(D.83FD)		; target ID + LUN
	LD	B,2
	LD	DE,0
	LD	C,E			; block 0
	LD	HL,I.8400
	CALL	C.4C9D			; read block with retry handling
	LD	A,D
	OR	A			; error ?
	JP	NZ,J$4C9B		; quit with error
	LD	HL,(I.8400+1FEH)
	LD	DE,0AA55H
	RST	20H			; valid MBR sector ?
	JR	NZ,J$4B8C		; nope,
	LD	A,(I.8400+1CEH+4)	; partition entry 1, system ID
	SUB	5			; MSDOS extended ?
	JR	Z,J$4B95		; yep,
	LD	HL,(I.8400+1A0H)
	LD	DE,0
	RST	20H
	JR	NZ,J.4B7E
	LD	HL,(I.8400+1A2H)
	LD	E,1
	RST	20H
	JR	NZ,J.4B7E
	LD	A,2			; ? partition type
	LD	IX,I.8400+19EH
	JR	J$4B84

J.4B7E:	LD	A,1			; normal MSDOS partition type
	LD	IX,I.8400+1BEH
J$4B84:	LD	(D.83FF),A
J.4B87:	CALL	C$4C8C
	JR	J$4BBB

J$4B8C:	LD	A,0FFH			; invalid partition type
	LD	(D.83FF),A
	INC	A
	JP	J$4C49			; quit

J$4B95:	LD	IX,I.8400+1BEH
	LD	(D.83FF),A		; extended partition type
	LD	A,(I.8400+1F3H)
	CP	"D"
	JR	NZ,J.4B87
	LD	HL,(I.8400+1F4H)
	LD	DE,7672H
	RST	20H			; ending sector partition #3 has special value ?
	JR	NZ,J.4B87
	LD	HL,I.8400+1F6H
	LD	DE,I.83F2
	LD	BC,8
	LDIR				; yep, copy ?
	LD	IX,I.8400+1BEH

J$4BBB:	LD	HL,I.8800
	LD	DE,0
	XOR	A
	LD	B,A

J$4BC3:	PUSH	BC
	PUSH	AF
	PUSH	DE
	EX	AF,AF'
	LD	A,(IX+4)
	OR	A			; free partition entry ?
	JP	Z,J$4C4E		; yep,
	LD	(HL),A
	INC	HL
	LD	C,(IX+8)
	LD	B,(IX+9)		; starting sector (b15-b0)
	EX	AF,AF'
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	ADC	A,(IX+10)		; starting sector (b23-b16)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),A
	INC	HL
	EX	DE,HL
	PUSH	IX
	POP	HL
	LD	BC,12
	ADD	HL,BC
	LDI
	LDI				; partition size (b15-b0)
	LD	A,(D.83FF)
	CP	2
	JR	NC,J$4C14
	DEC	A
	JR	Z,J$4C27
	PUSH	IX
	POP	HL
	PUSH	DE
	LD	B,8
J$4BFF:	DEC	HL
	LD	A,(HL)
	CP	04H	; 4 
	JR	NC,J$4C26
	CPL
	RRCA
	RL	D
	RRCA
	RL	E
	DJNZ	J$4BFF
	POP	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	JR	J.4C2D

J$4C14:	EX	DE,HL
	LD	(HL),0FFH
	INC	HL
	LD	B,(IX+0)
	SRL	B
	INC	B
	LD	A,1
J$4C20:	RRCA
	DJNZ	J$4C20
	LD	(HL),A
	JR	J.4C2D

J$4C26:	POP	DE
J$4C27:	EX	DE,HL
	LD	(HL),0FFH
	INC	HL
	LD	(HL),0FFH
J.4C2D:	INC	HL
	LD	A,(D.83FF)
	OR	A
	JR	Z,J$4C57
	LD	BC,16
	ADD	IX,BC
	PUSH	HL
	PUSH	IX
	POP	HL
	LD	DE,I.8400+1FEH
	RST	20H
	POP	HL
	JR	C,J$4C85		; next partition entry
J$4C44:	POP	DE
	POP	AF
	POP	BC
	INC	B
	LD	A,B
J$4C49:	LD	(D.83FE),A
	AND	A
	RET

J$4C4E:	POP	DE
	POP	AF
	POP	BC
	LD	A,B
	LD	(D.83FE),A
	AND	A
	RET

J$4C57:	LD	A,(I.8400+1D2H)
	CP	5
	JR	NZ,J$4C44
	POP	DE
	POP	AF
	LD	C,(IX+24)
	LD	B,(IX+25)
	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	ADC	A,(IX+26)
	LD	C,A
	PUSH	AF
	PUSH	DE
	PUSH	HL
	LD	B,1
	LD	HL,I.8400
	LD	A,(D.83FD)
	CALL	C.4C9D			; read block with retry handling
	LD	A,D
	OR	A
	JP	NZ,J$4C97
	LD	IX,I.85BE
	POP	HL
J$4C85:	POP	DE
	POP	AF
	POP	BC
	INC	B
	JP	J$4BC3

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4C8C:	LD	HL,I.83F2
	LD	B,8
J$4C91:	LD	(HL),0FFH
	INC	HL
	DJNZ	J$4C91
	RET

J$4C97:	POP	HL
	POP	DE
	POP	AF
	POP	BC
J$4C9B:	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4C9D:	LD	A,3
	LD	(D.83F0),A		; 3 retries
J$4CA2:	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,(D.83FD)
	CALL	C.5209			; RdLogBlk
	LD	A,D
	AND	A
	JR	Z,J.4CDB
	CP	02H	; 2 
	JR	NZ,J.4CDB
	LD	A,(D.83FD)
	CALL	C.59EF			; GetSense
	INC	D
	DEC	D			; error ?
	JR	NZ,J.4CDB		; yep,
	AND	A
	JR	Z,J.4CDB
	CP	6
	JR	NZ,J.4CDB
	LD	A,B
	CP	29H	; ")"
	JR	Z,J$4CCD
	CP	30H	; "0"
	JR	NZ,J.4CDB
J$4CCD:	LD	A,(D.83F0)
	DEC	A
	LD	(D.83F0),A		; all retries done ?
	JR	Z,J.4CDB		; yep,
	POP	HL
	POP	DE
	POP	BC
	JR	J$4CA2

J.4CDB:	LD	HL,6
	ADD	HL,SP
	LD	SP,HL
	RET

;	  Subroutine ClrEndLn
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CE1:	CALL	C.46BF			; print string inline code
	DEFB	13
	DEFB	27,"K"
	DEFB	0
	RET

;	  Subroutine PartInfo
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CE9:	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	E,A
	LD	D,00H
	CALL	C.403F			; GETWRK
	ADD	IX,DE
	RET

;	  Subroutine GetUnitsOn
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CF5:	LD	A,02H	; 2 
	OUT	(34H),A
	LD	A,0CH	; 12 
	OUT	(35H),A
	CALL	C.5935			; get host id from RTC
	LD	D,A
	LD	BC,7*256+0
	LD	A,C
	LD	E,A
J$4D06:	CP	D
	JR	Z,J.4D1B
	PUSH	BC
	PUSH	DE
	CALL	C.5186			; TstUnitRdy
	POP	DE
	POP	BC
	CP	85H
	JR	NZ,J.4D1B
	LD	A,C
	SET	0,A
	RRCA
I.4D18:	LD	C,A
	JR	J$4D20

J.4D1B:	LD	A,C
	RES	0,A
	RRCA
	LD	C,A
J$4D20:	INC	E
	LD	A,E
	DJNZ	J$4D06
	LD	A,02H	; 2 
	OUT	(34H),A
	LD	A,7DH	; "}"
	OUT	(35H),A
	LD	A,C
	RRCA
	LD	C,A
	LD	B,08H	; 8 
	LD	E,00H
J$4D33:	RRA
	JR	NC,J$4D37
	INC	E
J$4D37:	DJNZ	J$4D33
	LD	A,E
	RET

;	  Subroutine DSKIO
;	     Inputs  ________________________
;	     Outputs ________________________

J$4D3B:	EI
	PUSH	AF
	CP	6			; valid drive id ?
	JP	NC,J.4E4A		; nope, quit with OTHER ERROR
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	C$5833
	POP	HL
	POP	DE
	POP	BC
	POP	AF

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4D4C:	BIT	4,(IX+0)
	JP	NZ,J$4E90
	PUSH	AF
	LD	A,C
	CP	0F0H
	JR	Z,J$4D5E
	CP	0F8H			; valid media byte ?
	JP	NZ,J.4E4A		; nope, quit with OTHER ERROR
J$4D5E:	LD	C,00H
	PUSH	DE
	LD	A,B
	DEC	A
	ADD	A,E
	LD	E,A
	LD	A,C
	ADC	A,D
	LD	D,A
	LD	A,C
	ADC	A,C
	LD	C,A
	LD	A,(IX+4)
	SUB	E
	LD	A,(IX+5)
	SBC	A,D
	LD	A,00H
	SBC	A,C
	POP	DE
	JP	C,J$4E23
	LD	A,E
	ADD	A,(IX+1)
	LD	E,A
	LD	A,D
	ADC	A,(IX+2)
	LD	D,A
	LD	A,00H
	ADC	A,(IX+3)
	LD	C,A
	POP	AF
	PUSH	DE
	PUSH	BC
	PUSH	IX
	JR	C,J$4D99
	LD	A,(IX+0)
	CALL	C.5209			; RdLogBlk
	JR	J.4DCB

J$4D99:	CALL	C$5856
	JP	C,J$4E1C
	LD	A,(IX+0)
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	C.534B			; WrLogBlk
	LD	B,A
	LD	A,(D$F30D)
	OR	A
	JP	Z,J.4DC5
	LD	A,D
	OR	A
	JR	NZ,J.4DC5
	CALL	C.5923
	BIT	4,A
	JR	NZ,J.4DC5
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	CALL	C.530C			; verify
	JR	J.4DCB

J.4DC5:	LD	A,B
	LD	HL,8
	ADD	HL,SP
	LD	SP,HL
J.4DCB:	POP	IX
	POP	BC
	POP	HL
	CP	42H	; "B"
	LD	A,02H	; 2 
	SCF
	RET	Z
	LD	A,D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4DD6:	OR	A
	RET	Z
	PUSH	HL
	PUSH	BC
	LD	A,(IX+0)
	PUSH	IX
	CALL	C.5443			; ReqSense
	POP	HL
	PUSH	AF
	INC	D
	DEC	D			; error ?
	JR	NZ,J$4E07		; yep, quit
	LD	A,(IX+2)
	CP	6
	JR	NZ,J$4E0B
	PUSH	HL
	CALL	C.403F			; GETWRK
	POP	IX
	LD	A,(IX+0)
	OR	08H
	LD	DE,8
	LD	B,6
J$4DFF:	CP	(HL)
	JR	NZ,J$4E04
	RES	3,(HL)
J$4E04:	ADD	HL,DE
	DJNZ	J$4DFF
J$4E07:	POP	AF
	POP	BC
	POP	DE
	RET

J$4E0B:	POP	AF
	POP	BC
	POP	DE
	BIT	7,(IX+0)
	RET	Z
	PUSH	AF
	LD	A,B
	SUB	(IX+6)
I.4E18:	ADD	A,E
	LD	B,A
	POP	AF
	RET

J$4E1C:	POP	AF
	POP	BC
	POP	AF
	LD	A,00H
	SCF
	RET

J$4E23:	LD	A,(IX+4)
	SUB	E
	LD	C,A
	INC	C
	LD	A,(IX+5)
	SBC	A,D
	JR	C,J$4E3E
	LD	A,B
	SUB	C
	LD	B,A
	POP	AF
	PUSH	BC
	LD	B,C
	LD	C,0F0H
	CALL	C$4D4C
	JR	C,J$4E43
	POP	BC
	DEFB	03EH
J$4E3E:	POP	AF
	LD	A,8
	SCF
	RET

J$4E43:	POP	DE
	PUSH	AF
	LD	A,B
	ADD	A,D
	LD	B,A
	POP	AF
	RET

J.4E4A:	POP	AF
J.4E4B:	LD	A,12
	SCF
	RET

;	  Subroutine DSKCHG
;	     Inputs  ________________________
;	     Outputs ________________________

J$4E4F:	EI
	CP	6			; valid drive id ?
	JR	NC,J.4E4B		; nope, quit with OTHER ERROR
	OR	A
	PUSH	AF
	PUSH	HL
	CALL	C.4CE9			; PartInfo
	POP	HL
	CALL	C.5923
	XOR	(IX+6)
	AND	07H
	JR	NZ,J$4E77
	POP	AF
	LD	B,1			; DISK NOT CHANGED
	BIT	3,(IX+0)
	RET	NZ
	SET	3,(IX+0)
	CALL	C.4E7E			; GETDPB
	LD	B,0FFH			; DISK CHANGED
	RET

J$4E77:	POP	AF
	CALL	C.4E7E			; GETDPB
	LD	B,0			; DISK CHANGE UNKOWN
	RET

;	  Subroutine GETDPB
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E7E:	EI
	CP	6			; valid drive id ?
	JR	NC,J.4E4B		; nope, quit with OTHER ERROR
	PUSH	AF
	PUSH	HL
	CALL	C.4CE9			; PartInfo
	POP	HL
	POP	AF
	BIT	4,(IX+0)
	JR	Z,J$4E94
J$4E90:	LD	A,22			; quit with UNFORMATED DISK ERROR
	SCF
	RET

J$4E94:	PUSH	HL
	LD	HL,(D.F34D)
	PUSH	HL
	LD	A,(IX+0)		; target SCSI ID + LUN
	LD	B,1			; 1 block
	LD	C,(IX+3)
	LD	D,(IX+2)
	LD	E,(IX+1)		; first sector of partition (bootsector)
	CALL	C.5209			; RdLogBlk
	POP	IY
	POP	IX
	LD	A,D
	CALL	C$4DD6
	RET	C			; error, quit
	LD	A,(IY+21)		; media byte (assumes bootsector has a BIOS parameter block)
	LD	(IX+1),A
	CP	0F0H
	JR	Z,J.4EC5
	CP	0F8H			; validate media byte
	JR	Z,J.4EC5		; ok, continue
	LD	A,18			; quit with NOT A DOS DISK ERROR
	SCF
	RET

J.4EC5:	LD	L,(IY+14)
	LD	H,(IY+15)		; reserved sectors
	LD	(IX+8),L
	LD	(IX+9),H
	LD	A,(IY+16)		; number of FATs
	LD	(IX+10),A
	LD	E,(IY+22)
	LD	D,(IY+23)		; sectors per FAT
	LD	(IX+16),E
	LD	B,A
J$4EE1:	ADD	HL,DE
	DJNZ	J$4EE1
	LD	(IX+17),L
	LD	(IX+18),H
	LD	E,(IY+17)
	LD	D,(IY+18)		; number of directory entries
	LD	(IX+11),E
	LD	C,(IY+11)
	LD	B,(IY+12)		; bytes per sector
	LD	(IX+2),C
	LD	(IX+3),B
	SRL	B
	RR	C
	SRL	B
	RR	C
	SRL	B
	RR	C
	SRL	B
	RR	C
	SRL	B
	RR	C
	DEC	C
	LD	(IX+4),C
	ADD	A,E
	LD	E,A
	RL	D
J$4F1B:	INC	B
	RR	C
	JR	C,J$4F1B
	DEC	B
	LD	(IX+5),B
J$4F24:	SRL	D
	RR	E
	DJNZ	J$4F24
	ADD	HL,DE
	LD	(IX+12),L
	LD	(IX+13),H
	EX	DE,HL
	LD	L,(IY+19)
	LD	H,(IY+20)		; number of sectors
	OR	A
	SBC	HL,DE
	LD	A,(IY+13)		; sectors per cluster
	DEC	A
	LD	(IX+6),A
J$4F42:	INC	B
	RRCA
	JR	C,J$4F42
	LD	(IX+7),B
	DEC	B
	JR	Z,J$4F52
J$4F4C:	SRL	H
	RR	L
	DJNZ	J$4F4C
J$4F52:	INC	HL
	LD	(IX+14),L
	LD	(IX+15),H
	OR	A
	RET

;	  Subroutine CHOICE
;	     Inputs  ________________________
;	     Outputs ________________________

J$4F5B:	LD	HL,I$4F5F
	RET

I$4F5F:	DEFB	13,10
	DEFB	"1 - Write protect partition",13,10
	DEFB	"2 - Write enable partition",13,10
	DEFB	13,10

;	  Subroutine DSKFMT
;	     Inputs  ________________________
;	     Outputs ________________________

J$4F9D:	LD	E,A
	CP	2+1			; choice 0-2 ?
	JR	NC,J$4FA5		; nope, quit with error
	LD	A,D
	CP	6			; valid drive id ?
J$4FA5:	LD	A,12
	CCF
	RET	C			; nope, quit with error
	DEC	E			; choice 0 ?
	SCF
	RET	M			; yep, quit with error
	PUSH	DE
	LD	A,D
	CALL	C.4CE9			; PartInfo
	POP	DE
	LD	D,0
	LD	HL,I$4FBE
	ADD	HL,DE
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	JP	(HL)

I$4FBE:	DEFW	I.4FD5			; write protect
	DEFW	I.4FC2			; write enable

I.4FC2:	CALL	C.5923
	XOR	(IX+6)
	AND	07H
	JR	Z,J$4FD0
	LD	A,0
	SCF
	RET

J$4FD0:	SET	7,(IX+6)
	RET

I.4FD5:	RES	7,(IX+6)
	RET

;	  Subroutine MTOFF
;	     Inputs  ________________________
;	     Outputs ________________________

J.4FDA:	CALL	C.403F			; GETWRK
	LD	BC,0*256+6
	OR	C
J$4FE1:	LD	A,(HL)
	PUSH	HL
	PUSH	BC
J$4FE4:	PUSH	AF
	CALL	NZ,C.51A0		; StrtStpUn
	POP	AF
	POP	BC
	POP	HL
J$4FEB:	DEC	C
	RET	Z
	LD	DE,8
	ADD	HL,DE
	BIT	4,(HL)
	JR	NZ,J$4FEB
	XOR	(HL)
	AND	0E7H
	JR	J$4FE1

;	  Subroutine validate BIOS area
;	     Inputs  ________________________
;	     Outputs ________________________

C$4FFA:	PUSH	DE
	PUSH	HL
	LD	HL,0
	LD	(D.8000),HL
	POP	HL
	CALL	C.500E			; validate checksum
	POP	DE
	LD	HL,(D.8000)
	RST	20H
	RET	Z
	SCF
	RET

;	  Subroutine calculate checksum
;	     Inputs  ________________________
;	     Outputs ________________________

C.500E:	LD	A,(HL)
	PUSH	HL
	PUSH	BC
	CALL	C$501D			; update checksum
	POP	BC
	POP	HL
	INC	HL
	DEC	BC
	LD	A,C
	OR	B
	RET	Z
	JR	C.500E

;	  Subroutine update checksum
;	     Inputs  ________________________
;	     Outputs ________________________

C$501D:	LD	BC,(D.8000)
	LD	E,A
	XOR	C
	LD	C,B
	LD	D,A
	JP	PE,J$502A
	XOR	02H
J$502A:	XOR	D
	LD	E,A
	RRA
	RRA
	LD	A,D
	RRA
	LD	D,A
	LD	A,E
	RRA
	LD	E,A
	LD	A,D
	RRA
	LD	B,A
	LD	A,E
	RRA
	XOR	E
	XOR	C
	LD	C,A
	LD	A,D
	XOR	B
	LD	B,A
	LD	(D.8000),BC
	RET

?.5044:	CALL	C$50C5
	CALL	C$507B
	LD	HL,I$8004
	PUSH	HL
	POP	DE
	INC	DE
	LD	(HL),00H
	LD	BC,04000H
	LDIR
	LD	HL,I.FFFF
	PUSH	HL
	LD	DE,(D.8002)
	AND	A
	SBC	HL,DE
	CALL	C.50CF			; print hex word
	POP	HL
	LD	DE,(D.8000)
	AND	A
	SBC	HL,DE
	CALL	C.50CF			; print hex word
J$5070:	LD	A,3
	CALL	SNSMAT
	BIT	5,A			; H pressed ?
	JR	NZ,J$5070		; nope, wait
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$507B:	LD	BC,04000H
	LD	HL,I.4000
J$5081:	LD	A,(HL)
	PUSH	HL
	PUSH	BC
	PUSH	AF
	CALL	C$5092
	POP	AF
	POP	BC
	POP	HL
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	RET	Z
	JR	J$5081

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5092:	LD	HL,(D.8000)
	LD	DE,(D.8002)
	LD	C,A
	LD	B,08H	; 8 
J$509C:	LD	A,L
	XOR	C
	SRL	C
	SRL	D
	RR	E
	RR	H
	RR	L
	RRA
	JR	NC,J$50BB
	LD	A,D
	XOR	0EDH
	LD	D,A
	LD	A,E
	XOR	0B8H
	LD	E,A
	LD	A,H
	XOR	83H
	LD	H,A
	LD	A,L
	XOR	20H	; " "
	LD	L,A
J$50BB:	DJNZ	J$509C
	LD	(D.8000),HL
	LD	(D.8002),DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$50C5:	LD	HL,I.FFFF
	LD	(D.8000),HL
	LD	(D.8002),HL
	RET

;	  Subroutine print hex word
;	     Inputs  ________________________
;	     Outputs ________________________

C.50CF:	LD	A,H
	CALL	C$50D4
	LD	A,L

;	  Subroutine print hex byte
;	     Inputs  ________________________
;	     Outputs ________________________

C$50D4:	PUSH	AF
	RLCA
	RLCA
	RLCA
	RLCA
	CALL	C$50DD
	POP	AF

;	  Subroutine print hex nibble
;	     Inputs  ________________________
;	     Outputs ________________________

C$50DD:	AND	0FH
	ADD	A,"0"
	CP	"9"+1
	JR	C,J$50E7
	ADD	A,7
J$50E7:	JP	OUTDO

;	  Subroutine set host id (with validation)
;	     Inputs  ________________________
;	     Outputs ________________________

J$50EA:	CP	4
	RET	C
	CP	8
	RET	NC

;	  Subroutine set host id
;	     Inputs  ________________________
;	     Outputs ________________________

C$50F0:	AND	03H
	LD	D,A
	PUSH	BC
	PUSH	DE
	PUSH	HL
	XOR	A
	OUT	(34H),A
	OUT	(35H),A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	AND	0CH
	OR	D			; b1,b0 = host id
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A8E			; write RTC register
	CALL	C.578A
	POP	HL
	POP	DE
	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$511A:	PUSH	AF
	OUT	(36H),A
	IN	A,(34H)
	CP	30H
	JR	NZ,J$513C
	LD	DE,D.8000
J$5126:	IN	A,(34H)
	AND	80H
	JR	NZ,J$5134
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,J$5126
	POP	AF
	SCF
	RET

J$5134:	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
J$513C:	POP	AF
	CALL	NC,C.46C8		; restore CPU mode
	LD	BC,100*256+0CH
	IN	A,(34H)
	AND	C
	CP	0CH
	SCF
	RET	Z
	LD	C,20H
J$514C:	IN	A,(34H)
	AND	C
	RET	Z
	CALL	C$4818			; wait ? ms
	DJNZ	J$514C
	JP	J$47B5			; print SCSI bus down and quit

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5158:	LD	D,02H
	LD	BC,0*256+34H
J.515D:	OUT	(C),D
	LD	A,B
	OUT	(35H),A
	OUT	(C),D
	IN	A,(35H)
	CP	B
	JP	NZ,J$47CD
	DJNZ	J.515D
	INC	D
	LD	A,D
	CP	0FH
	JR	NZ,J.515D
	AND	A
	RET

;	  Subroutine SndDiag
;	     Inputs  ________________________
;	     Outputs ________________________

J$5174:	PUSH	AF
	LD	A,03H
	OUT	(34H),A
	LD	A,1DH
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OR	04H	; 4 
	JR	J$5193

;	  Subroutine TstUnitRdy
;	     Inputs  ________________________
;	     Outputs ________________________

C.5186:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
J$5193:	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(35H),A
	JR	J.51B9

;	  Subroutine StrtStpUn
;	     Inputs  ________________________
;	     Outputs ________________________

C.51A0:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,1BH
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
J.51B9:	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(35H),A
	POP	AF
	AND	07H	; 7 
	OUT	(35H),A
J.51D5:	IN	A,(34H)
	OR	A
	JP	P,J$51E9
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	CALL	Z,C.578A
	JR	J.51D5

J$51E9:	AND	30H	; "0"
	JR	NZ,J.51D5
	LD	IX,C.5757
J$51F1:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$51F1
	LD	A,10H	; 16 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	JP	J.5651			; TermAct

;	  Subroutine RdLogBlk
;	     Inputs  ________________________
;	     Outputs ________________________

C.5209:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OR	C
	OUT	(35H),A
	LD	C,35H	; "5"
I$521C:	OUT	(C),D
	OUT	(C),E
	XOR	A
	OUT	(C),B
	OUT	(C),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(C),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(C),A
	SLA	B
	OUT	(C),B
	OUT	(35H),A
	POP	AF
	AND	07H	; 7 
	OUT	(C),A
J.5241:	IN	A,(34H)
	OR	A
	JP	P,J$5255
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	CALL	Z,C.578A
	JR	J.5241

J$5255:	AND	30H	; "0"
	JR	NZ,J.5241
	LD	IX,I.56C7
J$525D:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$525D
	LD	A,10H	; 16 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	CALL	C.53D4
J.5279:	IN	A,(34H)
	RRCA
	JR	NC,J$5286
	LD	B,64
	INIR
	JR	J.5279

?.5284:	DEFB	0,0
J$5286:	AND	40H	; "@"
	JR	NZ,J$528C
	JR	J.5279

J$528C:	CALL	C.593C			; restore CPU mode
	JP	J.5651			; TermAct

;	  Subroutine ModeSel
;	     Inputs  ________________________
;	     Outputs ________________________

J$5292:	EI
	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,15H
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
	JP	J.5580

;	  Subroutine FmtUnit
;	     Inputs  ________________________
;	     Outputs ________________________

J$52C6:	EI
	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,04H	; 4 
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OR	B
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(C),D
	OUT	(C),E
	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	D,A
	LD	E,A
	BIT	4,B
	JR	Z,J$5305
	PUSH	HL
	INC	HL
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	POP	HL
	INC	DE
	INC	DE
	INC	DE
	INC	DE
J$5305:	OUT	(C),D
	OUT	(C),E
	JP	J.5580

;	  Subroutine verify
;	     Inputs  ________________________
;	     Outputs ________________________

C.530C:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,2FH	; "/"
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	XOR	A
	OUT	(35H),A
	LD	A,C
	OUT	(35H),A
	LD	C,35H	; "5"
	OUT	(C),D
	OUT	(C),E
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	SLA	B
	OUT	(C),B
	OUT	(35H),A
	JP	J.5580

;	  Subroutine WrLogBlk
;	     Inputs  ________________________
;	     Outputs ________________________

C.534B:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,0AH	; 10 
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OR	C
	OUT	(35H),A
	LD	C,35H	; "5"
	OUT	(C),D
	OUT	(C),E
	XOR	A
	OUT	(C),B
	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	SLA	B
	OUT	(C),B
	OUT	(35H),A
	POP	AF
	AND	07H	; 7 
	OUT	(35H),A
J.5383:	IN	A,(34H)
	OR	A
	JP	P,J$5397
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	CALL	Z,C.578A
	JR	J.5383

J$5397:	AND	30H	; "0"
	JR	NZ,J.5383
	LD	IX,I.56BD
J$539F:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$539F
	LD	A,10H	; 16 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	CALL	C.53D4
J.53BB:	IN	A,(34H)
	RRCA
	JR	NC,J$53C8
	LD	B,4
	OTIR
	NOP
	NOP
	JR	J.53BB

J$53C8:	AND	40H	; "@"
	JR	NZ,J$53CE
	JR	J.53BB

J$53CE:	CALL	C.593C			; restore CPU mode
	JP	J.5651			; TermAct

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.53D4:	CALL	C$5957			; switch to driver CPU mode
	BIT	7,H
	JR	Z,J$53FA
	LD	DE,(D.F34D)
	LD	A,E
	SUB	L
	JR	NZ,J$53E8
	LD	A,D
	SUB	H
	AND	3FH	; "?"
	RET	Z
J$53E8:	EX	(SP),HL
	PUSH	BC
	LD	BC,19
	LDIR
	LD	A,0C9H
	LD	(DE),A
	POP	BC
	EX	(SP),HL
	LD	IY,(D.F34D)
	JP	(IY)

J$53FA:	EX	(SP),HL
	PUSH	BC
	PUSH	HL
	LD	BC,6
	LD	DE,(D.F34D)
	LD	HL,I$542D
	LDIR
	EX	(SP),HL
	LD	BC,19
	LDIR
	EX	(SP),HL
	LD	BC,16
	LDIR
	CALL	C.4030			; GETSLT
	POP	HL
	POP	BC
	EX	(SP),HL
	LD	IY,(D.F34D)
	LD	(IY+26),A
	LD	A,(D$F342)
	PUSH	IX
	PUSH	BC
	PUSH	HL
	LD	H,40H	; "@"
	JP	(IY)

I$542D:	CALL	ENASLT
	POP	HL
	POP	BC
	EI
	PUSH	HL
	CALL	C$F368
	LD	A,00H
	LD	H,40H	; "@"
	CALL	ENASLT
	POP	HL
	POP	IX
	EI
	RET

;	  Subroutine ReqSense
;	     Inputs  ________________________
;	     Outputs ________________________

C.5443:	CALL	C.5486
	LD	HL,(D.F34D)
	PUSH	HL
	CALL	C.552F
	POP	IX
	CP	42H	; "B"
	LD	A,02H	; 2 
	SCF
	RET	Z
	BIT	3,D
	LD	A,18H
	SCF
	RET	NZ
	INC	D
	DEC	D			; error ?
	LD	A,12
	SCF
	RET	NZ			; yep, quit
	LD	A,(IX+0)
	AND	7FH
	CP	70H	; "p"
	LD	A,0CH	; 12 
	SCF
	RET	NZ
	LD	A,(IX+12)
	CP	2BH	; "+"
	LD	E,A
	JR	NC,J$5482
	LD	HL,I$625A
	ADD	HL,DE
	LD	A,(HL)
	OR	A
	SCF
	RET	P
	CALL	C.5923
	AND	20H	; " "
	RET	NZ
J$5482:	LD	A,0CH	; 12 
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5486:	PUSH	AF
	LD	A,03H
	OUT	(34H),A
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	LD	B,12H	; 18 
	OUT	(C),B
	OUT	(35H),A
	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
	POP	AF
	AND	07H	; 7 
	OUT	(35H),A
	RET

;	  Subroutine Inquiry
;	     Inputs  ________________________
;	     Outputs ________________________

C.54BC:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,12H	; 18 
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	LD	B,24H	; "$"
	OUT	(C),B
	OUT	(35H),A
	JR	J.5515

;	  Subroutine ModeSense
;	     Inputs  ________________________
;	     Outputs ________________________

J$54DB:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,1AH
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	OUT	(C),B
	XOR	A
	OUT	(35H),A
	LD	B,80H
	OUT	(C),B
	OUT	(35H),A
	JR	J.5515

;	  Subroutine ReadCap
;	     Inputs  ________________________
;	     Outputs ________________________

J$54FA:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,25H	; "%"
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	LD	B,08H	; 8 
J$550F:	OUT	(35H),A
	DJNZ	J$550F
	LD	B,08H	; 8 
J.5515:	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(35H),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	OUT	(35H),A
	OUT	(C),B
	POP	AF
	AND	07H	; 7 
	OUT	(35H),A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.552F:	IN	A,(34H)
	OR	A
	JP	P,J$5543
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	CALL	Z,C.578A
	JR	C.552F

J$5543:	AND	30H
	JR	NZ,C.552F
	LD	IX,I.56C7
J$554B:	IN	A,(34H)
	AND	10H
	JR	NZ,J$554B
	LD	A,10H
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	CALL	C.53D4
J.5567:	IN	A,(34H)
	RRCA
	JR	NC,J$5574
	INI
	JR	J.5567

?.5570:	DEFB	0,0,0,0
J$5574:	AND	40H	; "@"
	JR	NZ,J$557A
	JR	J.5567

J$557A:	CALL	C.593C			; restore CPU mode
	JP	J.5651			; TermAct

J.5580:	POP	AF
	AND	07H	; 7 
	OUT	(35H),A
J.5585:	IN	A,(34H)
	OR	A
	JP	P,J$5599
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	CALL	Z,C.578A
	JR	J.5585

J$5599:	AND	30H	; "0"
	JR	NZ,J.5585
	LD	IX,I.56BD
J$55A1:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$55A1
	LD	A,10H	; 16 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	CALL	C.53D4
J.55BD:	IN	A,(34H)
	RRCA
	JR	NC,J$55CA
	OUTI
	JR	J.55BD

?.55C6:	DEFB	0,0,0,0
J$55CA:	AND	40H	; "@"
	JR	NZ,J$55D0
	JR	J.55BD

J$55D0:	CALL	C.593C			; restore CPU mode
	JP	J.5651			; TermAct

;	  Subroutine RdDefect
;	     Inputs  ________________________
;	     Outputs ________________________

J$55D6:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,37H	; "7"
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	OUT	(C),B
	XOR	A
	OUT	(C),A
	OUT	(C),A
	OUT	(C),A
	OUT	(C),A
	OUT	(C),D
	OUT	(C),E
	OUT	(C),A
J$55F9:	LD	A,0FH	; 15 
	OUT	(34H),A
	POP	AF
	RLCA
	RLCA
	RLCA
	OUT	(C),A
	LD	A,12H	; 18 
	OUT	(34H),A
	XOR	A
	OUT	(C),A
	OUT	(C),D
	OUT	(C),E
	POP	AF
	AND	07H	; 7 
	OUT	(C),A
	JP	C.552F

;	  Subroutine Copy
;	     Inputs  ________________________
;	     Outputs ________________________

J$5616:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,18H
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(C),A
	OUT	(C),D
	OUT	(C),E
	OUT	(C),A
	JR	J$55F9

;	  Subroutine MedRemoval
;	     Inputs  ________________________
;	     Outputs ________________________

J$5633:	PUSH	AF
	LD	A,03H	; 3 
	OUT	(34H),A
	LD	A,1EH
	OUT	(35H),A
	POP	AF
	PUSH	AF
	AND	0E0H
	PUSH	AF
	OUT	(35H),A
	LD	C,35H	; "5"
	XOR	A
	OUT	(C),A
	OUT	(C),A
	OUT	(C),B
	OUT	(C),A
	JP	J.51B9

J.5651:	LD	DE,8
	LD	C,35H
J.5656:	IN	A,(34H)
	BIT	0,A
	JP	NZ,J$5751
	BIT	5,A
	JR	NZ,J.5656
	LD	A,17H
	OUT	(34H),A
	NOP
	NOP
	IN	A,(35H)
	CP	04H
	JR	NZ,J$566F
	RES	2,A
J$566F:	BIT	3,A
	JR	NZ,J$56A6
	CP	16H
	JP	Z,J$5748
	BIT	4,A
	RET	NZ
	OR	A
	JP	Z,C.578A
	CP	21H
	JR	NZ,J$5687
	PUSH	HL
	POP	IY
	DEC	A
J$5687:	CP	20H
	JP	Z,J$5730
	CP	85H
	JR	NZ,J$5695
	BIT	7,D
	RET	Z
	JR	J.5656

J$5695:	CP	80H
	JR	NZ,J$569D
	RES	7,D
	JR	J.5656

J$569D:	BIT	6,A
	JR	NZ,J$56A3
	OUT	(36H),A
J$56A3:	LD	D,02H
	RET

J$56A6:	AND	07H
	LD	B,A
	LD	A,18H
	OUT	(34H),A
	LD	A,0A0H
	OUT	(35H),A
J$56B1:	IN	A,(34H)
	RRCA
	JR	NC,J$56B1
	LD	A,19H
	OUT	(34H),A
	INC	B
	DJNZ	J$56C5
I.56BD:	OUTI
	CALL	C.5757
	JP	J.5656

J$56C5:	DJNZ	J$56CF
I.56C7:	INI
	CALL	C.5757
	JP	J.5656

J$56CF:	DJNZ	J$56D7
J$56D1:	XOR	A
	OUT	(35H),A
	JP	J.5656

J$56D7:	DJNZ	J$56DE
	IN	D,(C)
	JP	J.5656

J$56DE:	DJNZ	J$56E3
	JP	J$56D1

J$56E3:	DJNZ	J$56EA
	IN	A,(35H)
	JP	J.5656

J$56EA:	DJNZ	J$56F3
	OUT	(C),E
	LD	E,08H
	JP	J.5656

J$56F3:	IN	A,(C)
	JP	Z,J.5656
	JP	M,J.5656
	CP	02H	; 2 
	JR	Z,J$5724
	CP	03H	; 3 
	JR	Z,J$572A
	CP	04H	; 4 
	JR	Z,J$5719
	CP	07H	; 7 
	JR	Z,J.571E
	CP	08H	; 8 
	JP	Z,J.5656
	CP	09H	; 9 
	JR	Z,J.571E
	LD	E,07H	; 7 
	JP	J.5656

J$5719:	SET	7,D
	JP	J.5656

J.571E:	LD	DE,0206H
	JP	J.5656

J$5724:	PUSH	HL
	POP	IX
	JP	J.5656

J$572A:	PUSH	IX
	POP	HL
	JP	J.5656

J$5730:	LD	A,E
	CP	08H	; 8 
	JR	Z,J$573D
	LD	A,18H
	OUT	(34H),A
	LD	A,02H	; 2 
	OUT	(35H),A
J$573D:	LD	A,18H
	OUT	(34H),A
	LD	A,03H	; 3 
	OUT	(35H),A
	JP	J.5656

J$5748:	LD	A,0FH	; 15 
	OUT	(34H),A
	IN	D,(C)
	JP	J.5656

J$5751:	CALL	C$F398
	JP	J.5656

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5757:	IN	A,(34H)
	OR	A
	JP	P,J$5767
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	JR	C.5757

J$5767:	IN	A,(34H)
	RRCA
	JR	NC,J$5778
	LD	A,19H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OUT	(35H),A
	JR	C.5757

J$5778:	LD	DE,0206H
J$577B:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$577B
	LD	A,18H
	OUT	(34H),A
	LD	A,02H	; 2 
	OUT	(35H),A
	RET

;	  Subroutine initialize hdc
;	     Inputs  ________________________
;	     Outputs ________________________

C.578A:	XOR	A
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	OR	A
	JR	NZ,J$57B8
	OUT	(34H),A
	CALL	C.5935			; get host id from RTC
J.5799:	OUT	(35H),A
J$579B:	IN	A,(34H)
	AND	10H	; 16 
	JR	NZ,J$579B
	LD	A,18H
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
J$57A8:	EX	(SP),HL
	EX	(SP),HL
	IN	A,(34H)
	AND	20H	; " "
	JR	NZ,J$57A8
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
J$57B8:	LD	A,01H	; 1 
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,7DH	; "}"
	OUT	(35H),A
	LD	A,11H	; 17 
	OUT	(34H),A
	LD	A,30H	; "0"
	OUT	(35H),A
	LD	A,16H
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	D,02H	; 2 
	RET

;	  Subroutine determine workarea size
;	     Inputs  ________________________
;	     Outputs BC = size -1

C$57D5:	CALL	C.580F			; get ASPI and multi target support status
	LD	BC,48-1
	RET	Z			; ASPI and multi target disabled, workarea is 48 bytes
	PUSH	HL
	LD	H,B
	LD	L,C
	LD	BC,256
	BIT	1,A			; multi target enabled ?
	JR	Z,J$57E7		; nope,
	ADD	HL,BC			; use extra 256 bytes
J$57E7:	LD	BC,256
	BIT	0,A			; ASPI enabled ?
	JR	Z,J$57EF		; nope
	ADD	HL,BC			; use extra 256 bytes
J$57EF:	PUSH	HL
	POP	BC
	POP	HL
	RET

;	  Subroutine determine size of static disk workarea + size of driver workarea
;	     Inputs  ________________________
;	     Outputs ________________________

C$57F3:	LD	HL,0F380H-0F1C9H+48
	JR	J$57FB

;	  Subroutine determine size of workarea
;	     Inputs  ________________________
;	     Outputs ________________________

C$57F8:	LD	HL,48
J$57FB:	CALL	C.580F			; get ASPI and multi target support status
	RET	Z			; ASPI and multi target disabled, use 'normal' workarea
	LD	DE,256
	BIT	1,A			; multi target enabled ?
	JR	Z,J$5807
	ADD	HL,DE			; yep, use extra 256 bytes
J$5807:	BIT	0,A			; ASPI enabled ?
	RET	Z			; nope, quit
	LD	DE,256
	ADD	HL,DE			; yep, use extra 256 bytes
	RET

;	  Subroutine get ASPI and multi target support status
;	     Inputs  ________________________
;	     Outputs ________________________

C.580F:	PUSH	BC
	PUSH	DE
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A83			; read RTC register
	RRA
	RRA
	RRA
	AND	01H
	LD	D,A			; ASPI support in b0
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	RRA
	AND	02H			; extend partition support in b1
	OR	D
	POP	DE
	POP	BC
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5833:	PUSH	AF
	CALL	C.403F			; GETWRK
	BIT	3,(IX+7)		; extended partition support ?
	JR	NZ,J$5847		; yep,
	POP	AF
J$583E:	ADD	A,A
	ADD	A,A
	ADD	A,A			; *8
	LD	E,A
	LD	D,0
	ADD	IX,DE
	RET

J$5847:	POP	AF
	PUSH	IX
	LD	DE,48
	ADD	IX,DE
	LD	(IX+0),A
	POP	IX
	JR	J$583E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5856:	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	CALL	C.403F			; GETWRK
	BIT	3,(IX+7)		; extended partition support ?
	JR	Z,J$586A		; nope,
	BIT	7,(IX+49)
	JR	NZ,J$587D
J$586A:	POP	IX
	POP	HL
	POP	DE
	POP	BC
	CALL	C.5923
	OR	80H
	XOR	(IX+6)
	AND	8FH
	SCF
	RET	NZ
	CCF
	RET

J$587D:	LD	DE,48
	ADD	IX,DE
	LD	A,(IX+0)
	LD	E,A
	LD	D,00H
	ADD	IX,DE
	CALL	C.5935			; get host id from RTC
	LD	C,01H	; 1 
	AND	A
	JR	Z,J$5897
	LD	B,A
J$5893:	RLC	C
	DJNZ	J$5893
J$5897:	LD	A,C
	AND	(IX+16)
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	SCF
	RET	Z
	CCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$58A4:	PUSH	AF
	PUSH	HL
	LD	A,(D.F6A0)
	INC	A
	AND	01H	; 1 
	LD	(D.F6A0),A
	LD	HL,I$6258
	ADD	A,L
	LD	L,A
	JR	NC,J$58B7
	INC	H
J$58B7:	LD	A,(HL)
	RST	18H
	LD	A,08H	; 8 
	RST	18H
	POP	HL
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$58BF:	LD	B,A
	CALL	C.5935			; get host id from RTC
	CP	B
	JR	Z,J$58FA
	LD	A,B
	PUSH	IX
	CALL	C.5186			; TstUnitRdy
	POP	IX
	INC	D
	DEC	D			; error ?
	JR	Z,J$590C		; nope,
	LD	A,D
	CP	02H	; 2 
	JR	Z,J.58DB
J.58D7:	LD	E,46H	; "F"
	SCF
	RET

J.58DB:	LD	A,(IX+112)
	CALL	C.5443			; ReqSense
	INC	D
	DEC	D			; error ?
	JR	NZ,J.58D7		; yep,
	LD	A,(IX+0)
	AND	0FFH
	CP	70H	; "p"
	LD	E,45H	; "E"
	SCF
	RET	NZ
	LD	A,(IX+2)
	AND	0FH	; 15 
	CP	02H	; 2 
	JR	Z,J.58D7
	RET

J$58FA:	LD	HL,(D.F34D)
	LD	DE,8
	ADD	HL,DE
	EX	DE,HL
	LD	HL,I$6921
	LD	BC,28
	LDIR
	AND	A
	RET

J$590C:	LD	A,(IX+112)
	LD	HL,(D.F34D)
	PUSH	IX
	CALL	C.54BC			; Inquiry
	POP	IX
	INC	D
	DEC	D			; error ?
	RET	Z			; nope, quit
	LD	A,D
	CP	02H	; 2 
	JR	Z,J.58DB
	JR	J.58D7

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5923:	PUSH	BC
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	POP	BC
	AND	03H			; b1,b0
	CPL
	SUB	4CH			; b7 set, b6 clear, b5 set, b4 set, b3 clear, b2 clear
	RET

;	  Subroutine get host id from RTC
;	     Inputs  ________________________
;	     Outputs ________________________

C.5935:	CALL	C.5923
	CPL
	AND	07H
	RET

;	  Subroutine restore CPU mode
;	     Inputs  ________________________
;	     Outputs ________________________

C.593C:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	CALL	C.403F			; GETWRK
	BIT	0,(IX+7)		; MSX Turbo-R ?
	CALL	NZ,C.46C8		; yep, restore CPU mode
	POP	IY
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET

;	  Subroutine switch to driver CPU mode
;	     Inputs  ________________________
;	     Outputs ________________________

C$5957:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	CALL	C.403F			; GETWRK
	BIT	0,(IX+7)		; MSX Turbo-R ?
	CALL	NZ,C.46D2		; yep, save CPU mode and switch to driver CPU mode
	POP	IY
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET

;	  Subroutine finish initialize
;	     Inputs  ________________________
;	     Outputs ________________________

J$5972:	CALL	C.4CE1			; ClrEndLn
	CALL	C$5999			; print ASPI info
	CALL	C$59BB			; get host ID
	JP	J$59CD			; print host and target ID

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$597E:	LD	HL,I$63A5
	CALL	C$7F00
	LD	HL,I$7D00
J$5987:	LD	A,8
	CALL	SNSMAT
	BIT	3,A			; DEL pressed ?
	JP	Z,J$5BD7		; yep,
	DEC	HL
	LD	A,L
	OR	H
	JR	NZ,J$5987
	JP	C.4CE1			; ClrEndLn

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5999:	CALL	C.580F			; get ASPI and multi target support status
	BIT	0,A			; ASPI enabled ?
	JR	Z,J$59B5		; nope, skip printing ASPI version
	LD	HL,I$63BE
	CALL	C.5BD0			; print string
	LD	A,(D.7FFA+0)
	CALL	C.5A98			; print BCD number (non fixed)
	LD	A,"."
	RST	18H
	LD	A,(D.7FFA+1)
	CALL	C.5AAC			; print BCD number
J$59B5:	LD	HL,J.6389
	JP	C.5BD0			; print string

;	  Subroutine get host ID
;	     Inputs  ________________________
;	     Outputs ________________________

C$59BB:	CALL	C.5935			; get host id from RTC
	CP	4			; host id valid ?
	RET	NC			; yep, quit
	LD	A,(I.7FF7)
	CPL
	AND	07H			; default host id
	PUSH	AF
	CALL	C.59FE			; save host id in RTC
	POP	AF
	RET

;	  Subroutine print host and target ID
;	     Inputs  ________________________
;	     Outputs ________________________

J$59CD:	PUSH	AF
	LD	HL,I$638D
	CALL	C.5BD0			; print string
	POP	AF
	ADD	A,"0"
	RST	18H
	LD	HL,I$6397
	CALL	C.5BD0			; print string
	CALL	C.5A19			; get target id
	ADD	A,"0"
	RST	18H
	XOR	A
	OUT	(34H),A
	OUT	(35H),A
	CALL	C.578A			; initialize hdc
	JP	C.481D			; wait ? ms and quit

;	  Subroutine GetSense
;	     Inputs  ________________________
;	     Outputs ________________________

C.59EF:	CALL	C.5443			; ReqSense
	LD	A,(IX+2)
	AND	0FH
	LD	B,(IX+12)
	LD	C,(IX+13)
	RET

;	  Subroutine save host id in RTC
;	     Inputs  ________________________
;	     Outputs ________________________

C.59FE:	AND	03H
	LD	D,A			; only b1,b0
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	AND	0CH
	OR	D
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	JP	C.5A8E			; write RTC register

;	  Subroutine get target id
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A19:	PUSH	BC
	CALL	C.5A2D			; read RTC register 3 of bank 2
	RRA
	RRA
	AND	03H			; b2,b1
	PUSH	AF
	CALL	C.5A36			; read RTC register 12 of bank 2
	AND	08H			; b3
	RRA
	LD	B,A
	POP	AF
	OR	B
	POP	BC
	RET

;	  Subroutine read RTC register 3 of bank 2
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A2D:	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,3
	JR	C.5A83			; read RTC register

;	  Subroutine read RTC register 12 of bank 2
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A36:	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	JR	C.5A83			; read RTC register

;	  Subroutine set target id
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A3F:	CP	7
	CCF				; valid SCSI id (0-6) ?
	RET	C			; nope, quit
	PUSH	AF
	AND	04H			; b2 of target id
	SLA	A			; to b3
	LD	D,A
	CALL	C.5A36			; read RTC register 12 of bank 2
	AND	07H			; b2-b0
	OR	D			; b3 = b2 target id
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A8E			; write RTC register
	POP	AF
	SLA	A
	SLA	A			; b3,b2 = b1,b0 of target id
	LD	D,A
	CALL	C.5A2D			; read RTC register 3 of bank 2
	AND	03H
	OR	D
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,3
	CALL	C.5A8E			; write RTC register
	RET

;	  Subroutine select RTC bank
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A72:	PUSH	BC
	PUSH	AF
	LD	B,13
	CALL	C.5A83			; read RTC register
	DI
	AND	0CH
	POP	BC
	OR	B
	OUT	(0B5H),A
	POP	BC
	EI
	RET

;	  Subroutine read RTC register
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A83:	DI
	LD	A,B
	OUT	(0B4H),A
	INC	B
	IN	A,(0B5H)
	AND	0FH
	EI
	RET

;	  Subroutine write RTC register
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A8E:	DI
	LD	A,B
	OUT	(0B4H),A
	LD	A,D
	INC	B
	OUT	(0B5H),A
	EI
	RET

;	  Subroutine print BCD number (non fixed)
;	     Inputs  ________________________
;	     Outputs ________________________

C.5A98:	LD	B,A
	AND	0F0H
	RLCA
	RLCA
	RLCA
	RLCA
	AND	A
	JR	Z,J.5AA5
	ADD	A,"0"
	RST	18H
J.5AA5:	LD	A,B
	AND	0FH
	ADD	A,"0"
	RST	18H
	RET

;	  Subroutine print BCD number
;	     Inputs  ________________________
;	     Outputs ________________________

C.5AAC:	LD	B,A
	AND	0F0H
	RLCA
	RLCA
	RLCA
	RLCA
	ADD	A,"0"
	RST	18H
	JR	J.5AA5

;	  Subroutine print Novaxis version
;	     Inputs  ________________________
;	     Outputs ________________________

C.5AB8:	LD	HL,I.62DE
	CALL	C.5BD0			; print string
	INC	HL
	LD	DE,I$7FF5		; version
	LD	A,(DE)
	CALL	C.5A98			; print BCD number (non fixed)
	LD	A,"."
	RST	18H
	INC	DE
	LD	A,(DE)
	CALL	C.5AAC			; print BCD number
	LD	A,(D$7FF9)
	AND	A
	JR	Z,J$5ADC
	PUSH	AF
	LD	A,"."
	RST	18H
	POP	AF
	CALL	C.5AAC			; print BCD number
J$5ADC:	JP	C.5BD0			; print string

;	  Subroutine print target information
;	     Inputs  ________________________
;	     Outputs ________________________

C$5ADF:	LD	HL,I.8400
	LD	IY,I.8200
	CALL	C$5B7B			; get target information
	INC	D
	DEC	D			; error ?
	JR	Z,J$5AFB		; nope,
	LD	A,2
	LD	(D.81FC),A
	LD	D,A
	RET

J$5AF4:	INC	HL
	CALL	C.5BD0			; print string
	LD	D,2
	RET

J$5AFB:	LD	HL,I.63D4		; ID# string
	CALL	C.5BD0			; print string
	LD	A,(IY+0)
	ADD	A,"0"
	RST	18H			l print target SCSI ID
	LD	A,(IY+1)
	AND	A
	JR	Z,J$5B0F
	LD	A,2
J$5B0F:	LD	(D.81FC),A
	LD	HL,I$64EF		; - string
	CALL	C.5BD0			; print string
	PUSH	IY
	POP	HL
	LD	DE,9
	ADD	HL,DE			; vendor string
	CALL	C.5BD0			; print string
	PUSH	HL
	LD	HL,(D.81FD)
	CALL	POSIT
	POP	HL
	INC	HL			; product string
	CALL	C.5BD0			; print string
	PUSH	HL
	LD	HL,(D.81FD)
	LD	DE,19*256+0
	ADD	HL,DE
	CALL	POSIT
	LD	HL,I$64F7		; revision string
	CALL	C.5BD0			; print string
	POP	HL
	INC	HL			; product revision level string
	CALL	C.5BD0			; print string
	BIT	7,(IY+2)		; removable device ?
	JR	Z,J$5B50		; nope, skip
	LD	HL,J.6502		; RMB string
	CALL	C.5BD0			; print string
J$5B50:	LD	HL,(D.81FD)
	PUSH	HL
	LD	H,74
	CALL	POSIT
	POP	HL
	INC	L
	LD	(D.81FD),HL
	CALL	C$5B6D
	LD	A,(D.81FC)
	LD	D,A
	AND	A
	RET	Z
	LD	HL,I.64F3-1
	JP	J$5AF4

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B6D:	LD	HL,I.8200
	LD	DE,I.8200+1
	LD	BC,0230H
	LD	(HL),0
	LDIR
	RET

;	  Subroutine get target information
;	     Inputs  HL = buffer, IY = result buffer
;	     Outputs ________________________

C$5B7B:	PUSH	HL
	PUSH	IY
	LD	(IY+0),A		; target SCSI ID + LUN
	CALL	C.54BC			; Inquiry
	POP	IY
	POP	HL
	LD	A,D
	AND	A			; error ?
	JR	Z,J$5B90		; nope,
	LD	A,0FFH
	LD	D,2
	RET

J$5B90:	LD	A,(HL)
	AND	1FH			; device type
	LD	(IY+1),A
	INC	HL
	PUSH	IY
	POP	DE
	INC	DE
	INC	DE
	LD	BC,7
	LDIR				; default data
	XOR	A
	LD	BC,8
	LDIR				; vendor
	LD	(DE),A
	INC	DE
	LD	BC,16
	LDIR				; product
	LD	(DE),A
	INC	DE
	LD	BC,4
	LDIR				; revision level
	LD	(DE),A
	INC	DE
	LD	D,0
	LD	A,(IY+0)
	RET

;	  Subroutine CARTRIDGE CALL statement
;	     Inputs  ________________________
;	     Outputs ________________________

?.5BBD:	LD	DE,I$6285
	LD	A,(IDBYT2)
	CP	3			; MSX Turbo-R ?
	JR	NC,J$5BCA		; yep,
	LD	DE,I$6299
J$5BCA:	CALL	C.5F7F
	RET	C
	PUSH	DE
	RET

;	  Subroutine print string
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BD0:	LD	A,(HL)
	AND	A
	RET	Z
	INC	HL
	RST	18H
	JR	C.5BD0

;	  Subroutine setup
;	     Inputs  ________________________
;	     Outputs ________________________

J$5BD7:	CALL	C.4CE1			; ClrEndLn
	LD	HL,I$6509
	CALL	C.5BD0			; print string
	CALL	C$5EB4
	LD	IX,I.8200
	CALL	C.5935			; get host id from RTC
	LD	(IX+0),A
	CALL	C.5A19			; get target id
	LD	(IX+1),A
	PUSH	IX
	CALL	C.578A			; initialize hdc
	CALL	C.4CF5			; GetUnitsOn
	POP	IX
	LD	(IX+2),A
	LD	(IX+12),C
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A83			; read RTC register
	LD	D,00H
	BIT	2,A			; multi target support ?
	JR	Z,J$5C14
	INC	D			; yep,
J$5C14:	LD	(IX+5),D
	LD	D,00H
	BIT	3,A			; ASPI support ?
	JR	Z,J$5C1E
	INC	D			; yep,
J$5C1E:	LD	(IX+6),D
	XOR	A
	LD	(IX+4),A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	LD	(IX+13),0
	BIT	2,A			; extend partition support ?
	JR	Z,J$5C3A
	INC	(IX+13)			; yep,
J$5C3A:	CALL	C$5EF0
	LD	HL,I$6511
	CALL	C.5F5F
J.5C43:	PUSH	IX
	LD	A,(IX+1)
	CALL	C.5186			; TstUnitRdy
	POP	IX
	LD	(IX+3),A
	LD	HL,32*256+9
	CALL	POSIT
	LD	A,(IX+0)
	ADD	A,"0"
	RST	18H
	LD	HL,52*256+9
	CALL	POSIT
	LD	A,(IX+1)
	ADD	A,"0"
	RST	18H
	LD	HL,32*256+10
	CALL	POSIT
	BIT	0,(IX+5)		; multi target support ?
	LD	HL,J.66D2		; disabled
	JR	Z,J$5C7A
	LD	HL,I.66DB		; enabled
J$5C7A:	CALL	C.5BD0			; print string
	LD	HL,52*256+10
	CALL	POSIT
	BIT	0,(IX+6)		; ASPI support ?
	LD	HL,J.66D2		; disabled
	JR	Z,J$5C8F
	LD	HL,I.66DB		; enabled
J$5C8F:	CALL	C.5BD0			; print string
	LD	HL,32*256+11
	CALL	POSIT
	BIT	0,(IX+13)		; extended partition support ?
	LD	HL,J.66D2		; disabled
	JR	Z,J$5CA4
	LD	HL,I.66DB		; enabled
J$5CA4:	CALL	C.5BD0			; print string
	LD	HL,I$665D
	CALL	C.5F5F
	LD	A,(IX+2)
	ADD	A,"0"
	RST	18H
	CALL	C$5F25
	LD	HL,J.666F
	CALL	C.5F5F
	LD	A,(IX+3)
	CP	85H
	LD	HL,J.66A5
	LD	A,0AH	; 10 
	LD	(IX+11),A
	JR	NZ,J.5D20
	LD	A,(IX+1)
	PUSH	HL
	LD	HL,I.8700
	PUSH	IX
	CALL	C.54BC			; Inquiry
	POP	IX
	INC	D
	DEC	D			; error ?
	JR	NZ,J$5D10		; yep,
	POP	HL
	LD	HL,I.8700
	LD	A,(HL)
	AND	1FH
	LD	(IX+11),A
	XOR	A
	LD	HL,I$8708
	LD	DE,I.8800
	LD	BC,8
	LDIR
	LD	(DE),A
	PUSH	HL
	LD	HL,I.8800
	CALL	C.5BD0			; print string
	POP	HL
	LD	DE,I.8800
	LD	BC,16
	LDIR
	LD	(DE),A
	LD	HL,I$668E
	CALL	C.5F5F
	LD	HL,I.8800
	JR	J.5D20

J$5D10:	LD	A,D
	CP	02H	; 2 
	JR	NZ,J$5D1F
	LD	A,(IX+1)
	PUSH	IX
	CALL	C.5443			; ReqSense
	POP	IX
J$5D1F:	POP	HL
J.5D20:	CALL	C.5BD0			; print string
	LD	HL,J.66C1
	CALL	C.5F5F
	LD	A,(IX+11)
	CP	0BH	; 11 
	JR	C,J$5D32
	LD	A,0AH	; 10 
J$5D32:	LD	HL,I$63D9
	AND	A
	JR	Z,J$5D3F
	LD	B,A
	LD	DE,25
J$5D3C:	ADD	HL,DE
	DJNZ	J$5D3C
J$5D3F:	LD	DE,4
	ADD	HL,DE
	CALL	C.5BD0			; print string
J$5D46:	LD	HL,I$6720
	CALL	C.5F5F
	CALL	CHGET
	CP	1BH
	JR	Z,J.5D7D
	SET	5,A
	CP	"q"
	JR	Z,J.5D7D
	CP	"s"
	JR	Z,J$5D89
	CP	"h"
	JP	Z,J.5DE7
	CP	"t"
	JP	Z,J.5E24
	CP	"a"
	JP	Z,J$5E70
	CP	"m"
	JP	Z,J$5E55
	CP	"e"
	JP	Z,J$5E87
	CP	"r"
	JP	Z,J$5E9E
	JR	J$5D46

;	  Subroutine quit (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J.5D7D:	CALL	C$5EDD
	CALL	C$5F18
	LD	A,12
	RST	18H
	JP	C.5AB8			; print Novaxis version

;	  Subroutine save and quit (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J$5D89:	DEC	(IX+4)
	JR	NZ,J.5D7D		; nothing change, quit
	LD	A,(IX+0)		; host id
	CALL	C.59FE			; save host id in RTC
	LD	A,(IX+1)		; target id
	CALL	C.5A3F			; set target id
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A83			; read RTC register
	AND	0BH
	LD	D,A
	LD	A,(IX+13)
	SLA	A
	SLA	A			; to b2
	OR	D
	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,12
	CALL	C.5A8E			; write RTC register
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A83			; read RTC register
	LD	D,(IX+5)
	SET	2,A
	BIT	0,D			; multi target support ?
	JR	NZ,J$5DCF		; yep,
	RES	2,A
J$5DCF:	LD	D,(IX+6)
	SET	3,A
	BIT	0,D			; ASPI support ?
	JR	NZ,J$5DDA		; yep,
	RES	3,A
J$5DDA:	LD	D,A
	LD	A,2
	CALL	C.5A72			; select RTC bank
	LD	B,11
	CALL	C.5A8E			; write RTC register
	JR	J.5D7D

;	  Subroutine change hostid (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J.5DE7:	LD	HL,I.6912
	CALL	C.5F5F
	LD	HL,J.66E4
	CALL	C.5F5F
	LD	HL,32*256+9
	CALL	POSIT
	CALL	CHGET
	CP	1BH
	JR	Z,J.5E18
	SUB	"0"
	CP	08H	; 8 
	JR	NC,J.5DE7
	CP	04H	; 4 
	JR	C,J.5DE7
	LD	B,(IX+1)
	CP	B
	JR	Z,J.5DE7
	LD	(IX+0),A
	LD	A,01H	; 1 
	LD	(IX+4),A
J.5E18:	LD	HL,1*256+22
	CALL	POSIT
	CALL	C.4CE1			; ClrEndLn
	JP	J.5C43

;	  Subroutine change targetid (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J.5E24:	LD	HL,I.6912
	CALL	C.5F5F
	LD	HL,I$6701
	CALL	C.5F5F
	LD	HL,52*256+9
	CALL	POSIT
	CALL	CHGET
	CP	1BH
	JR	Z,J$5E53
	SUB	"0"
	JR	C,J.5E24
	CP	07H	; 7 
	JR	NC,J.5E24
	LD	B,(IX+0)
	CP	B
	JR	Z,J.5E24
	LD	(IX+1),A
	LD	A,01H	; 1 
	LD	(IX+4),A
J$5E53:	JR	J.5E18

;	  Subroutine change multi target support (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J$5E55:	LD	A,01H	; 1 
	LD	(IX+4),A
	LD	A,(IX+5)
	XOR	01H
	LD	(IX+5),A
	LD	HL,I$67CE
	JR	NZ,J.5E6A
	LD	HL,I$681F
J.5E6A:	CALL	C.5F5F
	JP	J.5C43

;	  Subroutine change ASPI support (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J$5E70:	LD	A,01H	; 1 
	LD	(IX+4),A
	LD	A,(IX+6)
	XOR	01H
	LD	(IX+6),A
	LD	HL,J.672C
	JR	NZ,J.5E6A
	LD	HL,I$677D
	JR	J.5E6A

;	  Subroutine change extend partition support (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J$5E87:	LD	A,01H	; 1 
	LD	(IX+4),A
	LD	A,(IX+13)
	XOR	01H
	LD	(IX+13),A
	LD	HL,I$6870
	JR	NZ,J.5E6A
	LD	HL,I$68C1
	JR	J.5E6A

;	  Subroutine rescan (setup)
;	     Inputs  ________________________
;	     Outputs ________________________

J$5E9E:	LD	HL,I.6912
	CALL	C.5F5F
	PUSH	IX
	CALL	C.4CF5			; GetUnitsOn
	POP	IX
	LD	(IX+2),A
	LD	(IX+12),C
	JP	J.5C43

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5EB4:	LD	DE,(D.F34D)
	LD	(D.8207),DE
	LD	DE,I.8400
	LD	(D.F34D),DE
	CALL	C.403F			; GETWRK
	LD	(D.8209),HL
	CALL	C.404A			; get SLTWRK entry
	LD	DE,I$8600
	LD	(HL),E
	INC	HL
	LD	(HL),D
	PUSH	DE
	POP	HL
	INC	DE
	LD	(HL),00H
	LD	BC,8
	LDIR
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5EDD:	LD	DE,(D.8207)
	LD	(D.F34D),DE
	CALL	C.404A			; get SLTWRK entry
	LD	DE,(D.8209)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5EF0:	LD	HL,0800H
	CALL	NSTWRT
	LD	A,(VDP.DW)
	LD	C,A
	LD	B,0
	LD	HL,I$693D
	DI
	OTIR
	LD	B,14
	OTIR
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	LD	BC,0A4H*256+12
	CALL	WRTVDP
	LD	BC,0F0H*256+13
	CALL	WRTVDP
	EI
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5F18:	LD	BC,0*256+12
	CALL	WRTVDP
	LD	BC,0*256+13
	CALL	WRTVDP
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5F25:	LD	HL,08B2H
	CALL	NSTWRT
	LD	A,(IX+12)
	LD	HL,I$6A2D
	LD	C,A
	LD	DE,0
	AND	A
	JR	Z,J.5F4E
	LD	B,08H	; 8 
J.5F3A:	RRC	C
	JR	NC,J$5F4A
	LD	A,(HL)
	ADD	A,D
	LD	D,A
	INC	HL
	LD	A,(HL)
	ADD	A,E
	LD	E,A
	INC	HL
	DJNZ	J.5F3A
	JR	J.5F4E

J$5F4A:	INC	HL
	INC	HL
	DJNZ	J.5F3A
J.5F4E:	LD	A,(VDP.DW)
	LD	C,A
	OUT	(C),D
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	OUT	(C),E
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F5F:	PUSH	IX
	CALL	C.5F67
	POP	IX
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F67:	LD	A,(HL)
	AND	A
	RET	Z
	CP	0FFH
	JR	NZ,J$5F7B
	INC	HL
	LD	A,(HL)
	INC	HL
	PUSH	HL
	LD	L,(HL)
	LD	H,A
	CALL	POSIT
	POP	HL
	INC	HL
	JR	C.5F67

J$5F7B:	RST	18H
	INC	HL
	JR	C.5F67

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F7F:	LD	A,(DE)
	OR	A
	SCF
	RET	Z
	LD	IX,PROCNM
J$5F87:	BIT	7,A
	INC	DE
	JR	NZ,J$5F9E
	CP	(IX+0)
	INC	IX
	LD	A,(DE)
	JR	Z,J$5F87
J$5F94:	AND	80H
	INC	DE
	LD	A,(DE)
	JR	Z,J$5F94
J.5F9A:	INC	DE
	INC	DE
	JR	C.5F7F

J$5F9E:	AND	7FH
	CP	(IX+0)
	JR	NZ,J.5F9A
	LD	A,(IX+1)
	OR	A
	JR	NZ,J.5F9A
	LD	A,(DE)
	LD	C,A
	INC	DE
	LD	A,(DE)
	LD	D,A
	LD	E,C
	RET

;	  Subroutine GetNWA
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FB2:	CALL	C.403F			; GETWRK
	LD	DE,48
	ADD	IX,DE
	CALL	C.580F			; get ASPI and multi target support status
	SCF
	BIT	0,A			; ASPI enabled ?
	RET	Z			; nope, quit
	CCF
	BIT	1,A			; multi target enabled ?
	RET	Z			; nope, quit
	LD	DE,256
	ADD	IX,DE
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5FCC:	CALL	C.5FB2			; GetNWA
	RET	C			; ASPI not enabled, quit
	PUSH	IX
	POP	DE
	LD	HL,I$7FF0
	LD	BC,4
	LDIR
	LD	BC,(D.7FFA)
	LD	(IX+4),C
	LD	(IX+5),B
	RET

;	  Subroutine ExeNASPI
;	     Inputs  ________________________
;	     Outputs ________________________

J$5FE6:	CALL	C.5FB2			; GetNWA
	RET	C			; ASPI not enabled, quit
	LD	DE,16
	ADD	IX,DE
	PUSH	IX
	CALL	C.614E
	POP	HL
	CALL	C$603A
	XOR	A
	LD	(IX+24),A
	LD	A,(IX+20)
	AND	A
	RET	Z
	SET	7,(IX+24)
	BIT	0,(IX-10)
	RET	Z
	CP	02H	; 2 
	RET	NZ
	CALL	C.601D			; ASPI ??
	AND	A
	SET	6,(IX+24)
	DEC	D
	INC	D			; error ?
	RET	Z			; nope, quit
	SET	5,(IX+24)
	RET

;	  Subroutine ASPI ??
;	     Inputs  ________________________
;	     Outputs ________________________

C.601D:	LD	A,(IX+1)
	AND	0E0H
	LD	B,A
	LD	A,(IX+12)
	OR	B
	LD	L,(IX+22)
	LD	H,(IX+23)
	CALL	C.5486
	PUSH	HL
	PUSH	IX
	CALL	C.552F
	POP	IX
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$603A:	LD	A,03H
	OUT	(34H),A
	LD	BC,12*256+35H
	OTIR
	LD	A,0FH
	OUT	(34H),A
	LD	A,(IX+1)
	RLCA
	RLCA
	RLCA
	AND	07H
	OUT	(35H),A
	LD	A,12H
	OUT	(34H),A
	XOR	A
	OUT	(35H),A
	LD	A,(IX+14)
	OUT	(35H),A
	LD	A,(IX+13)
	OUT	(35H),A
	LD	A,(IX+12)
	OUT	(35H),A
	XOR	A
	OUT	(34H),A
	LD	A,(IX+15)
	OUT	(35H),A
	LD	L,(IX+16)
	LD	H,(IX+17)
	CALL	C.6084
	LD	(IX+19),A
	LD	(IX+20),D
	LD	(IX+21),E
	JP	J$6159

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6084:	IN	A,(34H)
	OR	A
	JP	P,J$6098
	LD	A,17H
	OUT	(34H),A
	DEFB	0,0
	IN	A,(35H)
	OR	A
	CALL	Z,C.614E
	JR	C.6084

J$6098:	AND	30H	; "0"
	JR	NZ,C.6084
	BIT	7,(IX+18)
	JP	NZ,J$6130
	LD	A,(IX+18)
	AND	03H	; 3 
	JR	Z,J$60B2
	DEC	A
	JR	Z,J$60D0
	DEC	A
	JR	Z,J$60F0
	JR	J$6110

J$60B2:	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	DI
J.60BF:	IN	A,(34H)
	RRCA
	JR	NC,J$60C9
	INI
	JP	J.60BF

J$60C9:	AND	40H	; "@"
	JR	Z,J.60BF
	JP	J.6162

J$60D0:	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	DI
J.60DD:	IN	A,(34H)
	RRCA
	JR	NC,J$60E9
	LD	B,16
	INIR
	JP	J.60DD

J$60E9:	AND	40H
	JR	Z,J.60DD
	JP	J.6162

J$60F0:	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	DI
J.60FD:	IN	A,(34H)
	RRCA
	JR	NC,J$6109
	LD	B,32
	INIR
	JP	J.60FD

J$6109:	AND	40H	; "@"
	JR	Z,J.60FD
	JP	J.6162

J$6110:	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	DI
J.611D:	IN	A,(34H)
	RRCA
	JR	NC,J$6129
	LD	B,64
	INIR
	JP	J.611D

J$6129:	AND	40H	; "@"
	JR	Z,J.611D
	JP	J.6162

J$6130:	LD	A,18H
	OUT	(34H),A
	LD	A,08H	; 8 
	OUT	(35H),A
	LD	A,19H
	OUT	(34H),A
	DI
J.613D:	IN	A,(34H)
	RRCA
	JR	NC,J$6147
	OUTI
	JP	J.613D

J$6147:	AND	40H	; "@"
	JR	Z,J.613D
	JP	J.6162

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.614E:	XOR	A
	OUT	(34H),A
	CALL	C.5935			; get host id from RTC
	OR	08H
	JP	J.5799

J$6159:	XOR	A
	OUT	(34H),A
	CALL	C.5935			; get host id from RTC
	JP	J.5799

J.6162:	LD	DE,8
	LD	C,35H	; "5"
J.6167:	IN	A,(34H)
	BIT	0,A
	JP	NZ,J$624C
	BIT	5,A
	JR	NZ,J.6167
	LD	A,17H
	OUT	(34H),A
	EX	(SP),HL
	EX	(SP),HL
	IN	A,(35H)
	BIT	3,A
	JR	NZ,J$61B1
	CP	16H
	JP	Z,J$624F
	BIT	4,A
	RET	NZ
	OR	A
	JP	Z,C.614E
	CP	21H	; "!"
	JR	NZ,J$6192
	PUSH	HL
	POP	IY
	DEC	A
J$6192:	CP	20H	; " "
	JP	Z,J$6234
	CP	85H
	JR	NZ,J$61A0
	BIT	7,D
	RET	Z
	JR	J.6167

J$61A0:	CP	80H
	JR	NZ,J$61A8
	RES	7,D
	JR	J.6167

J$61A8:	BIT	6,A
	JR	NZ,J$61AE
	OUT	(36H),A
J$61AE:	LD	D,02H	; 2 
	RET

J$61B1:	AND	07H	; 7 
	LD	B,A
	LD	A,18H
	OUT	(34H),A
	LD	A,0A0H
	OUT	(35H),A
J$61BC:	IN	A,(34H)
	RRCA
	JR	NC,J$61BC
	LD	A,19H
	OUT	(34H),A
	INC	B
	DJNZ	J$61CC
	OUTI
	JR	J.6167

J$61CC:	DJNZ	J$61D3
	INI
	JP	J.6167

J$61D3:	DJNZ	J$61DB
J$61D5:	XOR	A
	OUT	(35H),A
	JP	J.6167

J$61DB:	DJNZ	J$61E2
	IN	D,(C)
	JP	J.6167

J$61E2:	DJNZ	J$61E7
	JP	J$61D5

J$61E7:	DJNZ	J$61EE
	IN	A,(35H)
	JP	J.6167

J$61EE:	DJNZ	J$61F7
	OUT	(C),E
	LD	E,08H	; 8 
	JP	J.6167

J$61F7:	IN	A,(C)
	JP	Z,J.6167
	JP	M,J.6167
	CP	02H	; 2 
	JR	Z,J$6228
	CP	03H	; 3 
	JR	Z,J$622E
	CP	04H	; 4 
	JR	Z,J$621D
	CP	07H	; 7 
	JR	Z,J.6222
	CP	08H	; 8 
	JP	Z,J.6167
	CP	09H	; 9 
	JR	Z,J.6222
	LD	E,07H	; 7 
	JP	J.6167

J$621D:	SET	7,D
	JP	J.6167

J.6222:	LD	DE,0206H
	JP	J.6167

J$6228:	PUSH	HL
	POP	IY
	JP	J.6167

J$622E:	PUSH	IY
	POP	HL
	JP	J.6167

J$6234:	LD	A,E
	CP	08H	; 8 
	JR	Z,J$6241
	LD	A,18H
	OUT	(34H),A
	LD	A,02H	; 2 
	OUT	(35H),A
J$6241:	LD	A,18H
	OUT	(34H),A
	LD	A,03H	; 3 
	OUT	(35H),A
	JP	J.6167

J$624C:	JP	J.6167

J$624F:	LD	A,0FH	; 15 
	OUT	(34H),A
	IN	D,(C)
	JP	J.6167

I$6258:	DEC	L
	DAA
I$625A:	JR	J$6268

?.625C:	LD	B,0AH	; 10 
	LD	(BC),A
	INC	C
	INC	C
	INC	C
	INC	C
	INC	C
	INC	C
	INC	C
	INC	C
	INC	C
J$6268:	INC	C
	INC	C
	EX	AF,AF'
	INC	B
	INC	C
	INC	C
	EX	AF,AF'
	LD	B,0CH	; 12 
	RST	38H
	RST	38H
	INC	C
	INC	C
	EX	AF,AF'
	LD	D,0CH	; 12 
	RST	38H
	INC	C
	INC	C
	EX	AF,AF'
	INC	C
	INC	C
	EX	AF,AF'
	LD	(BC),A
	INC	C
	INC	C
	INC	C
	JR	J$629D

I$6285:	DEFB	"SLO"
	DEFB	"W"+128
	DEFW	J.4100

	DEFB	"MEDIU"
	DEFB	"M"+128
	DEFW	J.4104

	DEFB	"FAS"
	DEFB	"T"+128
	DEFW	J.4108

I$6299:	DEFB	"INF"
	DEFB	"O"+128
	DEFW	J.417D

	DEFB	"MAP"
	DEFB	"2"+128
	DEFW	J.4152

	DEFB	"MA"
	DEFB	"P"+128
	DEFW	J.4123

	DEFB	"HOSTI"
	DEFB	"D"+128
	DEFW	J.43C4

	DEFB	"SETHOSTI"
	DEFB	"D"+128
	DEFW	J.43E8

	DEFB	"TARGETI"
	DEFB	"D"+128
	DEFW	J.43FA

	DEFB	"SETTARGETI"
	DEFB	"D"+128
	DEFW	J.441E

	DEFB	"INQUIR"
	DEFB	"Y"+128
	DEFW	J.442C

	DEFB	0

I.62DE:	DEFB	"NOVAXIS MSX2/Turbo-R SCSI BIOS version "
	DEFB	0

?.6306:	DEFB	13,10
	DEFB	"Copyright 1994-1996 KMcs / MSX Club Gouda",13,10
	DEFB	"Written by Jurgen Kramer - August 25th. 1996 -",13,10
	DEFB	13,10
	DEFB	10
	DEFB	0

I$638D:	DEFB	"Host ID: "
	DEFB	0

I$6397:	DEFB	", Target ID: "
	DEFB	0

I$63A5:	DEFB	13,10
	DEFB	"Hit <DEL> to run SETUP"
	DEFB	0

I$63BE:	DEFB	"NOVAXIS ASPI version "
	DEFB	0

I.63D4:	DEFB	"ID #"
	DEFB	0

I$63D9:	DEFB	"  - Direct Access Device "
	DEFB	"  - Tape streamer        "
	DEFB	"  - Printer device       "
	DEFB	"  - Processor device     "
	DEFB	"  - WORM                 "
	DEFB	"  - CD-ROM               "
	DEFB	"  - Scanner              "
	DEFB	"  - Optical device       "
	DEFB	"  - Medium changer       "
	DEFB	"  - Communication device "
	DEFB	"  - Unknown device type "
	DEFB	0

I.64EC:	DEFB	13,10
	DEFB	0

I$64EF:	DEFB	" - "
	DEFB	0

I.64F3:	DEFB	"-",13,10
	DEFB	0

I$64F7:	DEFB	"Revision: "
	DEFB	0

J.6502:	DEFB	" - RMB"
	DEFB	0

I$6509:	DEFB	"Wait..."
	DEFB	0

I$6511:	DEFB	12
	DEFB	0FFH
	DEFB	16,1
	DEFB	"NOVAXIS Setup version 1.08 (C) 1994-1996 KMcs"
	DEFB	0FFH
	DEFB	24,2
	DEFB	"Written by Jurgen Kramer - 25/08/96 -"
	DEFB	0FFH
	DEFB	3,9
	DEFB	"[H] - Host ID              :"
	DEFB	0FFH
	DEFB	43,9
	DEFB	"[T] - Target ID            :"
	DEFB	0FFH
	DEFB	43,10
	DEFB	"[A] - NASPI support        :"
	DEFB	0FFH
	DEFB	3,10
	DEFB	"[M] - Multiple HDD support :"
	DEFB	0FFH
	DEFB	3,11
	DEFB	"[E] - Extended Partitions  :"
	DEFB	0FFH
	DEFB	43,12
	DEFB	"[R] - Rescan"
	DEFB	0FFH
	DEFB	3,14
	DEFB	"[Q] - Quit without save"
	DEFB	0FFH
	DEFB	43,14
	DEFB	"[S] - Save and quit"
	DEFB	0FFH
	DEFB	60,18
	DEFB	"ID #: 0 1 2 3 4 5 6 7"
	DEFB	0

I$665D:	DEFB	0FFH
	DEFB	1,18
	DEFB	"Units online: "
	DEFB	0

J.666F:	DEFB	0FFH
	DEFB	1,20
	DEFB	"Current Target:         "
	DEFB	0FFH
	DEFB	17,20
	DEFB	0

I$668E:	DEFB	0FFH
	DEFB	27,20
	DEFB	"                "
	DEFB	0FFH
	DEFB	27,20
	DEFB	0

J.66A5:	DEFB	"Offline                    "
	DEFB	0

J.66C1:	DEFB	0FFH
	DEFB	45,20
	DEFB	"Device type: "
	DEFB	0

J.66D2:	DEFB	"Disabled"
	DEFB	0

I.66DB:	DEFB	"Enabled "
	DEFB	0

J.66E4:	DEFB	0FFH
	DEFB	1,22
	DEFB	"Enter new Host ID (4 - 7)"
	DEFB	0

I$6701:	DEFB	0FFH
	DEFB	1,22
	DEFB	"Enter new Target ID (0 - 7)"
	DEFB	0

I$6720:	DEFB	0FFH
	DEFB	1,22
	DEFB	"Input : "
	DEFB	0

J.672C:	DEFB	0FFH
	DEFB	1,24
	DEFB	"NASPI support provides an I/O independent programming interface              "
	DEFB	0

I$677D:	DEFB	0FFH
	DEFB	1,24
	DEFB	"NASPI support: when disabled you cannot use programs written for it          "
	DEFB	0

I$67CE:	DEFB	0FFH
	DEFB	1,24
	DEFB	"Multiple HDD: when enabled all online Direct Access Devices will be installed"
	DEFB	0

I$681F:	DEFB	0FFH
	DEFB	1,24
	DEFB	"Multiple HDD: when disabled only the Target you've selected will be installed"
	DEFB	0

I$6870:	DEFB	0FFH
	DEFB	1,24
	DEFB	"Extended Partitions: when enabled you can use up to 15 partitions per drive  "
	DEFB	0

I$68C1:	DEFB	0FFH
	DEFB	1,24
	DEFB	"Extended Partitions: when disabled you can only use up to 6 part. per drive  "
	DEFB	0

I.6912:	DEFB	0FFH
	DEFB	1,24
	DEFB	13
	DEFB	27,"K"
	DEFB	0

J$6919:	DEFB	3
	DEFB	0
	DEFB	1
	DEFB	0
	DEFB	31
	DEFB	0
	DEFB	0
	DEFB	0

I$6921:	DEFB	"KMcs    NOVAXIS SCSI    -   "

I$693D:	DEFS	256-16,0

I$6A2D:	DEFB	040H,000H,010H,000H,004H,000H,001H,000H
	DEFB	000H,040H,000H,010H,000H,004H,000H,001H

I$6A3D:
;	Host ID #7

	DEFB	000H,001H,002H,003H,004H,005H,006H,080H
	DEFB	001H,000H,002H,003H,004H,005H,006H,080H
	DEFB	002H,000H,001H,003H,004H,005H,006H,080H
	DEFB	003H,000H,001H,002H,004H,005H,006H,080H
	DEFB	004H,000H,001H,002H,003H,005H,006H,080H
	DEFB	005H,000H,001H,002H,003H,004H,006H,080H
	DEFB	006H,000H,001H,002H,003H,004H,005H,080H

;	Host ID #6

	DEFB	000H,001H,002H,003H,004H,005H,007H,080H
	DEFB	001H,000H,002H,003H,004H,005H,007H,080H
	DEFB	002H,000H,001H,003H,004H,005H,007H,080H
	DEFB	003H,000H,001H,002H,004H,005H,007H,080H
	DEFB	004H,000H,001H,002H,003H,005H,007H,080H
	DEFB	005H,000H,001H,002H,003H,004H,007H,080H
	DEFB	007H,000H,001H,002H,003H,004H,005H,080H

;	Host ID #5

	DEFB	000H,001H,002H,003H,004H,006H,007H,080H
	DEFB	001H,000H,002H,003H,004H,006H,007H,080H
	DEFB	002H,000H,001H,003H,004H,006H,007H,080H
	DEFB	003H,000H,001H,002H,004H,006H,007H,080H
	DEFB	004H,000H,001H,002H,003H,006H,007H,080H
	DEFB	006H,000H,001H,002H,003H,004H,007H,080H
	DEFB	007H,000H,001H,002H,003H,004H,006H,080H

;	Host ID #4

	DEFB	000H,001H,002H,003H,005H,006H,007H,080H
	DEFB	001H,000H,002H,003H,005H,006H,007H,080H
	DEFB	002H,000H,001H,003H,005H,006H,007H,080H
	DEFB	003H,000H,001H,002H,005H,006H,007H,080H
	DEFB	005H,000H,001H,002H,003H,006H,007H,080H
	DEFB	006H,000H,001H,002H,003H,005H,007H,080H
	DEFB	007H,000H,001H,002H,003H,005H,006H,080H

I$6B15:	DEFB	000H,080H
	DEFB	001H,080H
	DEFB	002H,080H
	DEFB	003H,080H
	DEFB	004H,080H
	DEFB	005H,080H
	DEFB	006H,080H
	DEFB	007H,080H

D$6B25:	DEFB	014H,089H

	DEFS	07E00H-$,0FFH

;	  Subroutine patch
;	     Inputs  ________________________
;	     Outputs ________________________

C$7E00:	LD	A,H
	CP	40H			; is this official allowed ?
	RET	NZ
	LD	A,(NEWKEY+6)
	BIT	2,A			; GRAPH pressed ?
	RET	NZ			; nope, quit
	LD	HL,I$7E6D
	CALL	C.7E64
J$7E10:	LD	A,(NEWKEY+6)
	BIT	2,A			; GRAPH still pressed ?
	JR	Z,J$7E10		; yep, wait for release
	LD	A,(D.F3DC)
	DEC	A
	LD	(D.F3DC),A
	LD	B,00H
J$7E20:	LD	A,(NEWKEY+8)
	BIT	4,A			; CURSOR LEFT pressed ?
	CALL	Z,C$7E4A		; yep,
	LD	A,(NEWKEY+8)
	BIT	7,A			; CURSOR RIGHT pressed ?
	CALL	Z,C$7E57		; yep,
	LD	A,(NEWKEY+6)
	BIT	2,A			; GRAPH pressed ?
	JR	NZ,J$7E20		; nope, wait for pressed
	LD	A,(D.F3DC)
	INC	A
	INC	A
	LD	(D.F3DC),A
	XOR	A
	LD	(D.F3DD),A
	XOR	A
	CP	B
	JP	NZ,J.4722
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7E4A:	LD	B,00H
	LD	HL,I$7EA7
	LD	A,16H
	LD	(D.F3DD),A
	JP	C.7E64

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7E57:	LD	B,01H	; 1 
	LD	HL,I$7EAF
	LD	A,16H
	LD	(D.F3DD),A
	JP	C.7E64

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7E64:	LD	A,(HL)
	OR	A
	RET	Z
	CALL	CHPUT
	INC	HL
	JR	C.7E64

I$7E6D:	DEFB	"Novaxis SCSI will be disable",13,10
	DEFB	"if you press <GRAPH> again."
	DEFB	0

I$7EA7:	DEFB	"disable"
	DEFB	0

I$7EAF:	DEFB	"enable "
	DEFB	0

	DEFS	07F00H-$,0FFH

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7F00:	CALL	C.5BD0			; print string
J.7F03:	LD	A,(NEWKEY+8)
	BIT	3,A			; DEL pressed ?
	JR	Z,J.7F03		; yep, wait for release
	HALT				; wait (for interrupt)
	RET

	DEFS	07F80H-$,0FFH

I$7F80:	DEFB	"HD"			; SCSI BIOS id
	DEFB	023H			; SCSI BIOS 2.3
	JP	C.578A			; SetWD3393
?.7F86:	JP	J.5651			; TermAct
?.7F89:	JP	C.5209			; RdLogBlk
?.7F8C:	JP	C.534B			; WrLogBlk
?.7F8F:	JP	C.5443			; ReqSense
?.7F92:	JP	C.54BC			; Inquiry
?.7F95:	JP	J$54FA			; ReadCap
?.7F98:	JP	J$54DB			; ModeSense
?.7F9B:	JP	J$5292			; ModeSel
?.7F9E:	JP	J$52C6			; FmtUnit
?.7FA1:	JP	C.5186			; TstUnitRdy
?.7FA4:	JP	J$472B			; Initialise
?.7FA7:	JP	C.4828			; InsWork
?.7FAA:	JP	C.4CE1			; ClrEndLn
; 2.3 BIOS CALLS
?.7FAD:	JP	C.530C			; Verify
?.7FB0:	JP	C.51A0			; StrtStpUn
?.7FB3:	JP	J$5174			; SndDiag
?.7FB6:	JP	J.46BE			; Reserved
?.7FB9:	JP	J.46BE			; Reserved
; NOVAXIS BIOS CALLS
?.7FBC:	JP	J$5616			; Copy
?.7FBF:	JP	J$55D6			; RdDefect
?.7FC2:	JP	C.403F			; GetWrk
?.7FC5:	JP	C.4CE9			; PartInfo
?.7FC8:	JP	C.4CF5			; GetUnitsOn
?.7FCB:	JP	J$50EA			; SetHOST_ID
?.7FCE:	JP	C.5A3F			; SetTargetID
?.7FD1:	JP	C.5A19			; GetTargetID
?.7FD4:	JP	C.5935			; GetHOST_ID
?.7FD7:	JP	C.59EF			; GetSense
?.7FDA:	JP	J$5633			; MedRemoval
?.7FDD:	JP	J.46BE			; Reserved
?.7FE0:	JP	J.46BE			; Reserved
?.7FE3:	JP	J.46BE			; Reserved
?.7FE6:	JP	C.601D			; ASPI ??
?.7FE9:	JP	J$5FE6			; ExeNASPI
?.7FEC:	JP	C.5FB2			; GetNWA

	DEFS	07FF0H-$,0

I$7FF0:	DEFB	"KMcs"
I$7FF4:	DEFB	2			; MSX2+Turbo-R
I$7FF5:	DEFB	001H
	DEFB	059H			; version 1.59
I.7FF7:	DEFB	0B0H			; host ID = 7
	DEFB	034H			; I/O address

D$7FF9:	DEFB	064H			; patch 64
D.7FFA:	DEFB	000H
	DEFB	037H			; ASPI version 0.37

	DEFS	08000H-$,0

	END

