; Diskdriver NIA-2001 (possible ASCII SASI harddisk controller)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by Panasonic and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders

BDOS	EQU	0F37DH
SNSMAT	EQU	0141H

C$4029	EQU	4029H
I$C000	EQU	0C000H

RAMAD1	EQU	0F342H
RAMAD2	EQU	0F343H
$SECBUF	EQU	0F34DH
ENAKRN	EQU	0F368H
XFER	EQU	0F36EH
JIFFY	EQU	0FC9EH
PROCNM	EQU	0FD89H

D$7FF0  EQU     07FF0H          ; segment select
D.7FF8  EQU     07FF8H          ; data register (R/W)
D.7FF9  EQU     07FF9H          ; status register (R) b7 = I/O (0 = input, 1 = output), b6 = C/D (0 = C, 1 = D), b5 MSG (1 = MSG), b4 SEL (1 = SEL), b3 = ?, b0 = REQ
                                ; control register (W)

MYSIZE	EQU	5
                                ; +0, SASI OP code
                                ; +1, block size (0FFH undetermined, 01H 512 bytes, 00H 256 bytes)
                                ; +2, disk change status
                                ; +3, force 1st read to fail
                                ; +4, format choice

; DPB for 32 MB HD

I$7405: DEFB	0FEH
        DEFW	512		; sectorsize
        DEFB	00FH
        DEFB	004H
        DEFB	00FH		; 16 sectors/cluster
        DEFB	005H
        DEFW	1		; FAT at 1
        DEFB	2		; 2 FATs
        DEFB	240		; 240 entries
        DEFW	40		; first data sector
        DEFW	4086		; # of clusters+1
        DEFB	12		; size of FAT
        DEFW	25		; first rootdir sector

DEFDPB	EQU	I$7405-1

;	 Subroutine DSKIO
;	    Inputs  ________________________
;	    Outputs ________________________

DSKIO:
C$7417:	EI
        JP	NC,J$7428               ; sector read operation, handle
        CALL	C.760E		        ; get driver workarea
        LD	(IX+3),00H              ; reset force 1st read fail
        LD	(IX+0),0AH              ; OP code = WRITE(6)
        JR	J$743A

J$7428:	CALL	C.760E		        ; get driver workarea
        XOR	A
        CP	(IX+3)                  ; force 1st read to fail ?
        LD	(IX+3),A                ; reset force 1st read fail
        LD	A,2                     ; NOT READY error
        SCF
        RET	NZ		        ; yep, quit with NOT READY ERROR
        LD	(IX+0),08H              ; OP code = READ(6)
J$743A:	LD	A,(IX+1)
        CP	2                       ; block size determined ?
        LD	A,0CH
        CCF
        RET	C		        ; nope, quit with OTHER ERROR
        CALL	C.7531                  ; translate sectornumber and issue command
        RET	C                       ; error, quit
        LD	A,H
        AND	A		        ; page 2 or 3 transfer ?
        JP	M,J.7491	        ; yep,
        CALL	C$7965                  ; install routine in $SECBUF
        CALL	C$79A8                  ; execute routine in $SECBUF
        RET	C                       ; error, quit
        INC	B
        DEC	B                       ; sectors left ?
        RET	Z                       ; nope, quit
        LD	A,H
        AND	A                       ; page 2 or 3 transfer ?
        JP	M,J.7491                ; yep,
        LD	A,(IX+0)
        CP	0AH		        ; OP code = WRITE(6) ?
        JR	Z,J$747A	        ; yep,
        PUSH	HL
        LD	HL,($SECBUF)
        CALL	C.749B                  ; read/write sector
        POP	HL
        RET	C                       ; error, quit
        PUSH	BC
        EX	DE,HL
        LD	HL,($SECBUF)
        LD	BC,512
        CALL	XFER                    ; copy from $SECBUF to page 0/1
        POP	BC
        EX	DE,HL
        JR	J.7495                  ; next sector

J$747A:	PUSH	BC
        LD	DE,($SECBUF)
        LD	BC,512
        CALL	XFER                    ; copy from page 0/1 to $SECBUF
        PUSH	HL
        LD	HL,($SECBUF)
        CALL	C.749B                  ; read/write sector
        POP	HL
        POP	BC
        RET	C                       ; error, quit
        JR	J.7495                  ; next sector

J.7491:	CALL	C.749B                  ; read/write sector
        RET	C                       ; error, quit
J.7495:	DJNZ	J.7491                  ; next sector
        CALL	C.74F9                  ; read operation status
        RET

;	 Subroutine read/write sector
;	    Inputs  DE = sector number, HL = transfer address
;	    Outputs ________________________

C.749B:	PUSH	BC                      ; store number of sectors
        CALL	C.751D                  ; wait for data phase
        JR	Z,J.74F8                ; timeout or no data phase,
        LD	B,64
        LD	DE,D.7FF8
        LD	A,(IX+0)
        CP	0AH			; OP code = WRITE(6) ?
        JR	Z,J.74D2		; yep,
J$74AD:	LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        DJNZ	J$74AD
        CALL	C.751D                  ; wait for data phase
        JR	Z,J.74F8                ; timeout or no data phase,
        LD	B,64
J$74C2:	LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        DJNZ	J$74C2
        JR	J$74F5

J.74D2:	LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        DJNZ	J.74D2
        CALL	C.751D                  ; wait for data phase
        JR	Z,J.74F8                ; timeout or no data phase,
        LD	B,64
J$74E7:	LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        DJNZ	J$74E7

J$74F5:	POP	BC                      ; restore number of sectors
        AND	A                       ; operation succesfull
        RET

J.74F8:	POP	BC                      ; restore number of sectors

;	 Subroutine read operation status
;	    Inputs  ________________________
;	    Outputs ________________________

C.74F9:	CALL	C.7506                  ; read byte (status)
        LD	E,A
        CALL	C.7506                  ; read byte (message)
        OR	E                       ; status = GOOD and message = COMMAND COMPLETE
        RET	Z                       ; yep, quit (success)
        LD	A,12                    ; OTHER error
        SCF
        RET

;	 Subroutine read byte
;	    Inputs  ________________________
;	    Outputs ________________________

C.7506:	PUSH	BC
        LD	BC,0
J$750A:	DEC	BC
        LD	A,C
        OR	B
        LD	A,0FFH
        JR	Z,J$751B                ; time out, return status 0FFH
        LD	A,(D.7FF9)
        BIT	0,A                     ; b0 set ?
        JR	Z,J$750A                ; nope, try again
        LD	A,(D.7FF8)
J$751B:	POP	BC
        RET

;	 Subroutine wait for data phase
;	    Inputs  ________________________
;	    Outputs ________________________

C.751D:	PUSH	BC
        LD	BC,0
J$7521:	DEC	BC
        LD	A,C
        OR	B
        JR	Z,J$752F
        LD	A,(D.7FF9)
        BIT	0,A                     ; b0 set ?
        JR	Z,J$7521                ; nope, try again
        AND	40H                     ; b6 set (C/D) ?
J$752F:	POP	BC
        RET

;	 Subroutine translate sectornumber and issue command
;	    Inputs  B = number of sectors, DE = starting sector number
;	    Outputs ________________________

C.7531:	PUSH	BC
        PUSH	HL
        LD	H,B                     ; number of sectors
        LD	L,0                     ; code = 0
        LD	B,(IX+0)                ; OP code
        XOR	A
        CP	(IX+1)                  ; block size = 256 ?
        JR	NZ,J$7546               ; nope,
        SLA	H                       ; double number of sectors
        SLA	E
        RL	D
        RLA                             ; logical block number = sector number *2
J$7546:	LD	C,A
        CALL	C.7555                  ; issue command (with logical block address)
        POP	HL
        POP	BC
        RET

;	 Subroutine issue command (without logical block address)
;	    Inputs  B = OP code
;	    Outputs ________________________

C.754D:	LD	C,0
        LD	DE,0                    ; logical block address = 0
        LD	HL,0                    ; transfer length = 0

;	 Subroutine issue command (with logical block address)
;	    Inputs  B = OP code, CDE = logical block address, HL = transfer length
;	    Outputs ________________________

C.7555:	PUSH	DE
        CALL	C$7588                  ; wait for command phase
        POP	DE
        LD	A,2                     ; NOT READY error
        SCF
        RET	Z                       ; time out, quit with NOT READY error
        PUSH	BC                      ; OP code + MSB logical block address
        PUSH	DE                      ; logical block address
        PUSH	HL                      ; transfer length
        LD	HL,5
        ADD	HL,SP
        LD	B,6                     ; number of OP bytes
        LD	DE,0
J.756A:	DEC	DE
        LD	A,E
        OR	D
        LD	A,2                     ; NOT READY error
        SCF
        JR	Z,J$7584                ; time out, quit with NOT READY error
        LD	A,(D.7FF9)
        BIT	0,A                     ; b0 set ?
        JR	Z,J.756A                ; nope, try again
        LD	DE,0
        LD	A,(HL)
        LD	(D.7FF8),A
        DEC	HL
        DJNZ	J.756A
        AND	A                       ; operation successfull
J$7584:	POP	HL
        POP	DE
        POP	BC
        RET

;	 Subroutine wait for command phase
;	    Inputs  ________________________
;	    Outputs ________________________

C$7588:	LD	DE,0
J$758B:	DEC	DE
        LD	A,E
        OR	D
        RET	Z                       ; time out, quit with Zx set
        LD	A,(D.7FF9)
        AND	10H                     ; b4 set (SEL) ?
        JR	Z,J$758B                ; nope, try again
        LD	A,01H
        LD	(D.7FF8),A              ; target SCSI ID 0
        LD	A,08H
        LD	(D.7FF9),A              ; b3 set (ATN)
        LD	DE,0
J$75A3:	DEC	DE
        LD	A,E
        OR	D
        RET	Z                       ; time out, quit with Zx set
        LD	A,(D.7FF9)
        AND	10H                     ; b4 set (SEL) ?
        JR	NZ,J$75A3               ; yep, try again
        XOR	A
        LD	(D.7FF9),A              ; b3 reset
J.75B2:	LD	DE,0
J$75B5:	DEC	DE
        LD	A,E
        OR	D
        RET	Z                       ; time out, quit with Zx set
        LD	A,(D.7FF9)
        AND	0F9H                    ; ignore b2 and b1
        CP	89H                     ; b7 (O), b3 (?) and b0 set, b6 (C/D), b5 (MSG), b4 reset (SEL=0) ?
        JR	Z,J$75CC                ; yep, write MSG data
        CP	09H                     ; b3 (?) and b0 set, b7 (I), b6 (C/D), b5 (MSG), b4 reset (SEL=0) ?
        JR	Z,J$75D3                ; yep, read MSG data
        CP	0A9H                    ; b7 (O), b5 (MSG=0), b3 (?) and b0 set, b6 (C/D) and b4 reset (SEL=0) ?
        JR	NZ,J$75B5               ; nope, try again
        AND	A                       ; ok, quit with Zx reset
        RET

J$75CC:	LD	A,08H                   ; MSG no operation
        LD	(D.7FF8),A
        JR	J.75B2                  ; try again (reset timeout)

J$75D3:	LD	A,(D.7FF8)              ; read MSG
        JR	J.75B2                  ; try again (reset timeout)

;	 Subroutine read capacity
;	    Inputs  ________________________
;	    Outputs ________________________

C.75D8:	PUSH	HL
        LD	B,25H                   ; OP code = READ CAPACITY(10)
        CALL	C.754D                  ; issue command (without logical block address)
        POP	HL
        RET	C                       ; error, quit
        LD	B,4                     ; 10 bytes op, 4 more op bytes to send
        LD	DE,0
J.75E5:	DEC	DE
        LD	A,E
        OR	D
        LD	A,2                     ; NOT READY error
        SCF
        RET	Z                       ; timeout, quit with NOT READY error
        LD	A,(D.7FF9)
        BIT	0,A                     ; b0 set ?
        JR	Z,J.75E5                ; nope, try again
        LD	DE,0
        XOR	A
        LD	(D.7FF8),A
        DJNZ	J.75E5
        LD	DE,D.7FF8
        LD	B,8
J$7601:	CALL	C.751D                  ; wait for data phase
        JR	Z,J$760B                ; timeout or no data phase,
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        DJNZ	J$7601
J$760B:	JP	C.74F9                  ; read operation status and quit

;	 Subroutine get driver workarea
;	    Inputs  ________________________
;	    Outputs ________________________

C.760E:	PUSH	BC
        PUSH	HL
        CALL	GETWRK
        POP	HL
        POP	BC
        RET

;	 Subroutine initialize drive hardware
;	    Inputs  ________________________
;	    Outputs ________________________

INIHRD:
?.7616:	RET                             ; NAI-2001, normally RET is removed

?.7617:	LD	HL,(JIFFY)
        PUSH	HL
J.761B:	LD	HL,(JIFFY)
        POP	DE
        AND	A
        SBC	HL,DE
        LD	BC,1200			; 20 seconds
        AND	A
        SBC	HL,BC
        RET	NC
        PUSH	DE
        CALL	C.7642                  ; wait for period of inactivity
        LD	B,00H                   ; OP code = TEST UNIT READY
        CALL	C.754D                  ; issue command (without logical block address)
        JR	C,J.761B                ; error, try again
        CALL	C.74F9                  ; read operation status
        JR	C,J.761B                ; error, try again
        POP	AF
        LD	B,01H                   ; OP code = REZERO UNIT
        CALL	C.754D                  ; issue command (without logical block address)
        JP	C.74F9                  ; read operation status and quit

;	 Subroutine wait for period of inactivity
;	    Inputs  ________________________
;	    Outputs ________________________

C.7642:	PUSH	HL
        XOR	A
        LD	(D.7FF9),A              ; b3 reset
        LD	HL,0                    ; reset timeout counter
J$764A:	LD	A,(D.7FF9)
        RRCA                            ; b0 set ?
        JR	NC,J$7656               ; nope,
        LD	A,(D.7FF8)              ; read data
        LD	HL,0                    ; reset timeout counter
J$7656:	DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J$764A
        POP	HL
        RET

;	 Subroutine determine number of drives
;	    Inputs  ________________________
;	    Outputs ________________________

DRIVES:
?.765D:	LD	L,0                     ; NAI-2001, normally this would be LD L,1
        RET

;	 Subroutine initialize driver workarea
;	    Inputs  ________________________
;	    Outputs ________________________

INIENV:
?.7660:	CALL	GETWRK
        CALL	C$769E			; ESC pressed ?
        LD	(IX+3),00H              ; reset force 1st read fail
        JR	NZ,J$766F		; nope,
        INC	(IX+3)                  ; yep, force 1st read fail (force bootsector boot to fail ?)
J$766F:	CALL	C$76A6			; SELECT pressed ?
        LD	(IX+1),0FFH             ; block size = unknown
        RET	Z			; yep, quit (block size undetermined)
        LD	HL,I$C000               ; use temporary buffer at 0C000H

;	 Subroutine determine block size
;	    Inputs  ________________________
;	    Outputs ________________________

C$767A:	LD	(IX+2),0FFH             ; disk change status = CHANGED
        LD	(IX+1),0FFH             ; block size = unknown
        PUSH	HL
        CALL	C.75D8                  ; read capacity
        POP	HL
        RET	C                       ; error, quit
        INC	HL
        INC	HL
        INC	HL
        INC	HL
        LD	A,(HL)
        INC	HL
        OR	(HL)                    ; block length < 64KB ?
        RET	NZ                      ; nope, quit
        INC	HL
        INC	HL
        OR	(HL)                    ; block length multiply of 256 ?
        RET	NZ                      ; nope, quit
        DEC	HL
        LD	A,(HL)
        DEC	A
        CP	2                       ; block length 256 or 512 ?
        RET	NC                      ; nope, quit
        LD	(IX+1),A                ; block size (0 = 256, 1 = 512)
        RET

;	 Subroutine ESC pressed ?
;	    Inputs  ________________________
;	    Outputs ________________________

C$769E:	LD	A,7
        CALL	SNSMAT
        BIT	2,A
        RET

;	 Subroutine SELECT pressed ?
;	    Inputs  ________________________
;	    Outputs ________________________

C$76A6:	LD	A,7
        CALL	SNSMAT
        BIT	6,A
        RET

MTOFF:
?.76AE:	EI
        LD	HL,($SECBUF)
        CALL	C.75D8                  ; read capacity
        RET	C                       ; error, quit
        LD	B,0BH                   ; OP code = SEEK
        LD	HL,($SECBUF)
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	E,(HL)                  ; max logical block address
        LD	HL,0                    ; transfer length = 0
        CALL	C.7555                  ; issue command (with logical block address)
        JP	C.74F9                  ; read operation status and quit

;	 Subroutine DSKCHG
;	    Inputs  ________________________
;	    Outputs ________________________

DSKCHG:
?.76CA:	EI
        CALL	GETWRK
        LD	A,(IX+1)
        CP	2                       ; block size determined ?
        LD	B,0                     ; disk change = UNKNOWN
        JR	NC,J$76DE               ; nope, return UNKOWN
        LD	B,(IX+2)                ; current disk change status
        LD	(IX+2),1                ; new disk change = UNCHANGED
J$76DE:	OR	A
        RET

;	 Subroutine GETDPB
;	    Inputs  ________________________
;	    Outputs ________________________

GETDPB:
?.76E0:	EI
        INC	HL
        EX	DE,HL
        LD	HL,I$7405
        LD	BC,18
        LDIR
        AND	A
        RET

;	 Subroutine CHOICE
;	    Inputs  ________________________
;	    Outputs ________________________

CHOICE:
?.76ED:	LD	HL,I$76F1
        RET

I$76F1:	DEFB	13,10
        DEFB	"1 - Format with verify",13,10
        DEFB	"2 - Format only",13,10
        DEFB	13,10
        DEFB	0

;	 Subroutine DSKFMT
;	    Inputs  ________________________
;	    Outputs ________________________

DSKFMT:
        EI
        DEC	A
        CP	2
        JR	C,J$7729
        LD	A,12                    ; BAD PARAMETER error
        SCF
        RET

J$7729:	PUSH	AF
        CALL	GETWRK
        POP	AF
        LD	(IX+4),A                ; format choice
        CALL	C.7642                  ; wait for period of inactivity
        LD	B,04H                   ; OP code = FORMAT UNIT
        CALL	C.754D                  ; issue command (without logical block address)
        RET	C                       ; error, quit
J$773A:	LD	A,(D.7FF9)
        BIT	0,A                     ; b0 set ?
        JR	Z,J$773A                ; nope, try again
        CALL	C.74F9                  ; read operation status
        LD	A,10H                   ; OTHER error
        RET	C                       ; error, quit
        LD	HL,($SECBUF)
        CALL	C$767A                  ; determine block size
        LD	HL,($SECBUF)
        LD	E,L
        LD	D,H
        INC	DE
        LD	BC,512-1
	LD	(HL),0
        LDIR                            ; clear $SECBUF
        LD	DE,1+1			; second sector of FAT #1
        CALL	C.7859			; write FAT sectors
        RET	C                       ; error, quit
        LD	DE,1+1+12		; second sector of FAT #2
        CALL	C.7859			; write FAT sectors
        RET	C                       ; error, quit
        LD	B,15			; 15 directory sectors
        LD	DE,1+2*12		; first sector of rootdirectory
        CALL	C.785B			; write sectors
        RET	C                       ; error, quit
        LD	HL,($SECBUF)
        LD	(HL),0FEH               ; media byte
J$7776:	INC	HL
        LD	(HL),0FFH
        INC	HL
J$777A:	LD	(HL),0FFH
        LD	DE,1			; first sector of FAT #1
        CALL	C.7866			; write $SECBUF to sector
        RET	C                       ; error, quit
        LD	DE,1+12			; first sector of FAT #2
J$7786:	CALL	C.7866			; write $SECBUF to sector
        RET	C                       ; error, quit
        LD	DE,($SECBUF)
        LD	HL,I$787C
        LD	BC,L787C
        LDIR                            ; copy boot sector in $SECBUF
        LD	DE,0			; bootsector
        CALL	C.7866			; write $SECBUF to sector
        RET	C                       ; error, quit
        LD	A,(IX+4)
        AND	A			; format with verify ?
        RET	NZ			; nope, quit with success (Cx reset)
        LD	HL,2                    ; cluster number = 2
        LD	BC,4085                 ; number of clusters
J$77A8:	PUSH	BC
        PUSH	HL
        CALL	C$77B9                  ; verify cluster
        POP	HL
        CALL	C,C$77F2                ; error, mark cluster as bad
        POP	BC
        INC	HL
        DEC	BC
        LD	A,C
        OR	B
        JR	NZ,J$77A8               ; next cluster
        RET                             ; quit with success (Cx reset)

;	 Subroutine verify cluster
;	    Inputs  ________________________
;	    Outputs ________________________

C$77B9:	DEC	HL
        DEC	HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL                   ; * 16 (sectors per cluster)
        LD	B,16                    ; 16 sectors
        LD	DE,40
        ADD	HL,DE                   ; + 40 (first data sector)
        EX	DE,HL
        LD	(IX+0),08H              ; OP code = READ(6)
        CALL	C.7531                  ; translate sectornumber and issue command
        LD	DE,D.7FF8
        LD	A,B
        ADD	A,A
        LD	C,A                     ; number of 256 units = number of sectors *2
J$77D3:	CALL	C.751D                  ; wait for data phase
        JR	Z,J$77EF                ; timeout or no data phase,
        LD	B,16
J$77DA:	LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        LD	A,(DE)
        DJNZ	J$77DA                  ; read 256 bytes from sector
        DEC	C
        JR	NZ,J$77D3
J$77EF:	JP	C.74F9                  ; read operation status and quit

;	 Subroutine mark cluster as bad
;	    Inputs  ________________________
;	    Outputs ________________________

C$77F2:	PUSH	HL
        LD	E,L
        LD	D,H
        SRL	H
        RR	L
        PUSH	AF
        ADD	HL,DE
        LD	A,H
        SRL	A
        INC	A
        LD	E,A
        LD	D,00H
        LD	A,H
        AND	01H
        LD	H,A
        LD	BC,512-1
        PUSH	HL
        SBC	HL,BC
        JR	Z,J$782F
        CALL	C.7865			; read sector in $SECBUF
        POP	HL
        LD	BC,($SECBUF)
        ADD	HL,BC
        POP	AF
        JR	C,J$7821
        LD	(HL),0F7H
        INC	HL
        LD	(HL),0FH
        JR	J$782A

J$7821:	LD	A,(HL)
        AND	0FH
        OR	70H
        LD	(HL),A
        INC	HL
J$7828:	LD	(HL),0FFH
J$782A:	CALL	C.784B			; write FAT sector (both FATs)
        POP	HL
        RET

J$782F:	CALL	C.7865			; read sector in $SECBUF
        POP	HL
        LD	BC,($SECBUF)
        ADD	HL,BC
        POP	AF
        LD	A,(HL)
        AND	0FH
        OR	70H
        LD	(HL),A
        CALL	C.784B			; write FAT sector (both FATs)
        INC	DE
        CALL	C.7865			; read sector in $SECBUF
        LD	HL,($SECBUF)
        JR	J$7828

;	 Subroutine write FAT sector (both FATs)
;	    Inputs  DE = FAT #1 sector nummber
;	    Outputs ________________________

C.784B:	PUSH	DE
        CALL	C.7866			; write $SECBUF to sector
        LD	HL,12
        ADD	HL,DE
        EX	DE,HL
        CALL	C.7866			; write $SECBUF to sector
        POP	DE
        RET

;	 Subroutine write FAT sectors
;	    Inputs  ________________________
;	    Outputs ________________________

C.7859:	LD	B,11

;	 Subroutine write sectors
;	    Inputs  ________________________
;	    Outputs ________________________

C.785B:	PUSH	BC
        CALL	C.7866                  ; write $SECBUF to sector
        POP	BC
        RET	C                       ; error, quit
        INC	DE
        DJNZ	C.785B
        RET

;	 Subroutine read sector in $SECBUF
;	    Inputs  ________________________
;	    Outputs ________________________

C.7865:	DEFB    0F6H                    ; OR xx

;	 Subroutine write $SECBUF to sector
;	    Inputs  ________________________
;	    Outputs ________________________

C.7866:	SCF
        PUSH	DE
        LD	A,0			; drive 0
        LD	HL,($SECBUF)
        LD	BC,1*256+0FEH
        CALL	C$7417			; read/write sector
        POP	DE
        RET	NC
        CP	02H                     ; NOT READY error ?
        SCF
        RET	Z                       ; yep, quit
        LD	A,10H                   ; OTHER error
        RET

I$787C:
        .PHASE	0C000H

        DEFB	0EBH,0FEH               ; x86 JMP +0100H
        DEFB	090H                    ; x86 NOP
        DEFB	"TAKAOKA "
	DEFW	512			; 512 bytes per sector
        DEFB	16			; 16 sectors per cluster
        DEFW	1			; 1 reserved sector
        DEFB	2			; 2 fat copies
        DEFW	240			; 240 root directory entries
        DEFW	65400			; total disk sectors
        DEFB	0FEH			; mediascriptor
        DEFW	12			; 12 sectors per fat
        DEFW	33			; 33 sectors per track
        DEFW	1			; 1 side
        DEFW	0			; 0 hidden sectors

        RET	NC
        LD	(LC058+1),DE
        LD	(LC0C4),A
        LD	(HL),LOW LC056
        INC	HL
        LD	(HL),HIGH LC056
L7F3A:	LD	SP,KBUF+256
        LD	DE,LC09F
        LD	C,00FH
        CALL	BDOS
        INC	A
        JP	Z,LC063
        LD	DE,00100H
        LD	C,01AH
        CALL	BDOS
        LD	HL,1
        LD	(LC09F+14),HL
        LD	HL,04000H-00100H
        LD	DE,LC09F
        LD	C,027H
        CALL	BDOS
        JP	00100H

LC056:	DEFW	LC058

LC058:	CALL	0
        LD	A,C
        AND	0FEH
        CP	2
        JP	NZ,LC06A
LC063:	LD	A,(LC0C4)
        AND	A
        JP	Z,DSKBAS
LC06A:	LD	DE,LC079
        LD	C,009H
        CALL	BDOS
        LD	C,007H
        CALL	BDOS
        JR	L7F3A

LC079:	DEFB	"Boot error",13,10
        DEFB	"Press any key for retry",13,10
        DEFB	"$"

LC09F:	DEFB	0
        DEFB	"MSXDOS  SYS"

        .DEPHASE

L787C   EQU     $-I$787C

;	 Subroutine OEM statement handler
;	    Inputs  ________________________
;	    Outputs ________________________

OEMSTA:
        PUSH	HL
        LD	HL,I$7952
J$7933:	LD	DE,PROCNM
J$7936:	LD	A,(DE)
        CP	(HL)
        JR	NZ,J$7945
        INC	DE
        INC	HL
        AND	A
        JR	NZ,J$7936
        LD	E,(HL)
        INC	HL
        LD	D,(HL)
        POP	HL
        PUSH	DE
        RET

J$7945:	LD	C,0FFH
        XOR	A
        CPIR
        INC	HL
        INC	HL
J$794C:	CP	(HL)
        JR	NZ,J$7933
        POP	HL
        SCF                             ; statement not recognized
        RET

I$7952:	DEFB	"SHUTDOWN",0
        DEFW	C795E
        DEFB	0

C795E:	PUSH	HL                      ; store BASIC pointer
        CALL	C$4029			; stop all drives
        POP	HL                      ; restore BASIC pointer
        AND	A                       ; statement recognized
        RET

;	 Subroutine install routine in $SECBUF
;	    Inputs  ________________________
;	    Outputs ________________________

C$7965:	PUSH	HL
        PUSH	BC
        LD	HL,I$79AE
        LD	DE,($SECBUF)
        LD	BC,L79AE
	LDIR                            ; install routine in $SECBUF
        LD	HL,I$7996               ; table with relocation addresses
J$7976:	LD	E,(HL)
        INC	HL
        LD	D,(HL)
        INC	HL
        LD	A,E
        OR	D
        JR	Z,J$7993
	PUSH	HL
	LD	HL,($SECBUF)
        ADD	HL,DE
        INC	HL
        LD	C,(HL)
        INC	HL
        LD	B,(HL)
        EX	DE,HL
        LD	HL,($SECBUF)
        ADD	HL,BC
        EX	DE,HL
        LD	(HL),D
	DEC	HL
        LD	(HL),E
        POP	HL
        JR	J$7976

J$7993:	POP	BC
        POP	HL
        RET

I$7996:	DEFW	R0004+1
        DEFW	R0018+1
        DEFW	R003E+1
        DEFW	R0047+1
        DEFW	R0065+1
        DEFW	R008A+1
        DEFW	R00A1+1
        DEFW	R00A5+1
        DEFW	0

;	 Subroutine execute routine in $SECBUF
;	    Inputs  ________________________
;	    Outputs ________________________

C$79A8:	PUSH	HL
        LD	HL,($SECBUF)
        EX	(SP),HL
        RET

I$79AE:
        .PHASE  0

;	 Subroutine read/write sectors (in page 0/1)
;	    Inputs  ________________________
;	    Outputs ________________________

R0000:	PUSH	HL                      ; store transfer address
        PUSH	BC                      ; store number of sectors
        CALL	GETSLT                  ; get slotid of page 1 (this disk driver)
R0004:  LD	(R002B+1),A
        LD	H,80H
        CALL	ENASLT                  ; switch disk driver hardware on page 2
        EI
        LD	A,(RAMAD1)
        LD	H,HIGH 04000H
        CALL	ENASLT                  ; switch RAM on page 1
        EI
        POP	BC                      ; restore number of sectors
        POP	HL                      ; restore transfer address
R0018:  CALL	R0037                   ; read/write sectors (in page 0/1)
        PUSH	HL                      ; store current transfer address
        PUSH	BC                      ; store number of sectors left
        PUSH	AF                      ; store result
        LD	A,(RAMAD2)
        LD	H,80H
        CALL	ENASLT                  ; switch RAM on page 2
        CALL	ENAKRN                  ; switch disk kernel on page 1
        EI
R002B:  LD	A,0
        LD	H,HIGH 04000H
        CALL	ENASLT                  ; switch disk driver on page 1
        EI
        POP	AF                      ; restore result
        POP	BC                      ; restore number of sectors left
        POP	HL                      ; restore current transfer address
        RET

;	 Subroutine read/write sectors (in page 0/1)
;	    Inputs  ________________________
;	    Outputs ________________________

R0037:
J$79E5:	DEC	HL
        LD	A,H
        INC	HL
        ADD	A,HIGH 512              ; transfer partitial in page 2 ?
        RET	M                       ; yep, quit
        PUSH	BC
R003E:  CALL	R0047                   ; read/write sector
        POP	BC
        RET	C
        DJNZ	J$79E5
        JR	J.7A50                  ; read operation status and quit

;	 Subroutine __________________________
;	    Inputs  ________________________
;	    Outputs ________________________

R0047:  CALL	R00C6                   ; wait for data phase
        JR	Z,J.7A50                ; timeout or no data phase, read operation status and quit
        LD	B,64
        LD	DE,D.7FF8+04000H        ; data register
        LD	A,(IX+0)
        CP	0AH                     ; OP code = WRITE(6) ?
        JR	Z,J.7A2B                ; yep, write sector
J$7A06:	LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        DJNZ	J$7A06                  ; read 64*4 = 256 bytes
R0065:  CALL	R00C6                   ; wait for data phase
        JR	Z,J.7A50                ; timeout or no data phase, read operation status and quit
        LD	B,64
J$7A1B:	LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        LD	A,(DE)
        LD	(HL),A
        INC	HL
        DJNZ	J$7A1B                  ; read 64*4 = 256 bytes
        AND	A                       ; operation succesfull
        RET

J.7A2B:	LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        DJNZ	J.7A2B                  ; write 64*4 = 256 bytes
R008A:  CALL	R00C6                   ; wait for data phase
        JR	Z,J.7A50                ; timeout or no data phase, read operation status and quit
        LD	B,64
J$7A40:	LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        LD	A,(HL)
        LD	(DE),A
        INC	HL
        DJNZ	J$7A40                  ; write 64*4 = 256 bytes
        AND	A                       ; operation successfull
        RET

;	 Subroutine read operation status
;	    Inputs  ________________________
;	    Outputs ________________________

R00A1:
J.7A50:	CALL	R00AF                   ; read byte (status)
        LD	E,A
R00A5:  CALL	R00AF                   ; read byte (message)
        OR	E                       ; status = GOOD and message = COMMAND COMPLETE
        RET	Z                       ; yep, quit with success
        LD	A,12                    ; OTHER error
        SCF
        RET

;	 Subroutine read byte
;	    Inputs  ________________________
;	    Outputs ________________________

R00AF:  PUSH	BC
        LD	BC,0
J$7A61:	DEC	BC
        LD	A,C
        OR	B
        LD	A,0FFH
        JR	Z,J$7A72                ; timeout, return 0FFH
        LD	A,(D.7FF9+04000H)
        BIT	0,A                     ; b0 set ?
        JR	Z,J$7A61                ; nope, try again
        LD	A,(D.7FF8+04000H)
J$7A72:	POP	BC
        RET

;	 Subroutine wait for data phase
;	    Inputs  ________________________
;	    Outputs ________________________

R00C6:  PUSH	BC
        LD	BC,0
J$7A78:	DEC	BC
        LD	A,C
        OR	B
        JR	Z,J$7A86
        LD	A,(D.7FF9+04000H)
        BIT	0,A                     ; b0 set ?
        JR	Z,J$7A78                ; nope, try again
        AND	40H                     ; b6 set (C/D) ?
J$7A86:	POP	BC
        RET

        .DEPHASE
L79AE   EQU     $-I$79AE

        DEFS	07FD0H-$,0

        LD	(D$7FF0),A
        RET

        DEFS    08000H-$,0FFH

        END
