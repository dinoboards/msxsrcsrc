; Diskdriver Microsol CDX-2
; FDC	WD279x

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by Microsol and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders

SECLEN  EQU     512
MYSIZE	EQU	10

                                ; +0    disk motor timer
                                ; +1    disk change timer drive 0
                                ; +2    disk change timer drive 1
                                ; +3    current physical drive
                                ; +4    saved current track physical drive 0
                                ; +5    saved current track physical drive 1
                                ; +6    current phantom drive (used with 1 physical drive)
                                ; +7    b7 = 10 sectors/track, b0 = verify sector
                                ; +8    b0 = write sectors
                                ; +9    number of physical drives

I$7405:	DEFB	0F8H
        DEFW	512
        DEFB	0FH
        DEFB	04H
        DEFB	01H
        DEFB	02H
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	12
        DEFW	355
        DEFB	2
        DEFW	5

DEFDPB	EQU	$-1

	DEFB	0F9H
        DEFW	512
        DEFB	0FH
        DEFB	04H
        DEFB	01H
        DEFB	02H
        DEFW	1
        DEFB	2
        DEFB	112
        DEFW	14
        DEFW	714
        DEFB	3
        DEFW	7

        DEFB    0FAh            ; Media FA
        DEFW    512             ; 80 Tracks
        DEFB    0Fh             ; 8 sectors
        DEFB    04h             ; 1 side
        DEFB    01h             ; 3.5" 320 Kb
        DEFB    02h
        DEFW    1
        DEFB    2
        DEFB    112
        DEFW    10
        DEFW    316
        DEFB    1
        DEFW    3

        DEFB    0FBh            ; Media FB
        DEFW    512             ; 80 Tracks
        DEFB    0Fh             ; 8 sectors
        DEFB    04h             ; 2 sides
        DEFB    01h             ; 3.5" 640 Kb
        DEFB    02h
        DEFW    1
        DEFB    2
        DEFB    112
        DEFW    10
        DEFW    636
        DEFB    2
        DEFW    5

        DEFB    0FCH
        DEFW    512
        DEFB    0FH
        DEFB    04H
        DEFB    00H
        DEFB    01H
        DEFW    1
        DEFB    2
        DEFB    64
        DEFW    9
        DEFW    0160H
        DEFB    2
        DEFW    5

        DEFB    0FDH
        DEFW    512
        DEFB    0FH
        DEFB    04H
        DEFB    01H
        DEFB    02H
        DEFW    1
        DEFB    2
        DEFB    112
        DEFW    12
        DEFW    0163H
        DEFB    2
        DEFW    5

        DEFB    0FEH
        DEFW    512
        DEFB    0FH
        DEFB    04H
        DEFB    00H
        DEFB    01H
        DEFW    1
        DEFB    2
        DEFB    64
        DEFW    7
        DEFW    013AH
        DEFB    1
        DEFW    3

        DEFB    0FFH
        DEFW    512
        DEFB    0FH
        DEFB    04H
        DEFB    01H
        DEFB    02H
        DEFW    1
        DEFB    2
        DEFB    112
        DEFW    10
        DEFW    013CH
        DEFB    1
        DEFW    3

; jump table

DSKIO:
?.7495:	JP	C.74BF

DSKCHG:
?.7498:	JP	J$7831

GETDPB:
?.749B:	JP	C.7871

CHOICE:
?.749E:	JP	J$788C

DSKFMT:
?.74A1:	JP	J$7960

MTOFF:
?.74A4:	JP	J$77C0

INIHRD:
?.74A7:	JP	C.77B0

DRIVES:
?.74AA:	JP	J$77DD

INIENV:
?.74AD:	JP	J$77FA

OEMSTA:
?.74B0:	JP	J$7922
?.74B3:	JP	C.760A                  ; read sector
?.74B6:	JP	C.7526                  ; write sector
?.74B9:	JP	J$7784                  ; wait for FDC and seek to cylinder
?.74BC:	JP	C.77C4                  ; initialize FDD

;	  Subroutine DSKIO
;	     Inputs  ________________________
;	     Outputs ________________________

C.74BF:	PUSH	AF
        JP	NC,J$75C5

; DSKIO write

        CALL	C$74EA                  ; write sectors

; DSKIO finish

J.74C6:	POP	DE
        PUSH	AF
        LD	C,60
        JR	NC,J$74CE
        LD	C,0
J$74CE:	LD	A,0D0H
        OUT	(0D0H),A
        EX	(SP),IY
        EX	(SP),IY
        IN	A,(0D0H)
        LD	(IX+0),120
        LD	A,D
        AND	A
        JR	NZ,J$74E5
        LD	(IX+1),C
        POP	AF
        RET	

J$74E5:	LD	(IX+2),C
        POP	AF
        RET	

;	  Subroutine write sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$74EA:	CALL	C.766B                  ; prepare for disk i/o
        RET	C                       ; error, quit with error
        SET	0,(IX+8)                ; write sectors flag
J$74F2:	LD	A,H
        AND	A                       ; transfer from page 2 or 3 ?
        JP	M,J.7518                ; yep, direct transfer
        LD	A,LOW (512-1)
        ADD	A,L
        LD	A,H
        ADC	A,HIGH (512-1)
        CP	HIGH 4000H              ; transfer from page 0 ?
        JR	C,J.7518                ; yep, direct transfer
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,($SECBUF)
        PUSH	DE
        LD	BC,SECLEN
        CALL	XFER                    ; copy from transfer address to $SECBUF
        POP	HL
        POP	BC
        POP	DE
        CALL	C.7526			; write sector
        POP	HL
        JR	J$751E                  ; continue

J.7518:	CALL	C.7526			; write sector
        CALL	C$75A7			; verify when enabled
J$751E:	RET	C                       ; error, quit with error
        DEC	B                       ; update number of sectors
        RET	Z                       ; done, quit
        CALL	C.7742                  ; prepare for next sector
        JR	J$74F2                  ; next sector

;	  Subroutine write sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.7526:	LD	E,11
J$7528:	CALL	C.77AA			; wait for FDC ready
        LD	A,0A0H
        BIT	6,D
        JR	Z,J.7539
        OR	02H
        BIT	4,D
        JR	Z,J.7539
        OR	08H
J.7539:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,I$7570
        PUSH	DE
        CALL	DISINT
        DI	
        OUT	(0D0H),A
        EX	(SP),IY
        EX	(SP),IY
        EX	(SP),IY
        EX	(SP),IY
        EX	(SP),IY
        EX	(SP),IY
        LD	C,0D3H
J$7554:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JP	NC,J$7554
        OUTI	
        LD	A,1DH
J$7560:	DEC	A
        JR	NZ,J$7560
J.7563:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JP	NC,J.7563
        OUTI	
        JP	J.7563

I$7570:	LD	B,6AH
J$7572:	EX	(SP),HL
        EX	(SP),HL
        DJNZ	J$7572
        POP	BC
        POP	DE
        POP	HL
        EI	
        CALL	ENAINT
        IN	A,(0D0H)
        AND	0FCH
        RET	Z
        JP	M,J.75A3                ; quit with not ready error
        BIT	6,A
        JR	NZ,J$75A0               ; quit with write protect error
        PUSH	AF
        CALL	C.7781                  ; reseek
        POP	AF
        DEC	E                       ; update retries
        JR	NZ,J$7528               ; next try
        SCF	
        LD	E,A
        BIT	4,E
        LD	A,8
        RET	NZ
        BIT	3,E
        LD	A,4
        RET	NZ
        LD	A,12
        RET	

J$75A0:	XOR	A
        SCF	
        RET	

J.75A3:	LD	A,2
        SCF	
        RET	

;	  Subroutine verify when enabled
;	     Inputs  ________________________
;	     Outputs ________________________

C$75A7:	RET	C                       ; error, quit
        LD	A,(RAWFLG)
        OR	A			; verify after write ?
        RET	Z			; nope, quit
        SET	0,(IX+7)		; set verify flag
        CALL	C.760A			; read/verify sector
        RES	0,(IX+7)		; reset verify flag
        RET	

J.75B9:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JR	NC,J.75B9
        IN	A,(C)
        JP	J.75B9

; DSKIO read

J$75C5:	CALL	C$75CB                  ; read sectors
        JP	J.74C6                  ; DSKIO finish

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$75CB:	CALL	C.766B                  ; prepare for disk i/o
        RET	C                       ; error, quit with error
        RES	0,(IX+8)                ; read sectors flag
J$75D3:	LD	A,H
        AND	A                       ; transfer to page 2 or 3 ?
        JP	M,J.75FF                ; yep, direct transfer
        LD	A,LOW (SECLEN-1)
        ADD	A,L
        LD	A,H
        ADC	A,HIGH (SECLEN-1)
        CP	HIGH 4000H              ; transfer to page 0 ?
        JR	C,J.75FF                ; yep, direct transfer
        PUSH	HL
        LD	HL,($SECBUF)
        CALL	C.760A			; read/verify sector in $SECBUF
        POP	HL
        RET	C                       ; error, quit
        PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,($SECBUF)
        EX	DE,HL
        LD	BC,SECLEN
        CALL	XFER                    ; copy from $SECBUF to transfer address
        POP	BC
        POP	DE
        POP	HL
        AND	A
        JR	J$7603                  ; continue

J.75FF:	CALL	C.760A			; read/verify sector
        RET	C                       ; error, quit with error
J$7603:	DEC	B                       ; update number of sectors
        RET	Z                       ; done, quit
        CALL	C.7742                  ; prepare for next sector
        JR	J$75D3                  ; next sector

;	  Subroutine read/verify sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.760A:	LD	E,11
J$760C:	CALL	C.77AA			; wait for FDC ready
        LD	A,80H
        BIT	6,D
        JR	Z,J.761D
        OR	02H
        BIT	4,D
        JR	Z,J.761D
        OR	08H
J.761D:	PUSH	HL
        PUSH	DE
        PUSH	BC
        LD	DE,I$7645
        PUSH	DE
        CALL	DISINT
        DI	
        OUT	(0D0H),A
        LD	C,0D3H
        LD	B,3
        EX	(SP),IY
        EX	(SP),IY
        BIT	0,(IX+7)                ; verify sector flag ?
        JP	NZ,J.75B9               ; nope, read sector
J.7639:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JR	NC,J.7639
        INI	
        JP	J.7639

I$7645:	POP	BC
        POP	DE
        POP	HL
        EI	
        CALL	ENAINT
        IN	A,(0D0H)
        AND	9CH
        RET	Z
        JP	M,J.75A3                ; quit with not ready error
        PUSH	AF
        CALL	C.7781                  ; reseek
        POP	AF
        DEC	E                       ; update retries
        JR	NZ,J$760C               ; next try
        SCF	
        LD	E,A
        BIT	4,E
        LD	A,8
        RET	NZ
        BIT	3,E
        LD	A,4
        RET	NZ
        LD	A,12
        RET	

;	  Subroutine prepare for disk i/o
;	     Inputs  ________________________
;	     Outputs ________________________

C.766B:	PUSH	AF
        PUSH	BC
        PUSH	HL
        CALL	GETWRK
        POP	HL
        POP	BC
        POP	AF
        CP	1+1                     ; valid drive ?
        JR	C,J$767C                ; yep, continue
J$7678:	SCF	
        LD	A,12
        RET	                        ; quit with other error

J$767C:	PUSH	AF                      ; store drive
        LD	A,C
        RES	7,(IX+7)                ; reset 10 sector/track flag
        CP	0F8H                    ; valid media descriptor ?
        JR	NC,J.7695               ; yep, continue
        CP	7CH                     ; ?? media descriptor ?
        SET	7,(IX+7)                ; set 10 sector/track flag
        JR	Z,J.7695                ; yep, continue
        CP	7DH                     ; ?? media descriptor ?
        JR	Z,J.7695                ; yep, continue
        POP	AF
        JR	J$7678                  ; quit with other error

J.7695:	POP	AF                      ; restore drive
        PUSH	IX                      ; store pointer to driver workarea
        PUSH	BC                      ; store number of sectors, media descriptor
        PUSH	DE                      ; store sector number
        PUSH	AF                      ; store drive
        LD	A,(IX+9)
        DEC	A                       ; 1 physical drive ?
        JR	NZ,J.76B8               ; nope, skip phantom drive
        POP	AF                      ; restore drive
        LD	B,0
        PUSH	BC                      ; store drive 0
        CP	(IX+6)                  ; same phantom drive as last operation ?
        JR	Z,J.76B8                ; yep, skip phantom drive switch
        LD	(IX+6),A                ; update phantom drive
        XOR	A
        OUT	(0D4H),A		; unselect diskdrive, side 0, motor off
        LD	(IX+0),A                ; motor off timer = finished
        PUSH	HL                      ; store transfer address
        CALL	PROMPT                  ; prompt for phantom drive
        POP	HL                      ; restore transfer address
J.76B8:	POP	AF                      ; restore physical drive
        POP	DE                      ; restore sector number
        POP	BC                      ; restore number of sectors, media descriptor
        POP	IX                      ; restore pointer to driver workarea
        PUSH	HL
        PUSH	AF                      ; store physical drive
        PUSH	BC
        CALL	C.77AA			; wait for FDC ready
        LD	A,C
        LD	C,E
        LD	B,D
        LD	DE,10
        BIT	7,(IX+7)                ; 10 sector/track flag set ?
        JR	NZ,J.76D7               ; yep, use 10 sectors per track
        BIT	1,A                     ; 8 sectors per track ?
        LD	DE,8
        JR	NZ,J.76D7               ; yep,
        INC	DE                      ; 9 sectors per track
J.76D7:	CALL	DIV16
        LD	A,L
        INC	A                       ; record (1 based)
        OUT	(0D2H),A
        LD	L,C                     ; track
        POP	BC
        POP	AF                      ; restore physical drive
        LD	H,A
        PUSH	HL                      ; store physical drive, track
        LD	A,0
        SCF	
        INC	H
J$76E7:	RLA	
        DEC	H
        JR	NZ,J$76E7		; set the right diskdrive bit
        OR	20H			; motor on
        POP	HL                      ; restore physical drive, track
        BIT	0,C                     ; double sided media ?
        JR	Z,J.76F8                ; nope, cylinder = track
        SRL	L                       ; cylinder = track / 2
        JR	NC,J.76F8               ; side 0, continue
        OR	10H			; side 1
J.76F8:	LD	D,A
        LD	A,C
        RRCA	
        RRCA	
        AND	0C0H
        OR	D
        LD	D,A
        DI	
        OUT	(0D4H),A		; select diskdrive, side, motor on
        LD	A,(IX+0)
        AND	A                       ; motor off timer = finished ?
        LD	(IX+0),0FFH
        EI	
        JR	NZ,J$7718               ; nope, skip motor spin up delay
        PUSH	HL                      ; store physical drive, cylinder
        LD	HL,0
J$7712:	DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J$7712
        POP	HL                      ; restore physical drive, cylinder
J$7718:	LD	C,L
        LD	A,(IX+3)
        CP	H                       ; same physical drive as last operation ?
        JR	Z,J$773A                ; yep, skip cylinder register update
        XOR	01H
        LD	(IX+3),A                ; update physical drive
        IN	A,(0D1H)
        JR	Z,J$7730                ; last drive was drive 1,
        LD	(IX+4),A                ; store cylinder register drive 0
        LD	A,(IX+5)
        JR	J$7736                  ; update cylinder register with cylinder register druve 1

J$7730:	LD	(IX+5),A                ; store cylinder register drive 1
        LD	A,(IX+4)
J$7736:	OUT	(0D1H),A                ; update cylinder register
        EX	(SP),HL
        EX	(SP),HL
J$773A:	IN	A,(0D1H)
        CP	C                       ; same cylinder as requested ?
        CALL	NZ,C$7787               ; nope, seek to cylinder
        POP	HL
        RET	

;	  Subroutine prepare for next sector
;	     Inputs  ________________________
;	     Outputs ________________________

C.7742:	CALL	C.77AA			; wait for FDC ready
        INC	H
        INC	H
        IN	A,(0D2H)
        INC	A
        OUT	(0D2H),A
        BIT	7,D
        JR	NZ,J$7753
        CP	9+1
        RET	C
J$7753:	CP	8+1
        RET	C
        LD	A,0
        BIT	7,(IX+7)                ; 10 sector/track flag ?
        JR	NZ,J$7760               ; yep, record = 0
        LD	A,1                     ; record = 1
J$7760:	OUT	(0D2H),A
        BIT	6,D                     ; double sided media ?
        JR	Z,J.7770                ; nope, next cylinder, side 0
        BIT	4,D			; side 1 ?
        JR	NZ,J.7770		; yep, next cylinder, side 1
        SET	4,D			; side 1
        LD	A,D
        OUT	(0D4H),A		; select diskdrive, side, motor on
        RET	

J.7770:	RES	4,D                     ; side 0
        LD	A,D
        OUT	(0D4H),A		; select diskdrive, side, motor on
        INC	C                       ; update cylinder
        CALL	C.77AA			; wait for FDC ready
        LD	A,51H
        OUT	(0D0H),A                ; seek to next cylinder
        EX	(SP),HL
        EX	(SP),HL
        JR	J$7797

;	  Subroutine reseek
;	     Inputs  ________________________
;	     Outputs ________________________

C.7781:	BIT	0,E
        RET	NZ

;	  Subroutine wait for FDC and seek to cylinder
;	     Inputs  ________________________
;	     Outputs ________________________

J$7784:	CALL	C$778E                  ; wait for FDC ready, seek to cylinder 0

;	  Subroutine seek to cylinder
;	     Inputs  ________________________
;	     Outputs ________________________

C$7787:	LD	A,C
        OUT	(0D3H),A
        LD	A,11H                   ; seek to cylinder
        JR	J$7793

;	  Subroutine wait for FDC ready, seek to cylinder 0
;	     Inputs  ________________________
;	     Outputs ________________________

C$778E:	CALL	C.77AA			; wait for FDC ready
        LD	A,01H                   ; seek to cylinder 0

J$7793:	OUT	(0D0H),A
        EX	(SP),HL
        EX	(SP),HL
J$7797:	CALL	C.77AA			; wait for FDC ready
        BIT	0,(IX+8)                ; read sectors flag ?
        RET	Z                       ; yep, quit
        PUSH	BC
        LD	BC,0DFCH
J$77A3:	DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$77A3
        POP	BC                      ; wait head settle time
        RET	

;	  Subroutine wait for FDC ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.77AA:	IN	A,(0D0H)
        RRA	
        JR	C,C.77AA
        RET	

;	  Subroutine INIHRD
;	     Inputs  ________________________
;	     Outputs ________________________

C.77B0:	LD	A,0D0H
        OUT	(0D0H),A
        EX	(SP),HL
        EX	(SP),HL
        LD	A,2			; first diskdrive 1, then diskdrive 0
J$77B8:	PUSH	AF
        CALL	C.77C4			; initialize diskdrive
        POP	AF
        DEC	A
        JR	NZ,J$77B8

;	  Subroutine MTOFF
;	     Inputs  ________________________
;	     Outputs ________________________

J$77C0:	XOR	A
        OUT	(0D4H),A		; unselect diskdrive, side 0, motor off
        RET	

;	  Subroutine initialize diskdrive
;	     Inputs  ________________________
;	     Outputs ________________________

C.77C4:	OUT	(0D4H),A		; select diskdrive, side 0, motor off
        CALL	C.77AA			; wait for FDC ready
        LD	A,1
        OUT	(0D0H),A		; execute FDC RESTORE cmd
        EX	(SP),HL
        EX	(SP),HL
        LD	HL,0
J$77D2:	IN	A,(0D0H)
        CPL	
        RRA				; FDC ready ?
        RET	C			; yep, quit
        DEC	HL
        LD	A,L
        OR	H
        JR	NZ,J$77D2
        RET	

;	  Subroutine DRIVES
;	     Inputs  ________________________
;	     Outputs ________________________

J$77DD:	PUSH	BC
        PUSH	AF
        CALL	GETWRK
        LD	A,2			; diskdrive 1
        CALL	C.77C4			; initialize diskdrive
        LD	L,2
        JR	C,J$77ED		; diskdrive 1 found, logical drives = 2
        LD	L,1			; diskdrive 1 not found, assume diskdrive 0 is there, logical drives = 1
J$77ED:	LD	(IX+9),L                ; number of physical drives
        XOR	A
        OUT	(0D4H),A		; unselect diskdrive, side 0, motor off
        POP	AF
        JR	Z,J$77F8
        LD	L,2
J$77F8:	POP	BC
        RET	

;	  Subroutine INIENV
;	     Inputs  ________________________
;	     Outputs ________________________

J$77FA:	LD	A,1
        LD	(RAWFLG),A		; verify after write on
        CALL	GETWRK
        XOR	A
        LD	B,MYSIZE-1
J$7805:	LD	(HL),A
        INC	HL
        DJNZ	J$7805
        LD	HL,I$780F
        JP	SETINT

I$780F:	PUSH	AF
        CALL	GETWRK
        LD	A,(HL)			; diskdrive motor timer
        AND	A			; already finished ?
        JR	Z,J.7821		; yep, skip motor off
        CP	0FFH			; timer disabled ?
        JR	Z,J.7821		; yep, skip motor off
        DEC	A
        LD	(HL),A			; decrease timer
        JR	NZ,J.7821		; timer not finished, skip motor off
        OUT	(0D4H),A		; unselect diskdrive, side 0, motor off
J.7821:	INC	HL
        LD	A,(HL)			; disk change timer logical disk 0
        AND	A			; already finished ?
        JR	Z,J$7827		; yep,
        DEC	(HL)
J$7827:	INC	HL
        LD	A,(HL)			; disk change timer logical disk 1
        AND	A			; already finished ?
        JR	Z,J$782D		; yep,
        DEC	(HL)
J$782D:	POP	AF
        JP	PRVINT			; rest of H.TIMI chain

;	  Subroutine DSKCHG
;	     Inputs  ________________________
;	     Outputs ________________________

J$7831:	EI	
        PUSH	HL
        PUSH	BC
        PUSH	AF
        CALL	GETWRK
        POP	AF
        POP	BC
        POP	HL
        AND	A			; logical drive 
        LD	B,(IX+2)
        JR	NZ,J$7844		; logical drive 1,use disk change timer logical disk 1
        LD	B,(IX+1)		; logical drive 0 use disk change timer logical disk 0
J$7844:	INC	B
        DEC	B			; timer finished ?
        LD	B,1
        RET	NZ			; nope, quit with disk unchanged
        PUSH	BC
        PUSH	HL
        LD	DE,1			; first FAT sector
        LD	HL,($SECBUF)
        AND	A			; read operation
        CALL	C.74BF			; DSKIO
        JR	C,J.786E		; error, quit with error
        LD	HL,($SECBUF)
        LD	B,(HL)			; mediabyte (first byte of first FAT sector)
        POP	HL
        PUSH	BC
        CALL	C.7871			; GETDPB
        LD	A,0CH
        JR	C,J.786E		; error, quit with OTHER error
        POP	AF
        POP	BC
        CP	C			; same mediabyte ?
        SCF	
        CCF	
        LD	B,0FFH
        RET	NZ			; nope, quit with disk changed
        INC	B
        RET				; quit with disk change unknown

J.786E:	POP	DE
        POP	DE
        RET	

;	  Subroutine GETDPB
;	     Inputs  ________________________
;	     Outputs ________________________

C.7871:	EI	
        EX	DE,HL
        INC	DE
        LD	A,B
        SUB	0F8H
        RET	C
        LD	L,A
        LD	H,00H
        ADD	HL,HL
        LD	C,L
        LD	B,H
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,HL
        ADD	HL,BC
        LD	BC,I$7405
        ADD	HL,BC
        LD	BC,18
        LDIR	
        RET	

;	  Subroutine CHOICE
;	     Inputs  ________________________
;	     Outputs ________________________

J$788C:	LD	HL,I$7890
        RET	

I$7890:	DEFB	13,10
        DEFB	"Escolha uma das alternativas:",13,10
        DEFB	"1 - 40 trilhas simples face",13,10
        DEFB	"2 - 40 trilhas dupla face",13,10
        DEFB	"3 - 80 trilhas simples face",13,10
        DEFB	"4 - 80 trilhas dupla face",13,10
        DEFB	0

;	  Subroutine OEMSTA
;	     Inputs  ________________________
;	     Outputs ________________________

J$7922:	PUSH	HL
        PUSH	BC
        LD	DE,I$7959
        LD	HL,PROCNM
J$792A:	LD	A,(DE)
        OR	A
        JR	Z,J.7935
        CP	(HL)
J$792F:	JR	NZ,J.7955
        INC	HL
        INC	DE
        JR	J$792A
J$7934	EQU	$-1

J.7935:	LD	A,(HL)
J$7936:	AND	A
        JR	Z,J.7955
        CP	" "
        INC	HL
        JR	Z,J.7935
        LD	C,(HL)
        DEC	HL
        LD	B,(HL)
        LD	HL,'O'*256+'N'
        XOR	A
        SBC	HL,BC
        LD	E,1
        JR	Z,J.7956
        LD	HL,'O'*256+'F'
        XOR	A
        SBC	HL,BC
        LD	E,0
        JR	Z,J.7956
J.7955:	SCF	
J.7956:	POP	BC
        POP	HL
        RET	

I$7959:	DEFB	"VERIFY"
        DEFB	0

;	  Subroutine DSKFMT
;	     Inputs  ________________________
;	     Outputs ________________________

J$7960:	PUSH	HL
        POP	IY
        DEC	A
        LD	E,A
        LD	A,3
J$7967:	CP	E
        LD	A,12
        RET	C
        LD	A,B
J$796C:	CP	HIGH 1800H
        LD	A,14
        RET	C
        LD	A,D
        AND	01H
        LD	(IY+9),A                ; store drive
        PUSH	HL
        LD	BC,32
        ADD	HL,BC
        LD	(IY+5),L
        LD	(IY+6),H                ; pointer to format data buffer
J$7982:	LD	D,0
        LD	B,5
        LD	HL,I$7BA2
J$7989:	ADD	HL,DE
        DJNZ	J$7989
        POP	DE
        LD	BC,5
        LDIR	
        CALL	C.77B0			; INIHRD
        XOR	A
        LD	(IX+4),A
        LD	(IX+5),A
        LD	A,(IY+9)                ; drive
        LD	DE,0                    ; sector 0
        LD	BC,000FFH               ; media descriptor
        CALL	C.766B                  ; prepare for disk i/o (seek to track 0)
        RET	C                       ; error, quit with error
        CALL	DISINT                  ; broadcast interrupts disabled
        DI	
        LD	E,2                     ; IP
        CALL	C.7B88                  ; wait for IP level
        RET	C                       ; time out, quit with not ready error
        LD	E,0                     ; no IP
        CALL	C.7B88                  ; wait for IP level
        RET	C                       ; time out, quit with not ready error
        LD	C,(IY+2)                ; media descriptor
        LD	B,9
        LD	DE,0                    ; sector 0

J.79C1:	PUSH	DE
        PUSH	BC
        LD	A,(IY+9)                ; drive
        CALL	C.766B                  ; prepare for disk i/o
        LD	A,6
        JR	C,J$79DB                ; error, seek error
        LD	(IY+7),D                ; store
        LD	L,(IY+5)
        LD	H,(IY+6)                ; pointer to format data buffer
        PUSH	HL
        CALL	C$7AAC                  ; format track
        POP	HL
J$79DB:	POP	BC
        POP	DE
        JR	NC,J$79E7               ; no error, continue
        PUSH	AF
        LD	A,(IY+9)
        LD	D,A                     ; drive
        JP	J.74C6                  ; DSKIO finish

J$79E7:	PUSH	DE
        PUSH	BC
        LD	A,D
        OR	E
        JR	Z,J.79F8
        PUSH	HL
        LD	HL,27
        SBC	HL,DE
        POP	HL
        JR	C,J.79F8
        DEC	DE
        INC	B
J.79F8:	XOR	A                       ; read
        LD	A,(IY+9)                ; drive
        CALL	C.74BF			; DSKIO
        LD	A,4
        POP	BC
        POP	DE
        RET	C                       ; error, quit with data (CRC) error
        PUSH	HL
        LD	HL,013BH
        BIT	0,C
        JR	Z,J$7A0D
        ADD	HL,HL
J$7A0D:	AND	A
        SBC	HL,DE
        POP	HL
        JR	NC,J$7A34
        PUSH	DE
        PUSH	BC
        PUSH	HL
        LD	B,1
        LD	HL,7
        BIT	0,C
        JR	Z,J$7A22
        LD	HL,16
J$7A22:	AND	A
        EX	DE,HL
        SBC	HL,DE
        EX	DE,HL
        POP	HL
        XOR	A                       ; read
        LD	A,(IY+9)                ; drive
        CALL	C.74BF			; DSKIO
        LD	A,4
        POP	BC
        POP	DE
        RET	C
J$7A34:	LD	H,0
        LD	L,B
        ADD	HL,DE
        EX	DE,HL
        LD	A,(IY+4)
        SUB	D
        JR	NZ,J.79C1
        LD	A,(IY+3)
        SUB	E
        JP	NZ,J.79C1
        LD	L,(IY+5)
        LD	H,(IY+6)                ; pointer to format data buffer
        PUSH	HL
        LD	BC,12*512
J$7A50:	LD	(HL),0
        INC	HL
        DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$7A50
        LD	L,(IY+0)
        LD	H,(IY+1)
        POP	DE
        PUSH	DE
        LD	BC,001EH
        LDIR	
        LD	HL,I$7C45
        LD	BC,S7C45
        LDIR	
        POP	HL
        PUSH	HL
        LD	A,(IY+2)                ; media descriptor
        INC	H
        INC	H
        LD	(HL),A
        INC	HL
        DEC	(HL)
        INC	HL
        DEC	(HL)
        INC	H
        INC	H
        INC	H
        INC	H
        CP	0F9H
        JR	NZ,J$7A83
        INC	H
        INC	H
J$7A83:	DEC	(HL)
        DEC	HL
        DEC	(HL)
        DEC	HL
        LD	(HL),A
        POP	HL
        PUSH	HL
        LD	B,0CH	; 12 
        LD	C,A
        LD	A,(IY+9)
        LD	DE,0
        SCF	
        CALL	C.74BF			; DSKIO
        POP	HL
        RET	C
        LD	BC,7*512
        ADD	HL,BC
        LD	B,02H	; 2 
        LD	C,(IY+2)                ; media descriptor
        LD	DE,12
        LD	A,(IY+9)
        SCF	
        JP	C.74BF			; DSKIO

;	  Subroutine format track
;	     Inputs  ________________________
;	     Outputs ________________________

C$7AAC:	LD	D,01H	; 1 
        LD	A,4EH	; "N"
        LD	B,50H	; "P"
        CALL	C.7B9D
        CALL	C.7B9A
        LD	A,0F6H
        LD	B,03H	; 3 
        CALL	C.7B9D
        LD	(HL),0FCH
        INC	HL
        LD	A,4EH	; "N"
        LD	B,32H	; "2"
        CALL	C.7B9D
J$7AC9:	CALL	C.7B9A
        LD	A,0F5H
        LD	B,03H	; 3 
        CALL	C.7B9D
        LD	(HL),0FEH
        INC	HL
        CALL	C.77AA			; wait for FDC ready
        IN	A,(0D1H)
        LD	(HL),A
        INC	HL
        LD	A,(IY+7)
        AND	10H	; 16 
        RRCA	
        RRCA	
        RRCA	
        RRCA	
        LD	(HL),A
        INC	HL
        LD	(HL),D
        INC	HL
        LD	(HL),02H	; 2 
        INC	HL
        LD	(HL),0F7H
        INC	HL
        LD	A,4EH	; "N"
        LD	B,16H
        CALL	C.7B9D
        CALL	C.7B9A
        LD	A,0F5H
        LD	B,03H	; 3 
        CALL	C.7B9D
        LD	(HL),0FBH
        INC	HL
        LD	BC,512
J$7B07:	LD	(HL),40H	; "@"
        INC	HL
        DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$7B07
        LD	(HL),0F7H
        INC	HL
        LD	B,54H	; "T"
        LD	A,4EH	; "N"
        CALL	C.7B9D
        INC	D
        LD	A,09H	; 9 
        CP	D
        JR	NC,J$7AC9
        LD	(HL),0FFH
        LD	(IY+8),05H	; 5 
J$7B25:	CALL	C.77AA			; wait for FDC ready
        LD	HL,I$7B62
        PUSH	HL
        LD	L,(IY+5)
        LD	H,(IY+6)
        CALL	DISINT
        DI	
        LD	C,0D3H
        LD	E,03H	; 3 
        LD	D,4EH	; "N"
        LD	A,0F4H
        OUT	(0D0H),A
        EX	(SP),IY
        EX	(SP),IY
J$7B44:	LD	A,(HL)
        INC	A
        JP	Z,J.7B55
J$7B49:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JR	NC,J$7B49
        OUTI	
        JP	J$7B44

J.7B55:	IN	A,(0D0H)
        RRCA	
        RET	NC
        RRCA	
        JR	NC,J.7B55
        LD	A,D
        OUT	(0D3H),A
        JP	J.7B55

I$7B62:	IN	A,(0D0H)
        AND	7CH	; "|"
        PUSH	AF
        JR	NZ,J$7B6D
        EI	
        CALL	ENAINT
J$7B6D:	POP	AF
        RET	Z
        LD	B,A
        BIT	6,B
        LD	A,00H
        JR	NZ,J$7B78
        LD	A,10H	; 16 
J$7B78:	DEC	(IY+8)
        JR	NZ,J$7B25
J$7B7D:	PUSH	AF
        EI	
        CALL	ENAINT
        XOR	A
        OUT	(0D4H),A		; unselect diskdrive, side 0, motor off
        POP	AF
        SCF	
        RET	

;	  Subroutine wait for IP level
;	     Inputs  E = level
;	     Outputs ________________________

C.7B88:	LD	BC,0FFFFH
J$7B8B:	IN	A,(0D0H)
        AND	02H
        CP	E
        RET	Z
        DEC	BC
        LD	A,B
        OR	C
        JR	NZ,J$7B8B
        LD	A,2
        JR	J$7B7D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B9A:	XOR	A
        LD	B,12

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B9D:	LD	(HL),A
        INC	HL
        DJNZ	C.7B9D
        RET	

I$7BA2: DEFW    I$7BB6
        DEFB    0FCH
        DEFW    360

        DEFW    I$7BD4
        DEFB    0FDH
        DEFW    720

        DEFW    I$7BF2
        DEFB    0F8H
        DEFW    720

        DEFW    I$7C10
        DEFB    0F9H
        DEFW    1440

I$7BB6: DEFB	0EBH,0FEH
        DEFB    090H
        DEFB	"MSX-01  "
        DEFW	512
        DEFB	1
        DEFW	1
        DEFB	2
        DEFW	64
        DEFW	0168H
        DEFB	0FCH
        DEFW	2
        DEFW	9
        DEFW	1
        DEFW	0

I$7BD4: DEFB	0EBH,0FEH
        DEFB    090H
        DEFB	"MSX-02  "
        DEFW	512
        DEFB	2
        DEFW	1
        DEFB	2
        DEFW	112
        DEFW	02D0H
        DEFB	0FDH
        DEFW	2
        DEFW	9
        DEFW	2
        DEFW	0

I$7BF2: DEFB	0EBH,0FEH
        DEFB    090H
        DEFB	"MSX-03  "
        DEFW	512
        DEFB	2
        DEFW	1
        DEFB	2
        DEFW	112
        DEFW	02D0H
        DEFB	0F8H
        DEFW	2
        DEFW	9
        DEFW	1
        DEFW	0

I$7C10: DEFB	0EBH,0FEH
        DEFB    090H
        DEFB	"MSX-04  "
        DEFW	512
        DEFB	2
        DEFW	1
        DEFB	2
        DEFW	112
        DEFW	05A0H
        DEFB	0F9H
        DEFW	3
        DEFW	9
        DEFW	2
        DEFW	0

J$7C2E:	PUSH	HL
        PUSH	DE
        LD	E,D
        LD	D,0
        LD	HL,I7C3C-1
        ADD	HL,DE
        LD	A,(HL)
        POP	DE
        POP	HL
        LD	(HL),A
        RET	

I7C3C:	DEFB	001H,004H,007H,002H,005H,008H,003H,006H,009H

I$7C45:
        .PHASE  0C01EH

	RET	NC
        LD	(J$C06A+1),DE
        LD	(D.C0F3),A              ; store boot flag
        LD	(HL),LOW I$C068
        INC	HL
        LD	(HL),HIGH I$C068
J$7C52:	LD	SP,KBUF+256
        LD	DE,I$C0CD
        PUSH	DE                      ; store SOLXDOS.SIS FCB
        LD	C,0FH
        CALL	BDOS                    ; open SOLXDOS.SIS
        OR	A                       ; success ?
        JP	Z,J$C04B                ; yep, load and start SOLXDOS.SIS
        POP	DE                      ; discard SOLXDOS.SIS FCB
        LD	DE,I.C0A7
        LD	C,0FH
        CALL	BDOS                    ; open MSXDOS.SYS
        INC	A                       ; error ?
        JR	Z,J$7C9C                ; yep,
        LD	DE,I.C0A7
        PUSH	DE                      ; store MSXDOS.SYS FCB
J$C04B: LD	DE,0100H
        LD	C,1AH
        CALL	BDOS                    ; set DMA address
        LD	HL,1
        LD	(I.C0A7+14),HL
        LD	(I$C0CD+14),HL          ; record size = 1
        POP	DE                      ; restore FCB
        LD	HL,04000H-0100H
        LD	C,27H
        CALL	BDOS                    ; load file, limited to page 0
        JP	0100H                   ; start

I$C068: DEFW    J$C06A                  ; pointer to error handler, fixed: orginal had C058H

J$C06A: CALL	0                       ; enable kernel ROM on page 1
        LD	A,C
        AND	0FEH
        CP	02H
        JP	NZ,J$C06A
J$7C9C:	LD	A,(D.C0F3)
        AND	A                       ; boot flag = cold boot ?
        JP	Z,A4022                 ; yep, start DiskBASIC
        LD	DE,I.C08B
        LD	C,09H
        CALL	BDOS                    ; print error message
        LD	C,07H
        CALL	BDOS                    ; wait for key
        JR	J$7C52                  ; try again

I.C08B:	DEFB	"Erro na carga",13,10
        DEFB	"Tecle algo",13,10
        DEFB	"$"

I.C0A7: DEFB	0
        DEFB	"MSXDOS  SYS"
        DEFW 	0
        DEFW	0
        DEFB	0,0,0,0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFB	0,0,0,0,0

        DEFB    0

I$C0CD: DEFB	0
        DEFB	"SOLXDOS SIS"
        DEFW 	0
        DEFW	0
        DEFB	0,0,0,0
        DEFW	0
        DEFW	0
        DEFB	0
        DEFB	0
        DEFW	0
        DEFW	0
        DEFW	0
        DEFB	0,0,0,0,0

        DEFB    0

D.C0F3: DEFB	0

        .DEPHASE

S7C45   EQU     $-I$7C45


        DEFS	08000H-$,0FFH

        END
