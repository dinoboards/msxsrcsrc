; FASTROM.MAC

; FAST DiskROM DOS 1.0a kernel, DOS1 compatible

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII,A&L and may be others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


MYSIZE	EQU	18

                                ; +0    disk motor timer
                                ; +1    disk change timer drive 0
                                ; +2    disk change timer drive 1
                                ; +3    disk change timer drive 2
                                ; +4    disk change timer drive 3
                                ; +5    drive id of last operation (phantom)
                                ; +6    FAT buffer used by drive id
                                ; +7    always 0, function unknown
                                ; +8,2  pointer to FAT buffer
                                ; +10   hours
                                ; +11   minutes
                                ; +12   seconds
                                ; +13   interrupt frequency (b7), interrupt counter (b6-b0)
                                ; +14	disk drive 0 connected
                                ; +15	disk drive 1 connected
                                ; +16	disk drive 2 connected
                                ; +17	disk drive 3 connected

SECLEN	EQU	512

D.5C93	EQU	5C93H	        ; xxxx xxxx 1001 00xx DDX motor off
D.6205	EQU	6205H	        ; xxxx xxxx 0000 01xx DDX enable I/O ports
D.7114	EQU	7114H	        ; xxxx xxxx 0001 01xx DDX disable I/O ports
D.711C	EQU	711CH	        ; xxxx xxxx 0001 11xx DDX disable I/O ports
I.8348	EQU	8348H           ; xxxx xxxx 0100 10xx DDXunused

WBOOT	EQU	0000H	; JC-LI
RDSLT	EQU	000CH	; -C--I
WRSLT	EQU	0014H	; -C---
OUTDO	EQU	0018H
CALSLT	EQU	001CH	; JC--I
DCOMPR	EQU	0020H
ENASLT	EQU	0024H	; JC--I
IDBYT0	EQU	002BH	; ---L-
IDBYT2	EQU	002DH	; ---L-
CALLF	EQU	0030H	; -C---
CHAR_16	EQU	0034H	; ----I
KEYINT	EQU	0038H	; -CS-I
LDIRMV 	EQU	0059H	; -C---
LDIRVM	EQU	005CH	; -C---
DBUF	EQU	0080H	; ----I
CHSNS   equ     0009CH
CHGET   equ     0009FH
CHPUT   equ     000A2H
LPTOUT  equ     000A5H
BREAKX  equ     000B7H
CKCNTC	EQU	00BDH	; -C---
CLS	EQU	00C3H	; J----
ERAFNK	EQU	00CCH	; -C---
TOTEXT	EQU	00D2H	; -C---
J.0100	EQU	0100H	; J---I
SNSMAT	EQU	0141H	; -C---
KILBUF	EQU	00156H	; ----I
CALBAS	EQU	0159H	; JC---


C$268C	EQU	268CH	; -C---
DECADD	EQU	269AH
C$289F	EQU	289FH	; -C---
C.2EF3	EQU	2EF3H	; -C---
J$2F08	EQU	2F08H	; J----
C$2F10	EQU	2F10H	; -C---
C.2F99	EQU	2F99H	; JC---
J$3042	EQU	3042H	; J----
C$30D1	EQU	30D1H	; -C---
C.325C	EQU	325CH	; -C---
I$3FD6	EQU	3FD6H
I$409B	EQU	409BH
I$4253	EQU	4253H
I$4601	EQU	4601H
I.46FF	EQU	46FFH
I$4756	EQU	4756H
I$517A	EQU	517AH
I.521C	EQU	521CH
I$542F	EQU	542FH
I.5432	EQU	5432H
I$5EA4	EQU	5EA4H
I.6627	EQU	6627H
I.6AFA	EQU	6AFAH
I$6F0B	EQU	6F0BH
I$7323	EQU	7323H
I$7328	EQU	7328H
I$7D17	EQU	7D17H
I$7E14	EQU	7E14H

I$8000	EQU	8000H	; ----I
I$C000	EQU	0C000H	; ----I
I.C200	EQU	0C200H	; ----I

I.F22B	EQU	0F22BH	; ----I
D.F237	EQU	0F237H	; --SLI
D.F238	EQU	0F238H	; --SL-
D.F239	EQU	0F239H	; --SL-
D.F23B	EQU	0F23BH	; --SL-
D.F23C	EQU	0F23CH	; --SL-
D.F23D	EQU	0F23DH	; --SL-
D.F23F	EQU	0F23FH	; --SL-
D.F241	EQU	0F241H	; --SL-
D.F242	EQU	0F242H	; --SLI
D.F243	EQU	0F243H	; --SL-
D.F245	EQU	0F245H	; ---L-
D.F246	EQU	0F246H	; --SL-
D.F247	EQU	0F247H	; --SLI
D.F248	EQU	0F248H	; --SL-
D.F249	EQU	0F249H	; --SL-
D.F24A	EQU	0F24AH	; --SL-
D.F24C	EQU	0F24CH	; --S--
D$F24D	EQU	0F24DH	; --S--
D.F24E	EQU	0F24EH	; --SL-
C.F24F	EQU	0F24FH	; -C--I
X.F252	EQU	0F252H	; -C-L-
C$F255	EQU	0F255H	; -C---
C$F258	EQU	0F258H	; -C---
C$F25B	EQU	0F25BH	; -C---
C$F25E	EQU	0F25EH	; -C---
C$F261	EQU	0F261H	; -C---
C$F264	EQU	0F264H	; -C---
C$F267	EQU	0F267H	; -C---
C$F26A	EQU	0F26AH	; -C---
C$F26D	EQU	0F26DH	; -C---
C$F270	EQU	0F270H	; -C---
C$F273	EQU	0F273H	; -C---
C$F276	EQU	0F276H	; -C---
C$F279	EQU	0F279H	; -C---
C$F27C	EQU	0F27CH	; -C---
C$F27F	EQU	0F27FH	; -C---
C$F282	EQU	0F282H	; -C---
C$F285	EQU	0F285H	; -C---
C$F288	EQU	0F288H	; -C---
C$F28B	EQU	0F28BH	; -C---
C$F28E	EQU	0F28EH	; -C---
C$F291	EQU	0F291H	; -C---
C$F294	EQU	0F294H	; -C---
C$F297	EQU	0F297H	; -C---
C$F29A	EQU	0F29AH	; -C---
C$F29D	EQU	0F29DH	; -C---
C$F2A0	EQU	0F2A0H	; -C---
C$F2A3	EQU	0F2A3H	; -C---
C$F2A6	EQU	0F2A6H	; -C---
C$F2A9	EQU	0F2A9H	; -C---
C$F2AC	EQU	0F2ACH	; -C---
C$F2AF	EQU	0F2AFH	; -C---
C$F2B2	EQU	0F2B2H	; -C---
C$F2B5	EQU	0F2B5H	; -C---
D.F2B8	EQU	0F2B8H	; --SL-
I.F2B9	EQU	0F2B9H	; ----I
D.F2C4	EQU	0F2C4H	; --SL-
I.F2C5	EQU	0F2C5H	; ----I
I.F2D0	EQU	0F2D0H	; ----I
D.F2DC	EQU	0F2DCH	; --SL-
D.F2DD	EQU	0F2DDH	; --SL-
D.F2DE	EQU	0F2DEH	; --SL-
D.F2DF	EQU	0F2DFH	; --SL-
D.F2E0	EQU	0F2E0H	; --SL-
D.F2E1	EQU	0F2E1H	; --SL-
D.F2E2	EQU	0F2E2H	; --SL-
D.F2E4	EQU	0F2E4H	; --SL-
D.F2E6	EQU	0F2E6H	; --SL-
D$F2E7	EQU	0F2E7H	; --S--
D.F2E8	EQU	0F2E8H	; --SL-
D.F2EA	EQU	0F2EAH	; --SL-
D.F2EC	EQU	0F2ECH	; --SL-
D.F2EE	EQU	0F2EEH	; --SL-
D.F2F0	EQU	0F2F0H	; ---L-
D.F2F2	EQU	0F2F2H	; --S--
D.F2F4	EQU	0F2F4H	; --SLI
D.F2F6	EQU	0F2F6H	; --SL-
D.F2F8	EQU	0F2F8H	; --SL-
D.F2FA	EQU	0F2FAH	; --SL-
D.F2FC	EQU	0F2FCH	; --SL-
D.F2FE	EQU	0F2FEH	; --SL-
D.F2FF	EQU	0F2FFH	; --SL-
D.F300	EQU	0F300H	; --SL-
D.F302	EQU	0F302H	; ---L-
D.F306	EQU	0F306H	; --SL-
D.F307	EQU	0F307H	; --SL-
D.F309	EQU	0F309H	; --SL-
D.F30B	EQU	0F30BH	; --SL-
D.F30C	EQU	0F30CH	; --SL-
D.F30D	EQU	0F30DH	; --SL-
D.F30E	EQU	0F30EH	; --SL-
I.F30F	EQU	0F30FH	; ----I
D.F313	EQU	0F313H	; --SL-
D.F323	EQU	0F323H	; --SLI
D.F325	EQU	0F325H	; --SL-
I.F327	EQU	0F327H	; ----I
H.F331	EQU	0F331H	; ----I
D.F336	EQU	0F336H	; --SLI
D.F337	EQU	0F337H	; --SL-
D.F338	EQU	0F338H	; --SL-
D.F339	EQU	0F339H	; --SL-
D.F33B	EQU	0F33BH	; --SL-
D.F33D	EQU	0F33DH	; --SL-
D.F33E	EQU	0F33EH	; ---LI
D.F33F	EQU	0F33FH	; --SLI
D.F340	EQU	0F340H	; ---LI
D.F341	EQU	0F341H	; --SLI
D.F342	EQU	0F342H	; --SL-
D.F343	EQU	0F343H	; --SL-
D$F344	EQU	0F344H	; --S--
D.F345	EQU	0F345H	; --SLI
D.F346	EQU	0F346H	; --SL-
D.F347	EQU	0F347H	; --SLI
D.F348	EQU	0F348H	; --SLI
D.F349	EQU	0F349H	; --SL-
D.F34B	EQU	0F34BH	; --SL-
D.F34D	EQU	0F34DH	; --SL-
D.F34F	EQU	0F34FH	; --SL-
D.F351	EQU	0F351H	; --SL-
D.F353	EQU	0F353H	; --SL-
I.F355	EQU	0F355H	; ----I
C.F365	EQU	0F365H	; -CS--
D$F366	EQU	0F366H	; --S--
X.F368	EQU	0F368H	; -CS-I
D$F369	EQU	0F369H	; --S--
X.F36B	EQU	0F36BH	; -CS--
D$F36C	EQU	0F36CH	; --S--
D$F36E	EQU	0F36EH	; --S--
D$F36F	EQU	0F36FH	; --S--
J$F371	EQU	0F371H	; J----
D$F372	EQU	0F372H	; --S--
J$F374	EQU	0F374H	; J----
D$F375	EQU	0F375H	; --S--
I$F377	EQU	0F377H	; ----I
D$F378	EQU	0F378H	; --S--
I$F37A	EQU	0F37AH	; ----I
D$F37B	EQU	0F37BH	; --S--
C.F37D	EQU	0F37DH	; JC---
D$F37E	EQU	0F37EH	; --S--
I.F380	EQU	0F380H	; -C---
J$F385	EQU	0F385H	; J----
I.F38B	EQU	0F38BH	; ----I
J$F38C	EQU	0F38CH	; J----
C$F398	EQU	0F398H	; -C---
D$F3B0	EQU	0F3B0H	; ---L-
D$F3DE	EQU	0F3DEH	; --S--
D$F415	EQU	0F415H	; ---L-
D$F416	EQU	0F416H	; ---L-
D$F41C	EQU	0F41CH	; --S--
I.F459	EQU	0F459H	; ----I
D.F4D9	EQU	0F4D9H	; --SLI
I$F4DB	EQU	0F4DBH	; ----I
I$F51F	EQU	0F51FH	; ----I
D$F55B	EQU	0F55BH	; --S--
I$F567	EQU	0F567H	; ----I
X.F568	EQU	0F568H	; -CSLI
I.F569	EQU	0F569H	; ----I
D.F56A	EQU	0F56AH	; --SL-
D$F56B	EQU	0F56BH	; --S--
I$F56C	EQU	0F56CH	; ----I
D.F574	EQU	0F574H	; --S--
D$F578	EQU	0F578H	; --S--
I.F579	EQU	0F579H	; ----I
D.F58D	EQU	0F58DH	; --S-I
I.F58E	EQU	0F58EH	; ----I
I$F59E	EQU	0F59EH	; ----I
I.F5B2	EQU	0F5B2H	; ----I
I$F5B3	EQU	0F5B3H	; ----I
D$F5BE	EQU	0F5BEH	; --S--
D.F5C0	EQU	0F5C0H	; --S--
D.F5C2	EQU	0F5C2H	; --S-I
I$F5C4	EQU	0F5C4H	; ----I
D$F5C6	EQU	0F5C6H	; ---L-
D$F5C8	EQU	0F5C8H	; ---L-
D$F5D3	EQU	0F5D3H	; --S--
D$F5D5	EQU	0F5D5H	; --S--
I.F5D7	EQU	0F5D7H	; ----I
D$F5E5	EQU	0F5E5H	; --S--
D$F5EB	EQU	0F5EBH	; --S--
D$F5ED	EQU	0F5EDH	; --S--
D$F5F8	EQU	0F5F8H	; --S--
D$F5FA	EQU	0F5FAH	; --S--
I.F5FC	EQU	0F5FCH	; ----I
I$F604	EQU	0F604H	; ----I
D$F661	EQU	0F661H	; ---L-
D.F663	EQU	0F663H	; --S--
D.F672	EQU	0F672H	; --SL-
D.F674	EQU	0F674H	; --SL-
D.F676	EQU	0F676H	; --SL-
D.F678	EQU	0F678H	; --SL-
I.F698	EQU	0F698H	; ----I
D$F699	EQU	0F699H	; ---L-
D.F69B	EQU	0F69BH	; ---LI
D.F6AB	EQU	0F6ABH	; ---L-
D$F6B1	EQU	0F6B1H	; --S--
D.F6C2	EQU	0F6C2H	; --SL-
D.F6C6	EQU	0F6C6H	; --S--
I.F7F6	EQU	0F7F6H	; ----I
D.F7F8	EQU	0F7F8H	; --S--
I$F844	EQU	0F844H	; ----I
I.F847	EQU	0F847H	; ----I
D.F85F	EQU	0F85FH	; --SL-
D.F860	EQU	0F860H	; --SL-
D.F862	EQU	0F862H	; --SL-
D.F864	EQU	0F864H	; --SL-
D.F866	EQU	0F866H	; ---LI
D.F87C	EQU	0F87CH	; --S--
D.F87D	EQU	0F87DH	; --SL-
HOKVLD	EQU	0FB20H	; ----I
I.FB21	EQU	0FB21H	; ----I
I.FB29	EQU	0FB29H	; ----I
D$FB6B	EQU	0FB6BH	; ---L-
D.FC48	EQU	0FC48H	; --SL-
D.FC4A	EQU	0FC4AH	; --SL-
D.FCAE	EQU	0FCAEH	; --S-I
D.FCBE	EQU	0FCBEH	; --SL-
D.FCBF	EQU	0FCBFH	; --SL-
EXPTBL	EQU	0FCC1H	; ---LI
I.FCC5	EQU	0FCC5H	; ----I
I$FCC9	EQU	0FCC9H	; ----I
I$FD00	EQU	0FD00H	; ----I
SLTWRK	EQU	0FD09H	; ----I
SLTATR	EQU	0FD89H	; ----I
DEVICE	EQU	0FD99H	; --SLI
H.TIMI  equ     0FD9FH
H.DSKO  equ     0FDEFH
H.NAME  equ     0FDF9H
H.KILL  equ     0FDFEH
H.COPY  equ     0FE08H
H.DSKF  equ     0FE12H
H.DSKI  equ     0FE17H
H.LSET  equ     0FE21H
H.RSET  equ     0FE26H
H.FIEL  equ     0FE2BH
H.MKI$  equ     0FE30H
H.MKS$  equ     0FE35H
H.MKD$  equ     0FE3AH
H.CVI   equ     0FE3FH
H.CVS   equ     0FE44H
H.CVD   equ     0FE49H
H.GETP  equ     0FE4EH
H.NOFO  equ     0FE58H
H.NULO  equ     0FE5DH
H.NTFL  equ     0FE62H
H.BINS  equ     0FE71H
H.BINL  equ     0FE76H
H.FILE  equ     0FE7BH
H.DGET  equ     0FE80H
H.FILO  equ     0FE85H
H.INDS  equ     0FE8AH
H.LOC   equ     0FE99H
H.LOF   equ     0FE9EH
H.EOF   equ     0FEA3H
H.BAKU  equ     0FEADH
H.PARD  equ     0FEB2H
H.NODE  equ     0FEB7H
H.POSD  equ     0FEBCH
H.RUNC  equ     0FECBH
H.CLEA  equ     0FED0H
H.LOPD  equ     0FED5H
H.STKE  equ     0FEDAH
H.ERRP  equ     0FEFDH
H.PHYD  equ     0FFA7H
H.FORM  equ     0FFACH
EXTBIO	EQU	0FFCAH	; ----I
DISINT	EQU	0FFCFH	; -C---
ENAINT	EQU	0FFD4H	; -C---
D.FFFF	EQU	0FFFFH	; --SLI


_RST    MACRO   X
        IFIDN   <X>,<SYNCHR>
        RST     08H
        ENDIF
        IFIDN   <X>,<CHRGTR>
        RST     10H
        ENDIF
        IFIDN   <X>,<OUTDO>
        RST     18H
        ENDIF
        IFIDN   <X>,<DCOMPR>
        RST     20H
        ENDIF
        IFIDN   <X>,<GETYPR>
        RST     28H
        ENDIF
        IFIDN   <X>,<CALLF>
        RST     30H
        ENDIF
        ENDM

_DOSCP	MACRO	X
	IF2
	IF	($ NE X)
	.PRINTX	"ERROR: MSXDOS incompatible, subroutine not aligned to &X"
	ENDIF
	ENDIF
	ENDM


        .Z80
        ASEG
        ORG     04000H

        DEFB    "AB"			; ROM extension identifier
        DEFW    C.576F			; extension initialize handler
        DEFW    C.64EE			; extension BASIC statement handler
        DEFW    0			; extension BASIC device handler
        DEFW    0			; extension BASIC program pointer
        DEFS    6

I$4010:	JP	DSKIO			; disk I/O operation
I$4013:	JP	DSKCHG			; disk changed
I$4016:	JP	GETDPB			; get DPB
I$4019:	JP	CHOICE			; get pointer to format choice string
I$401C:	JP	DSKFMT			; format disk
I$401F:	JP	MTOFF			; motor off
J.4022:	JP	J.5B91			; start DiskBASIC
?.4025:	SCF				; have workarea for format
	JP	C.6115			; format (BASIC)
?.4029:	JP	J$61E7
?.402C:	NOP

;	  Subroutine get my slot id
;	     Inputs  ________________________
;	     Outputs ________________________

C$402D:	JP	C.5FE0			; get my slot id

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4030H

$INIT:
?.4030:	LD	HL,(D.F34B)
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4034H

$$BIOS:

C.4034:	PUSH	IX
	LD	IX,BREAKX		; check if CTRL-STOP pressed
	CALL	C.4097			; execute MAIN ROM call (IX on stack)
	JR	NC,J$4049		; nope,
	LD	A,3
	LD	(D.F336),A		; have key
	LD	(D.F337),A		; key = CTRL-C
	AND	A			; clear Zx, have key
	RET

J$4049:	LD	A,(D.F336)
	AND	A			; have key ?
	LD	A,(D.F337)		; key
	RET	NZ			; yep, return key
	PUSH	IX
	LD	IX,CHSNS		; check if key
	CALL	C.4097			; execute MAIN ROM call (IX on stack)
	RET	Z			; nope, quit with have no key
	LD	A,0FFH
	LD	(D.F336),A		; have key
	CALL	C$4083			; get key
	LD	(D.F337),A		; store key
	OR	A			; clear Zx, have key
	RET

I$4068:	DEFW	C.7202
	DEFB	0

;	  Subroutine get fresh key
;	     Inputs  ________________________
;	     Outputs ________________________

C.406B:	XOR	A
	LD	(D.F336),A		; have no key
I$406F:	PUSH	IX
	LD	IX,KILBUF		; clear keyboard buffer
	CALL	C.4097			; execute MAIN ROM call (IX on stack)

;	  Subroutine get key (use stored if any)
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4078H

$IN:
C.4078:	PUSH	HL
	LD	HL,D.F336
	XOR	A
	CP	(HL)			; have key ?
	LD	(HL),A			; have no key
	INC	HL
	LD	A,(HL)			; key
	POP	HL
	RET	NZ			; yep, return key

;	  Subroutine get key
;	     Inputs  ________________________
;	     Outputs ________________________

C$4083:	PUSH	IX
	LD	IX,CHGET
J.4089:	CALL	C.40AB			; execute MAIN ROM call
	POP	IX
	RET

;	  Subroutine character to screen
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	408FH

$OUT:
C.408F:	PUSH	IX
	LD	IX,CHPUT
	JR	J.4089

;	  Subroutine execute MAIN ROM call (IX on stack)
;	     Inputs  ________________________
;	     Outputs ________________________

C.4097:	CALL	C.40AB			; execute MAIN ROM call
	POP	IX
	EX	(SP),IX
	RET

;	  Subroutine character to printer
;	     Inputs  ________________________
;	     Outputs ________________________

J.409F:	PUSH	IX
	LD	IX,LPTOUT
	JR	J.4089

;	  Subroutine abort handler, BDOS system reset
;	     Inputs  ________________________
;	     Outputs ________________________

C.40A7:	LD	IX,I$409B

;	  Subroutine execute MAIN ROM call
;	     Inputs  ________________________
;	     Outputs ________________________

C.40AB:	PUSH	IY
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT
	EI
	POP	IY
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$40B8:	LD	A,0DH	; 13 
	OUT	(0B4H),A
	LD	A,0AH	; 10 
	OUT	(0B5H),A
	XOR	A
	OUT	(0B4H),A
	LD	B,0FH	; 15 
J$40C5:	IN	A,(0B5H)
	AND	0FH	; 15 
	XOR	B
	OUT	(0B5H),A
	LD	C,A
	NOP
	IN	A,(0B5H)
	AND	0FH	; 15 
	CP	C
	RET	NZ
	XOR	B
	OUT	(0B5H),A
	DJNZ	J$40C5
	LD	A,0FFH
	LD	(D.F338),A		; have real time device
	LD	A,0DH	; 13 
	OUT	(0B4H),A
	LD	A,09H	; 9 
	OUT	(0B5H),A
	LD	A,0AH	; 10 
	OUT	(0B4H),A
	LD	A,01H	; 1 
	OUT	(0B5H),A
	LD	A,0DH	; 13 
	OUT	(0B4H),A
	XOR	A
	OUT	(0B5H),A
	LD	BC,13*256+0
J$40F8:	LD	A,C
	OUT	(0B4H),A
	IN	A,(0B5H)
	PUSH	AF
	INC	C
	DJNZ	J$40F8
	LD	A,0EH	; 14 
	OUT	(0B4H),A
	XOR	A
	OUT	(0B5H),A
	LD	B,0DH	; 13 
J$410A:	DEC	C
	LD	A,C
	OUT	(0B4H),A
	POP	AF
	OUT	(0B5H),A
	DJNZ	J$410A
	JR	C.4150

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4115:	LD	(D.F33B),HL
	LD	A,(D.F338)
	AND	A			; have real time device ?
	RET	Z			; nope, quit
	LD	A,(D.F24A)
	LD	B,A			; year
	LD	A,(D.F249)
	LD	C,A			; month
	LD	A,(D.F248)
	LD	D,A			; day
	LD	E,07H	; 7 
	CALL	C.415B
	JR	J$4144

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4130:	LD	A,(D.F338)
	AND	A			; have real time device ?
	JP	Z,J$75E3		; nope,
	LD	E,00H
	CALL	C.415B
	LD	A,0FH	; 15 
	OUT	(0B4H),A
	LD	A,02H	; 2 
	OUT	(0B5H),A
J$4144:	LD	H,D
	CALL	C.4162
	LD	H,C
	CALL	C.4162
	LD	H,B
	CALL	C.4162

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4150:	LD	A,0DH	; 13 
	OUT	(0B4H),A
	IN	A,(0B5H)
	OR	08H	; 8 
J.4158:	OUT	(0B5H),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.415B:	CALL	C.4150
	AND	04H	; 4 
	JR	J.4158

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4162:	XOR	A
	LD	L,08H	; 8 
J$4165:	RLC	H
	ADC	A,A
	DAA
	DEC	L
	JR	NZ,J$4165
	CALL	C.4173
	RRCA
	RRCA
	RRCA
	RRCA

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4173:	PUSH	AF
	LD	A,E
	INC	E
	OUT	(0B4H),A
	POP	AF
	JR	J.4158

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$417B:	CALL	C$75CC
	LD	HL,(D.F33B)
	AND	A
	RET	Z
	CALL	C.415B
	LD	E,0DH	; 13 
	CALL	C.41AB
	CALL	C.550A
	CALL	C.41AB
	LD	(D.F249),A		; update month
	CALL	C.41AB
	LD	(D.F248),A		; update day
	DEC	E
	CALL	C.41AB
	LD	B,A
	CALL	C.41AB
	LD	C,A
	CALL	C.41AB
	CALL	C.4150
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.41AB:	XOR	A
	CALL	C$41B3
	ADD	A,A
	ADD	A,A
	ADD	A,D
	ADD	A,A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$41B3:	LD	D,A
	DEC	E
	LD	A,E
	OUT	(0B4H),A
	IN	A,(0B5H)
	AND	0FH	; 15 
	ADD	A,D
	LD	D,A
	RET

?.41BF:	DEFB	0,0

;	  Subroutine translate drive id to disk drive number
;	     Inputs  ________________________
;	     Outputs ________________________

C.41C1:	PUSH	DE
	CALL	C$4EDD			; pointer to drive driver work area
	LD	E,A
	INC	E			; drive id (1 based)
	LD	D,-1
J.41C9:	INC	D
	LD	A,4
	CP	D			; all disk drives done ?
	SCF
	JR	Z,J$41DF		; yep, quit with error
	LD	A,(IX+0)
	INC	IX
	INC	A			; disk drive connected ?
	JR	Z,J.41C9		; nope, next
	DEC	E			; found the disk drive ?
	JR	NZ,J.41C9		; nope, next
	DEC	IX
	XOR	A			; no error
	LD	A,D			; disk drive number
J$41DF:	POP	DE
	RET

;	  Subroutine clear 7 sectors buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.41E1:	LD	BC,7*SECLEN
	XOR	A
	JP	C.58E3			; initialize area

;	  Subroutine disable maskable interrupts and enable I/O ports
;	     Inputs  ________________________
;	     Outputs ________________________

C.41E8:	CALL	DISINT
	DI
	JP	C.517F			; enable I/O ports

;	  Subroutine BDOS return version number
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	41EFH

CPMVER:
C.41EF:	LD	B,00H
	LD	A,22H
	RET
J$41F4:	PUSH	DE
	LD	E,L
	LD	D,H
	SRL	H
	RR	L
	RRA
	ADD	HL,DE
	POP	DE
	ADD	HL,DE
	RLA
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	JR	NC,J$4211
	SRL	H
	RRA
	SRL	H
	RRA
	SRL	H
	RRA
	SRL	H
	RRA
J$4211:	LD	L,A
	LD	A,H
	AND	0FH	; 15 
	LD	H,A
	OR	L
	RET
J$4218:	PUSH	DE
	LD	E,L
	LD	D,H
	SRL	H
	RR	L
I$421E	EQU	$-1
	RRA
	ADD	HL,DE
	POP	DE
	ADD	HL,DE
	RLA
	JR	NC,J$423E
	SLA	C
	RL	B
	SLA	C
	RL	B
	SLA	C
	RL	B
	SLA	C
	RL	B
	LD	A,(HL)
	AND	0FH	; 15 
	OR	C
	LD	(HL),A
	INC	HL
	LD	(HL),B
	RET
J$423E:	LD	(HL),C
	INC	HL
	LD	A,(HL)
	AND	0F0H
	OR	B
	LD	(HL),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4246:	LD	DE,I.F2B9

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4249:	LD	A,(DE)
	CP	(HL)
	INC	HL
	INC	DE
	RET	NZ
	DJNZ	C.4249
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4251:	CALL	C$F255
	LD	HL,I$F1F7
	LD	C,5
J$4259:	LD	B,04H	; 4 
	CALL	C.4246
	JR	NZ,J$428F
	LD	B,04H	; 4 
J$4262:	LD	A,(DE)
	INC	DE
	CP	" "
	JR	NZ,J$429A
	DJNZ	J$4262
	LD	A,C
	NEG
	LD	(I.F20B+11),A
	LD	HL,I.F2B9
	LD	DE,I.F20B
	LD	BC,4
	LDIR
	CALL	C.547D			; get time and date for directory entry
	LD	(I.F20B+24),BC
	LD	(I.F20B+22),DE
	LD	HL,I.F20B
	PUSH	HL
	POP	IY
	OR	01H
	RET
J$428F:	DEC	B
	LD	A,L
	ADD	A,B
	LD	L,A
	LD	A,H
	ADC	A,00H
	LD	H,A
	DEC	C
	JR	NZ,J$4259
J$429A:	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.429C:	PUSH	DE
	LD	HL,14
	ADD	HL,DE
	LD	(HL),00H
	CALL	C$42A8
	POP	DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$42A8:	CALL	C.440E
	RET	C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.42AC:	CALL	C.4251
	RET	NC
	CALL	C$44D3

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.42B3:	CALL	C$F258
	CALL	C$4305
	RET	C
J$42BA:	LD	A,(HL)
	OR	A
	JR	Z,J.42F3
	CP	0E5H
	JR	Z,J.42F3
	PUSH	HL
	LD	B,11
	LD	DE,I.F2B9
J$42C8:	CALL	C.4249
	JR	Z,J$42D3
	CP	"?"
	JR	NZ,J$42EC
	DJNZ	J$42C8
J$42D3:	POP	HL
	PUSH	HL
	POP	IY
	LD	A,(D.F2C4)
	XOR	80H
	BIT	7,A
	RET	Z
	LD	A,(IY+11)
	AND	1EH
	RET	Z
	LD	A,(D.F2DC)
	OR	A
	RET	NZ
	JR	J.42ED
J$42EC:	POP	HL
J.42ED:	CALL	C$433F
	JR	NC,J$42BA
	RET
J.42F3:	LD	A,(D.F2FE)
	INC	A
	JR	NZ,J$42FF
	LD	A,(D.F2B8)
	LD	(D.F2FE),A
J$42FF:	LD	A,(HL)
	OR	A
	JR	NZ,J.42ED
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4305:	LD	A,(D.F2B8)
	INC	A
	CP	(IX+11)			; number of directory entries
	JR	NC,J.435E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.430E:	CALL	C$F25B
	LD	(D.F2B8),A
	LD	C,A
	AND	(IX+4)			; directory mask
	LD	L,A
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL			; *32
	LD	DE,(D.F351)
	ADD	HL,DE
	LD	B,(IX+5)		; directory shift
J$4328:	SRL	C
	DJNZ	J$4328
	LD	A,(D.F245)
	CP	C			; directory buffer relative sector
	JR	NZ,J$4339
	LD	A,(D.F246)		; directory buffer drive id
	CP	(IX+0)			; same as drive id ?
	RET	Z			; yep, quit
J$4339:	PUSH	HL
	CALL	C.46A4			; flush directory buffer, read new directory in directory buffer
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$433F:	CALL	C$F25E
	LD	A,(D.F2B8)
	INC	A
	CP	(IX+11)			; number of directory entries
	JR	NC,J.435E
	LD	(D.F2B8),A
	LD	DE,32
	ADD	HL,DE
	AND	(IX+4)
	RET	NZ
	INC	C
	CALL	C.46A4			; flush directory buffer, read new directory in directory buffer
	LD	HL,(D.F351)
	RET
J.435E:	CALL	C.4743			; flush directory buffer
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4363:	LD	BC,3*256+0F5H
	JP	C.534C

?.4369:	DEFB	0,0,0

;	  Subroutine BDOS delete file
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	436CH

DELETE:
C.436C:	CALL	C.440E
	CALL	NC,C.42AC
	LD	A,0FFH
	RET	C
	RET	NZ
J$4376:	LD	A,0E5H
	LD	(D.F23C),A		; directory buffer = dirty
	LD	(HL),A
	LD	L,(IY+26)
	LD	H,(IY+27)
	LD	A,H
	OR	L
	CALL	NZ,C.4F7A
	CALL	C.42B3
	JR	NC,J$4376
	CALL	C$4403
	JP	C.45CC			; write FAT buffer

;	  Subroutine BDOS rename file
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4392H

RENAME:
C.4392:	CALL	C.440E
	JR	C,J.440B
	LD	DE,5
	ADD	HL,DE
	LD	DE,I.F2C5
	CALL	C.F1F4
	CALL	NC,C.42AC
	JR	C,J.440B
	JR	NZ,J.440B
	LD	HL,I.F2B9
	LD	DE,I.F2D0
	LD	BC,12
	LDIR
J$43B3:	LD	HL,I.F2C5
	LD	DE,I.F2B9
	LD	B,11
J$43BB:	LD	A,(HL)
	CP	"?"
	JR	NZ,J$43C3
	LD	A,(IY+0)
J$43C3:	LD	(DE),A
	INC	HL
	INC	DE
	INC	IY
	DJNZ	J$43BB
	LD	A,80H
	LD	(DE),A
	CALL	C.4251
	JR	NC,J.4408
	LD	A,(D.F2B8)
	PUSH	AF
	LD	A,0FFH
	LD	(D.F2B8),A
	CALL	C.42B3
	POP	BC
	JR	NC,J.4408
	LD	A,B
	CALL	C.430E
	EX	DE,HL
	LD	HL,I.F2B9
	LD	BC,11
	LDIR
	LD	A,0FFH
	LD	(D.F23C),A		; directory buffer = dirty
	LD	HL,I.F2D0
	LD	DE,I.F2B9
	LD	BC,12
	LDIR
	CALL	C.42B3
	JR	NC,J$43B3

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4403:	CALL	C.4743			; flush directory buffer
	XOR	A
	RET

J.4408:	CALL	C.4743			; flush directory buffer
J.440B:	LD	A,0FFH
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.440E:	CALL	C$F261
	XOR	A
	LD	(D.F2DC),A
	EX	DE,HL
	LD	A,(HL)
	INC	HL
	LD	(D.F2C4),A
	AND	0FH	; 15 
	CALL	C.4427
	RET	C
	LD	DE,I.F2B9
	JP	C.F1F4

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4427:	LD	C,A
	CALL	C$4F97
	RET	C
	LD	A,C
	DEC	A
	JP	P,J$4434
	LD	A,(D.F247)		; current drive id
J$4434:	LD	(D.F2E1),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4438:	LD	A,(IY+31)
	OR	A
	JR	NZ,J.445D
	LD	A,(IY+28)
	LD	C,(IY+29)
D$4443	EQU	$-1
	LD	B,(IY+30)
	ADD	A,A
	RL	C
	RL	B
	JR	C,J.445D
	OR	A
	JR	Z,J$4456
	INC	BC
	LD	A,B
	OR	C
	JR	Z,J.445D
J$4456:	LD	A,C
	RES	7,C
	ADD	A,A
	RL	B
	RET	NC
J.445D:	LD	BC,0FF7FH
	RET

?.4461:	NOP

;	  Subroutine BDOS open file
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4462H

OPEN:
C.4462:	CALL	C.429C
	JR	C,J.440B
	CALL	C.4438
	LD	A,(D.F30C)
	INC	B
	CP	B
	JR	NC,J.440B
J$4471:	CALL	C$F264
	EX	DE,HL
	LD	BC,15
	ADD	HL,BC
	CALL	C.4438
	LD	A,(D.F30C)
	CP	B
	JR	Z,J.4488
	LD	C,80H
	JR	C,J.4488
	LD	C,00H
J.4488:	LD	(HL),C
	INC	HL
	EX	DE,HL
	LD	BC,28
	ADD	HL,BC
	LD	C,4
	LDIR
	LD	BC,-8
	ADD	HL,BC
	LDI
	LDI
	LD	C,-4
	ADD	HL,BC
	LDI
	LDI
	LD	A,(IY+11)
	BIT	7,A
	JR	NZ,J$44AE
	LD	A,(IX+0)
	OR	40H	; "@"
J$44AE:	LD	(DE),A
	INC	DE
	LD	A,(D.F2B8)
	LD	(DE),A
	INC	DE
	LD	A,(IY+26)
	LD	(DE),A
	INC	DE
	INC	DE
	LD	(DE),A
	DEC	DE
	LD	A,(IY+27)
	LD	(DE),A
	INC	DE
	INC	DE
	LD	(DE),A
	INC	DE
	XOR	A
	LD	(DE),A
	INC	DE
	LD	(DE),A
	RET
J$44CA:	LD	C,A			; error code + operation
	LD	A,(D.F2E1)		; drive id
	CALL	C$4702			; handle disk error
	JR	C.44DB

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$44D3:	LD	A,0FFH
	LD	(D.F2B8),A
	LD	(D.F2FE),A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.44DB:	CALL	C$F267
	CALL	C.454F			; get pointer to DPB current drive id
	LD	A,(D.F2E1)		; drive id
	LD	C,(IX+1)		; media descriptor
	LD	B,0
	OR	A
	CALL	C$607E			; is disk changed ?
	JR	C,J$44CA		; error,
	CALL	C.45FB			; get pointer to FAT buffer
	DEC	HL
	LD	A,B
	OR	(HL)                    ; combine with FAT buffer status
	LD	A,(D.F2E1)
	LD	HL,(D.F241)		; data buffer drive id, data sector flag
	JP	M,J$4504                ; FAT buffer invalid OR disk change unknown, 
	RET	NZ			; FAT buffer dirty OR disk unchanged, quit (do not read the FAT)
	CP	L			; current drive same as data buffer owner ?
	JR	NZ,J.450D		; nope, read FAT
	DEC	H			; data buffer dirty ?
	RET	Z			; yep, quit (do not read the FAT)

J$4504:	SUB	L
	JR	NZ,J.450D
	LD	L,A
	LD	H,A
	DEC	L
	LD	(D.F241),HL		; update data buffer drive id = invalid, data buffer = clean
J.450D:	LD	A,0FFH
	LD	(D.F246),A		; directory buffer = invalid
	PUSH	IX
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	A,(IX+0)		; drive id
	LD	L,(IX+2)
	LD	H,(IX+3)		; pointer to FAT buffer
	POP	IX
	PUSH	HL			; store pointer to FAT buffer
	CP	(IX+0)			; same drive id ?
	CALL	NZ,C.756E		; nope,
	LD	A,(D.F2E1)
	LD	HL,0
	CALL	C$752A
	POP	HL			; restore pointer to FAT buffer
	DEC	HL
	LD	(HL),0			; mark FAT buffer clean
	INC	HL
	LD	B,(HL)			; media descriptor from FAT
	LD	A,(D.F2E1)		; drive id
	LD	C,(IX+1)		; media descriptor
	PUSH	IX
	POP	HL
	CALL	C$6086			; get drive parameter block
	PUSH	HL
	POP	IX
	EX	DE,HL
	CALL	C.455D			; get pointer to DPB entry current drive id
	LD	(HL),E
	INC	HL
	LD	(HL),D
	RET

;	  Subroutine get pointer to DPB current drive id
;	     Inputs  ________________________
;	     Outputs ________________________

C.454F:	CALL	C$F26A
	CALL	C.455D			; get pointer to DPB entry current drive id
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A			; pointer to DPB
	PUSH	HL
	POP	IX
	RET

;	  Subroutine get pointer to DPB entry current drive id
;	     Inputs  ________________________
;	     Outputs ________________________

C.455D:	LD	A,(D.F2E1)

;	  Subroutine get pointer to DPB entry
;	     Inputs  ________________________
;	     Outputs ________________________

C$4560:	LD	HL,I.F355
	ADD	A,A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4564:	ADD	A,L
	LD	L,A
	RET	NC
	INC	H
	RET

?.4569:	NOP

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.456A:	LD	HL,1
	PUSH	BC
	RET

;	  Subroutine BDOS close file
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	456FH

CLOSE:
C.456F:	PUSH	DE
	POP	IY
	CALL	C.440E
	LD	A,0FFH
	RET	C
	LD	A,(IY+24)
	AND	0C0H
	LD	A,00H
	RET	NZ
	LD	A,(D.F2E1)
	LD	HL,(D.F241)		; data buffer drive id, data buffer flag
	CP	L			; same drive id ?
	CALL	Z,C.472D		; yep,
	CALL	C.454F			; get pointer to DPB current drive id
	LD	A,(IY+25)
	CALL	C.430E
	LD	B,11
	CALL	C.4246
	JR	NZ,J$45D2		; mark FAT buffer clean
	PUSH	IY
	POP	DE
	LD	C,0BH	; 11 
	ADD	HL,BC
	EX	DE,HL
	LD	C,16H
	ADD	HL,BC
	LDI
	LDI
	LD	BC,-4
	ADD	HL,BC
	LDI
	LDI
	LD	BC,4
	ADD	HL,BC
	LDI
	LDI
	LD	BC,-12
	ADD	HL,BC
	LD	BC,4
	LDIR
	CALL	C.4748			; write directory buffer

;	  Subroutine flush FAT buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.45C4:	CALL	C.45FB			; get pointer to FAT buffer
	DEC	HL
	LD	A,(HL)
	CP	1			; FAT buffer dirty ?
	RET	NZ			; nope, quit

;	  Subroutine write FAT buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.45CC:	CALL	C$F26D
	JP	C.756E

;	  Subroutine mark FAT buffer clean
;	     Inputs  ________________________
;	     Outputs ________________________

J$45D2:	CALL	C.45FB			; get pointer to FAT buffer
	DEC	HL
	LD	(HL),0			; FAT buffer clean
	LD	A,0FFH
	RET

;	  Subroutine get FAT parameters
;	     Inputs  ________________________
;	     Outputs ________________________

C.45DB:	LD	A,(IX+10)		; number of FATs
	CALL	C.45FB			; get pointer to FAT buffer
	LD	B,(IX+16)		; number of sectors per FAT
	LD	E,(IX+8)
	LD	D,(IX+9)		; first FAT sector
	RET

;	  Subroutine get directory parameters
;	     Inputs  ________________________
;	     Outputs ________________________

C.45EB:	ADD	A,(IX+17)
	LD	E,A
	LD	D,(IX+18)
	JR	NC,J$45F5
	INC	D
J$45F5:	LD	HL,(D.F351)
	LD	B,1
	RET

;	  Subroutine get pointer to FAT buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.45FB:	PUSH	IX
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	L,(IX+2)
	LD	H,(IX+3)		; pointer to FAT buffer
	POP	IX
	RET

I$4609:	DEFB	0EBH			; 00H, x86 JMP +0100H
        DEFB	0FEH
        DEFB	090H			; 02H, x86 NOP
	DEFB	"MSX_00  "		; 03H, OEM system name
					;      BPB (BIOS Parameter Block)
        DEFW	512			; 0BH, bytes per sector
        DEFB	2			; 0DH, sectors per cluster
        DEFW	1			; 0EH, reserved sectors (= 1st FAT sector)
        DEFB	2			; 10H, number of FATs
        DEFW	112			; 11H, number of (root) directory entries
S.4609	EQU	$-I$4609

	DEFB	0

;	  Subroutine BDOS create file
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	461DH

CREATE:
C.461D:	PUSH	DE
I$461E:	CALL	C.440E
I$4620	EQU	$-1
	JR	C,J.464D
	INC	HL
	INC	HL
	LD	(HL),00H
	LD	HL,I.F2B9
	LD	A,"?"
	LD	BC,11
	CPIR
	JR	Z,J.464D
	CALL	C.42AC
J$4634	EQU	$-2
	JR	NC,J$4651
	LD	A,(D.F2FE)
	CP	0FFH
	JR	Z,J.464D
	CALL	C.430E
J$4642:	PUSH	HL
	POP	IY
	JR	J.4669
J$4647:	BIT	7,(IY+11)
	JR	NZ,J.468F
J.464D:	POP	DE
	LD	A,0FFH
	RET
J$4651:	JR	NZ,J$4647
	LD	A,(D.F30C)
	OR	A
	JR	NZ,J.468F
	LD	L,(IY+26)
	LD	H,(IY+27)
	LD	A,H
	OR	L
	JR	Z,J.4669
	CALL	C.4F7A
I$4666:	CALL	C.45CC			; write FAT buffer
J.4669:	PUSH	IY
	POP	DE
	LD	HL,I.F2B9
	LD	BC,11
	LDIR
	LD	A,(HL)
	RLA
	LD	A,00H
	JR	NC,J$467C
	LD	A,06H	; 6 
J$467C:	LD	(DE),A
	INC	DE
	EX	DE,HL
	XOR	A
	LD	C,14H	; 20 
	CALL	C.58E3			; initialize area
	LD	C,09H	; 9 
	SBC	HL,BC
	CALL	C.4696			; update with current time and date
	CALL	C.4748			; write directory buffer
J.468F:	PUSH	IY
	POP	HL
	POP	DE
	JP	J$4471

;	  Subroutine update with current time and date
;	     Inputs  ________________________
;	     Outputs ________________________

C.4696:	PUSH	HL
	CALL	C.547D			; get time and date for directory entry
	POP	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	HL
	RET

;	  Subroutine flush directory buffer, read new directory in directory buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.46A4:	PUSH	BC			; store directory buffer relative sector
	CALL	C.4743			; flush directory buffer
	POP	BC			; restore directory buffer relative sector
	LD	B,(IX+0)		; drive id
	LD	(D.F245),BC		; update directory buffer relative sector, update directory buffer drive id
	PUSH	BC			; store directory buffer drive id, directory buffer relative sector
	LD	A,C			; directory buffer relative sector
	CALL	C.45EB			; get directory parameters
	CALL	C.46C5			; read sectors with error handling
	POP	BC			; restore directory buffer drive id, directory buffer relative sector
	RET

;	  Subroutine BDOS read logical sector
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	46BAH

ABSREA:
C.46BA:	LD	B,H
	LD	A,L
	LD	(D.F2E1),A
	CALL	C.454F			; get pointer to DPB current drive id
	LD	HL,(D.F23D)

;	  Subroutine read sectors with error handling
;	     Inputs  ________________________
;	     Outputs ________________________

C.46C5:	CALL	C$F270
	XOR	A
	LD	(D.F2FF),A		; operation = read
	CALL	C.46D7			; read sectors
	RET	NC			; no error, quit
	CALL	C.46E8
	DEC	A			; retry requested ?
	JR	Z,C.46C5		; yep, retry
	RET				; abort requested, quit

;	  Subroutine read sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C.46D7:	LD	A,(IX+0)		; drive id
	LD	C,(IX+1)		; media descriptor
	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	C$6069			; read disk sectors
	POP	DE
	LD	C,D			; number of sectors
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.46E8:	PUSH	AF			; store error code
	LD	A,C			; number of sectors requested
	SUB	B			; - number of sectors left
	LD	C,A
	PUSH	BC
	LD	B,0
	EX	DE,HL
	ADD	HL,BC			; update sector number
	LD	B,C
	LD	C,0
	SLA	B
	ADD	HL,BC
	POP	BC
	POP	AF			; restore error code
	LD	C,A
	LD	A,(D.F2FF)		; operation type
	OR	C
	LD	C,A			; combine with error code
	LD	A,(IX+0)		; drive id

;	  Subroutine handle disk error
;	     Inputs  ________________________
;	     Outputs ________________________

C$4702:	CALL	C$F273
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	HL,(D.F323)		; pointer to address disk error handler
	CALL	C.F1E8			; execute disk error handler
	LD	A,C			; requested action
	POP	HL
	POP	DE
	POP	BC
	CP	2			; abort ?
	RET	NZ			; nope, quit
	JP	C.F1E2			; warm boot
I$4718:	LD	B,L
	LD	H,L
	LD	D,E
	LD	H,B
	DEFB	0,0
I$471E:	DEFB	0,0

;	  Subroutine BDOS write logical sector
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4720H

ABSWRI:
C.4720:	LD	B,H
	LD	A,L
	LD	(D.F2E1),A
	CALL	C.454F			; get pointer to DPB current drive id
	LD	HL,(D.F23D)
	JR	C.4755			; write sectors with error handling

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.472D:	LD	HL,D.F242
	XOR	A
	CP	(HL)			; data buffer clean ?
	LD	(HL),A			; data buffer = clean
	RET	Z			; yep, quit
	LD	IX,(D.F243)
	LD	HL,(D.F34F)
	LD	B,1			; number of sectors = 1
	LD	DE,(D.F23F)
	JR	C.4755			; write sectors with error handling

;	  Subroutine flush directory buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.4743:	LD	A,(D.F23C)
	OR	A			; directory buffer = clean ?
	RET	Z			; yep, quit

;	  Subroutine write directory buffer
;	     Inputs  ________________________
;	     Outputs ________________________

C.4748:	CALL	C$F276
	XOR	A
	LD	(D.F23C),A		; directory buffer = clean
	LD	A,(D.F245)		; directory buffer relative sector
	CALL	C.45EB			; get directory parameters

;	  Subroutine write sectors with error handling
;	     Inputs  ________________________
;	     Outputs ________________________

C.4755:	CALL	C$F279
	LD	A,1
	LD	(D.F2FF),A		; operation = write
	LD	A,(IX+0)		; drive id
	LD	C,(IX+1)		; media descriptor
	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	C$606B			; write disk sectors
	POP	DE
	LD	C,D			; number of sectors
	POP	DE
	POP	HL
	RET	NC			; no error, quit
	CALL	C.46E8
	DEC	A			; retry requested ?
	JR	Z,C.4755		; yep, retry
	RET				; ignore requested, quit

;	  Subroutine BDOS read next record
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4775H

SEQRD:
C.4775:	CALL	C.4EFD
	CALL	C.4B26
	JR	J$4783

;	  Subroutine BDOS write next record
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	477DH

SEQWRT:
C.477D:	CALL	C.4EFD
	CALL	C.4CAF
J$4783:	CALL	C.486A
	JR	J$479C

;	  Subroutine BDOS random access read record
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4788H

RNDRD:
C.4788:	CALL	C.4857
	CALL	C.4B26
	JR	J$4799

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4790:	PUSH	IY
	POP	DE

;	  Subroutine BDOS random access write record
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4793H

RNDWRT:
C.4793:	CALL	C.4857
	CALL	C.4CAF
J$4799:	CALL	C.4844
J$479C:	LD	A,L
	AND	7FH
	LD	(IY+32),A
	SLA	L
	RL	H
	LD	(IY+12),H
	RL	E
	LD	(IY+14),E
	LD	A,(D.F2DE)
	RET

;	  Subroutine BDOS read random block
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	47B2H

BLKRD:
C.47B2:	XOR	A
	LD	(D.F306),A		; no CP/M function result compatibility
	CALL	C.485A
	CALL	C.4B26
	JR	J$47C8

;	  Subroutine BDOS write random block
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	47BEH

BLKWRT:
C.47BE:	XOR	A
	LD	(D.F306),A		; no CP/M function result compatibility
	CALL	C.485A
	CALL	C.4CAF
J$47C8:	CALL	C.486A
	CALL	C.4844
	LD	L,C
	LD	H,B
	RET

;	  Subroutine BDOS write random with zero fill
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	47D1H

ZWRITE:
C.47D1:	PUSH	DE
	POP	IY
	LD	A,(IY+16)
	LD	C,(IY+17)
	LD	B,(IY+18)
	LD	E,(IY+19)
	ADD	A,A
	RL	C
	RL	B
	RL	E
	OR	A
	JR	Z,J.47F0
	INC	BC
	LD	A,B
	OR	C
	JR	NZ,J.47F0
	INC	E
J.47F0:	LD	L,(IY+33)
	LD	H,(IY+34)
	SBC	HL,BC
	JR	Z,C.4790
	LD	A,(IY+35)
	SBC	A,E
	JR	C,C.4790
	PUSH	HL
	CALL	C.4790
	POP	DE
	OR	A
	RET	NZ
	LD	HL,(D.F23D)
	PUSH	HL
	LD	HL,(D.F351)
	LD	(D.F23D),HL
	LD	B,80H
J$4813:	LD	(HL),A
	INC	HL
	DJNZ	J$4813
	DEC	A
	LD	(D.F246),A		; directory buffer = invalid
	LD	L,(IY+33)
	LD	H,(IY+34)
	SBC	HL,DE
	LD	C,L
	LD	B,H
	EX	DE,HL
	LD	D,00H
	LD	A,(IY+35)
	SBC	A,D
	LD	E,A
J$482D:	PUSH	HL
	LD	HL,1
	CALL	C.4CAF
	CALL	C.486A
	LD	C,L
	LD	B,H
	POP	HL
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,J$482D
	POP	HL
	LD	(D.F23D),HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4844:	LD	A,(D.F2DE)
	LD	(IY+33),L
	LD	(IY+34),H
	LD	(IY+35),E
	INC	D
	DEC	D
	RET	Z
	LD	(IY+36),D
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4857:	LD	HL,1

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.485A:	PUSH	DE
	POP	IY
	LD	C,(IY+33)
	LD	B,(IY+34)
	LD	E,(IY+35)
	LD	D,(IY+36)
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.486A:	RET	Z
	INC	HL
	LD	A,H
	OR	L
	RET	NZ
	INC	DE
	RET
J$4871:	POP	HL
	LD	L,C
	LD	H,B
	LD	A,01H	; 1 
	LD	(D.F2DE),A
	XOR	A
	LD	C,A
	LD	B,A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.487D:	LD	(D.F2E8),HL
	LD	(D.F2E4),BC
	LD	(D.F2E6),DE
	LD	A,(IY+0)
	CALL	C.4427
	JR	C,J$4871
	LD	DE,128
	LD	A,(D.F306)
	OR	A			; CP/M function result compatibility ?
	JR	NZ,J.48A8		; yep,
	LD	A,(IY+14)
	LD	D,(IY+15)
	LD	E,A
	OR	D
	JR	NZ,J.48A8
	LD	E,80H
	LD	(IY+14),E
J.48A8:	INC	D
	DEC	D
	JR	NZ,J$48B1
	LD	A,E
	CP	40H	; "@"
	JR	C,J$48B5
J$48B1:	XOR	A
	LD	(D$F2E7),A
J$48B5:	LD	HL,(D.F23D)
	LD	(D.F2E2),HL
	XOR	A
	LD	(D.F2DE),A
	LD	(D.F2DF),A
	LD	BC,(D.F2E8)
	CALL	C.491C			; multiply
	LD	A,(IY+24)
	OR	A
	RET	M
	PUSH	BC
	CALL	C.454F			; get pointer to DPB current drive id
	LD	BC,(D.F2E4)
	CALL	C.491C			; multiply
	LD	(D.F2F4),BC
	PUSH	BC
	LD	BC,(D.F2E6)
	CALL	C.4922			; multiply high word
	LD	(D.F2F6),BC
	LD	H,B
	LD	L,C
	POP	BC
	LD	D,B
	LD	E,C
	SRL	H
	RR	L
	RR	B
	LD	C,B
	LD	B,L
	LD	A,D
	AND	01H	; 1 
	LD	H,A
	LD	L,E
	LD	(D.F2F2),HL
	LD	(D.F2EE),BC
	LD	A,(IX+6)		; cluster mask
	AND	C
	LD	(D.F2DD),A
	LD	A,(IX+7)		; cluster shift
J$490C:	DEC	A
	JR	Z,J$4915
	SRL	B
	RR	C
	JR	J$490C
J$4915:	LD	(D.F2EC),BC
	POP	BC
	XOR	A
	RET

;	  Subroutine multiply
;	     Inputs  ________________________
;	     Outputs ________________________

C.491C:	CALL	C$F27C
	LD	HL,0

;	  Subroutine multiply high word
;	     Inputs  ________________________
;	     Outputs ________________________

C.4922:	LD	A,B
	LD	B,17
	JR	J$492E
J$4927:	JR	NC,J$492A
	ADD	HL,DE
J$492A:	RR	H
	RR	L
J$492E:	RRA
	RR	C
	DJNZ	J$4927
	LD	B,A
	RET

;	  Subroutine divide
;	     Inputs  ________________________
;	     Outputs ________________________

DIV16:
C.4935:	LD	HL,0
	CALL	C$F27F
	LD	A,B
	LD	B,16
	RL	C
	RLA
J$4941:	RL	L
	RL	H
	JR	C,J$4954
	SBC	HL,DE
	JR	NC,J$494C
	ADD	HL,DE
J$494C:	CCF
J$494D:	RL	C
	RLA
	DJNZ	J$4941
	LD	B,A
	RET
J$4954:	OR	A
	SBC	HL,DE
	JR	J$494D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4959:	LD	H,B
	LD	L,C
	LD	BC,(D.F2F2)
	LD	A,B
	OR	C
	LD	E,A
	LD	D,A
	JR	Z,J.4975
	LD	DE,512
	EX	DE,HL
	SBC	HL,BC
	EX	DE,HL
	SBC	HL,DE
	JR	NC,J.4975
	ADD	HL,DE
	EX	DE,HL
	LD	HL,0
J.4975:	LD	(D.F2F8),DE
	LD	C,L
	LD	B,H
	LD	A,H
	AND	01H	; 1 
	LD	H,A
	LD	C,B
	LD	B,00H
	SRL	C
	LD	(D.F2FA),HL
	LD	(D.F2FC),BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.498C:	CALL	C$F282
	LD	L,(IY+28)
	LD	H,(IY+29)
	LD	E,(IY+30)
	LD	D,(IY+31)
	LD	A,L
	OR	H
	JR	Z,J$49D2
	PUSH	BC
	LD	A,C
	SUB	E
	LD	C,A
	LD	A,B
	SBC	A,D
	LD	B,A
	JR	NC,J$49B3
	POP	BC
	LD	DE,0
	LD	L,(IY+26)
	LD	H,(IY+27)
	PUSH	AF
J$49B3:	POP	AF

;	  Subroutine translate relative cluster number to absolute
;	     Inputs  BC = relative cluster number
;	     Outputs ________________________

C.49B4:	CALL	C$F285
	LD	A,B
	OR	C			; relative cluster number = 0 ?
	RET	Z			; yep, quit
	PUSH	DE
	PUSH	HL			; store cluster number
	CALL	C.74E5			; get FAT entry content (with hook)
	POP	DE			; restore cluster number
	LD	A,H
	CP	HIGH 0FF8H		; end of cluster chain ?
	JR	C,J$49CA		; nope,
	LD	A,L
	CP	LOW 0FF8H		; end of cluster chain ?
	JR	NC,J$49CF		; yep, quit
J$49CA:	POP	DE
	INC	DE
	DEC	BC			; update relative cluster
	JR	C.49B4			; next
J$49CF:	EX	DE,HL
	POP	DE
	RET
J$49D2:	INC	BC
	DEC	DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.49D5:	LD	(D.F2E0),A
	LD	HL,(D.F2EC)
	LD	A,(D.F2DD)
	CALL	C.4EE3
	EX	DE,HL
	LD	HL,(D.F23F)
	SBC	HL,DE
	JR	NZ,J$49F3
	LD	A,(D.F2E1)
	LD	L,A
	LD	A,(D.F241)		; data buffer drive id
	CP	L			; same drive id ?
	JR	Z,J$4A1E		; yep,
J$49F3:	PUSH	DE
	PUSH	IX
	CALL	C.472D
	POP	IX
	POP	DE
	LD	A,(D.F2E0)
	OR	A
	JR	NZ,J$4A10
	DEC	A
	LD	(D.F241),A		; data buffer drive id = invalid
	LD	HL,(D.F34F)
	LD	B,1
	PUSH	DE
	CALL	C.46C5			; read sectors with error handling
	POP	DE
J$4A10:	LD	(D.F23F),DE
	LD	A,(D.F2E1)
	LD	(D.F241),A		; update data buffer drive id
	LD	(D.F243),IX
J$4A1E:	LD	A,01H	; 1 
	LD	(D.F2DF),A
	LD	HL,(D.F2E2)
	PUSH	HL
	LD	BC,(D.F2F8)
	ADD	HL,BC
	LD	(D.F2E2),HL
	LD	HL,(D.F34F)
	LD	DE,(D.F2F2)
	ADD	HL,DE
	POP	DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A39:	CALL	C$F288
	LD	HL,(D.F2F8)
	LD	A,H
	OR	L
	RET	Z
	XOR	A
	CALL	C.49D5
	JP	C.F1D9

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A49:	CALL	C$F28B
	LD	HL,(D.F2F8)
	LD	A,H
	OR	L
	RET	Z
	LD	HL,(D.F2EE)
	INC	HL
	LD	(D.F2EE),HL
	XOR	A
	EX	DE,HL
	LD	HL,(D.F2F0)
	SBC	HL,DE
	RRA
	CALL	C.49D5
	EX	DE,HL
	CALL	C.F1D9
	LD	A,1
	LD	(D.F242),A		; data buffer = dirty
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A6E:	LD	HL,0
	LD	(D.F2F2),HL
	LD	HL,(D.F2FA)
	LD	(D.F2F8),HL
	LD	A,H
	OR	L
	SCF
	RET	Z

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4A7E:	LD	A,(D.F2DF)
	OR	A
	RET	Z
	LD	A,(D.F2DD)
	CP	(IX+6)			; cluster mask
	JR	C,J$4AA5
	LD	DE,(D.F2EC)
	LD	HL,0FF7H
	SBC	HL,DE
	RET	C
	EX	DE,HL
	CALL	C.74E5			; get FAT entry content (with hook)
	LD	(D.F2EC),HL
	LD	HL,(D.F2EA)
	INC	HL
	LD	(D.F2EA),HL
	LD	A,0FFH
J$4AA5:	INC	A
	LD	(D.F2DD),A
	OR	A
	RET
J.4AAB:	LD	A,(HL)
	LDI
	CP	0DH	; 13 
	JR	NZ,J$4AB4
	LD	(HL),0AH	; 10 
J$4AB4:	CP	0AH	; 10 
	JR	Z,J$4ACD
	LD	A,B
	OR	C
	JR	NZ,J.4AAB
J.4ABC:	LD	(D.F300),HL
J.4ABF:	LD	(D.F2E2),DE
	JP	NZ,J.4BE0
	RES	6,(IY+24)
	JP	J.4BE0
J$4ACD:	CALL	C.53A8
	LD	HL,0
	LD	A,C
	OR	B
	JR	NZ,J$4AFC
	INC	A
	JR	J.4ABC
J$4ADA:	LD	DE,(D.F2E2)
	INC	A
	JR	Z,J$4AF5
	INC	A
	JR	NZ,J.4ABF
J$4AE4:	CALL	C.546E			; reader input
	LD	(DE),A
	INC	DE
	CP	1AH
	JR	Z,J.4ABF
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$4AE4
	INC	A
	JR	J.4ABF
J$4AF5:	LD	HL,(D.F300)
	LD	A,H
	OR	L
	JR	NZ,J.4AAB
J$4AFC:	LD	HL,DBUF
I$4AFF:	LD	A,(D.F4D9)
	CP	L
	JR	Z,J$4B08
	LD	(D.F4D9),HL
J$4B08:	PUSH	BC
	PUSH	DE
	LD	DE,D.F4D9
	CALL	C.50E0			; buffered console input
	POP	DE
	POP	BC
	LD	HL,I$F4DB
	LD	A,(HL)
	CP	1AH
	JR	NZ,J.4AAB
	LD	(DE),A
	INC	DE
	LD	A,0AH	; 10 
	CALL	C.53A8
	XOR	A
	LD	H,A
	LD	L,A
	JR	J.4ABC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4B26:	CALL	C.487D
	JP	M,J$4ADA
	LD	L,(IY+16)
	LD	H,(IY+17)
D.4B30	EQU	$-2
	LD	DE,(D.F2F4)
	OR	A
	SBC	HL,DE
	PUSH	HL
	LD	L,(IY+18)
	LD	H,(IY+19)
	LD	DE,(D.F2F6)
	SBC	HL,DE
	POP	HL
	JP	C,J.4C95
	JR	NZ,J.4B59
	LD	A,H
	OR	L
	JP	Z,J.4C95
	PUSH	HL
	SBC	HL,BC
	POP	HL
	JR	NC,J.4B59
	LD	B,H
	LD	C,L
J.4B59:	CALL	C$F28E
	CALL	C.4959
	LD	BC,(D.F2EC)
	CALL	C.498C
	LD	A,B
	OR	C
	JP	NZ,J.4C95
	LD	(D.F2EC),HL
	LD	(D.F2EA),DE
	CALL	C.4A39
	LD	HL,(D.F2FC)
	LD	A,H
	OR	L
	JP	Z,J.4BDA
	CALL	C.4A7E
	JR	C,J.4BE0
	LD	A,01H	; 1 
	LD	(D.F2DF),A
	LD	A,(D.F2DD)
	LD	BC,(D.F2FC)
	LD	HL,(D.F2EC)
J$4B91:	PUSH	BC
	CALL	C.4E56
	PUSH	BC
	PUSH	AF
	LD	B,A
	CALL	C.46C5			; read sectors with error handling
	POP	AF
	LD	C,A
	LD	B,00H
	JR	C,J.4BBF
	LD	A,(D.F242)
	OR	A			; data buffer clean ?
	JR	Z,J.4BBF		; yep,
	PUSH	BC
	PUSH	HL
	LD	HL,(D.F23F)
	SBC	HL,DE
	LD	B,L
	LD	C,00H
	SLA	B
	POP	HL
	ADD	HL,BC
	LD	B,02H	; 2 
	EX	DE,HL
	LD	HL,(D.F34F)
	CALL	C.F1D9
	POP	BC
J.4BBF:	POP	DE
	POP	HL
	OR	A
	SBC	HL,BC
	JR	Z,J.4BDA
	LD	C,L
	LD	B,H
	LD	HL,0FF7H
	SBC	HL,DE
	JR	C,J.4BE0
	LD	HL,(D.F2EA)
	INC	HL
	LD	(D.F2EA),HL
	XOR	A
	EX	DE,HL
	JR	J$4B91
J.4BDA:	CALL	C.4A6E
	CALL	NC,C.4A39
J.4BE0:	CALL	C$F291
	LD	HL,(D.F2E2)
	LD	DE,(D.F23D)
	OR	A
	SBC	HL,DE
	LD	C,L
	LD	B,H
	LD	DE,128
	LD	A,(D.F306)
	OR	A			; CP/M function result compatibility ?
	JR	NZ,J$4BFE		; yep,
	LD	E,(IY+14)
	LD	D,(IY+15)
J$4BFE:	CALL	DIV16
	LD	A,H
	OR	L
	JR	Z,J$4C15
	INC	BC
	EX	DE,HL
	SBC	HL,DE
	LD	DE,(D.F2E2)
J$4C0D:	XOR	A
	LD	(DE),A
	INC	DE
	DEC	HL
	LD	A,H
	OR	L
	JR	NZ,J$4C0D
J$4C15:	LD	HL,(D.F2E8)
	SBC	HL,BC
	JR	Z,J.4C20
	INC	A
	LD	(D.F2DE),A
J.4C20:	CALL	C$F294
	LD	HL,(D.F2EC)
	LD	(IY+28),L
	LD	(IY+29),H
	LD	HL,(D.F2EA)
	LD	(IY+30),L
	LD	(IY+31),H
J.4C35:	LD	HL,(D.F2E4)
	LD	DE,(D.F2E6)
	LD	A,B
	OR	C
	RET	Z
	DEC	BC
	ADD	HL,BC
	INC	BC
	RET	NC
	INC	DE
	RET
J$4C45:	LD	HL,(D.F23D)
	OR	40H	; "@"
	INC	A
	JR	Z,J.4C71
	INC	A
	JR	Z,J.4C61
	INC	A
J$4C51:	JR	Z,J.4C7F
	LD	A,(HL)
	INC	HL
	CP	1AH
	JR	Z,J.4C7F
	CALL	C$5466
	DEC	BC
	LD	A,B
	OR	C
I$4C5F:	JR	J$4C51
J.4C61:	LD	A,(HL)
	INC	HL
	CALL	C$5475
I$4C64	EQU	$-2
	CP	1AH
	JR	Z,J.4C7F
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J.4C61
	JR	J.4C7F
J.4C71:	LD	A,(HL)
	INC	HL
	CP	1AH
	JR	Z,J.4C7F
	CALL	C.53A8
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J.4C71
J.4C7F:	LD	BC,(D.F2E8)
	JR	J.4C35
J$4C85:	LD	C,E
	LD	B,D
	CALL	C.49B4			; translate relative cluster number to absolute
	LD	A,B
	OR	C
	JP	Z,J.4D52
	CALL	C.4F17
	JP	NC,J.4D52
J.4C95:	CALL	C$F297
	XOR	A
	LD	C,A
	LD	B,A
	INC	A
	LD	(D.F2DE),A
	JR	J.4C35

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CA1:	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	CALL	C.472D
	CALL	C.45C4			; flush FAT buffer
	JP	J.75C5

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4CAF:	CALL	C.4CA1
	CALL	C.487D
	PUSH	AF
	PUSH	BC
	CALL	C.547D			; get time and date for directory entry
	LD	(IY+20),C
	LD	(IY+21),B
	LD	(IY+22),E
	LD	(IY+23),D
	POP	BC
	POP	AF
	JP	M,J$4C45
	RES	6,(IY+24)
	PUSH	BC
	CALL	C.4959
	POP	BC
	LD	HL,(D.F2F4)
	LD	DE,(D.F2F6)
	LD	A,B
	OR	C
	JP	Z,J$4DEE
	DEC	BC
	ADD	HL,BC
	JR	NC,J$4CE5
	INC	DE
J$4CE5:	SRL	D
	RR	E
	RR	H
	LD	L,H
	LD	H,E
	LD	B,(IX+7)		; cluster shift
	DEC	B
	JR	Z,J$4CF9
J$4CF3:	SRL	H
	RR	L
	DJNZ	J$4CF3
J$4CF9:	PUSH	HL
	LD	L,(IY+18)
	LD	H,(IY+19)
D$4D00:	LD	D,(IY+17)
	LD	C,D
	SRL	H
	RR	L
	RR	C
	LD	B,L
	LD	A,D
	AND	01H	; 1 
	LD	H,A
	LD	L,(IY+16)
	OR	L
	JR	Z,J$4D16
	INC	BC
J$4D16:	CALL	C$F29A
	LD	(D.F2F0),BC
	LD	BC,(D.F2EC)
	CALL	C.498C
	LD	(D.F2EC),HL
	LD	(D.F2EA),DE
	EX	(SP),HL
	OR	A
	SBC	HL,DE
	EX	DE,HL
	POP	HL
	JR	Z,J.4D52
	LD	A,B
	OR	C
	JP	Z,J$4C85
	PUSH	BC
	LD	C,E
	LD	B,D
	CALL	C.4F17
	POP	BC
	JP	C,J.4C95
	LD	DE,(D.F2EA)
	INC	DE
	DEC	BC
	CALL	C.49B4			; translate relative cluster number to absolute
	LD	(D.F2EC),HL
	LD	(D.F2EA),DE
J.4D52:	CALL	C.4A49
	LD	HL,(D.F2FC)
	LD	A,H
	OR	L
	JR	Z,J.4D9D
	LD	DE,(D.F2EE)
	ADD	HL,DE
	LD	(D.F2EE),HL
	CALL	C.4A7E
	LD	A,01H	; 1 
	LD	(D.F2DF),A
	LD	A,(D.F2DD)
	LD	HL,(D.F2EC)
	LD	BC,(D.F2FC)
J$4D76:	PUSH	BC
	CALL	C.4E56
	PUSH	BC
	PUSH	AF
	LD	B,A
	JR	C,J$4D84
	LD	A,0FFH
	LD	(D.F241),A		; data buffer drive id = invalid
J$4D84:	CALL	C.4755			; write sectors with error handling
	POP	AF
	POP	DE
	POP	HL
	LD	C,A
	XOR	A
	LD	B,A
	SBC	HL,BC
	JR	Z,J.4D9D
	LD	C,L
	LD	B,H
	LD	HL,(D.F2EA)
	INC	HL
	LD	(D.F2EA),HL
	EX	DE,HL
	JR	J$4D76
J.4D9D:	CALL	C$F29D
	CALL	C.4A6E
	CALL	NC,C.4A49
	LD	HL,(D.F2E2)
	LD	DE,(D.F23D)
	OR	A
	SBC	HL,DE
	LD	DE,(D.F2F4)
	ADD	HL,DE
	LD	DE,(D.F2F6)
	JR	NC,J$4DBC
	INC	DE
J$4DBC:	LD	(D.F2F4),HL
	LD	(D.F2F6),DE
	LD	C,(IY+16)
	LD	B,(IY+17)
	OR	A
	SBC	HL,BC
	LD	C,(IY+18)
	LD	B,(IY+19)
	EX	DE,HL
	SBC	HL,BC
	JR	C,J$4DE7
J$4DD7:	PUSH	IY
	POP	HL
	LD	DE,16
	ADD	HL,DE
	EX	DE,HL
	LD	HL,D.F2F4
	LD	BC,4
	LDIR
J$4DE7:	LD	BC,(D.F2E8)
	JP	J.4C20
J$4DEE:	LD	A,H
	OR	L
	OR	D
	OR	E
	JR	Z,J$4E40
	LD	BC,1
	SBC	HL,BC
	EX	DE,HL
	DEC	BC
	SBC	HL,BC
	SRL	H
	RR	L
	RR	D
	LD	C,D
	LD	B,L
	LD	A,(IX+7)		; cluster shift
J$4E08:	DEC	A
	JR	Z,J$4E11
	SRL	B
	RR	C
	JR	J$4E08
J$4E11:	CALL	C.498C
	LD	A,B
	OR	C
	JR	Z,J$4E34
	CALL	C.4F17
	JP	C,J.4C95
J.4E1E:	LD	BC,0
	LD	(D.F2E8),BC
	LD	(D.F2EA),BC
	LD	L,(IY+26)
	LD	H,(IY+27)
	LD	(D.F2EC),HL
	JR	J$4DD7

J$4E34:	LD	BC,0FFFH
	CALL	C.4F7D
J$4E3A:	DEC	DE
	LD	A,1
	LD	(DE),A			; mark FAT buffer dirty
	JR	J.4E1E
J$4E40:	LD	L,(IY+26)
	LD	H,(IY+27)
	LD	A,H
	OR	L
	JR	Z,J.4E1E
	XOR	A
	LD	(IY+26),A
	LD	(IY+27),A
	CALL	C.4F7A
	JR	J$4E3A

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4E56:	CALL	C$F2A0
	LD	D,A
	PUSH	HL
	INC	B
	DEC	B
	JR	Z,J$4E61
	LD	C,0FFH
J$4E61:	LD	E,C
	PUSH	DE
	LD	A,(IX+6)		; cluster mask
	LD	(D.F2DD),A
	INC	A
	SUB	D
	LD	B,A
J$4E6C:	LD	(D.F2EC),HL
	PUSH	HL
	CALL	C.74E5			; get FAT entry content (with hook)
	POP	DE
	LD	A,C
	SUB	B
	LD	C,A
	JR	Z,J.4E86
	LD	B,(IX+6)		; cluster mask
	JR	C,J$4ED2
	INC	B
	INC	DE
	EX	DE,HL
	SBC	HL,DE
	EX	DE,HL
	JR	Z,J$4E6C
J.4E86:	POP	DE
	EX	(SP),HL
	PUSH	HL
	PUSH	DE
	LD	A,E
	SUB	C
	LD	E,A
	LD	D,00H
	ADD	A,A
	LD	B,A
	LD	C,D
	POP	AF
	LD	HL,(D.F2E2)
	PUSH	HL
	ADD	HL,BC
	LD	(D.F2E2),HL
	POP	BC
	POP	HL
	PUSH	BC
	PUSH	DE
	EX	DE,HL
	LD	HL,(D.F2EC)
	SBC	HL,DE
	LD	BC,(D.F2EA)
	ADD	HL,BC
	LD	(D.F2EA),HL
	EX	DE,HL
	CALL	C.4EE3
	EX	DE,HL
	POP	BC
	LD	A,(D.F241)		; data buffer drive id
	CP	(IX+0)			; same drive id ?
	LD	A,C
	SCF
	JR	NZ,J.4ECF		; nope,
	LD	HL,(D.F23F)
	OR	A
	SBC	HL,DE
	JR	C,J.4ECF
	LD	H,B
	LD	L,C
	DEC	HL
	ADD	HL,DE
	LD	BC,(D.F23F)
	SBC	HL,BC
J.4ECF:	POP	HL
	POP	BC
	RET
J$4ED2:	ADD	A,B
	LD	(D.F2DD),A
	LD	C,00H
	JR	J.4E86

;	  Subroutine get pointer to drive driver work area
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EDA:	CALL	C.5FEF			 ; get pointer to driver workarea

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4EDD:	LD	DE,14
	ADD	IX,DE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4EE2:	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EE3:	CALL	C$F2A3
	PUSH	BC
	LD	B,(IX+7)		; cluster shift
	DEC	HL
	DEC	HL
J$4EEC:	DEC	B
	JR	Z,J$4EF2
	ADD	HL,HL
	JR	J$4EEC
J$4EF2:	OR	L
	LD	L,A
	LD	C,(IX+12)
	LD	B,(IX+13)
	ADD	HL,BC
	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4EFD:	PUSH	DE
	POP	IY
	LD	C,(IY+32)
	LD	B,(IY+12)
	LD	E,(IY+14)
	LD	D,00H
	SLA	C
	SRL	E
	RR	B
	RR	C
	LD	HL,1
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F17:	CALL	C$F2A6
	PUSH	HL
J$4F1B:	PUSH	BC
	PUSH	HL
	LD	D,H
	LD	E,L
J.4F1F:	PUSH	DE
	EX	DE,HL
	LD	L,(IX+14)
	LD	H,(IX+15)		; number of clusters+1
	DEC	HL
	OR	A
	SBC	HL,DE
	EX	DE,HL
	POP	DE
	JR	NC,J$4F3E
	LD	A,E
	OR	D
	JR	NZ,J$4F46
	POP	HL
	POP	HL
	POP	HL
	LD	BC,0FFFH
	CALL	C.4F7D
	SCF
	RET
J$4F3E:	INC	HL
	CALL	C.4F4E
	LD	A,E
	OR	D
	JR	Z,J.4F1F
J$4F46:	DEC	DE
	EX	DE,HL
	CALL	C.4F4E
	EX	DE,HL
	JR	J.4F1F

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F4E:	PUSH	HL
	PUSH	DE
	CALL	C.74E5			; get FAT entry content (with hook)
	POP	DE
	POP	HL
	RET	NZ
	POP	BC
	LD	C,L
	LD	B,H
	EX	(SP),HL
	CALL	C.74D1
	POP	HL
	POP	BC
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$4F1B
	LD	BC,0FFFH
	CALL	C.74D1
	POP	HL
	PUSH	HL
	CALL	C.74E5			; get FAT entry content (with hook)
	POP	BC
	LD	A,C
	OR	B
	RET	NZ
	LD	(IY+26),L
	LD	(IY+27),H
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.4F7A:	LD	BC,0
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.4F7D:	CALL	C$F2A9
	PUSH	HL
	CALL	C.74E5			; get FAT entry content (with hook)
	EX	(SP),HL
	CALL	C.74D1
	POP	HL
	LD	A,H
	OR	L
	RET	Z
	LD	A,H
	CP	HIGH 0FF8H
	JR	C,C.4F7A
	LD	A,L
	CP	LOW 0FF8H
	JR	C,C.4F7A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$4F97:	LD	A,(D.F347)
	OR	A			; total number of drives = 0 ?
	SCF
	RET	Z			; yep, quit with error
	CP	C			; drive id valid ?
	RET
I$4F9F:	DEFB	1,2,3,4,5,6,7,8,9
I$4FA8:	DEFB	1,6,2,7,3,8,4,9,5

;	  Subroutine CALL CHKDSK
;	     Inputs  ________________________
;	     Outputs ________________________

C.4FB1:	PUSH	HL
	CALL	C$7E74
	POP	HL
	XOR	A
	RET

;	  Subroutine BDOS search for first
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	4FB8H

SRCHFR:
C.4FB8:	CALL	C.429C
J$4FBB:	JR	C,J.5000
	LD	A,(D.F2B8)
	JR	Z,J$4FC4
	LD	A,0FFH
J$4FC4:	LD	(D.F30B),A
	LD	(D.F309),IX
	LD	DE,(D.F23D)
	LD	A,(D.F2E1)
	INC	A
	LD	(DE),A
	INC	DE
	LD	A,(HL)
	CP	05H	; 5 
	JR	NZ,J$4FDC
	LD	(HL),0E5H
J$4FDC:	LD	BC,32
	CALL	C.F1D9
	CALL	C.4438
	LD	A,(D.F30C)
	CP	B
	JR	Z,J$4FEF
	JR	NC,J.5000
	LD	C,80H
J$4FEF:	LD	HL,(D.F23D)
	LD	DE,12
	ADD	HL,DE
	LD	B,(HL)
	LD	(HL),A
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),C
	XOR	A
	RET
J.5000:	LD	A,0FFH
	LD	(D.F30B),A
	RET

;	  Subroutine BDOS search for next
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5006H

SRCHNX:
C.5006:	CALL	C.440E
	JR	C,J.5000
	LD	A,(D.F30B)
	CP	0FFH
	JR	Z,J.5000
	LD	(D.F2B8),A
	LD	IX,(D.F309)
	CALL	C.42B3
	JR	J$4FBB

;	  Subroutine BDOS compute file size
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	501EH

FILESI:
C.501E:	CALL	C.429C
	LD	A,0FFH
	RET	C
	PUSH	DE
	POP	IX
	LD	A,(IY+28)
	LD	C,(IY+29)
	LD	B,(IY+30)
	LD	E,(IY+31)
	ADD	A,A
	RL	C
	RL	B
	RL	E
	OR	A
	JR	Z,J.5043
	INC	BC
	LD	A,B
	OR	C
	JR	NZ,J.5043
	INC	E
J.5043:	LD	(IX+33),C
	LD	(IX+34),B
	LD	(IX+35),E
	XOR	A
	RET

;	  Subroutine BDOS return bitmap of logged-in disks
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	504EH

LOGIN:
C.504E:	LD	A,(D.F347)
	LD	B,A			; total number of drives
	XOR	A
J$5053:	SCF
	RLA
	DJNZ	J$5053			; create bitmap
	RET

;	  Subroutine BDOS set DMA address
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5058H

SETDMA:
C.5058:	LD	(D.F23D),DE
	RET

;	  Subroutine BDOS disk allocation information
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	505DH

GETEFA:
C.505D:	XOR	A
	LD	(D.F306),A		; no CP/M function result compatibility
	LD	A,E
	CALL	C.4427
	LD	A,0FFH
	RET	C
	CALL	C.44DB
	LD	HL,2			; cluster number = 2
	LD	B,H
	LD	C,H			; number of free clusters = 0
	LD	E,(IX+14)
	LD	D,(IX+15)		; number of clusters+1
	LD	A,(IX+6)		; cluster mask
	INC	A			; sectors per cluster
	DEC	DE			; number of clusters
	PUSH	AF			; store sectors per cluster
	PUSH	DE			; store number of clusters
	CALL	C$75F6			; determine number of free clusters
	LD	H,B
	LD	L,C			; number of free clusters
	POP	DE			; restore number of clusters
	POP	AF			; restore sectors per cluster
	LD	BC,SECLEN
	RET

;	  Subroutine wait for 5 maskable interrupts
;	     Inputs  ________________________
;	     Outputs ________________________

C.5088:	EI
	LD	B,5
J$508B:	HALT
	DJNZ	J$508B
	DI
	RET

; relocation table disable I/O ports routine
I$5090:	DEFB	25H
	DEFB	05H
	DEFB	08H
	DEFB	05H
	DEFB	0FFH

;	  Subroutine MTOFF
;	     Inputs  ________________________
;	     Outputs ________________________

MTOFF:
C.5095:	PUSH	AF
	CALL	C.517F			; enable I/O ports
	XOR	A
	OUT	(0D4H),A		; motor off, side 0, unselect drive
	JP	J$79DF			; disable I/O ports of interface in current slot when two or more DDX or FAST disk interfaces

;	  Subroutine BDOS reset disks
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	509FH

DSKRES:
C.509F:	LD	HL,DBUF
	LD	(D.F23D),HL
	XOR	A
	LD	(D.F247),A		; current drive id = 0

	_DOSCP	50A9H

WRTFAT:	CALL	C.472D
	CALL	C.45C4			; flush FAT buffer
	XOR	A
	RET

; relocation table sector I/O routine

I$50B1:	DEFB	10H
	DEFB	11H
	DEFB	1CH
	DEFB	26H
	DEFB	24H
	DEFB	07H
	DEFB	06H
	DEFB	06H
	DEFB	03H
	DEFB	16H
	DEFB	03H
	DEFB	24H
	DEFB	05H
	DEFB	13H
	DEFB	0BH
	DEFB	04H
	DEFB	03H
	DEFB	51H
	DEFB	0FFH

;	  Subroutine BDOS return current disk
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	50C4H

GETDRV:
C.50C4:	LD	A,(D.F247)		; current drive id
	RET

;	  Subroutine BDOS update random access pointer
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	50C8H

SETRND:
C.50C8:	CALL	C.4EFD
	LD	(IY+33),L
	LD	(IY+34),H
	LD	(IY+35),E
	RET

;	  Subroutine BDOS select disk
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	50D5H

SELDSK:
C.50D5:	LD	A,(D.F347)
	CP	E			; valid drive id ?
	RET	C			; nope, quit
	RET	Z			; nope, quit
	LD	HL,D.F247
	LD	(HL),E			; update current drive id
	RET

;	  Subroutine BDOS buffered console input
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	50E0H

BUFIN:
C.50E0:	PUSH	DE
	LD	A,(D.F237)
	LD	(D.F238),A
	XOR	A
	LD	(D.F239),A
	LD	H,D
	LD	L,E
	LD	B,A
	LD	C,(HL)
	INC	HL
	LD	D,A
	LD	E,(HL)
	INC	HL
	LD	IX,I.F459
	LD	A,E
	CP	C
	JR	NC,J$5103
	PUSH	HL
	ADD	HL,DE
	LD	A,(HL)
	POP	HL
	CP	0DH	; 13 
	JR	Z,C.5104
J$5103:	LD	E,D
C.5104:	CALL	C$F2AC
	CALL	C.544E			; direct console input (with control keys)
J.510A:	PUSH	HL
	PUSH	BC
	LD	HL,I$5374
	LD	BC,NKEYNT
	CPIR
	ADD	HL,BC
	ADD	HL,BC
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,C
	POP	BC
	EX	(SP),HL
	RET

C.511E:	CALL	C.544E			; direct console input (with control keys)
	CP	40H
	JR	C,J.510A
	CP	60H
	JR	NC,J.510A
	PUSH	AF
	LD	A,B
	INC	A
	CP	C
	JR	NC,J.515E
	LD	A,1
	LD	(IX+0),A
	INC	IX
	INC	B
	CALL	C.535D
	POP	AF

; lineinput, normal key action
C.513B:	PUSH	AF
	LD	A,B
	CP	C
	JR	NC,J.515E
	POP	AF
	LD	(IX+0),A
	INC	IX
	INC	B
	CALL	C.535D
	LD	A,(D.F239)
	OR	A
	JR	NZ,C.5104
	INC	D
	LD	A,E
	CP	D
	JR	C,C.5104
	LD	A,(HL)
	DEC	A
	INC	HL
	JR	NZ,C.5104
	INC	D
	INC	HL
	JR	C.5104
J.515E:	POP	AF
	LD	A,07H	; 7 
	CALL	C.53A8
	JR	C.5104

C.5166:	POP	DE
	LD	A,(D.F238)
	LD	B,A
	LD	A,(D.F237)
	SUB	B
	JR	Z,J$5177
	LD	B,A
J$5172:	CALL	C.531E
	DJNZ	J$5172
J$5177:	JP	C.50E0			; buffered console input
C.517A:	CALL	C.5183

J.517D:	JR	C.5104

;	  Subroutine enable I/O ports
;	     Inputs  ________________________
;	     Outputs ________________________

C.517F:	LD	(D.6205),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5183H

CRLF:
C.5183:	LD	A,0DH	; 13 
	CALL	C.53A8
	LD	A,0AH	; 10 
	JP	C.53A8

C.518D:	POP	DE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$518E:	CALL	C.53A8
	PUSH	DE
	INC	DE
	LD	A,B
	LD	(DE),A
	CP	C
	PUSH	AF
	INC	DE
	LD	C,B
	XOR	A
	LD	B,A
	OR	C
	JR	Z,J$51A3
	LD	HL,I.F459
	LDIR
J$51A3:	POP	AF
	JR	Z,J$51A9
	LD	A,0DH	; 13 
	LD	(DE),A
J$51A9:	POP	DE
	RET

C.51AB:	INC	B
	DEC	B
	JR	Z,J.51D3
	DEC	B
	DEC	IX
	CALL	C.531E
	INC	B
	DEC	B
	JR	Z,J$51C5
	DEC	B
	DEC	IX
	LD	A,(IX+0)
	DEC	A
	JR	Z,J.51D3
	INC	B
	INC	IX
J$51C5:	LD	A,(IX+0)
	CP	20H	; " "
	JR	NC,J.51D3
	CP	09H	; 9 
	JR	Z,J$51F2
	CALL	C.531E
J.51D3:	LD	A,(D.F239)
	OR	A
	JR	NZ,J.517D
	INC	D
	DEC	D
	JR	Z,J.517D
	DEC	D
	LD	A,D
	CP	E
	JR	NC,J.517D
	DEC	HL
	LD	A,D
	CP	01H	; 1 
	JR	C,J.517D
	DEC	HL
	LD	A,(HL)
	DEC	A
	INC	HL
	JR	NZ,J.517D
	DEC	D
	DEC	HL
	JR	J.517D
J$51F2:	PUSH	HL
	PUSH	BC
	LD	A,(D.F238)
	LD	C,A
	INC	B
	DEC	B
	JR	Z,J$5211
	LD	HL,I.F459
J$51FF:	LD	A,(HL)
	INC	HL
	CP	01H	; 1 
	JR	Z,J.520F
	INC	C
	CP	20H	; " "
	JR	NC,J.520F
	CP	09H	; 9 
	JR	Z,J$5221
	INC	C
J.520F:	DJNZ	J$51FF
J$5211:	LD	A,(D.F237)
	SUB	C
	JR	Z,J$521D
	LD	B,A
J$5218:	CALL	C.531E
I$521B:	DJNZ	J$5218
J$521D:	POP	BC
	POP	HL
I.521F:	JR	J.51D3
J$5221:	LD	A,C
	ADD	A,07H	; 7 
	AND	0F8H
	LD	C,A
	JR	J.520F

C.5229:	LD	A,(D.F239)
	XOR	01H	; 1 
	LD	(D.F239),A
	JP	C.5104

C.5234:	LD	A,40H	; "@"
	POP	DE
	CALL	C$518E
	CALL	C.5183
	LD	A,(D.F238)
	OR	A
	JP	Z,C.50E0		; buffered console input
	LD	B,A
	LD	A,20H	; " "
J$5247:	CALL	C.53A8
	DJNZ	J$5247
	JP	C.50E0			; buffered console input

C.524F:	LD	A,0FFH
	JR	J.5284

C.5253:	CALL	C.52B2
	JP	C,C.5104
	PUSH	BC
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	POP	BC
	ADD	A,D
	LD	D,A
	JP	C.5104

C.5264:	CALL	C.52B2
	JP	C,C.5104
	JR	J.5284

C.526C:	LD	A,D
	CP	E
	JP	NC,C.5104
	INC	D
	LD	A,(HL)
	DEC	A
	INC	HL
	JP	NZ,C.5104
	INC	D
	INC	HL
	JP	C.5104

C.527D:	LD	A,(HL)
	DEC	A
	LD	A,01H	; 1 
	JR	NZ,J.5284
	INC	A
J.5284:	PUSH	AF
	XOR	A
	LD	(D.F239),A
	LD	A,B
	CP	C
	JR	NC,J.52AE
	LD	A,D
	CP	E
	JR	NC,J.52AE
	LD	A,(HL)
	CP	01H	; 1 
	JR	NZ,J$529C
	LD	A,B
	INC	A
	CP	C
	JR	NC,J.52AE
	LD	A,(HL)
J$529C:	INC	HL
	LD	(IX+0),A
	INC	IX
	CALL	C.535D
	INC	B
	INC	D
	POP	AF
	DEC	A
	JR	NZ,J.5284
	JP	C.5104
J.52AE:	POP	AF
	JP	C.5104

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.52B2:	CALL	C.544E			; direct console input (with control keys)
	CP	01H	; 1 
	JR	NZ,C.52EE
	CALL	C.544E			; direct console input (with control keys)
	CP	40H	; "@"
	JR	C,C.52EE
	CP	60H	; "`"
	JR	NC,C.52EE
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	IY,0
J$52CB:	SCF
	PUSH	AF
	LD	A,01H	; 1 
	CALL	C.52EE
	JR	C,J$52E9
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	ADD	A,D
	LD	D,A
	PUSH	IY
	POP	AF
	ADD	A,C
	PUSH	AF
	POP	IY
	INC	HL
	POP	AF
	CP	(HL)
	DEC	HL
	JR	NZ,J$52CB
	PUSH	IY
J$52E9:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.52EE:	PUSH	BC
	PUSH	AF
	LD	A,E
	SUB	D
	JR	C,J.531A
	JR	Z,J.531A
	DEC	A
	JR	Z,J.531A
	LD	C,A
	LD	B,00H
	POP	AF
	PUSH	HL
	PUSH	AF
	LD	A,(HL)
	DEC	A
	JR	NZ,J$5305
	INC	HL
	DEC	C
J$5305:	POP	AF
	INC	C
	DEC	C
	JR	NZ,J$530E
	POP	HL
	POP	BC
	SCF
	RET
J$530E:	INC	HL
	CPIR
	POP	HL
	JR	NZ,J$531B
	LD	A,E
	SUB	D
	DEC	A
	SUB	C
	POP	BC
	RET
J.531A:	POP	AF
J$531B:	POP	BC
	SCF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.531E:	LD	A,08H	; 8 
	CALL	C.53A8
	LD	A,20H	; " "
	CALL	C.53A8
	LD	A,08H	; 8 
	JR	C.53A8

;	  Subroutine get number of physical drives
;	     Inputs  ________________________
;	     Outputs ________________________

C.532C:	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	CALL	C.4EDA			; get pointer to drive driver work area
	LD	BC,4*256+0		; 4 disk drives, physical drives = 0
J$5337:	LD	A,(IX+0)
	INC	A			; disk drive connected ?
	JR	Z,J$533E		; nope,
	INC	C			; update number of physical drives
J$533E:	INC	IX
	DJNZ	J$5337			; next disk drive
	LD	A,C
	POP	IX
	POP	HL
	POP	DE
	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5349:	LD	BC,12*256+0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.534C:	LD	(HL),C
	INC	HL
	DJNZ	C.534C
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5351:	LD	C,4EH
	JR	C.534C

?.5355:	NOP
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C.5356:	LD	A,D
;
;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________
;
C$5357:	DEC	A			; to drive id
	RET	P
	LD	A,(D.F247)		; use current drive id
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	535DH

BUFOUT:
C.535D:	CP	20H	; " "
	JR	NC,C.53A8
	CP	09H	; 9 
	JR	Z,C.53A8
	CP	01H	; 1 
	JR	Z,C.53A8
	PUSH	AF
	LD	A,5EH	; "^"
	CALL	C.53A8
	POP	AF
	OR	40H	; "@"
	JR	C.53A8
I$5374:	DEFB    006H,07FH,008H,00DH,00AH,015H,00BH,00CH
        DEFB    01BH,012H,018H,01CH,01DH,01EH,01FH,001H
        DEFB    008H

        DEFW    C.513B
        DEFW    C.511E,C.524F,C.5166,C.51AB,C.527D,C.5264,C.5229,C.5166
        DEFW    C.5253,C.5234,C.5166,C.517A,C.518D,C.51AB,C.526C,C.5104

NKEYNT  EQU     ($-I$5374)/3

;	  Subroutine BDOS console output
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	53A7H

CONOUT:
C.53A7:	LD	A,E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.53A8:	CALL	C$F2AF
	CP	0BH	; 11 
	JR	Z,J.53E8
	CP	0CH	; 12 
	JR	Z,J.53E8
	CP	1CH
	JR	Z,J.53D5
	CP	1DH
	JR	Z,J.53F0
	CP	0DH	; 13 
	JR	Z,J.53E8
	CP	08H	; 8 
	JR	Z,J.53F0
	CP	09H	; 9 
	JR	Z,J.53F8
	CP	7FH
	JR	Z,J.53F0
	CP	20H	; " "
	JR	C,J.53D5
	PUSH	HL
	LD	HL,D.F237
	INC	(HL)
	POP	HL
J.53D5:	PUSH	BC
	LD	B,A
	CALL	C.5412
	LD	A,B
	CALL	C.408F			; character to screen
	LD	A,(D.F23B)
	OR	A
	LD	A,B
	POP	BC
	RET	Z
	JP	J.409F			; character to printer
J.53E8:	PUSH	AF
	XOR	A
	LD	(D.F237),A
	POP	AF
	JR	J.53D5

J.53F0:	PUSH	HL
	LD	HL,D.F237
	DEC	(HL)
	POP	HL
	JR	J.53D5

J.53F8:	LD	A,20H	; " "
	CALL	C.53A8
	LD	A,(D.F237)
	AND	07H	; 7 
	JR	NZ,J.53F8
	RET

J$5405:	CP	10H
	JR	Z,C.541D
	CP	0EH
	JR	Z,C.541D
	CP	03H
	JR	Z,C.541D
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5412:	CALL	C.4034
	RET	Z
	CP	13H
	JR	NZ,J$5405
	CALL	C.4078			; get key (use stored if any)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.541D:	CALL	C.4078			; get key (use stored if any)
	CP	10H
	JR	Z,J$5431
	CP	0EH
	JR	Z,J$5437
	CP	3
	RET	NZ
	LD	HL,(D.F325)		; pointer to address abort handler
	JP	C.F1E8
J$5431:	LD	A,1
	LD	(D.F23B),A
	RET
J$5437:	XOR	A
	LD	(D.F23B),A
	RET

;	  Subroutine BDOS console status
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	543CH

CONSTA:
C.543C:	CALL	C.5412
	LD	A,00H
	RET	Z
	OR	0FFH
	RET

;	  Subroutine BDOS console input
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5445H

CONIN:
C.5445:	CALL	C.544E			; direct console input (with control keys)
	PUSH	AF
	CALL	C.53A8
	POP	AF
	RET

;	  Subroutine BDOS direct console input (with control keys)
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	544EH

IN:
C.544E:	CALL	C.541D
	JR	Z,C.544E
	RET

;	  Subroutine BDOS direct console I/O
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5454H

RAWIO:
C.5454:	LD	A,E
	CP	0FFH			; direct console input ?
	JP	NZ,C.408F		; nope, character to screen
	CALL	C.4034
	JP	NZ,C.4078		; get key (use stored if any)
	XOR	A
	RET

;	  Subroutine BDOS direct console input (without control keys)
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5462H

RAWINP:
C.5462:	JP	C.4078			; get key (use stored if any)

;	  Subroutine BDOS printer output
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5465H

LIST:
C.5465:	LD	A,E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5466:	PUSH	AF
	CALL	C.5412
	POP	AF
	JP	J.409F			; character to printer

;	  Subroutine BDOS reader input
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	546EH

READER:
C.546E:	CALL	C.5412
	JP	J$F371

;	  Subroutine BDOS punch output
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5474H

PUNCH:
C.5474:	LD	A,E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5475:	PUSH	AF
	CALL	C.5412
	POP	AF
	JP	J$F374

;	  Subroutine get time and date for directory entry
;	     Inputs  ________________________
;	     Outputs ________________________

C.547D:	CALL	C$F2B2
	CALL	C.54A7
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	RL	B
	ADD	A,A
	RL	B
	ADD	A,A
	RL	B
	SRL	D
	OR	D
	LD	E,A
	LD	D,B
	LD	BC,(D.F249)		; month, year
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	RL	B
	LD	C,A
	LD	A,(D.F248)		; day
	OR	C
	LD	C,A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.54A7:	CALL	C$417B
	JR	C,J$54F2
	PUSH	DE
	PUSH	HL
	LD	DE,(D.F24C)
	OR	A
	SBC	HL,DE
	POP	HL
	POP	DE
	RET	Z
	LD	(D.F24C),HL
	PUSH	BC
	PUSH	DE
	LD	C,L
	LD	B,H
	LD	DE,1461
	CALL	DIV16
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,0
	LD	DE,I.551B
	CALL	C.54FC
	SRL	A
	JR	NC,J$54D9
	LD	DE,200
	ADD	HL,DE
J$54D9:	CALL	C.550A
	LD	A,1
	LD	DE,I.F22B
	CALL	C.54FC
	LD	(D.F249),A		; update month
	INC	L
	LD	A,L
	LD	(D.F248),A		; update day
J$54EC:	CALL	C$5588
	POP	DE
	POP	BC
	RET
J$54F2:	PUSH	BC
	PUSH	DE
	LD	HL,(D.F24A)		; year
I$54F7:	CALL	C.559D
	JR	J$54EC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.54FC:	EX	DE,HL
	LD	C,(HL)
	INC	HL
	EX	DE,HL
	OR	A
	SBC	HL,BC
	JR	C,J$5508
	INC	A
	JR	C.54FC
J$5508:	ADD	HL,BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.550A:	CALL	C$F2B5
	LD	(D.F24A),A		; update year

;	  Subroutine update number of days in februari
;	     Inputs  ________________________
;	     Outputs ________________________

C$5510:	AND	03H
	LD	A,28
	JR	NZ,J$5517
	INC	A
J$5517:	LD	(I.F22B+1),A
	RET
I.551B:	DEFB	200
	DEFB	166
	DEFB	200
	DEFB	165
	DEFB	200
	DEFB	165
	DEFB	200
	DEFB	165
I$5523:	DEFW	512			; sector size
	DEFB	00FH			; directory mask
	DEFB	004H			; directory shift
	DEFB	000H			; cluster mask
	DEFB	000H			; cluster shift
	DEFW	1			; first FAT sector
	DEFB	2			; number of FATs

; number of clusters table
I$552C:	DEFW	0163H			; media 0F8H
	DEFW	02CAH			; media 0F9H
	DEFW	013CH			; media 0FAH
	DEFW	027BH			; media 0FBH
	DEFW	0160H			; media 0FCH
	DEFW	0163H			; media 0FDH
	DEFW	013AH			; media 0FEH
	DEFW	013CH			; media 0FFH

;	  Subroutine BDOS get date
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	553CH

GETDAT:
C.553C:	XOR	A
	LD	(D.F306),A
	CALL	C.54A7
	LD	HL,(D.F24A)		; year
	LD	DE,1980
	ADD	HL,DE
	LD	DE,(D.F248)		; day, month
	LD	A,(D.F24E)
	RET

;	  Subroutine BDOS set date
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	5552H

SETDAT:
C.5552:	LD	BC,I$F844
	ADD	HL,BC
	JR	NC,J.559A
	LD	A,H
	OR	A
	JR	NZ,J.559A
	LD	A,L
	CP	78H	; "x"
	JR	NC,J.559A
	CALL	C$5510			; update number of days in februari
	INC	E
	DEC	E
	JR	Z,J.559A
	LD	A,D
	OR	A
	JR	Z,J.559A
	CP	13
	JR	NC,J.559A
	PUSH	HL
	LD	HL,I.F22B-1
	ADD	A,L
	LD	L,A
	JR	NC,J$5579
	INC	H
J$5579:	LD	A,(HL)
	POP	HL
	CP	E
	JR	C,J.559A
	LD	(D.F248),DE		; update day, month
	CALL	C.559D
	CALL	C$4115

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5588:	LD	BC,(D.F24C)
	LD	DE,7
	INC	BC
	INC	BC
	CALL	DIV16
	LD	A,L
	LD	(D.F24E),A
I$5597	EQU	$-1
	XOR	A
	RET
J.559A:	LD	A,0FFH
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.559D:	LD	A,L
	CALL	C.550A
	LD	C,L
	SRL	C
	SRL	C
	LD	B,0
	LD	DE,1461
	CALL	C.491C			; multiply
	LD	L,C
	LD	H,B
	LD	A,(D.F24A)		; year
	AND	03H
	ADD	A,A
	LD	DE,I.551B
	LD	B,0
	INC	A
	CALL	C.55D2
	LD	DE,I.F22B
	LD	A,(D.F249)		; month
	CALL	C.55D2
	LD	A,(D.F248)		; day
	DEC	A
	LD	C,A
	ADD	HL,BC
	LD	(D.F24C),HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.55D2:	DEC	A
	RET	Z
	EX	DE,HL
	LD	C,(HL)
	INC	HL
	EX	DE,HL
	ADD	HL,BC
	JR	C.55D2

;	  Subroutine BDOS get time
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	55DBH

GETTIM:
C.55DB:	XOR	A
	LD	(D.F306),A		; no CP/M function result compatibility
	CALL	C.54A7
	LD	H,B
	LD	L,C
	XOR	A
	RET

;	  Subroutine BDOS set time
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	55E6H

SETTIM:
C.55E6:	LD	B,H
	LD	C,L
	LD	A,B
	CP	18H
	JR	NC,J.559A
	LD	A,3BH	; ";"
	CP	C
	JR	C,J.559A
	CP	D
	JR	C,J.559A
	LD	A,E
	CP	64H	; "d"
	JR	NC,J.559A
	CALL	C$4130
	XOR	A
	RET

;	  Subroutine BDOS set verify flag
;	     Inputs  ________________________
;	     Outputs ________________________

	_DOSCP	55FFH

SETRAW:
C.55FF:	LD	A,E
	LD	(D.F30D),A		; update read after write flag
	RET

;	  Subroutine 
;	     Inputs  ________________________
;	     Outputs ________________________

J$5604:	LD	A,(HL)			; file name character
	CP	" "			; file name start with a space ?
	SCF
	RET	Z			; yep, quit with error
	LD	BC,256*8+2		; file name = 8 characters, parts = 2
	CP	0E5H			; character used for deleted directory entry ?
	JR	NZ,J.5622		; nope,
	LD	A,05H
	LD	(DE),A			; use replacement character
	INC	HL
	INC	DE
	DEC	B
	LD	A,0E5H			; character used for deleted directory entry
	CALL	C.5681			; is double byte header character ?
	JR	NC,J.5622		; nope,
	LD	A,(HL)
	LD	(DE),A			; 2nd character of double byte character
	INC	HL
	INC	DE
	DEC	B
J.5622:	LD	A,(HL)			; file name character
	CALL	C.5681			; is double byte header character ?
	JR	NC,J$5631		; nope,
	LD	(DE),A
	INC	HL
	INC	DE
	DEC	B
	SCF
	RET	Z			; no more characters, quit with error
	LD	A,(HL)			; 2nd character of double byte character
	JR	J$5667			; store and continue
J$5631:	LD	A,(D.F30E)
	AND	A			; japanese date format ?
	LD	A,(HL)
	JR	Z,J.564C		; yep, skip translate
	CP	80H			; ASCII character ?
	JR	C,J.564C		; yep, skip translate
	CP	0BAH			; non letter character ?
	JR	NC,J.564C		; yep, skip translate
	PUSH	HL
	PUSH	BC
	LD	C,A
	LD	B,0
	LD	HL,I.5696-80H
	ADD	HL,BC
	LD	A,(HL)
	POP	BC
	POP	HL			; translate character
J.564C:	CP	"a"			; ASCII letter character ?
	JR	C,J.5656		; nope,
	CP	"z"+1			; ASCII letter character ?
	JR	NC,J.5656		; nope,
	SUB	20H			; to upper
J.5656:	CP	20H			; control character ?
	RET	C			; yep, quit with error
	PUSH	HL
	PUSH	BC
	LD	HL,I$5677
	LD	BC,S.5677
	CPIR
	POP	BC
	POP	HL			; illegal character ?
	SCF
	RET	Z			; yep, quit with error
J$5667:	LD	(DE),A
	INC	HL
	INC	DE
	DJNZ	J.5622			; next file name character
	LD	B,3			; file extension = 3 characters
	DEC	C			; finished with file extension ?
	JR	NZ,J.5622		; nope, continue with file extension
	OR	A			; clear Cx (no error)
	LD	A,(HL)
	LD	(D.F30C),A
	RET
I$5677:	DEFB	".",34,"/[]:+=;,"
S.5677	EQU	$-I$5677

;	  Subroutine is double byte header character ?
;	     Inputs  ________________________
;	     Outputs ________________________

C.5681:	PUSH	HL
	LD	HL,I.F30F
	CP	(HL)
	CCF
	JR	NC,J.5694
	INC	HL
	CP	(HL)
	JR	C,J.5694
	INC	HL
	CP	(HL)
	CCF
	JR	NC,J.5694
	INC	HL
	CP	(HL)
J.5694:	POP	HL
	RET

I.5696:	DEFB    080H,09AH,"E" ,"A" ,08EH,"A" ,08FH,080H
        DEFB    "E" ,"E" ,"E" ,"I" ,"I" ,"I" ,08EH,08FH
        DEFB    090H,092H,092H,"O" ,099H,"O" ,"U" ,"U"
        DEFB    "Y" ,099H,09AH,09BH,09CH,09DH,09EH,09FH
        DEFB    "A" ,"I" ,"O" ,"U" ,0A5H,0A5H,0A6H,0A7H
        DEFB    0A8H,0A9H,0AAH,0ABH,0ACH,0ADH,0AEH,0AFH
        DEFB    0B0H,0B0H,0B2H,0B2H,0B4H,0B4H,0B6H,0B6H
        DEFB    0B8H,0B8H

;	  Subroutine BDOS unsupported
;	     Inputs  ________________________
;	     Outputs ________________________

C.56D0:	XOR	A
	LD	B,A
	RET

C.56D3:	EI
	LD	A,1
	LD	(D.F306),A		; assume CP/M function result compatibility
	LD	A,C
	CP	31H			; valid BDOS function ?
	JR	NC,C.56D0		; yep, BDOS function unsupported
	SUB	11H			; BDOS function search for first ?
	JR	NZ,J$56E6		; nope,
	LD	(D.F307),DE		; yep, store FCB address
J$56E6:	DEC	A			; BDOS function search for next ?
	JR	NZ,J$56ED		; nope,
	LD	DE,(D.F307)		; restore FCB address
J$56ED:	PUSH	HL			; store parameter
	LD	HL,I$5700		; after BDOS function, return here
	EX	(SP),HL			; store return address, restore parameter
	PUSH	HL			; store parameter
	LD	HL,I.570D		; BDOS function table
	LD	B,0
	ADD	HL,BC
	ADD	HL,BC			; pointer to entry
	LD	B,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,B			; address function handler
	EX	(SP),HL			; store address function handler, restore parameter
	RET

; finish BDOS function
I$5700:	PUSH	AF			; store result
	LD	A,(D.F306)
	OR	A			; CP/M function result compatibilty ?
	JR	Z,J$570B		; nope, quit
	POP	AF			; restore result
	LD	L,A
	LD	H,B			; result also in HL
	RET
J$570B:	POP	AF			; restore result
	RET
I.570D:	DEFW	C.40A7			; BDOS 0
	DEFW	C.5445			; BDOS 1
	DEFW	C.53A7			; BDOS 2
	DEFW	C.546E			; BDOS 3
	DEFW	C.5474			; BDOS 4
	DEFW	C.5465			; BDOS 5
	DEFW	C.5454			; BDOS 6
	DEFW	C.5462			; BDOS 7
	DEFW	C.544E			; BDOS 8
	DEFW	C.F1C9			; BDOS 9
	DEFW	C.50E0			; BDOS 10
	DEFW	C.543C			; BDOS 11
	DEFW	C.41EF			; BDOS 12
	DEFW	C.509F			; BDOS 13
	DEFW	C.50D5			; BDOS 14
	DEFW	C.4462			; BDOS 15
	DEFW	C.456F			; BDOS 16
	DEFW	C.4FB8			; BDOS 17
	DEFW	C.5006			; BDOS 18
	DEFW	C.436C			; BDOS 19
	DEFW	C.4775			; BDOS 20
	DEFW	C.477D			; BDOS 21
	DEFW	C.461D			; BDOS 22
	DEFW	C.4392			; BDOS 23
	DEFW	C.504E			; BDOS 24
	DEFW	C.50C4			; BDOS 25
	DEFW	C.5058			; BDOS 26
	DEFW	C.505D			; BDOS 27
	DEFW	C.56D0			; BDOS 28
	DEFW	C.56D0			; BDOS 29
	DEFW	C.56D0			; BDOS 30
	DEFW	C.56D0			; BDOS 31
	DEFW	C.56D0			; BDOS 32
	DEFW	C.4788			; BDOS 33
	DEFW	C.4793			; BDOS 34
	DEFW	C.501E			; BDOS 35
	DEFW	C.50C8			; BDOS 36
	DEFW	C.56D0			; BDOS 37
	DEFW	C.47BE			; BDOS 38
	DEFW	C.47B2			; BDOS 39
	DEFW	C.47D1			; BDOS 40
	DEFW	C.56D0			; BDOS 41
	DEFW	C.553C			; BDOS 42
	DEFW	C.5552			; BDOS 43
	DEFW	C.55DB			; BDOS 44
	DEFW	C.55E6			; BDOS 45
	DEFW	C.55FF			; BDOS 46
	DEFW	C.46BA			; BDOS 47
	DEFW	C.4720			; BDOS 48

;	  Subroutine extension initialize handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.576F:	CALL	INIHRD
	DI
	LD	A,(DEVICE)
	AND	A			; status disk system initialisation
	RET	M			; disabled, quit
	JP	NZ,J$5823		; other disk rom has started the initialisation, skip first part
	LD	HL,HOKVLD
	BIT	0,(HL)
	JR	NZ,J$578E
	SET	0,(HL)
	LD	HL,EXTBIO
	LD	B,15
J$5789:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$5789
J$578E:	LD	HL,(D.FC48)
	LD	DE,I$C000+1
	_RST	DCOMPR			; at least 16 Kb RAM ?
	JR	NC,J$57A3		; nope, disable disk system initialisation and quit
	LD	A,6
	CALL	SNSMAT
	DI
	RRCA				; SHIFT pressed ?
	JR	C,J$57A9		; nope,
	LD	A,7
	_RST	OUTDO			; beep
J$57A3:	LD	A,0FFH
	LD	(DEVICE),A		; disable disk system initialisation
	RET

J$57A9:	LD	HL,I.F380+MYSIZE
	LD	DE,C.F1C9
	AND	A
	SBC	HL,DE
	CALL	NC,C.5F0B		; allocate memory
	RET	C			; out of memory, quit
J$57B6:	PUSH	HL			; store pointer to driver work area
	XOR	A
	LD	HL,C.F1C9
	LD	BC,I.F380-C.F1C9
	CALL	C.58E3			; initialize disk variable static area
	LD	(D.F6AB),BC
	LD	HL,I.FB21
	LD	C,4*2 + 4*3
	CALL	C.58E3			; initialize disk driver and interrupt info area
	LD	HL,C.F24F
	LD	C,69H
	LD	A,0C9H
	CALL	C.58E3			; initialize disk system hook area
	LD	A,0DBH
	LD	HL,0C9A8H
	LD	(C.F365+0),A
	LD	(C.F365+1),HL		; read primairy slot register routine
	LD	A,6
	CALL	SNSMAT
	AND	02H			; CTRL key
	LD	(D.F33F),A		; store CTRL key status
	LD	A,7
	_RST	OUTDO			; beep

J$57EF:	LD	A,(D.F313)
	CP	13H			; dos version >= 1.3 ?
	JR	NC,J$580C		; yep, skip
	LD	HL,I$58DE
	LD	DE,H.RUNC
	LD	BC,5
	LDIR
	CALL	C.5FE0			; get my slot id
	LD	(H.RUNC+1),A
	LD	A,13H
	LD	(D.F313),A		; dos version = 1.3
J$580C:	POP	DE			; restore pointer to driver work area
	LD	A,(IDBYT2)
	CP	3			; MSX Turbo-R ?
	JR	NZ,J.583F		; nope, skip
	XOR	A
	CALL	SNSMAT
	BIT	1,A			; 1 key pressed ?
	JR	NZ,J.583F		; nope, skip
	LD	A,23H
	LD	(D.F313),A		; dos version = 2.3
	JR	J.583F			; continue

J$5823:	LD	HL,I.FB21
	LD	B,4			; number of interfaces = 4
	XOR	A			; number of drives = 0
J$5829:	ADD	A,(HL)			; number of drives = number of drives + drives of interface
	JP	C,J.5EF3		; overflow (interface table corrupt), out of memory message and halt system
	INC	HL
	INC	HL
	DJNZ	J$5829			; next interface
	CP	8+1			; more as 8 drives ?
	RET	NC			; yep, quit
	LD	HL,MYSIZE		; driver work area size
	CALL	C.5F0B			; allocate memory
	RET	C			; out of memory, quit
	EX	DE,HL
	PUSH	DE			; store pointer to driver work area
	JR	J$57EF			; continue

J.583F:	CALL	C.5FFA			; get pointer to SLTWRK entry
	LD	(HL),E
	INC	HL
	LD	(HL),D			; store pointer to driver workarea
	LD	HL,(D.F6AB)
	LD	DE,SECLEN		; biggest sector size interface
	_RST	DCOMPR
	JR	NC,J$5852
	LD	(D.F6AB),DE		; update biggest sector size
J$5852:	CALL	C$7BD4			; detect disk drives
	LD	DE,I.FB21
	LD	BC,4*256+0		; number of interfaces = 4, drives found = 0
J$585B:	LD	A,(DE)
	AND	A			; entry free ?
	JR	Z,J$5868		; yep,
	ADD	A,C
	LD	C,A			; update drives found
	INC	DE
	INC	DE
	DJNZ	J$585B			; next interface
	JP	J.5EF3			; no free entry, out of memory message and halt system
J$5868:	PUSH	BC
	PUSH	DE
	CALL	C.5FE0			; get my slot id
	INC	DE
	LD	(DE),A			; store slot id
	POP	DE
	POP	BC
	LD	A,(D.F33F)
	AND	A			; CTRL key status
	LD	A,C
	CALL	DRIVES			; get drives
	ADD	A,L
	CP	7
	LD	A,L
	JR	C,J$5882
	LD	A,8+1
	SUB	C
J$5882:	LD	(DE),A			; store number of drives
	PUSH	BC
	PUSH	AF			; store number of drives
	CALL	C.5FEF			; get pointer to driver workarea
	POP	AF			; restore number of drives
	LD	(IX+5),A		; store number of drives
	POP	BC			; restore drive id
	LD	B,0
	LD	HL,I.F355
	ADD	HL,BC
	ADD	HL,BC
	PUSH	HL			; store pointer to DPB entry
	LD	A,(DE)
	OR	A			; no drives ?
	JR	Z,J$58D3		; yep,
	PUSH	AF			; store number of drives
	LD	C,A
	LD	DE,21
	CALL	C.491C			; multiply
	LD	L,C
	LD	H,B
	CALL	C.5EEF			; allocate memory (system halted when out of memory)
	EX	DE,HL
	POP	BC
	XOR	A
	POP	HL
J$58AA:	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	PUSH	HL
	PUSH	BC
	PUSH	DE
	PUSH	AF
	LD	HL,(D.F34D)
	PUSH	HL
	LD	HL,I$FD00
	ADD	HL,SP
	LD	(D.F34D),HL
	EX	DE,HL
	LD	B,0F9H			; media descriptor from FAT
	CALL	GETDPB
	POP	HL
	LD	(D.F34D),HL
	POP	AF
	POP	HL
	LD	DE,21
	ADD	HL,DE
	EX	DE,HL
	POP	BC
	POP	HL
	INC	A
	DJNZ	J$58AA
J$58D3:	CALL	INIENV			; initialize environment
	CALL	C$7BF7			; ??
	LD	HL,DEVICE
	INC	(HL)
	RET
I$58DE:	_RST	CALLF
	DEFB	0
	DEFW	C.58EB
	RET

;	  Subroutine initialize area
;	     Inputs  ________________________
;	     Outputs ________________________

C.58E3:	LD	D,H
	LD	E,L
	INC	DE
	LD	(HL),A
	DEC	BC
	LDIR
	RET
C.58EB:	LD	HL,H.RUNC
	LD	B,5
J$58F0:	LD	(HL),0C9H
	INC	HL
	DJNZ	J$58F0
	LD	HL,DEVICE
	XOR	A
	CP	(HL)
	LD	(HL),A
	RET	P
	CALL	C$6207
	LD	(D.F348),A
	LD	HL,J.72D9
	LD	DE,C.F1C9
	LD	BC,S.72D9
	LDIR
	LD	HL,CHAR_16
	LD	DE,I.F30F
	LD	BC,4
	LDIR
	LD	A,(IDBYT0)
	RRCA
	RRCA
	RRCA
	RRCA
	AND	07H			; date format
	LD	(D.F30E),A		; store date format
	LD	A,0FFH
	LD	(D.F241),A		; data buffer drive id = invalid
	LD	(D.F246),A		; directory buffer = invalid
	LD	(D$F24D),A
	LD	A,0DH	; 13 
	LD	(D$F55B),A
	LD	A,7
	LD	(D.F345),A
	LD	HL,9132
	LD	(D.F33B),HL
	LD	B,8
	LD	HL,X.F368
J$5944:	LD	(HL),0C3H
	INC	HL
	INC	HL
	INC	HL
	DJNZ	J$5944
	LD	HL,(D.F6AB)
	PUSH	HL
	CALL	C.5EEF			; allocate memory (system halted when out of memory)
	LD	(D.F34D),HL
	LD	(D.F34F),HL
	POP	HL
	CALL	C.5EEF			; allocate memory (system halted when out of memory)
	LD	(D.F351),HL
	LD	(D.F349),HL
	LD	HL,3*SECLEN+1
	CALL	C.5EEF			; allocate memory (system halted when out of memory)
	LD	(D.F349),HL
	LD	(HL),0FFH		; mark FAT buffer invalid
	INC	HL
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	(IX+2),L
	LD	(IX+3),H		; update pointer to FAT buffer
	LD	(IX+0),0FFH		; drive id invalid
	LD	(IX+1),0FFH		; ?
	LD	HL,I.FB21
	LD	B,4			; number of interfaces = 4
	XOR	A			; drives found = 0
J$5985:	ADD	A,(HL)			; update drives found
	JP	C,J.5EF3		; overflow (interface table corrupt), out of memory message and halt system
	INC	HL
	INC	HL
	DJNZ	J$5985			; next interface
	CP	8+1			; more as 8 drives ?
	JP	NC,J.5EF3		; yep (interface table corrupt), out of memory message and halt system
	LD	(D.F347),A		; update total number of drives
	OR	A			; total number of drives = 0 ?
	JP	Z,J$59B8		; yep, skip update DPBs
	LD	B,A
	LD	C,0
	LD	HL,I.F355
J$599F:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	HL
	PUSH	DE
	POP	IX
	LD	(IX+0),C		; update drive id
	INC	C
	PUSH	BC
	LD	(IX+19),0
	LD	(IX+20),0
	POP	BC
	POP	HL
	DJNZ	J$599F
J$59B8:	LD	HL,I.F327
	LD	(HL),3EH
	INC	HL
	LD	(HL),1AH
	LD	B,08H
J$59C2:	INC	HL
	LD	(HL),0C9H
	DJNZ	J$59C2
	LD	HL,I.F327
	LD	(D$F372),HL
	LD	L,2CH
	LD	(D$F375),HL
	LD	L,31H
	LD	(D$F37E),HL
	LD	HL,I$7D2F
	LD	A,(EXPTBL+0)		; slot id main ROM
	CALL	RDSLT
	DEFB	0DDH
	LD	L,A			; IXL = low byte
	INC	HL
	LD	A,(EXPTBL+0)		; slot id main ROM
	CALL	RDSLT
	DEFB	0DDH
	LD	H,A			; IXH = high byte
	LD	IY,(EXPTBL+0-1)
	CALL	CALSLT
	CALL	C$7C43
	CALL	C$40B8
	CALL	C$5CC2
	LD	A,(EXPTBL+0)		; slot id main ROM
	LD	(D.F341),A		; assume no RAM on page 0
	LD	(D.F342),A		; assume no RAM on page 1
	CALL	C$5FC5
	LD	(D.F343),A
	CALL	C$5FC2
	LD	(D$F344),A
	LD	C,HIGH 0000H		; page 0
	CALL	C.5E79			; search RAM in page
	JR	C,J$5A1A		; RAM not found,
	LD	(D.F341),A		; update page 0 RAM slot id
J$5A1A:	LD	C,HIGH 4000H		; page 1
	CALL	C.5E79			; search RAM in page
	JR	C,J$5A24		; RAM not found,
	LD	(D.F342),A		; update page 1 RAM slot id
J$5A24:	LD	SP,I.C200
	LD	A,(H.STKE+0)
	CP	0C9H
	JR	Z,J$5A34
	LD	IX,I$7D17
	JR	J$5A46

J$5A34:	LD	HL,I$FCC9
	LD	B,4*4*4			; 16 slots with 4 pages
J$5A39:	LD	A,(HL)
	ADD	A,A			; ROM has BASIC program ?
	JR	C,J$5A42		; yep, start BASIC program in ROM
	INC	HL
	DJNZ	J$5A39
	JR	J$5A4C

J$5A42:	LD	IX,I$7E14
J$5A46:	CALL	C.5C6C
	JP	CALBAS

J$5A4C:	LD	HL,J.5B91
	PUSH	HL			; start DiskBASIC when quit
	CALL	C$4EE2			; ?? unkown function
	RET	C			; quit to DiskBASIC
	CALL	C.5B47
	RET	C
	CALL	C$5B38			; setup and start boot loader (environment = DiskBASIC)
	LD	HL,(D.FC48)
	LD	DE,I$8000
	_RST	DCOMPR			; at least 32 Kb ?
	RET	NZ			; nope (failed MSXDOS requirement), quit to DiskBASIC
	LD	HL,D.F341
	LD	A,(EXPTBL+0)		; slot id main ROM
	CP	(HL)			; RAM detected on page 0 ?
	RET	Z			; nope (failed MSXDOS requirement), quit to
	INC	HL
	CP	(HL)			; RAM detected on page 1 ?
	RET	Z			; nope (failed MSXDOS requirement), quit
	LD	A,1
J$5A70:	PUSH	AF
	XOR	A
	CALL	C.60CB			; mark FAT buffer invalid
	LD	HL,(D.F349)
	LD	(D.F34B),HL
	POP	AF
	OR	A
	CALL	Z,C.5B47
	JP	C,J.5B91		; start DiskBASIC
	LD	A,0FFH
	LD	(D.F346),A
	LD	A,(D.F341)		; slot id RAM page 0
	LD	H,HIGH 0000H		; page 0
	CALL	C.6414			; enable slot
	XOR	A
	LD	L,A
	LD	H,A
J$5A93:	LD	(HL),A
	INC	L
	JR	NZ,J$5A93		; clear 0000H-00FFH
	LD	BC,S.6313
	CALL	C.5ED4			; allocate MSXDOS memory
	LD	(D$F36F),HL
	EX	DE,HL
	LD	HL,I$6313
	LDIR
	LD	BC,S.6336
	CALL	C.5ED4			; allocate MSXDOS memory
	LD	E,L
	LD	D,H
	LD	(D$F369),HL
	INC	HL
	INC	HL
	LD	(D$F36C),HL
	LD	HL,I$6336
	LDIR
	LD	BC,S.636C
	CALL	C.5ED4			; allocate MSXDOS memory
	PUSH	HL
	EX	DE,HL
	LD	HL,C.636C
	PUSH	HL
	LDIR
	POP	BC
	POP	DE
	PUSH	DE
	LD	HL,I.6482+1-C.636C
	ADD	HL,DE
	LD	(HL),LOW C.003B
	INC	HL
	LD	(HL),HIGH C.003B
	LD	HL,I$634F		; pointer to relocate table
	CALL	C.62A1			; relocate routine
	LD	HL,I$5B74
	XOR	A
	LD	B,A
	LD	D,A
J$5AE1:	LD	E,(HL)
	CP	E
	JR	Z,J$5AF5
	INC	HL
	LD	C,(HL)
	INC	HL
	EX	(SP),HL
	ADD	HL,BC
	EX	DE,HL
	LD	(HL),0C3H
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	EX	DE,HL
	EX	(SP),HL
	JR	J$5AE1
J$5AF5:	POP	HL
	LD	HL,C.64D4
	LD	DE,C.003B
	LD	BC,S.64D4
	LDIR
	LD	BC,S.62CE
	CALL	C.5ED4			; allocate MSXDOS memory
	PUSH	HL
	EX	DE,HL
	LD	HL,I$62CE
	PUSH	HL
	LDIR
	POP	BC
	POP	DE
	PUSH	DE
	LD	HL,I$62CA		; pointer to relocate table
	CALL	C.62A1			; relocate routine
	POP	HL
	LD	A,0C3H
	LD	(KEYINT+0),A
	LD	(KEYINT+1),HL
	LD	DE,34
	ADD	HL,DE
	LD	DE,(D.F34B)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	BC,160
	CALL	C.5ED4			; allocate MSXDOS memory
	LD	A,0C3H			; enable
	CALL	C$5CB8			; update MSXDOS slot support
	SCF				; environment = MSXDOS

;	  Subroutine setup and start boot loader
;	     Inputs  ________________________
;	     Outputs ________________________

C$5B38:	LD	HL,D.F323		; pointer to address disk error handler
	LD	DE,X.F368		; $DOSON
	LD	A,(D.F340)		; cold boot flag
	CALL	C.517F			; enable I/O ports
	JP	C.C01E			; start boot loader

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5B47:	LD	A,(D.F347)
	OR	A			; total number of drives = 0 ?
	SCF
	RET	Z			; yep, quit with error
	LD	A,0F9H
	LD	C,A			; default (biggest media) media descriptor
	LD	B,1			; number of sectors = 1
	LD	HL,(D.F351)
	PUSH	HL
	XOR	A			; drive 0 (A:)
	LD	E,A
	LD	D,A			; sector = 0
	CALL	C.606C			; disk sector operation
	POP	HL
	LD	A,0FFH
	LD	(D.F246),A		; directory buffer = invalid
	RET	C
	LD	A,(HL)			; x86 JMP instruction
	LD	DE,I$C000
	LD	BC,256
	LDIR				; transfer boot loader
	CP	0EBH
	RET	Z
	CP	0E9H
	RET	Z
	SCF
	RET
I$5B74:	DEFB	RDSLT,00H
	DEFB	WRSLT,21H
	DEFB	CALLF,2EH
	DEFB	CALSLT,12H
	DEFB	ENASLT,47H
	DEFB	0
I$5B7F:	DEFB	'RUN"'
I$5B83:	DEFB	"AUTOEXECBAS",0
I$5B8F:	DEFW	C.5BEA

;	  Subroutine start DiskBASIC
;	     Inputs  ________________________
;	     Outputs ________________________

J.5B91:	CALL	C.5CB6			; disable MSXDOS slot support
	LD	HL,I$5B7F
	LD	DE,X.F568
	LD	BC,16
	LDIR
	LD	HL,D.F340
	LD	A,(HL)
	AND	A
	LD	(HL),H
	JR	NZ,J$5BC6
	LD	(D.F346),A
	LD	HL,I$5B8F
	LD	(D.F323),HL		; install disk error handler
	LD	DE,I.F579
	PUSH	DE
	LD	HL,I$5B83
	LD	(DE),A
	INC	DE
	LD	C,0CH	; 12 
	LDIR
	POP	DE
	CALL	C.4462			; open file
	INC	A
	JR	Z,C.5BEA
	JR	J.5BF8
J$5BC6:	LD	A,(WBOOT)
	CP	0C3H
	JR	NZ,J.5BF4
	LD	HL,DBUF
	LD	B,(HL)
	INC	B
	DEC	B
	JR	Z,J.5BF4
J$5BD5:	INC	HL
	LD	A,(HL)
	CP	20H	; " "
	JR	NZ,J$5BDF
	DJNZ	J$5BD5
	JR	J.5BF4
J$5BDF:	XOR	A
	LD	C,B
	LD	B,A
	LD	DE,I$F56C
	LDIR
	LD	(DE),A
	JR	J.5BF8

;	  Subroutine disk error handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.5BEA:	LD	SP,I.C200
	LD	A,(D.F338)
	AND	A			; have real time device ?
	CALL	Z,C$5D72		; nope,
J.5BF4:	XOR	A
	LD	(D$F56B),A
J.5BF8:	LD	SP,I.C200
	LD	A,(D.F343)
	LD	H,HIGH 8000H
	CALL	ENASLT
	LD	A,(EXPTBL+0)		; slot id main ROM
	LD	H,HIGH 0000H
	CALL	ENASLT
	LD	HL,(D.FC48)
	XOR	A
	LD	(HL),A
	INC	HL
	LD	(D.F676),HL
	LD	(HL),A
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(D.F6C2),HL
	LD	HL,-1
	LD	(D$F41C),HL
	CALL	C.5C6C
	LD	SP,(D.F674)
	LD	A,0FFH
	LD	(D$F3DE),A
	LD	A,0CH	; 12 
	_RST	OUTDO
	LD	IX,I$7D31
	CALL	CALBAS
	CALL	C.5FA9
	DEFB	10,"Disk BASIC version 1.0",10
	DEFB	0
	LD	HL,C.4173
	PUSH	HL
	LD	HL,I$F567
	PUSH	HL
	LD	HL,I$F59E
	PUSH	HL
	LD	(HL),0E1H
	INC	HL
	LD	(HL),0C9H
	LD	A,(EXPTBL+0)		; slot id main ROM
	LD	H,HIGH 4000H
	JP	ENASLT

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5C6C:	LD	HL,I$4068
	LD	(D.F323),HL		; install disk error handler
	LD	HL,I.570D
	LD	(D.F325),HL		; install abort handler
	LD	HL,(D.F349)
	LD	(D.FC4A),HL
	LD	A,(D.F345)
J$5C80	EQU	$-1
	LD	C,A
	LD	B,0
J$5C83	EQU	$-1
	LD	DE,37
	CALL	C.491C			; multiply
	CALL	C.5EDF
	LD	(D.F353),HL
	LD	BC,25
	CALL	C.5EDF
	LD	(D$F378),HL
	EX	DE,HL
	LD	HL,I$6288
	LDIR
	LD	HL,-11
	ADD	HL,DE
	LD	(D$F37B),HL
	LD	A,(D.F348)
	LD	DE,-7
	ADD	HL,DE
	LD	(HL),A
	LD	DE,14
	ADD	HL,DE
	LD	(HL),A
	CALL	C$5F82

;	  Subroutine disable MSXDOS slot support
;	     Inputs  ________________________
;	     Outputs ________________________

C.5CB6:	LD	A,0C9H

;	  Subroutine update MSXDOS slot support
;	     Inputs  ________________________
;	     Outputs ________________________

C$5CB8:	LD	(X.F368),A
	LD	(X.F36B),A
	LD	(D$F36E),A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5CC2:	LD	HL,I$5CF4
	LD	DE,H.POSD
	LD	BC,5
	LDIR
	LD	BC,I$5CF9		; hook address table
	LD	HL,H.F331		; start of hooks
J.5CD3:	LD	A,(BC)
	INC	BC
	LD	E,A
	LD	A,(BC)
	INC	BC
	LD	D,A
	CP	0FFH			; end of table ?
	RET	Z			; yep, quit
	CP	40H			; offset ?
	JR	NC,J$5CE3		; nope,
	ADD	HL,DE
	JR	J.5CD3
J$5CE3:	LD	(HL),0F7H
	INC	HL
	LD	A,(D.F348)
	LD	(HL),A
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),0C9H
	INC	HL
	JR	J.5CD3
I$5CF4:	INC	SP
	INC	SP
	JP	J$6F1D
I$5CF9:	DEFW	C.56D3
	DEFW	H.DSKO-H.F331-5
	DEFW	C.6AF6
	DEFW	H.NAME-H.DSKO-5
	DEFW	C.6E5D
	DEFW	C.6E3D
	DEFW	H.COPY-H.KILL-5
	DEFW	C.6FB9
	DEFW	H.DSKF-H.COPY-5
	DEFW	C.6F9F
	DEFW	C.6AD5
	DEFW	H.LSET-H.DSKI-5
	DEFW	C.6C45
	DEFW	C.6C44
	DEFW	C.6BA9
	DEFW	C.6D07
	DEFW	C.6D0A
	DEFW	C.6D0D
	DEFW	C.6D2B
	DEFW	C.6D2E
	DEFW	C.6D31
	DEFW	C.6611
	DEFW	H.NOFO-H.GETP-5
	DEFW	C.6620
	DEFW	C.6669
	DEFW	C.683D
	DEFW	H.BINS-H.NTFL-5
	DEFW	C.687B
	DEFW	C.68A6
	DEFW	C.6DC5
	DEFW	C.6B3A
	DEFW	C.67FB
	DEFW	C.6786
	DEFW	H.LOC-H.INDS-5
	DEFW	C.6F4A			; H.LOC
	DEFW	C.6F46			; H.LOF
	DEFW	C.6DAD			; H.EOF
	DEFW	H.BAKU-H.EOF-5
	DEFW	C.67E2			; H.BAKU
	DEFW	C.7265
	DEFW	C.72BE
	DEFW	H.ERRP-H.NODE-5
	DEFW	C.7109
	DEFW	H.PHYD-H.ERRP-5
	DEFW	C.606C
	DEFW	C.6114
	DEFW	0FFFFH
I$5D57:	DEFB	1,48H,'-',1,41H,'-',1,47H,'):',0
I$5D62:	DEFB	"M-D-Y):",0
I$5D6A:	DEFB	"D-M-Y):",0
C$5D72:	LD	(D.F5C0),SP
	LD	A,14H	; 20 
	LD	(D.F5C2),A
J$5D7B:	CALL	C.5FA9
	DEFB	10,"Enter date ("
	DEFB	0
	LD	A,(D.F30E)		; date format
J$5D8F:	CP	1			; european date format (DD-MM-YY) ?
	LD	HL,I$5D57
	JR	C,J.5D9E		; nope, japanese (YY-MM-DD)
	LD	HL,I$5D62
	JR	Z,J.5D9E		; yep,
	LD	HL,I$5D6A		; american date format
J.5D9E:	CALL	C.5FAF			; string to screen
	LD	HL,I$5E72
	LD	(D.F325),HL		; install abort handler
	LD	DE,D.F5C2
	CALL	C.50E0			; buffered console input
	LD	HL,I$F5C4
	LD	A,(HL)
	CP	0DH	; 13 
J$5DB3:	RET	Z
	LD	A,(D.F30E)
	AND	A			; japanese date format ?
	JR	NZ,J$5DCC		; nope,
	CALL	C.5E34
	CALL	C.5E10
	LD	D,C
	LD	A,(HL)
	INC	HL
	CP	B
	JR	NZ,J.5DF8
	CALL	C.5E1F
	LD	E,C
	JR	J.5DE6

J$5DCC:	CALL	C.5E1F
	LD	D,C
	CALL	C.5E10
	LD	E,C
	LD	A,(HL)
	INC	HL
	CP	B
	JR	NZ,J$5DDE
	CALL	C.5E34
	JR	J.5DE6
J$5DDE:	PUSH	DE
	CALL	C.553C			; get date
	PUSH	HL
	POP	IX
	POP	DE
J.5DE6:	LD	A,(D.F30E)
	CP	2			; american date format ?
J$5DEA	EQU	$-1
	JR	C,J$5DF0		; nope,
	LD	A,E
	LD	E,D
	LD	D,A
J$5DF0:	PUSH	IX
	POP	HL
	CALL	C.5552			; set date
	OR	A
	RET	Z
J.5DF8:	LD	SP,(D.F5C0)
	CALL	C.5FA9
	DEFB	10,"Invalid date"
	DEFB	0
	JP	J$5D7B

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E10:	LD	A,(HL)
	INC	HL
	LD	B,A
	CP	2FH	; "/"
	JR	Z,C.5E1F
	CP	2EH	; "."
	JR	Z,C.5E1F
	CP	2DH	; "-"
	JR	NZ,J.5DF8

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E1F:	CALL	C.5E68
	JR	C,J.5DF8
	LD	C,A
	CALL	C.5E68
	RET	C
	PUSH	AF
	LD	A,C
	ADD	A,A
	ADD	A,A
	ADD	A,C
	ADD	A,A
	LD	C,A
	POP	AF
	ADD	A,C
	LD	C,A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E34:	CALL	C.5E1F
	LD	B,C
	CALL	C.5E68
	JR	C,J$5E53
	DEC	HL
	CALL	C.5E1F
	PUSH	HL
	PUSH	BC
	LD	C,B
	LD	B,00H
	PUSH	DE
	LD	DE,100
	CALL	C.491C			; multiply
	POP	DE
	POP	HL
	LD	H,00H
	JR	J.5E62
J$5E53:	PUSH	HL
	LD	C,B
	LD	B,0
	LD	HL,1900
	LD	A,C
	CP	50H	; "P"
	JR	NC,J.5E62
	LD	HL,2000
J.5E62:	ADD	HL,BC
	PUSH	HL
	POP	IX
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E68:	LD	A,(HL)
	SUB	30H	; "0"
	RET	C
	CP	0AH	; 10 
J$5E6D	EQU	$-1
	CCF
	RET	C
	INC	HL
	RET
I$5E72:	DEFW	C.5E74

;	  Subroutine abort handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E74:	LD	SP,(D.F5C0)
	RET

;	  Subroutine search RAM in page
;	     Inputs  ________________________
;	     Outputs ________________________

C.5E79:	LD	HL,EXPTBL
	LD	B,4
	XOR	A
J$5E7F:	AND	03H			; primairy slot
	OR	(HL)			; slot expanded flag
J$5E82:	PUSH	BC			; store slot counter
	PUSH	HL			; store pointer to EXPTBL entry
	LD	H,C			; base address high
J$5E85:	LD	L,10H
J$5E87:	PUSH	AF			; store slot id
	CALL	RDSLT			; read memory
	CPL				; invert
	LD	E,A
	POP	AF			; restore slot id
	PUSH	DE			; store inverted memory content
	PUSH	AF			; store slot id
	CALL	WRSLT			; write memory
	POP	AF			; restore slot id
	POP	DE			; restore inverted memory content
	PUSH	AF			; store slot id
	PUSH	DE			; store inverted memory content
	CALL	RDSLT			; read memory
	POP	BC			; restore inverted memory content
	LD	B,A			; store memory content
	LD	A,C
	CPL
	LD	E,A			; original memory content
	POP	AF			; restore slot id
	PUSH	AF			; store slot id
	PUSH	BC			; store orginal memory content, memory content after inverted write back
	CALL	WRSLT			; write memory
	POP	BC
	LD	A,C
	CP	B			; memory writeable (RAM) ?
	JR	NZ,J$5EC1		; nope,
	POP	AF			; restore slot id
	DEC	L			; at 256 byte boundery ?
	JR	NZ,J$5E87		; nope, continue
	INC	H
	INC	H
	INC	H
	INC	H			; next Kb boundery
	LD	C,A			; store slot id
	LD	A,H
	CP	HIGH 4000H		; finished page 0 ?
	JR	Z,J$5EBD		; yep, quit
	CP	HIGH 8000H		; finished page 1 ?
	LD	A,C			; restore slot id
	JR	NZ,J$5E85		; nope, continue
J$5EBD:	LD	A,C			; restore slot id
	POP	HL
	POP	HL			; clean up stack
	RET

J$5EC1:	POP	AF			; restore slot id
	POP	HL			; restore pointer to EXPTBL entry
	POP	BC			; restore slot counter
	AND	A			; slot expanded ?
	JP	P,J$5ECE		; nope, next primairy slot
	ADD	A,4			; next secundairy slot
	CP	90H			; finished all slots ?
	JR	C,J$5E82		; nope, next secundairy slot
J$5ECE:	INC	HL			; update pointer to EXPTBL entry
	INC	A			; update primairy slot
	DJNZ	J$5E7F			; next primairy slot
	SCF				; RAM not found
	RET

;	  Subroutine allocate MSXDOS memory
;	     Inputs  ________________________
;	     Outputs ________________________

C.5ED4:	LD	HL,(D.F34B)
	AND	A
	SBC	HL,BC
	LD	(D.F34B),HL
	JR	J$5EE8

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.5EDF:	LD	HL,(D.FC4A)
	AND	A
	SBC	HL,BC
	LD	(D.FC4A),HL
J$5EE8:	JR	C,J.5EF3		; out of memory message and halt system
	LD	A,H
	CP	0C2H
	JR	J$5EF2

;	  Subroutine allocate memory (system halted when out of memory)
;	     Inputs  ________________________
;	     Outputs ________________________

C.5EEF:	CALL	C.5F0B			; allocate memory
J$5EF2:	RET	NC

;	  Subroutine out of memory message and halt system
;	     Inputs  ________________________
;	     Outputs ________________________

J.5EF3:	CALL	C.5FA9
	DEFB	12
I.5EF7:	DEFB	"Not enough memory"
	DEFB	0
	DI
	HALT

;	  Subroutine allocate memory
;	     Inputs  ________________________
;	     Outputs ________________________

C.5F0B:	LD	A,L
	OR	H
	RET	Z
	XOR	A
	SUB	L
	LD	L,A
	LD	A,00H
	SBC	A,H
	LD	H,A
	LD	C,L
	LD	B,H
	ADD	HL,SP
	CCF
	RET	C
	LD	DE,(D.FC48)
	SBC	HL,DE
	RET	C
	LD	A,H
	CP	02H	; 2 
	RET	C
	PUSH	BC
	LD	HL,0
	ADD	HL,SP
	LD	E,L
	LD	D,H
	ADD	HL,BC
	PUSH	HL
	LD	HL,(D.F674)
	AND	A
	SBC	HL,DE
	LD	C,L
	LD	B,H
	INC	BC
	POP	HL
	LD	SP,HL
	EX	DE,HL
	LDIR
	POP	BC
	LD	HL,(D.FC4A)
	ADD	HL,BC
	LD	(D.FC4A),HL
	LD	DE,-(2*256+2*9+2*2)
	ADD	HL,DE
	LD	(D.F860),HL
	EX	DE,HL
	LD	HL,(D.F672)
	ADD	HL,BC
	LD	(D.F672),HL
	LD	HL,(D.F862)
	ADD	HL,BC
	LD	(D.F862),HL
	LD	HL,(D.F674)
	ADD	HL,BC
J$5F5E:	LD	(D.F674),HL
J$5F61:	DEC	HL
	DEC	HL
	LD	(D$F6B1),HL
	LD	L,E
	LD	H,D
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,02H	; 2 
J$5F6E:	EX	DE,HL
	LD	(HL),E
J$5F70:	INC	HL
	LD	(HL),D
	INC	HL
	EX	DE,HL
	LD	BC,7
	LD	(HL),B
	ADD	HL,BC
	LD	(HL),B
	LD	BC,256+9-7
	ADD	HL,BC
	DEC	A
	JR	NZ,J$5F6E
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5F82:	LD	A,01H	; 1 
	LD	(D.F85F),A
	LD	HL,(D.FC4A)
	LD	DE,-(2*256+2*9+2*2)
	ADD	HL,DE
	LD	(D.F860),HL
	LD	E,L
	LD	D,H
	DEC	HL
	DEC	HL
	LD	(D.F672),HL
	LD	BC,200
	AND	A
	SBC	HL,BC
	PUSH	HL
	LD	HL,13
	ADD	HL,DE
	LD	(D.F862),HL
	POP	HL
	JR	J$5F5E

;	  Subroutine embeded string to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FA9:	EX	(SP),HL
	CALL	C.5FAF			; string to screen
	EX	(SP),HL
	RET

;	  Subroutine string to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FAF:	LD	A,(HL)
	INC	HL
	AND	A
	RET	Z
	CP	0AH			; LF ?
	LD	A,0DH			; CR
	CALL	Z,C.408F		; yep, character to screen
	DEC	HL
	LD	A,(HL)
	INC	HL
	CALL	C.408F			; character to screen
	JR	C.5FAF			; again

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5FC2:	LD	B,6
	DEFB	21H

C$5FC5:	LD	B,4
	CALL	C.F365			; read primairy slot register
	PUSH	BC
J$5FCB:	RRCA
	DJNZ	J$5FCB
	CALL	C$6019
	POP	BC
	OR	(HL)
	LD	C,A
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	DEC	B
	DEC	B
J$5FDB:	RRCA
	DJNZ	J$5FDB
	JR	J$5FEB

;	  Subroutine get my slot id
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FE0:	CALL	C.6014

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$5FE3:	OR	(HL)
	RET	P
	LD	C,A
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
J$5FEB:	AND	0CH
	OR	C
	RET

;	  Subroutine get pointer to driver workarea
;	     Inputs  ________________________
;	     Outputs ________________________

GETWRK:
C.5FEF:	CALL	C.5FFA			; get pointer to SLTWRK entry
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A			; pointer to driver work area
	PUSH	HL
	POP	IX
	RET

;	  Subroutine get pointer to SLTWRK entry
;	     Inputs  ________________________
;	     Outputs ________________________

C.5FFA:	CALL	C.6014
	ADD	A,A
	ADD	A,A
	ADD	A,A
	SCF
	ADC	A,A
	LD	C,A
	LD	A,(HL)
	ADD	A,A
	SBC	A,A
	AND	0CH	; 12 
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	AND	(HL)
	OR	C
	ADD	A,A
	LD	HL,SLTWRK
	JR	J$601E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6014:	CALL	C.F365			; read primairy slot register

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6017:	RRCA
	RRCA

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6019:	AND	3
	LD	HL,EXPTBL
J$601E:	LD	B,0
	LD	C,A
	ADD	HL,BC
	RET

;	  Subroutine SETINT
;	     Inputs  ________________________
;	     Outputs ________________________

SETINT:
J$6023:	LD	A,(H.TIMI+0)
	CP	0C9H			; H.TIMI in use ?
	JR	Z,J$6054		; nope, install handler
	PUSH	HL
	CALL	C.5FE0			; get my slot id
	LD	C,A
	LD	HL,I.FB21+1
	LD	B,4			; number of interfaces = 4
J$6034:	LD	A,(HL)
	CP	C			; entry of my interface ?
	JR	Z,J$603E		; yep,
	INC	HL
	INC	HL
	DJNZ	J$6034			; next interface
	POP	HL
	RET
J$603E:	LD	A,4
	SUB	B
	LD	B,A
	ADD	A,A
	ADD	A,B
	LD	HL,I.FB29
	CALL	C.4564
	EX	DE,HL
	LD	HL,H.TIMI+1
	LD	BC,3
	LDIR
I.6053:	POP	HL
J$6054:	DI
	LD	A,0F7H
	LD	(H.TIMI+0),A
	LD	(H.TIMI+2),HL
	LD	A,0C9H
	LD	(H.TIMI+4),A
	CALL	C.5FE0			; get my slot id
	LD	(H.TIMI+1),A
	RET

;	  Subroutine read disk sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$6069:	AND	A

	DEFB	38H

;	  Subroutine write disk sectors
;	     Inputs  ________________________
;	     Outputs ________________________

C$606B:	SCF

;	  Subroutine disk sector operation
;	     Inputs  ________________________
;	     Outputs ________________________

C.606C:	PUSH	IX
	PUSH	IY
	PUSH	HL
	PUSH	AF
	CALL	C.60B7			; determine drive id and slot id of interface
	LD	L,A
	POP	AF
	LD	A,L
	LD	IX,I$4010
	JR	J$6092

;	  Subroutine is disk changed ?
;	     Inputs  ________________________
;	     Outputs ________________________

C$607E:	PUSH	IX
	LD	IX,I$4013
	JR	J$608C

;	  Subroutine get drive parameter block
;	     Inputs  ________________________
;	     Outputs ________________________

C$6086:	PUSH	IX
	LD	IX,I$4016
J$608C:	PUSH	IY
	PUSH	HL
	CALL	C.60B7			; determine drive id and slot id of interface
J$6092:	POP	HL
	PUSH	HL
	PUSH	HL
	LD	HL,I$60B1		; return here
	EX	(SP),HL
	PUSH	HL
	PUSH	BC
	PUSH	AF
	CALL	C.7BF1			; disable I/O ports
	CALL	C.5FE0			; get my slot id
	DEFB	0FDH
	CP	H			; is this the master disk ROM ?
	JR	NZ,J$60AB		; nope, use CALSLT for driver routine
	POP	AF
	POP	BC
	POP	HL
	JP	(IX)			; call driver routine directly

J$60AB:	POP	AF
	POP	BC
	POP	HL
	JP	CALSLT
I$60B1:	CALL	C.517F			; enable I/O ports
	JP	J$6306			; restore and enable interrupts

;	  Subroutine determine drive id and slot id of interface
;	     Inputs  ________________________
;	     Outputs ________________________

C.60B7:	LD	(D.F33F),A		; store drive id
	LD	HL,I.FB21
J$60BD:	SUB	(HL)			; drive id handled by this interface ?
	JR	C,J$60C4		; yep,
	INC	HL
	INC	HL
	JR	J$60BD			; next interface

J$60C4:	ADD	A,(HL)			; to drive id of interface
	INC	HL
	LD	H,(HL)
	PUSH	HL
	POP	IY			; slot id interface in IYH
	RET

;	  Subroutine mark FAT buffer invalid
;	     Inputs  ________________________
;	     Outputs ________________________

C.60CB:	CALL	C.45FB			; get pointer to FAT buffer
	DEC	HL
	LD	(HL),0FFH		; FAT buffer invalid
	RET

;	  Subroutine prompt for drive (if multiple)
;	     Inputs  ________________________
;	     Outputs ________________________

C.60D2:	LD	A,(D.F347)
	DEC	A			; total number of drives = 1 ?
	RET	Z			; yep, quit
J$60D7:	CALL	C.5FA9
	DEFB	"Drive name? ("
	DEFB	0
	LD	A,(D.F347)
	LD	B,A			; total number of drives
	LD	A,"A"
	JR	J$60F7

J$60F0:	PUSH	AF
	LD	A,","
	CALL	C.408F			; character to screen
	POP	AF
J$60F7:	CALL	C.408F			; character to screen
	INC	A
	DJNZ	J$60F0
	CALL	C.5FA9
	DEFB	") "
	DEFB	0
J$6103:	CALL	C.61B4
	CALL	C.6266			; character + CR/LF to screen
	AND	0DFH			; to upper
	SUB	"A"
	LD	HL,D.F347
	CP	(HL)			; valid drive id ?
	JR	NC,J$60D7		; nope, try again
	RET

C.6114:	AND	A			; have no workarea for format

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6115:	LD	(D.F339),SP		; store stack pointer
	CALL	NC,C.6276		; no workarea for format, allocate temporary workarea
	PUSH	HL
	PUSH	BC
	CALL	C.60D2			; prompt for drive (if multiple)
	CALL	C.60CB			; mark FAT buffer invalid
	CALL	C.60B7			; determine drive id and slot id of interface
	PUSH	IY
	PUSH	AF
	PUSH	IY
	LD	IX,I$4019		; get pointer to format choice string
	CALL	CALSLT
	LD	A,L
	OR	H			; has format choice string ?
	JR	Z,J$615E		; nope, skip choice
	POP	AF
J$6138:	PUSH	AF
	CALL	RDSLT
	AND	A			; end of format choice string ?
	JR	Z,J$6146		; yep, continue
	CALL	C.408F			; character to screen
	INC	HL
	POP	AF
	JR	J$6138

J$6146:	POP	AF
	CALL	C.5FA9
	DEFB	"? "
	DEFB	0
J.614D:	CALL	C.61B4
	SUB	"1"
	CP	8+1			; valid choice nummer ?
	JR	NC,J.614D		; nope, again
	ADD	A,"1"
	CALL	C.6266			; character + CR/LF to screen
	SUB	"0"
	PUSH	AF			; store choice
J$615E:	CALL	C.6198
	POP	AF			; restore choice
	POP	DE
	POP	IY
	POP	BC
	POP	HL
	LD	IX,I$401C		; format disk
	CALL	CALSLT
	LD	HL,I$71F2		; format complete
	JR	NC,J.618F		; no error, CR/LF + string + CR/LF to screen
	LD	HL,I$71B5		; disk I/O error
	CP	16-1
	JR	NC,J.618F		; CR/LF + string + CR/LF to screen
	CP	12
	JR	NC,J$6183
	CP	4-1
	JR	NC,J.618F		; CR/LF + string + CR/LF to screen
	DEFB	21H
J$6183:	SUB	8
	LD	HL,I$6222		; table pointers to error messages
	CALL	C.4564
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A			; pointer to message

;	  Subroutine CR/LF + string + CR/LF to screen
;	     Inputs  ________________________
;	     Outputs ________________________

J.618F:	CALL	C.6269			; CR/LF to screen

;	  Subroutine string + CR/LF to screen
;	     Inputs  ________________________
;	     Outputs ________________________

J$6192:	CALL	C.5FAF			; string to screen
	JP	C.6269			; CR/LF to screen

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6198:	CALL	C.5FA9
I.619B:	DEFB	"Press a key to continue "
	DEFB	0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.61B4:	CALL	C.406B			; get fresh key
	CP	3			; CTRL-C ?
	RET	NZ			; nope, quit
	LD	SP,(D.F339)
	CALL	C.5FA9
	DEFB	10,"Aborted"
	DEFB	0
	RET

J$61CB:	LD	DE,I.F698
	LD	HL,(D.F678)
	LD	(D.F7F8),HL
	LD	A,3
	LD	(D.F663),A
	CALL	C.2EF3
	LD	DE,D.F69B
	_RST	DCOMPR
	LD	(D.F678),HL
	RET	NZ
	JP	J.7239
J$61E7:	LD	HL,I.FB21
	LD	B,4			; number of interfaces = 4
J$61EC:	INC	HL
	LD	A,(HL)			; slot id interface
	PUSH	AF
	POP	IY			; slot id in IYH
	INC	HL
	PUSH	HL
	PUSH	BC
	LD	HL,I$401F
	PUSH	HL
	POP	IX
	AND	A
	CALL	NZ,RDSLT
	AND	A
	CALL	NZ,CALSLT
	POP	BC
J$6203:	POP	HL
	DJNZ	J$61EC			; next interface
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6207:	LD	A,(H.CLEA+0)
	CP	0C9H
	JR	Z,J$621F
J$620E:	LD	HL,I$7234
J$620F	EQU	$-2
	LD	DE,H.LOPD
	LD	BC,5
	LDIR
	CALL	C.5FE0			; get my slot id
J$621C:	LD	(H.LOPD+1),A
J$621F:	JP	C.5FE0

; table pointers to error messages
I$6222:	DEFW	I.71A0			; disk write protected
	DEFW	I.71C4			; disk offline
	DEFW	I.71E4			; bad parameter
	DEFW	I.5EF7			; out of memory

;	  Subroutine prompt for disk
;	     Inputs  ________________________
;	     Outputs ________________________

C$622A:	PUSH	AF			; store drive id
	CALL	C.455D			; get pointer to DPB entry current drive id
	CALL	C.4CA1
	POP	AF			; restore drive id
	ADD	A,"A"
	CALL	C.F24F
	PUSH	AF			; store drive letter
	CALL	C.5FA9
	DEFB	10,"Insert disk for drive "
	DEFB	0
J$6253:	POP	AF			; restore drive letter
	CALL	C.6266			; character + CR/LF to screen
	LD	HL,I.619B		; press any key to continue
	CALL	C.5FAF			; string to screen
J$625D:	CALL	C.406B			; get fresh key
	CP	3			; CTRL-C ?
	JR	Z,J$625D		; yep,
	JR	C.6269			; CR/LF to screen

;	  Subroutine character + CR/LF to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.6266:	CALL	C.408F			; character to screen

;	  Subroutine CR/LF to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.6269:	PUSH	AF
	LD	A,0DH			; CR
	CALL	C.408F			; character to screen
	LD	A,0AH			; LF
	CALL	C.408F			; character to screen
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6276:	LD	HL,-256
	ADD	HL,SP
	LD	DE,(D.F6C6)
	XOR	A
	SBC	HL,DE
	LD	C,L
	LD	B,H
	EX	DE,HL
	RET	NC
	LD	C,A
	LD	B,A
	RET
I$6288:	LD	A,D
	CP	9
	JP	NC,J.6EC9
	_RST	CALLF
	DEFB	0
	DEC	BC
	LD	L,D
	PUSH	HL
	JP	J$6EF4

?.6296:	LD	A,D
	CP	9
	JP	NC,J.6E95
	_RST	CALLF
	DEFB	0
	LD	C,A
	LD	L,C
	RET

;	  Subroutine relocate routine
;	     Inputs  ________________________
;	     Outputs ________________________

C.62A1:	PUSH	DE
	EX	DE,HL
	AND	A
	SBC	HL,BC
	PUSH	HL
	POP	IX
J$62A8	EQU	$-1
	EX	DE,HL
	POP	DE
J$62AB:	LD	A,(HL)
	CP	0FFH
	RET	Z
J$62AF:	INC	HL
	EX	DE,HL
J$62B1:	ADD	A,L
	LD	L,A
	JR	NC,J$62B6
	INC	H
J$62B6:	PUSH	HL
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	PUSH	HL
	PUSH	IX
	POP	HL
	ADD	HL,BC
	LD	C,L
	LD	B,H
	POP	HL
	LD	(HL),B
	DEC	HL
	LD	(HL),C
	EX	DE,HL
	POP	DE
	JR	J$62AB

; relocation table interrupt routine
I$62CA:	DEFB	0CH
	DEFB	12H
	DEFB	11H
	DEFB	0FFH

I$62CE:	PUSH	IX
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	EXX
	EX	AF,AF'
	PUSH	AF
	PUSH	HL
	LD	HL,(D.62F6+1)
	LD	A,L
	OR	H
	POP	HL
	LD	IX,KEYINT
	LD	IY,(EXPTBL+0-1)
	JR	NZ,J$630D
	POP	AF
	LD	(D.62F6+1),SP
	LD	SP,0
	CALL	CALSLT
	DI
D.62F6:	LD	SP,0
	PUSH	HL
	LD	HL,0
	LD	(D.62F6+1),HL
	POP	HL
J$6301:	EX	AF,AF'
	EXX
	POP	AF
	POP	BC
	POP	DE
J$6306:	POP	HL
	POP	IY
	POP	IX
	EI
	RET
J$630D:	POP	AF
	CALL	CALSLT
	JR	J$6301

S.62CE	EQU	$-I$62CE
I$6313:	PUSH	AF
	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	C$402D
	PUSH	AF
	LD	H,HIGH 4000H
	LD	A,(D.F342)
	CALL	ENASLT
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	LDIR
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	H,HIGH 4000H
	CALL	ENASLT
	POP	BC
	POP	DE
	POP	HL
	POP	AF
	RET

S.6313	EQU	$-I$6313
I$6336:	JR	J$633E

?.6338:	PUSH	AF
	LD	A,(D.F342)
	JR	J$6342
J$633E:	PUSH	AF
	LD	A,(D.F348)
J$6342:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	H,HIGH 4000H
	CALL	ENASLT
	POP	BC
	POP	DE
	POP	HL
	POP	AF
	RET
S.6336	EQU	$-I$6336

; relocation table slot switching routines

I$634F:	DEFB	00H
	DEFB	03H
	DEFB	0DH
	DEFB	03H
	DEFB	04H
	DEFB	05H
	DEFB	06H
	DEFB	03H
	DEFB	0CH
	DEFB	03H
	DEFB	05H
	DEFB	06H
	DEFB	2AH
	DEFB	03H
	DEFB	0CH
	DEFB	03H
	DEFB	03H
	DEFB	16H
	DEFB	14H
	DEFB	03H
	DEFB	0AH
	DEFB	03H
	DEFB	04H
	DEFB	6EH
	DEFB	07H
	DEFB	07H
	DEFB	0DH
	DEFB	08H
	DEFB	0FFH

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.636C:	CALL	C.643A
	JP	M,J$637C
	IN	A,(0A8H)
	LD	D,A
	AND	C
	OR	B
	CALL	I.F380
	LD	A,E
	RET
J$637C:	CALL	C.6489
	JP	Z,J$6496
	PUSH	HL
	CALL	C.645F
	EX	(SP),HL
	PUSH	BC
	CALL	C.636C
	JR	J$63AE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$638D:	PUSH	DE
	CALL	C.643A
	JP	M,J$639D
	POP	DE
	IN	A,(0A8H)
	LD	D,A
	AND	C
	OR	B
	JP	J$F385
J$639D:	CALL	C.6489
	JP	Z,J$649C
	EX	(SP),HL
	PUSH	HL
	CALL	C.645F
	POP	DE
	EX	(SP),HL
	PUSH	BC
	CALL	C$638D
J$63AE:	POP	BC
	EX	(SP),HL
	PUSH	AF
	LD	A,B
	AND	3FH
	OR	C
	CALL	C.0046
	POP	AF
	POP	HL
	RET

?.63BB:	EX	(SP),HL
	PUSH	AF
	PUSH	DE
	LD	A,(HL)
	PUSH	AF
	POP	IY
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	DE
	POP	IX
	POP	DE
	POP	AF
	EX	(SP),HL

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$63CD:	EXX
	EX	AF,AF'
	PUSH	IY
	POP	AF
	PUSH	IX
	POP	HL
	CALL	C.643A
	JP	M,J$63E4
	IN	A,(0A8H)
	PUSH	AF
	AND	C
	OR	B
	EXX
	JP	J$F38C
J$63E4:	CALL	C.6489
	JP	Z,J$64A4
	CALL	C.645F
	PUSH	AF
	POP	IY
	PUSH	HL
	PUSH	BC
	LD	C,A
	LD	B,00H
	LD	A,L
	AND	H
	OR	D
	LD	HL,I.FCC5
	ADD	HL,BC
	LD	(HL),A
	PUSH	HL
	EX	AF,AF'
	EXX
	CALL	C$63CD
	EXX
	EX	AF,AF'
	POP	HL
	POP	BC
	POP	DE
	LD	A,B
	AND	3FH
	OR	C
	DI
	CALL	C.004B
	LD	(HL),E
	EX	AF,AF'
	EXX
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6414:	CALL	C.643A
	JP	M,J$6421
	IN	A,(0A8H)
	AND	C
	OR	B
	OUT	(0A8H),A
	RET
J$6421:	CALL	C.6489
	JP	Z,C.64B9
	PUSH	HL
	CALL	C.645F
	LD	C,A
	LD	B,00H
	LD	A,L
	AND	H
	OR	D
	LD	HL,I.FCC5
	ADD	HL,BC
	LD	(HL),A
	POP	HL
	LD	A,C
	JR	C.6414

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.643A:	DI
	PUSH	AF
	LD	A,H
	RLCA
	RLCA
	AND	03H	; 3 
	LD	E,A
	INC	E
	LD	A,0C0H
J$6445:	RLCA
	RLCA
	DEC	E
	JR	NZ,J$6445
	LD	E,A
	CPL
	LD	C,A
	POP	AF
	PUSH	AF
	AND	03H
	LD	B,A
	INC	B
	LD	A,0ABH
J$6455:	ADD	A,55H
	DJNZ	J$6455
	LD	D,A
	AND	E
	LD	B,A
	POP	AF
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.645F:	PUSH	AF
	LD	A,D
	AND	0C0H
	LD	C,A
	POP	AF
	PUSH	AF
	LD	D,A
	IN	A,(0A8H)
	LD	B,A
	AND	3FH
	OR	C
	PUSH	AF
	LD	A,D
	RRCA
	RRCA
	AND	03H
	LD	D,A
	INC	D
	LD	A,0ABH
J$6477:	ADD	A,55H
	DEC	D
	JR	NZ,J$6477
	AND	E
	LD	D,A
	LD	A,E
	CPL
	LD	H,A
	POP	AF
I.6482:	CALL	C.64D4
	POP	AF
	AND	03H
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6489:	INC	D
	DEC	D
	RET	NZ
	PUSH	BC
	LD	C,A
	LD	A,(D.F341)
	AND	E
	CP	B
	LD	A,C
	POP	BC
	RET
J$6496:	CALL	C.64C1
	LD	E,(HL)
	JR	C.64A1
J$649C:	POP	DE
	CALL	C.64C1
	LD	(HL),E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.64A1:	LD	A,B
	JR	J$64CF
J$64A4:	CALL	C.64B9
	PUSH	HL
	PUSH	BC
	EX	AF,AF'
	EXX
	CALL	C$F398
	EXX
	EX	AF,AF'
	POP	BC
	CALL	C.64A1
	POP	HL
	LD	(HL),B
	EX	AF,AF'
	EXX
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.64B9:	CALL	C.64C1
	LD	HL,I.FCC5
	LD	(HL),D
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.64C1:	RRCA
	RRCA
	AND	03H
	LD	D,A
	LD	A,(D.FFFF)
	CPL
	LD	B,A
	AND	0FCH
	OR	D
	LD	D,A
J$64CF:	LD	(D.FFFF),A
	LD	A,E
	RET

S.636C	EQU	$-C.636C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.64D4:
	.PHASE	003BH
C.003B:	OUT	(0A8H),A
	LD	A,(D.FFFF)
	CPL
	LD	L,A
	AND	H
	OR	D
	JR	J.004E

C.0046:	OUT	(0A8H),A
	LD	A,L
	JR	J.004E

C.004B:	OUT	(0A8H),A
	LD	A,E
J.004E:	LD	(D.FFFF),A
	LD	A,B
	OUT	(0A8H),A
	RET

	.DEPHASE
S.64D4	EQU	$-C.64D4

;	  Subroutine extension BASIC statement handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.64EE:	LD	A,(H.GETP+0)
	CP	0C9H			; diskBASIC activated ?
	SCF
	RET	Z			; nope, quit with statement not recognized
	LD	DE,I$7D6B		; table with BASIC CALL statements
J$64F8:	LD	A,(DE)
	OR	A			; end of table ?
	SCF
	RET	Z			; yep, quit with statement not recognized
	PUSH	HL			; store BASIC pointer
	CALL	C$745F
	JR	NZ,J.6523
	EX	DE,HL
	LD	B,(HL)			; statement only valid when master disk ROM flag
	INC	HL
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A			; address statement handler
	LD	A,B
	BIT	0,A			; statement only valid when master disk ROM ?
	JR	Z,J.651C		; nope, execute statement
	PUSH	HL
	CALL	C.5FE0			; get my slot id
	LD	HL,D.F348
	CP	(HL)			; is this the master disk ROM ?
	POP	HL
	JR	Z,J.651C		; yep, execute statement
	POP	HL			; restore BASIC pointer
	SCF
	RET				; statement not recognized

J.651C:	EX	(SP),HL			; restore BASIC pointer, store address handler
	CALL	C.721F			; get current BASIC character
	SCF
	CCF
	RET				; statement recognized

J.6523:	LD	A,(DE)
	INC	DE
	CP	20H
	JR	NC,J.6523
	INC	DE
	INC	DE
	POP	HL
	JR	J$64F8

;	  Subroutine CALL SYSTEM
;	     Inputs  ________________________
;	     Outputs ________________________

C.652E:	RET	NZ
	LD	A,(D.F346)
	AND	A
	JP	Z,J.7257
	LD	IX,I.6C1C
	CALL	C.7260
	CALL	TOTEXT
	CALL	ERAFNK
	XOR	A
	JP	J$5A70
I.6545	EQU	$-2

;	  Subroutine CALL FORMAT
;	     Inputs  ________________________
;	     Outputs ________________________

C.6547:	PUSH	HL
	PUSH	AF
	LD	A,(D.F347)
	OR	A			; total number of drives = 0 ?
	JP	Z,J.7257		; yep,
	POP	AF
	CALL	Z,C.6115
	POP	HL
	AND	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6557:	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	C.5356
	LD	C,A
	LD	HL,(D.F860)
	LD	A,(D.F85F)
J$6564:	PUSH	AF
	LD	E,(HL)
	INC	HL
J$6567:	LD	D,(HL)
	INC	HL
	PUSH	HL
	EX	DE,HL
	LD	A,(HL)
	AND	A
	JR	Z,J.659B
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	CP	09H	; 9 
	JR	NC,J.659B
	DEC	HL
	DEC	HL
	LD	D,(HL)
	DEC	HL
	LD	E,(HL)
	LD	A,(DE)
	CALL	C$5357
	CP	C
	JR	NZ,J.659B
	INC	DE
	EX	DE,HL
	LD	DE,D.F866
	LD	B,11
J$658B:	LD	A,(DE)
	CP	"?"
	JR	Z,J$6593
	CP	(HL)
	JR	NZ,J.659B
J$6593:	INC	DE
	INC	HL
	DJNZ	J$658B
	POP	HL
	POP	HL
	JR	J.660D
J.659B:	POP	HL
	POP	AF
	DEC	A
	JP	P,J$6564
	JR	J.660D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$65A3:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	A,D
	LD	(X.F568),A
	CALL	C.65C4
	CALL	C.65B2
	JR	J.660D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.65B2:	LD	HL,I.F5B2
	LD	(D.F23D),HL
	LD	DE,X.F568
	XOR	A
	LD	(D.F574),A
	CALL	C.4FB8			; search for first
	INC	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.65C4:	LD	DE,I.F569

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.65C7:	LD	HL,D.F866
	LD	BC,11
	LDIR
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.65D0:	EI
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	A,(D.F348)
	ADD	A,A
	LD	HL,16
	JR	NC,J$65E0
	LD	L,16+8
J$65E0:	ADD	HL,SP
	PUSH	IX
	POP	BC
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	HL,10
	ADD	HL,SP
	EX	DE,HL
	JR	J$65FA
J$65EE:	PUSH	IY
	POP	BC
J$65F1:	LD	C,(HL)
	LD	A,(DE)
	LD	(HL),A
	LD	A,C
	LD	(DE),A
	INC	HL
	INC	DE
	DJNZ	J$65F1
J$65FA:	LD	A,(D.F348)
	ADD	A,A
	LD	HL,18
	JR	NC,J$6605
	LD	L,18+8
J$6605:	ADD	HL,SP
	LD	A,E
	SUB	L
	LD	A,D
	SBC	A,H
	JR	C,J$65EE
J$660C:	POP	AF
J.660D:	POP	BC
	POP	DE
	POP	HL
	RET
C.6611:	LD	IX,I.F38B
	LD	IY,2*256+0
	CALL	C.65D0
	POP	HL
	LD	A,(HL)
	AND	A
	RET

C.6620:	EI
	LD	BC,256
	LD	(D.F33D),BC
	CALL	C.721F			; get current BASIC character
	LD	A,E
	RET	Z			; end of statement, quit
	PUSH	AF
	PUSH	HL
	LD	A,(D.F348)
	ADD	A,A
	LD	HL,12
	JR	NC,J$663A
	LD	L,12+8
J$663A:	ADD	HL,SP
	LD	A,(HL)
	CP	04H	; 4 
	JP	NZ,J.725A
	INC	HL
	LD	A,(HL)
	CP	09H	; 9 
	JP	NC,J.725A
	POP	HL
	CALL	C.7215			; check for BASIC character
	DEFB	0FFH
	CALL	C.7215			; check for BASIC character
	SUB	D
	CALL	C.7215			; check for BASIC character
	DEFB	0EFH
	LD	IX,I$4756
	CALL	C.7260
	DEC	DE
	INC	D
	DEC	D
	JP	NZ,J.7257
	INC	DE
	LD	(D.F33D),DE
	POP	AF
	RET
C.6669:	EI
	RET	NC
	LD	IX,I.F38B
	LD	IY,4*256+0
	CALL	C.65D0
	CALL	C$6EE6
	CALL	C.6557
	JP	Z,J$724B
	LD	(D.F864),HL
	LD	A,E
	CP	04H	; 4 
	JR	Z,J.668E
	LD	BC,1
	LD	(D.F33D),BC
J.668E:	POP	AF
	PUSH	AF
	PUSH	HL
	PUSH	DE
	LD	HL,D.F345
	CP	(HL)
	JP	NC,J$724E
	LD	BC,37
	LD	E,A
	LD	D,B
	LD	HL,(D.F353)
	CALL	C.4922			; multiply high word
	XOR	A
	LD	HL,12
	ADD	HL,BC
	LD	(HL),A
	POP	DE
	POP	HL
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),D
	INC	HL
	INC	HL
	LD	(HL),A
	CALL	C$65A3
	PUSH	BC
	PUSH	DE
	LD	A,D
	LD	(BC),A
	LD	E,C
	LD	D,B
	INC	DE
	CALL	C.65C7
	POP	DE
	POP	BC
	LD	A,E
	JR	NZ,J$66E5
	AND	86H
	JP	Z,J.7254
J.66CE:	PUSH	DE
	PUSH	BC
	LD	E,C
	LD	D,B
	CALL	C.461D			; create file
	AND	A
	JP	NZ,J.70E9
	POP	HL
	CALL	C.676B
	POP	DE
	LD	HL,(D.F864)
	LD	(HL),E
J.66E2:	POP	AF
	POP	HL
	RET
J$66E5:	CP	08H	; 8 
	JR	Z,J$672E
	CP	02H	; 2 
	JR	Z,J.66CE
	CP	80H
	JR	Z,J.66CE
	PUSH	DE
	PUSH	BC
	LD	E,C
	LD	D,B
	CALL	C.4462			; open file
	POP	HL
	CALL	C.676B
	POP	DE
	LD	HL,(D.F864)
	LD	(HL),E
	LD	A,E
	CP	04H	; 4 
	JR	Z,J.66E2
	PUSH	HL
	LD	HL,D.FCAE
	XOR	A
	CP	(HL)
	LD	(HL),A
	POP	HL
	JR	NZ,J.66E2
	LD	BC,6
	ADD	HL,BC
	PUSH	HL
	LD	(HL),0FFH
	LD	HL,(D.F864)
	CALL	C.6797
	POP	HL
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(HL),A
	CP	0FFH
	JR	NZ,J.66E2
	INC	HL
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),80H
J$672C:	JR	J.66E2
J$672E:	PUSH	BC
	LD	E,C
	LD	D,B
	CALL	C.4462			; open file
	POP	HL
	PUSH	HL
	CALL	C.676B
	LD	HL,(D.F864)
	LD	(HL),01H	; 1 
	LD	BC,6
	ADD	HL,BC
	LD	(HL),0FFH
	LD	HL,(D.F864)
J$6747:	PUSH	HL
	CALL	C.6797
	POP	HL
	JR	NC,J$6747
	LD	(HL),02H	; 2 
	POP	HL
	LD	BC,33
	ADD	HL,BC
	LD	C,04H	; 4 
	PUSH	HL
	SCF
J$6759:	LD	A,(HL)
	SBC	A,B
	LD	(HL),A
	INC	HL
	DEC	C
	JR	NZ,J$6759
	POP	HL
	INC	C
	JR	NC,J$6766
	LD	C,04H	; 4 
J$6766:	CALL	C.6780
	JR	J$672C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.676B:	LD	BC,12
	ADD	HL,BC
	LD	(HL),B
	INC	HL
	LD	(HL),B
	INC	HL
	LD	BC,(D.F33D)
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	BC,17
	ADD	HL,BC
	LD	C,05H	; 5 

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6780:	LD	(HL),B
	INC	HL
	DEC	C
	JR	NZ,C.6780
	RET
C.6786:	LD	IX,I.F38B
	LD	IY,6*256+0
	CALL	C.65D0
	CALL	C.6797
	JP	J.660D

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6797:	PUSH	HL
	LD	A,(HL)
	CP	01H	; 1 
	JP	NZ,J.70D7
	LD	E,L
	LD	D,H
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	AND	A
	JR	NZ,J$67D3
	INC	HL
	INC	HL
	INC	HL
	INC	(HL)
	LD	A,(HL)
	INC	HL
	INC	HL
	INC	HL
	JR	NZ,J.67CE
	PUSH	HL
	LD	(D.F23D),HL
	EX	DE,HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	HL,256
	CALL	C.47B2			; read random block
	LD	E,L
	LD	D,H
	DEC	H
	LD	A,L
	OR	H
	POP	HL
	JR	Z,J.67CE
	PUSH	HL
	ADD	HL,DE
	LD	(HL),1AH
	POP	HL
	XOR	A
J.67CE:	LD	C,A
	LD	B,00H
I$67D0	EQU	$-1
	ADD	HL,BC
	LD	A,(HL)
J$67D3:	LD	B,A
	SUB	1AH
	SUB	01H	; 1 
	LD	A,B
	POP	HL
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),00H
	RET	NC
	LD	(HL),A
	RET
C.67E2:	EI
	PUSH	HL
	LD	A,(D.F348)
	ADD	A,A
	LD	HL,8
	JR	NC,J$67EF
	LD	L,8+8
J$67EF:	ADD	HL,SP
	LD	(HL),41H	; "A"
	INC	HL
	LD	(HL),6EH	; "n"
	POP	HL
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),C
	RET
C.67FB:	LD	IX,I.F38B
	LD	IY,8*256+0
	CALL	C.65D0
	LD	A,(HL)
	CP	02H	; 2 
	JP	NZ,J.70D7
	POP	AF
	PUSH	AF
	CALL	C.6814
	JP	J$660C

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6814:	PUSH	HL
	LD	BC,6
	ADD	HL,BC
	LD	C,(HL)
	INC	(HL)
	INC	HL
	INC	HL
	INC	HL
	ADD	HL,BC
	LD	(HL),A
	POP	HL
	RET	NZ

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6822:	PUSH	HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,4
	ADD	HL,BC
	LD	A,(HL)
	INC	HL
	INC	HL
	INC	HL
	LD	(D.F23D),HL
	AND	A
	LD	L,A
	LD	H,B
	JR	NZ,J$6838
	INC	H
J$6838:	CALL	C.70CD
	POP	HL
	RET
C.683D:	LD	IX,I.F38B
	LD	IY,4*256+0
	CALL	C.65D0
	POP	HL
	LD	A,(HL)
	SUB	02H	; 2 
	JR	NZ,J.6861
	PUSH	HL
	LD	HL,D.FCAE
	CP	(HL)
	LD	(HL),A
	POP	HL
	JR	NZ,J.6861
	LD	(HL),04H	; 4 
	LD	A,1AH
	CALL	C.6814
	CALL	NZ,C$6822
J.6861:	PUSH	HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	CALL	C.456F			; close file
	POP	HL
	PUSH	HL
	LD	DE,7
	ADD	HL,DE
	LD	(HL),D
	LD	L,D
	LD	H,D
	LD	(D.F864),HL
	POP	HL
	INC	(HL)
	DEC	(HL)
	LD	(HL),D
	POP	HL
	RET
C.687B:	CALL	C.72C2
	PUSH	HL
	LD	IX,I$54F7
	CALL	C.7260
	LD	A,0FFH
	CALL	C.6934
	LD	HL,(D.F676)
	LD	(D.F23D),HL
	EX	DE,HL
	LD	HL,(D.F6C2)
	AND	A
	SBC	HL,DE
	CALL	C.70C9
	LD	(D.F87C),A
	POP	HL

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.689F:	LD	IX,I$6B24
	JP	C.7260
C.68A6:	LD	IX,I$739A
	LD	IY,2*256+0
	CALL	C.65D0
	POP	AF
	JP	Z,J.70D7
	LD	IX,I.6C1C
	CALL	C.7260
	LD	HL,(D.F353)
	PUSH	HL
	CALL	C.676B
	POP	HL
	PUSH	HL
	LD	BC,19
	ADD	HL,BC
	LD	A,(HL)
	AND	A
	JP	NZ,J.723F
	DEC	HL
	OR	(HL)
	JP	NZ,J.723F
	DEC	HL
	LD	D,(HL)
	DEC	HL
	LD	E,(HL)
	LD	HL,(D.F676)
	ADD	HL,DE
	JP	C,J.723F
	LD	BC,0093H
	ADD	HL,BC
	JP	C,J.723F
	SBC	HL,SP
	JP	NC,J.723F
	EX	DE,HL
	EX	(SP),HL
	EX	DE,HL
	CALL	C.693D
	LD	HL,(D.F676)
	LD	(D.F23D),HL
	POP	HL
	DEC	HL
	CALL	C.47B2			; read random block
	LD	DE,(D.F676)
	ADD	HL,DE
	LD	(D.F6C2),HL
	LD	IX,I$4253
	CALL	C.7260
	LD	A,(D.F866)
	AND	A
	RET	NZ
	LD	(D.F87C),A
	LD	HL,I$6926
	LD	DE,X.F568
	LD	BC,5
	PUSH	DE
	LDIR
	POP	HL
	LD	IX,I$4601
	JP	C.7260
I$6926:	DEFB	':',92H,0
	DEFW	0

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.692B:	PUSH	HL
	LD	A,L
	CALL	C.6938
	POP	HL
	LD	A,H
	JR	C.6938

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6934:	LD	DE,(D.F353)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6938:	LD	BC,C.47BE		; write random block
	JR	J$6940

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.693D:	LD	BC,C.47B2		; read random block
J$6940:	PUSH	AF
	LD	HL,1
	ADD	HL,SP
	LD	(D.F23D),HL
	PUSH	DE
	CALL	C.456A
	POP	DE
	POP	AF
	RET

?.694F:	PUSH	DE
	CALL	C.6ACA
	LD	(D.FCBF),DE
	PUSH	DE
	CALL	C.6ACA
	LD	(D.F87D),DE
	EX	(SP),HL
	EX	DE,HL
	_RST	DCOMPR
	JP	C,J.7257
	EX	DE,HL
	EX	(SP),HL
	CALL	C.721F			; get current BASIC character
	SCF
	JR	Z,J.6983		; end of statement,
	CALL	C.7215			; check for BASIC character
	DEFB	","
	CP	"S"
	JR	NZ,J$697B
	CALL	C.7220			; get next BASIC character
	AND	A			; end of line ?
	JR	J.6983
J$697B:	CALL	C.6ACE
	LD	(D.FCBF),DE
	SCF
J.6983:	POP	BC
	JR	NC,J$698B
	INC	B
	DEC	B
	JP	P,J.7257
J$698B:	POP	DE
	PUSH	HL
	PUSH	BC
	PUSH	AF
	XOR	A
	LD	E,02H	; 2 
	LD	IX,I.6AFA
	CALL	C.7260
	LD	A,0FEH
	CALL	C.6934
	POP	AF
	POP	HL
	PUSH	HL
	PUSH	AF
	CALL	C.692B
	LD	HL,(D.F87D)
	CALL	C.692B
	LD	HL,(D.FCBF)
	CALL	C.692B
	POP	AF
	POP	BC
	PUSH	AF
	LD	(D.F23D),BC
	LD	HL,(D.F87D)
	AND	A
	SBC	HL,BC
	INC	HL
	POP	AF
	JR	NC,J$69D1
	CALL	C.70C9
J$69C5:	LD	A,0FFH
	LD	(D.FCAE),A
	XOR	A
	CALL	C.689F
	JP	J.6E35
J$69D1:	CALL	C.70A3
J$69D4:	PUSH	HL
	LD	DE,(D.FCBF)
	_RST	DCOMPR
	PUSH	AF
	LD	C,L
	LD	B,H
	LD	HL,(D.F87D)
	PUSH	HL
	ADD	HL,BC
	LD	(D.F87D),HL
	POP	HL
	LD	DE,(D.F23D)
	CALL	LDIRMV
	POP	AF
	JR	NC,J$6A02
	POP	HL
	PUSH	HL
	CALL	C.70C9
	LD	HL,(D.FCBF)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(D.FCBF),HL
	EX	DE,HL
	JR	J$69D4
J$6A02:	POP	HL
	LD	HL,(D.FCBF)
	CALL	C.70C9
	JR	J$69C5

?.6A0B:	PUSH	DE
	XOR	A
	LD	(D.FCBE),A
I$6A0E	EQU	$-2
	LD	C,A
	LD	B,A
	CALL	C.721F			; get current BASIC character
	JR	Z,J.6A34		; end of statement,
	CALL	C.7215			; check for BASIC character
	DEFB	","
	CP	"R"
	JR	Z,J$6A23
	CP	"S"
	JR	NZ,J$6A2F
J$6A23:	LD	(D.FCBE),A
	CALL	C.7220			; get next BASIC character
	JR	Z,J.6A34		; end of statement,
	CALL	C.7215			; check for BASIC character
	DEFB	","
J$6A2F:	CALL	C.6ACE
	LD	B,D
	LD	C,E
J.6A34:	POP	DE
	PUSH	HL
	PUSH	BC
	LD	A,0FFH
	LD	(D.FCAE),A
	XOR	A
	LD	E,01H	; 1 
	LD	IX,I.6AFA
	CALL	C.7260
	LD	DE,(D.F353)
	CALL	C.693D
	CP	0FEH
	JP	NZ,J.70D7
	POP	BC
	CALL	C.6ABC
	PUSH	HL
	CALL	C.6ABC
	PUSH	HL
	CALL	C.6ABC
	LD	(D.FCBF),HL
	POP	HL
	POP	BC
	AND	A
	SBC	HL,BC
	INC	HL
	LD	(D.F23D),BC
	LD	A,(D.FCBE)
I.6A6D	EQU	$-1
	CP	53H	; "S"
	JR	Z,J$6A7A
	CALL	C.47B2			; read random block
J$6A75:	CALL	C$6E36
	POP	HL
	RET
J$6A7A:	CALL	C.70A3
J$6A7D:	PUSH	HL
	LD	DE,(D.FCBF)
	_RST	DCOMPR
	PUSH	AF
	LD	DE,(D.F353)
	CALL	C.47B2			; read random block
	POP	AF
	POP	BC
	PUSH	BC
	PUSH	AF
	LD	HL,(D.F87D)
	PUSH	HL
	ADD	HL,BC
	LD	(D.F87D),HL
	POP	DE
	LD	HL,(D.F23D)
	POP	AF
	JR	NC,J$6AAE
	CALL	LDIRVM
	LD	HL,(D.FCBF)
	POP	DE
	AND	A
	SBC	HL,DE
	LD	(D.FCBF),HL
	EX	DE,HL
	JR	J$6A7D
J$6AAD	EQU	$-1
J$6AAE:	POP	BC
	LD	BC,(D.FCBF)
	CALL	LDIRVM
	XOR	A
	LD	(D.FCBE),A
	JR	J$6A75

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6ABC:	PUSH	BC
	CALL	C.693D
	PUSH	AF
	CALL	C.693D
	LD	H,A
	POP	AF
	LD	L,A
	POP	BC
	ADD	HL,BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6ACA:	CALL	C.7215			; check for BASIC character
	DEFB	","

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6ACE:	LD	IX,I$6F0B
	JP	C.7260
C.6AD5:	CALL	C.72C2
	CALL	C.7220			; get next BASIC character
	CALL	C.7215			; check for BASIC character
	JR	Z,J$6AAD
	DEC	H
	LD	L,E
	CALL	C.7215			; check for BASIC character
	DEFB	")"
	PUSH	HL
	LD	HL,I$3FD6
	LD	(D.F7F8),HL
	POP	HL
	LD	A,03H	; 3 
	LD	(D.F663),A
	AND	A
	JR	J$6B01
C.6AF6:	CALL	C.72C2
	CALL	C$6B25
	CALL	C.721F			; get current BASIC character
	RET	NZ			; not end of statement, quit
	SCF
J$6B01:	PUSH	AF
	PUSH	HL
	PUSH	DE
	LD	E,C
	CALL	C.505D			; get disk allocation information
	INC	A
	JP	Z,J.70DA
	POP	DE
	POP	HL
	POP	AF
	PUSH	HL
	LD	A,0FFH
	LD	(D.F246),A		; directory buffer = invalid
	LD	A,(IX+0)		; drive id
	LD	B,1			; number of sectors = 1
	LD	C,(IX+1)		; media descriptor
	LD	HL,(D.F351)		;
	CALL	C.606C			; disk sector operation
	POP	HL
I$6B24:	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6B25:	LD	IX,I.521C
	CALL	C.7260
	PUSH	DE
	CALL	C.7215			; check for BASIC character
	DEFB	","
	LD	IX,I$542F
	CALL	C.7260
	POP	BC
	RET
C.6B3A:	LD	IX,I.F38B
	LD	IY,4*256+0
	CALL	C.65D0
	LD	A,(HL)
	CP	04H	; 4 
	JP	NZ,J.70D7
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	BC,7
	ADD	HL,BC
	EX	(SP),HL
	CALL	C.721F			; get current BASIC character
	JR	Z,J$6B89		; end of statement,
	PUSH	DE
	CALL	C.7215			; check for BASIC character
	DEFB	","
	LD	IX,I$4C64
	CALL	C.7260
	PUSH	HL
	CALL	C$6D4B
	LD	A,C
	OR	B
	OR	L
	OR	H
	JP	Z,J.7257
	LD	A,C
	OR	B
	DEC	BC
	JR	NZ,J$6B76
	DEC	HL
J$6B76:	EX	DE,HL
	POP	HL
	EX	(SP),HL
	PUSH	HL
	PUSH	DE
	LD	DE,33
	ADD	HL,DE
	POP	DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	DE
	POP	HL
J$6B89:	EX	(SP),HL
	LD	(D.F23D),HL
	POP	HL
	POP	AF
	PUSH	HL
	AND	A
	LD	HL,I$7245
	LD	BC,C.47B2		; read random block
	JR	Z,J$6B9F
	LD	HL,J.70E6
	LD	BC,C.47BE		; write random block
J$6B9F:	PUSH	HL
	CALL	C.456A
	AND	A
	RET	NZ
	POP	HL
	JP	J.6E35
C.6BA9:	CALL	C.72C2
	CP	"#"
	CALL	Z,C.7220		; get next BASIC character
	LD	IX,I.521C
	CALL	C.7260
	JP	Z,J.725A
	PUSH	HL
	LD	IX,I.6A6D
	CALL	C.7260
	LD	E,L
	LD	D,H
	JP	Z,J.7242
	JP	C,J.7257
	LD	A,(HL)
	CP	04H	; 4 
	JP	NZ,J.70D7
	INC	HL
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	LD	BC,14
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	(X.F568),BC
	LD	HL,0
	LD	(D.F56A),HL
	LD	BC,9
	POP	HL
J$6BEB:	EX	DE,HL
	ADD	HL,BC
	EX	DE,HL
	LD	A,(HL)
	CP	2CH	; ","
	RET	NZ
	PUSH	DE
	LD	IX,I$521B
	CALL	C.7260
	PUSH	AF
	CALL	C.7215			; check for BASIC character
	LD	B,C
	CALL	C.7215			; check for BASIC character
	LD	D,E
	CALL	C.6C28
	POP	AF
	EX	(SP),HL
	PUSH	DE
	PUSH	HL
	LD	HL,(D.F56A)
	LD	C,A
	LD	B,00H
	ADD	HL,BC
	LD	(D.F56A),HL
	EX	DE,HL
	LD	HL,(X.F568)
	_RST	DCOMPR
	JP	C,J$7248
I.6C1C:	POP	DE
	POP	HL
	LD	(HL),C
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	LD	B,00H
	POP	HL
	JR	J$6BEB

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6C28:	LD	IX,I$5EA4
	CALL	C$6C33
	JP	NZ,J.723C
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6C33:	CALL	C.7260

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6C36:	LD	IX,I$5597
	JP	C.7260

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6C3D:	LD	IX,I$67D0
	JP	C.7260

C.6C44:	DEFB	0F6H
C.6C45:	SCF

	CALL	C.72C2
	PUSH	AF
	CALL	C.6C28
	PUSH	DE
	LD	IX,I$4C5F
	CALL	C.7260
	POP	BC
	EX	(SP),HL
	PUSH	HL
	PUSH	BC
	CALL	C.6C3D
	LD	B,(HL)
	EX	(SP),HL
	LD	A,(HL)
	LD	C,A
	PUSH	BC
	PUSH	HL
	PUSH	AF
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	OR	A
	JR	Z,J$6CC2
	LD	HL,(D.F862)
	DEC	HL
	_RST	DCOMPR
	JR	C,J.6CA0
	LD	HL,(D.F6C2)
	_RST	DCOMPR
	JR	C,J.6CA0
	LD	E,C
	LD	D,00H
	LD	HL,(D.F674)
	ADD	HL,DE
	EX	DE,HL
	LD	HL,(D.F69B)
	_RST	DCOMPR
	JR	C,J$6CD5
	POP	AF
J$6C86:	LD	A,C
	LD	IX,J.668E
	CALL	C.7260
	POP	HL
	POP	BC
	EX	(SP),HL
	PUSH	DE
	PUSH	BC
	CALL	C.6C3D
	POP	BC
	POP	DE
	EX	(SP),HL
	PUSH	BC
	PUSH	HL
	INC	HL
	PUSH	AF
	LD	(HL),E
	INC	HL
	LD	(HL),D
J.6CA0:	POP	AF
	POP	HL
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	POP	BC
	POP	HL
	INC	HL
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	LD	A,C
	CP	B
	JR	NC,J$6CB2
	LD	B,A
J$6CB2:	SUB	B
	LD	C,A
	POP	AF
	CALL	NC,C.6CCC
	INC	B
J$6CB9:	DEC	B
	JR	Z,J$6CC7
	LD	A,(HL)
	LD	(DE),A
	INC	HL
	INC	DE
	JR	J$6CB9
J$6CC2:	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
J$6CC7:	CALL	C,C.6CCC
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6CCC:	LD	A,20H	; " "
	INC	C
J$6CCF:	DEC	C
	RET	Z
	LD	(DE),A
	INC	DE
	JR	J$6CCF
J$6CD5:	POP	AF
	POP	HL
	POP	BC
	EX	(SP),HL
	EX	DE,HL
	JR	NZ,J$6D01
	PUSH	BC
	LD	A,B
	LD	IX,I.6627
	CALL	C.7260
	LD	DE,I.F698
	LD	HL,(D.F678)
	LD	(D.F7F8),HL
	LD	A,03H	; 3 
	LD	(D.F663),A
	CALL	C.2EF3
	LD	DE,D.F69B
	_RST	DCOMPR
	LD	(D.F678),HL
	JP	Z,J.7239
	POP	BC
J$6D01:	EX	(SP),HL
	PUSH	BC
	PUSH	HL
	JP	J$6C86
C.6D07:	LD	A,2

	DEFB	1
C.6D0A:	LD	A,4

	DEFB	1
C.6D0D:	LD	A,8

	CALL	C.72C2
	PUSH	AF
	LD	IX,I$517A
	CALL	C.7260
	POP	AF
	LD	IX,I.6627
	CALL	C.7260
	LD	HL,(D$F699)
	CALL	C$2F10
	JP	J$61CB
C.6D2B:	LD	A,1

	DEFB	1
C.6D2E:	LD	A,3

	DEFB	1
C.6D31:	LD	A,7

	CALL	C.72C2
	PUSH	AF
	CALL	C.6C3D
	POP	AF
	CP	(HL)
	JP	NC,J.7257
	INC	A
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,C
	LD	(D.F663),A
	JP	J$2F08

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6D4B:	CALL	C$6C36
	LD	BC,(D.F7F8)
	LD	HL,0
	RET	M
	JP	Z,J.723C
	LD	HL,I.F7F6
	LD	DE,I.F5FC
	LD	BC,8
	LDIR
	LD	HL,I$4718
	LD	DE,I.F847
	LD	C,08H	; 8 
	LDIR
	CALL	C$289F
	AND	A
	CALL	C$30D1
	LD	IX,I.5432
	CALL	C.7260
	PUSH	DE
	EX	DE,HL
	CALL	C$6F95
	LD	BC,I.6545
	LD	DE,I.6053
	CALL	C.325C
	LD	HL,I.F7F6
	LD	DE,I.F847
	LD	BC,8
	LDIR
	LD	HL,I.F5FC
	LD	DE,I.F7F6
	LD	C,08H	; 8 
	LDIR
	CALL	C$268C
	LD	IX,I.5432
	CALL	C.7260
	LD	C,E
	LD	B,D
	POP	HL
	RET
C.6DAD:	CALL	C.72C2
	PUSH	HL
	CALL	C.6797
	LD	HL,0
	JR	NC,J$6DBA
	DEC	HL
J$6DBA:	PUSH	AF
	CALL	C.2F99
	POP	AF
	POP	HL
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	RET
C.6DC5:	CALL	C.72C2
	LD	D,00H
	JR	Z,J$6DD2
	CALL	C.6EBD
	PUSH	HL
	JR	J$6DD6
J$6DD2:	PUSH	HL
	CALL	C.6F3B
J$6DD6:	CALL	C.6EA0
	LD	A,(D$F416)
	AND	A
	PUSH	AF
	CALL	C.65B2
	JP	Z,J.7254
	LD	IX,I$7323
	CALL	C.7260
J$6DEB:	LD	HL,I$F5B3
	LD	B,11
J$6DF0:	LD	A,(HL)
	INC	HL
	_RST	OUTDO
	LD	A,B
	CP	04H	; 4 
	JR	NZ,J$6E00
	LD	A,(HL)
	CP	20H	; " "
	JR	Z,J$6DFF
	LD	A,2EH	; "."
J$6DFF:	_RST	OUTDO
J$6E00:	DJNZ	J$6DF0
	CALL	CKCNTC
	POP	AF
	PUSH	AF
	LD	A,(D$F3B0)
	LD	B,A
	LD	A,(D$F661)
	JR	Z,J$6E15
	LD	B,50H	; "P"
	LD	A,(D$F415)
J$6E15:	AND	A
	JR	Z,J$6E27
	ADD	A,0CH	; 12 
	CP	B
	JR	NC,J$6E20
	LD	A,20H	; " "
	_RST	OUTDO
J$6E20:	LD	IX,I$7328
	CALL	NC,C.7260
J$6E27:	LD	DE,X.F568
	XOR	A
	LD	(D.F574),A
	CALL	C.5006			; search for next
	INC	A
	JR	NZ,J$6DEB
	POP	AF
J.6E35:	POP	HL

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6E36:	LD	IX,I$4AFF
	JP	C.7260
C.6E3D:	CALL	C.72C2
	CALL	C.6ED3
	CALL	C.721F			; get current BASIC character
	RET	NZ			; not end of statement, quit
	CALL	C.6557
	JP	Z,J.70E0
	CALL	C.6EA0
	PUSH	HL
	LD	DE,X.F568
	CALL	C.436C			; delete file
	AND	A
	JP	NZ,J.7254
	POP	HL
	RET
C.6E5D:	CALL	C.72C2
	CALL	C.6ED3
	CALL	C.6557
	JP	Z,J.70E0
	CALL	C.6EA0
	PUSH	HL
	CALL	C.65B2
	JP	Z,J.7254
	POP	HL
	CALL	C.7215			; check for BASIC character
	LD	B,C
	CALL	C.7215			; check for BASIC character
	LD	D,E
	CALL	C.6ED3
	LD	A,D
	LD	(D$F578),A
	PUSH	HL
	LD	HL,(X.F568)
	AND	A
	JR	Z,J$6E8E
	CP	L
	JP	NZ,J$70F5
J$6E8E:	LD	DE,I.F579
	CALL	C.65C7
	LD	DE,X.F568
J.6E95	EQU	$-2
	CALL	C.4392			; rename file
	AND	A
	JP	NZ,J$70E3
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6EA0:	CALL	C.5356
	INC	A
	LD	(X.F568),A
	PUSH	HL
	PUSH	DE
	CALL	C.65C4
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6EAF:	LD	IX,I$6A0E
	CALL	C.7260
	LD	A,D
	CP	09H	; 9 
	RET	C
	JP	J.70DA

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6EBD:	CALL	C.6EAF
	PUSH	HL
	LD	HL,D.F866
	LD	B,11
J$6EC6:	LD	A,(HL)
	INC	HL
	CP	20H	; " "
J.6EC9	EQU	$-1
	JR	NZ,J.6ED7
	DJNZ	J$6EC6
	CALL	C.6F3B
	JR	J.6ED7

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6ED3:	CALL	C.6EAF
	PUSH	HL
J.6ED7:	LD	HL,D.F866
	LD	B,08H	; 8 
	CALL	C.6F32
	LD	B,03H	; 3 
	CALL	C.6F32
	POP	HL
	OR	37H	; "7"
C$6EE6	EQU	$-1
	PUSH	DE
	PUSH	HL
	LD	DE,D.F866
	PUSH	DE
	LD	B,11
J$6EEF:	PUSH	BC
	LD	A,(DE)
	LD	HL,I$6F09
J$6EF4:	LD	BC,13
	JR	C,J$6EFA
	DEC	BC
J$6EFA:	CPIR
	JR	Z,J.6F2F
	POP	BC
	INC	DE
	DJNZ	J$6EEF
	POP	HL
	CALL	C$6F16
	POP	HL
	POP	DE
	RET
I$6F09:	DEFB	'."/\[]:+=;,*?'
C$6F16:	LD	A,' '
	CP	(HL)
	JR	Z,J.6F2F
	LD	B,7
J$6F1D:	CALL	C.6F22
	LD	B,3

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6F22:	INC	HL
	CP	(HL)
	JR	Z,J.6F29
	DJNZ	C.6F22
	RET
J.6F29:	DEC	B
	RET	Z
	INC	HL
	CP	(HL)
	JR	Z,J.6F29
J.6F2F:	JP	J.7251

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6F32:	LD	A,(HL)
	CP	"*"
	JR	Z,J.6F40
	INC	HL
	DJNZ	C.6F32
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.6F3B:	LD	HL,D.F866
	LD	B,11
J.6F40:	LD	(HL),"?"
	INC	HL
	DJNZ	J.6F40
	RET
C.6F46:	LD	BC,16

	DEFB	11H
C.6F4A:	LD	BC,33
	CALL	C.72C2
	PUSH	BC
	LD	IX,I.521F
	CALL	C.7260
	LD	IX,I.6A6D
	CALL	C.7260
	JP	C,J.7257
	JP	Z,J.7242
	POP	BC
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	INC	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	PUSH	BC
	LD	IX,I.46FF
	CALL	C.7260
	LD	BC,I.6545
	LD	DE,I.6053
	CALL	C.325C
	LD	HL,I.F7F6
	LD	DE,I.F847
	LD	BC,8
	LDIR
	POP	HL
	LD	DE,DECADD
	PUSH	DE

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$6F95:	LD	IX,I.46FF
	CALL	C.7260
	JP	J$3042
C.6F9F:	CALL	C.72C2
	LD	IX,I.521F
	CALL	C.7260
	LD	HL,D.F347
	CP	(HL)			; valid drive id ?
	JR	Z,J$6FB2		; yep,
	JP	NC,J.70DA		; nope,
J$6FB2:	LD	E,A
	CALL	C.505D			; get disk allocation information
	JP	C.2F99
C.6FB9:	CALL	C.72C2
	CALL	C.6EBD
	CALL	C.6557
	JP	Z,J.70E0
	CALL	C.6EA0
	PUSH	HL
	LD	A,(D.F247)		; current drive id
	INC	A
	LD	(D.F58D),A
	LD	HL,I.F569
	LD	DE,I.F58E
	LD	BC,36
	LDIR
	POP	HL
	CALL	C.721F			; get current BASIC character
	JR	Z,J$7001		; end of statement,
	CALL	C.7215			; check for BASIC character
	EXX
	CALL	C.6EBD
	CALL	C.6557
	JP	Z,J.70E0
	CALL	C.5356
	INC	A
	LD	(D.F58D),A
	PUSH	HL
	LD	DE,I.F58E
	CALL	C.65C7
	POP	HL
	CALL	C.721F			; get current BASIC character
	RET	NZ			; not end of statement, quit
J$7001:	PUSH	HL
	CALL	C.65B2
	JP	Z,J.7254
J$7008:	CALL	CKCNTC
	LD	BC,D.F58D
	LD	DE,I.F5D7
	LD	HL,I.F5B2
	LD	A,0CH	; 12 
J$7016:	PUSH	AF
	LD	A,(BC)
	CP	3FH	; "?"
	JR	NZ,J$701D
	LD	A,(HL)
J$701D:	LD	(DE),A
	INC	BC
	INC	DE
	INC	HL
	POP	AF
	DEC	A
	JR	NZ,J$7016
	LD	HL,I.F5B2
	LD	DE,I.F5D7
	LD	B,0CH	; 12 
J$702D:	LD	A,(DE)
	CP	(HL)
	JR	NZ,J$7038
	INC	HL
	INC	DE
	DJNZ	J$702D
	JP	J.7257
J$7038:	CALL	C$70AA
	PUSH	HL
	XOR	A
	LD	(D$F5BE),A
	LD	DE,I.F5B2
	CALL	C.4462			; open file
	LD	DE,I.F5D7
	CALL	C.461D			; create file
	AND	A
	JP	NZ,J.70E9
	LD	L,A
	LD	H,A
	LD	(D$F5D3),HL
	LD	(D$F5D5),HL
	LD	(D$F5F8),HL
	LD	(D$F5FA),HL
	INC	HL
	LD	(D.F5C0),HL
	LD	(D$F5E5),HL
	POP	HL
J$7066:	PUSH	HL
	LD	DE,I.F5B2
	CALL	C.47B2			; read random block
	LD	A,L
	OR	H
	JR	Z,J$707A
	LD	DE,I.F5D7
	CALL	C.70CD
	POP	HL
	JR	J$7066
J$707A:	POP	HL
	LD	HL,(D$F5C6)
	LD	(D$F5EB),HL
	LD	HL,(D$F5C8)
	LD	(D$F5ED),HL
	LD	DE,I.F5D7
	CALL	C.456F			; close file
	LD	HL,I.F5B2
	LD	(D.F23D),HL
	LD	DE,X.F568
	XOR	A
	LD	(D.F574),A
	CALL	C.5006			; search for next
	INC	A
	JP	NZ,J$7008
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.70A3:	LD	(D.FCBF),HL
	LD	(D.F87D),BC

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$70AA:	LD	HL,-512
	ADD	HL,SP
	JR	NC,J.70BD
	LD	DE,(D.F6C6)
	AND	A
	SBC	HL,DE
	JR	C,J.70BD
	LD	A,H
	AND	A
	JR	NZ,J$70C4
J.70BD:	LD	DE,(D.F862)
	LD	HL,J.0100
J$70C4:	LD	(D.F23D),DE
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.70C9:	LD	DE,(D.F353)

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.70CD:	CALL	C.47BE			; write random block
	AND	A
	RET	Z
	JR	J.70E6
J$70D4:	LD	E,3CH
	DEFB	1
J.70D7:	LD	E,3DH
	DEFB	1
J.70DA:	LD	E,3EH
	DEFB	1

	LD	E,3FH
	DEFB	1
J.70E0:	LD	E,40H
	DEFB	1
J$70E3:	LD	E,41H
	DEFB	1
J.70E6:	LD	E,42H
	DEFB	1
J.70E9:	LD	E,43H
	DEFB	1
J$70EC:	LD	E,44H
	DEFB	1
J$70EF:	LD	E,45H
	DEFB	1
J$70F2:	LD	E,46H
	DEFB	1
J$70F5:	LD	E,47H

	LD	BC,0
	XOR	A
	LD	(D.F87C),A
	LD	(D.FCAE),A
	PUSH	DE
	CALL	C.689F
	POP	DE
	JP	J$725C			; BASIC error

C.7109:	LD	A,E
	CP	3CH	; "<"
	RET	C
	CP	48H	; "H"
	RET	NC
	SUB	3BH	; ";"
	LD	B,A
	LD	HL,I$712B
J.7116:	LD	A,(HL)
	AND	A
	INC	HL
	JR	NZ,J.7116
	DJNZ	J.7116
	DEC	HL
	LD	DE,I$F604
	PUSH	DE
	LD	BC,22
	LDIR
	LD	E,1
	POP	HL
	RET
I$712B:	DEFB	0
	DEFB	"Bad FAT",0
	DEFB	"Bad file mode",0
	DEFB	"Bad drive name",0
	DEFB	"Bad sector number",0
	DEFB	"File still open",0
	DEFB	"File already exists",0
	DEFB	"Disk full",0
	DEFB	"Too many files",0
I.71A0:	DEFB	"Disk write protected",0
I$71B5:	DEFB	"Disk I/O error",0
I.71C4:	DEFB	"Disk offline",0
	DEFB	"Rename across disk",0
I.71E4:	DEFB	"Bad parameter",0
I$71F2:	DEFB	"Format complete",0

;	  Subroutine disk error handler
;	     Inputs  ________________________
;	     Outputs ________________________

C.7202:	BIT	7,C
	JP	NZ,J$70D4
	LD	A,C
	AND	0FEH
	JP	Z,J$70EC
	CP	2
	JP	Z,J$70F2
	JP	J$70EF

;	  Subroutine check for BASIC character
;	     Inputs  ________________________
;	     Outputs ________________________

C.7215:	CALL	C.721F			; get current BASIC character
	EX	(SP),HL
	CP	(HL)			; correct character ?
	JR	NZ,J.725A		; nope,
J$721C:	INC	HL
J$721D:	EX	(SP),HL
	INC	HL

;	  Subroutine get current BASIC character
;	     Inputs  ________________________
;	     Outputs ________________________

C.721F:	DEC	HL

;	  Subroutine get next BASIC character
;	     Inputs  ________________________
;	     Outputs ________________________

C.7220:	LD	IX,I$4666
J$7224:	JR	C.7260

C.7226:	LD	A,0C9H
	LD	(H.LOPD+0),A
	LD	DE,(D.FC4A)
	LD	(D.F349),DE
	RET
I$7234:	_RST	CALLF
	DEFB	0
	DEFW	C.7226
	RET

J.7239:	LD	E,10H
	DEFB	1
J.723C:	LD	E,0DH
	DEFB	1
J.723F:	LD	E,07H
	DEFB	1
J.7242:	LD	E,3BH
	DEFB	1
I$7245:	LD	E,37H
	DEFB	1
J$7248:	LD	E,32H
	DEFB	1
J$724B:	LD	E,36H
	DEFB	1
J$724E:	LD	E,34H
	DEFB	1
J.7251:	LD	E,38H
	DEFB	1
J.7254:	LD	E,35H
	DEFB	1
J.7257:	LD	E,05H
	DEFB	1
J.725A:	LD	E,02H
J$725C:	LD	IX,I$406F

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7260:	CALL	CALBAS
	EI
	RET

C.7265:	EI
	PUSH	HL
	PUSH	DE
	LD	A,(D.F348)
	ADD	A,A
	LD	HL,16
	JR	NC,J$7273
	LD	L,16+8
J$7273:	ADD	HL,SP
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	PUSH	HL
	LD	HL,J.6E95
	_RST	DCOMPR
	POP	HL
	JR	Z,J$728C
	PUSH	HL
	LD	HL,J.6EC9
	_RST	DCOMPR
	POP	HL
	JR	NZ,J$7292
	LD	DE,I$F377
	JR	J$728F
J$728C:	LD	DE,I$F37A
J$728F:	LD	(HL),D
	DEC	HL
	LD	(HL),E
J$7292:	POP	DE
	POP	HL
	LD	A,E
	CP	2
	RET	C
	LD	A,(HL)
	CP	":"
	JR	Z,J.7251
	INC	HL
	LD	A,(HL)
	CP	":"
	DEC	HL
	RET	NZ
	CALL	C.72C2
	LD	A,(HL)
	AND	0DFH
	SUB	40H
	PUSH	HL
	LD	HL,D.F347
	CP	(HL)			; valid drive id ?
	POP	HL
	JR	Z,J$72B6		; yep,
	JP	NC,J.70DA		; nope,
J$72B6:	INC	HL
	INC	HL
	DEC	E
	DEC	E
	PUSH	DE
	INC	E
	POP	DE
	RET

C.72BE:	EI
	LD	A,0
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.72C2:	EI
	PUSH	HL
	PUSH	AF
	LD	A,(D.F348)
	ADD	A,A
	LD	HL,12
	JR	NC,J$72D0
	LD	L,12+8
J$72D0:	ADD	HL,SP
	LD	(HL),LOW I.F38B
	INC	HL
	LD	(HL),HIGH I.F38B
	POP	AF
	POP	HL
	RET

J.72D9:
	.PHASE	0F1C9H

C.F1C9:	CALL	X.F36B
	LD	A,(DE)
	CALL	X.F368
	INC	DE
	CP	"$"
	RET	Z
	CALL	C.53A8
	JR	C.F1C9

C.F1D9:	CALL	X.F36B
	LDIR

C.F1DE:	CALL	X.F368
	RET

C.F1E2:	CALL	X.F36B
	JP	0

C.F1E8:	LD	DE,C.F1DE
	PUSH	DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	CALL	X.F36B
	JP	(HL)

C.F1F4:	JP	J$5604

I$F1F7: DEFB    "PRN "
        DEFB    "LST "
        DEFB    "NUL "
        DEFB    "AUX "
        DEFB    "CON "

I.F20B: DEFB    "           "
        DEFB    10000000b
        DEFS    10
        DEFW    0
        DEFW    0
        DEFW    0
        DEFW    0,0

I.F22B: DEFB    31,28,31,30,31,30,31,31,30,31,30,31

	.DEPHASE
S.72D9	EQU	$-J.72D9

;	  Subroutine INIENV
;	     Inputs  ________________________
;	     Outputs ________________________

INIENV:
C$7347:	LD	A,1
	LD	(D.F30D),A		; enable read after write (verify)
	CALL	C.5FEF			; get pointer to driver workarea
	XOR	A
	LD	BC,14
	CALL	C.58E3			; initialize area
	LD	A,(D.F33F)
	AND	A			; CTRL key status
	CALL	C.532C			; get number of physical drives
	LD	B,(IX+5)
	CP	B			; phantom drives ?
	LD	A,0FEH
	JR	NZ,J$7366		; yep, invalid phantom drive id
	INC	A			; no phantom
J$7366:	LD	(IX+5),A
	LD	A,(IDBYT0)
	AND	80H			; interrupt frequency
	LD	(IX+13),A
	LD	HL,I$7377
	JP	J$6023			; install interrupt handler

;	  Subroutine interrupt handler
;	     Inputs  ________________________
;	     Outputs ________________________

I$7377:	PUSH	AF			; store VDP status
	CALL	C.5FEF			; get pointer to driver workarea
	LD	A,(HL)
	AND	A			; motor timer finished ?
	JR	Z,J.738C		; yep, skip
	DEC	A
	LD	(HL),A			; update motor timer
	JR	NZ,J.738C		; motor timer not finished, skip
	PUSH	HL
	PUSH	IX
	CALL	MTOFF			; motor off
	POP	IX
	POP	HL
J.738C:	INC	HL
	LD	B,4			; drives = 4
J$738F:	LD	A,(HL)
	AND	A			; disk change timer finished ?
	JR	Z,J$7394		; yep,
	DEC	(HL)			; update disk change timer
J$7394:	INC	HL
	DJNZ	J$738F			; next drive
	LD	A,(D.F338)
I$739A:	OR	A			; have real time device ?
	JR	NZ,J$73E6		; yep,
	LD	A,(IX+13)
	LD	C,128+50
	LD	B,128+0			; 50 Hz, interrupts = 0
	BIT	7,A			; 50 Hz ?
	JR	NZ,J$73AC		; yep,
	LD	C,60
	LD	B,0			; 60 Hz, interrupts = 0
J$73AC:	INC	A
	CP	C			; second passed ?
	JR	NZ,J$73E3		; nope, skip
	PUSH	BC			; store frequency, interrupts
	LD	C,(IX+12)		; seconds
	LD	B,(IX+11)		; minutes
	LD	E,(IX+10)		; hours
	INC	C			; update seconds
	LD	A,C
	CP	60			; seconds overflow ?
	JR	NZ,J.73D9		; nope,
	LD	C,0			; seconds = 0
	INC	B			; update minutes
	LD	A,B
	CP	60			; minutes overflow ?
	JR	NZ,J.73D9		; nope,
	LD	B,0			; minutes = 0
	INC	E			; update hours
	LD	A,E
	CP	24			; hours overflow ?
	JR	NZ,J.73D9		; nope,
	LD	E,0			; hours = 0
	LD	HL,(D.F33B)
	INC	HL
	LD	(D.F33B),HL		; update days
J.73D9:	LD	(IX+12),C		; store seconds
	LD	(IX+11),B		; store minutes
	LD	(IX+10),E		; store hours
	POP	AF			; restore frequency, interrupts
J$73E3:	LD	(IX+13),A		; store interrupts
J$73E6:	CALL	C.5FE0			; get my slot id
	LD	B,4			; interfaces = 4
	LD	DE,I.FB29
	LD	HL,I.FB21+1
J$73F1:	CP	(HL)			; my interface entry ?
	JR	Z,J$73FD		; yep,
	INC	DE
	INC	DE
	INC	DE
	INC	HL
	INC	HL
	DJNZ	J$73F1			; next interface
J$73FB:	POP	AF			; restore VDP status
	RET
J$73FD:	EX	DE,HL
	LD	A,(HL)
	AND	A			; has previous interrupt handler ?
	JR	Z,J$73FB		; nope, quit
	PUSH	AF
	POP	IY			; IYH = slot id
	INC	HL
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	PUSH	BC
	POP	IX			; IX = handler
	POP	AF
	JP	CALSLT			; execute previous interrupt handler

;	  Subroutine DSKCHG
;	     Inputs  ________________________
;	     Outputs ________________________

DSKCHG:
J$7410:	EI
	PUSH	HL
	PUSH	BC
	PUSH	AF
	CALL	C.5FEF			; get pointer to driver workarea
	POP	AF
	POP	BC
	PUSH	AF
	INC	A
	LD	E,A
	LD	D,0
	POP	AF
	ADD	HL,DE
	LD	B,(HL)
	POP	HL
	INC	B
	DEC	B			; drive disk change counter finished ?
	LD	B,1
	RET	NZ			; nope, quit with disk unchanged
	PUSH	BC
	PUSH	HL
	LD	DE,1			; first FAT sector
	LD	HL,(D.F34D)
	AND	A			; operation = read
	CALL	C.74A0			; do disk operation
	JR	C,J.744C
	LD	HL,(D.F34D)
	LD	B,(HL)			; media descriptor from FAT
	POP	HL
	PUSH	BC
	CALL	GETDPB
	LD	A,12
	JR	C,J.744C		; error,
	POP	AF
	POP	BC
	CP	C			; same media descriptor ?
	SCF
	CCF				; clear Cx
	LD	B,0FFH
	RET	NZ			; nope, quit with disk changed
	INC	B			; quit with disk change unknown
	RET
J.744C:	POP	DE
	POP	DE
	RET

;	  Subroutine CALL VERIFY ON
;	     Inputs  ________________________
;	     Outputs ________________________

C.744F:	LD	E,1
	JR	J$7455

;	  Subroutine CALL VERIFY OFF
;	     Inputs  ________________________
;	     Outputs ________________________

C.7453:	LD	E,0
J$7455:	RET	NZ
	LD	C,2EH
	PUSH	HL
	CALL	C.F37D
	POP	HL
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$745F:	LD	HL,SLTATR
J$7462:	LD	A,(DE)
	CP	20H
	JR	NC,J$746A
	XOR	A
	CP	(HL)
	RET

J$746A:	CP	(HL)
	RET	NZ
	INC	HL
	INC	DE
	JR	J$7462

;	  Subroutine DSKFMT
;	     Inputs  ________________________
;	     Outputs ________________________

DSKFMT:
J$7470:	PUSH	AF			; store choice
	LD	A,D			; drive id
	CALL	C.747A			; prompt for phantom drive if any
	LD	D,A
	POP	AF			; restore choice
	JP	J$7712			; continue

;	  Subroutine prompt for phantom drive if any
;	     Inputs  ________________________
;	     Outputs ________________________

C.747A:	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	AF			; store drive id
	CALL	C.5FEF			; get pointer to driver workarea
	LD	HL,D.F33F
	LD	A,(IX+5)
	CP	0FFH			; no phantom drives ?
	JR	Z,J$749B		; yep, skip prompt
	CP	0FEH			; invalid phantom drive id ?
	JR	Z,J$7494		; yep, update drive id and skip prompt
	CP	(HL)			; same drive id ?
	POP	BC
	LD	B,0
	PUSH	BC			; drive id = 0
J$7494:	LD	A,(HL)			; drive id
	LD	(IX+5),A		; update drive id
	CALL	NZ,C$622A		; nope, prompt for disk
J$749B:	POP	AF
	POP	HL
	POP	DE
	POP	BC
	RET

;	  Subroutine DSKIO
;	     Inputs  ________________________
;	     Outputs ________________________

DSKIO:
C.74A0:	CALL	C.747A			; prompt for phantom drive if any
	PUSH	AF			; store drive id
	CALL	C$795D
	POP	DE			; restore drive id
	PUSH	AF
	PUSH	BC
	CALL	C.5FEF			; get pointer to driver workarea
	POP	BC
	LD	(HL),120
	INC	HL
	POP	AF
	PUSH	AF
	PUSH	BC
	LD	C,60
	JR	NC,J$74BA
	LD	C,0
J$74BA:	LD	E,D
	LD	D,0
	ADD	HL,DE
	LD	(HL),C
	POP	BC
	POP	AF
	RET

;	  Subroutine get pointer to FAT info driver work area
;	     Inputs  ________________________
;	     Outputs ________________________

C.74C2:	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	C.5FEF			; get pointer to driver workarea
	LD	BC,6
	ADD	IX,BC
	POP	HL
	POP	BC
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.74D1:	LD	A,H
	OR	L
	JR	NZ,J$74DA
	LD	(D.F302),BC
	RET

J$74DA:	CALL	C.74F8
	DEC	DE
	LD	A,01H	; 1 
	LD	(DE),A
	INC	DE
	JP	J$4218

;	  Subroutine get FAT entry content (with hook)
;	     Inputs  HL = cluster number
;	     Outputs ________________________

C.74E5:	CALL	X.F252
	LD	A,H
	OR	L			; cluster number = 0 ?
	JR	NZ,J$74F2		; nope,
	LD	HL,(D.F302)
	LD	A,H
	OR	L
	RET
J$74F2:	CALL	C.74F8
	JP	J$41F4			; continue

;	  Subroutine __________________________
;	     Inputs  HL = cluster number
;	     Outputs ________________________

C.74F8:	PUSH	IX
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	A,(IX+0)		; drive id
	LD	D,(IX+1)		; ?
	EX	(SP),IX			; store pointer to FAT info driver work area, restore pointer to DPB
	CP	(IX+0)			; same drive id ?
	JR	Z,J$750F		; yep,
	CALL	C.7527
	JR	J$7518			; continue

J$750F:	LD	A,H
	RRA
	RRA
	AND	03H
	CP	D
	CALL	NZ,C.7527
J$7518:	LD	A,H
	AND	03H
	LD	H,A
	EX	(SP),IX			; store pointer to DPB, restore pointer to FAT info driver work area
	LD	E,(IX+2)
	LD	D,(IX+3)		; pointer to FAT buffer
	POP	IX			; restore pointer to DPB
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7527:	CALL	C.756E

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$752A:	LD	A,(IX+0)		; drive id
	PUSH	IX
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	(IX+0),A		; update drive id
	LD	A,H
	RRA
	RRA
	AND	03H
	LD	(IX+1),A		; ?
	POP	IX
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	C,A			; store
	CALL	C.45DB			; get FAT parameters
	LD	B,A			; number of FATs
	LD	A,C			; restore
	ADD	A,A
	ADD	A,C			; *1.5
	ADD	A,E
	LD	E,A
	JR	NC,J.754F
	INC	D			; + first FAT sector
J.754F:	PUSH	BC
	LD	B,3			; number of sectors = 3
	CALL	C.46D7			; read sectors
	POP	BC
	JR	NC,J$756A		; no error, continue
	LD	A,(IX+16)		; number of sectors per FAT
	ADD	A,E
	LD	E,A
	JR	NC,J$7560
	INC	D			; update sector number to next FAT
J$7560:	DJNZ	J.754F			; next FAT
	CALL	C.45DB			; get FAT parameters
	LD	B,3			; number of sectors = 3
	CALL	C.46C5			; read sectors with error handling
J$756A:	POP	BC
	POP	DE
	POP	HL
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.756E:	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	CALL	C.74C2			; get pointer to FAT info driver work area
	LD	A,(IX+0)
	CP	0FFH			; invalid drive id ?
	JR	Z,J.75C5		; yep, quit
	CALL	C$4560			; get pointer to DPB entry
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	A,(IX+1)		; media descriptor
	PUSH	BC
	POP	IX
	LD	C,A
	CALL	C.45DB			; get FAT parameters
	LD	B,A
	DEC	HL
	LD	A,(HL)			; FAT buffer status
	LD	(HL),0			; mark FAT buffer clean
	INC	HL
	CP	1			; FAT buffer was dirty ?
	JP	NZ,J.75C5		; nope, quit
	LD	A,C
	ADD	A,A
	ADD	A,C
	ADD	A,E
	LD	E,A
	JR	NC,J.75A0
	INC	D
J.75A0:	PUSH	DE
	PUSH	BC
	PUSH	HL
	LD	A,C
	ADD	A,A
	ADD	A,C
	LD	B,A
	LD	A,(IX+16)
	SUB	B
	CP	03H	; 3 
	LD	B,A
	JR	C,J$75B2
	LD	B,03H	; 3 
J$75B2:	LD	A,(IX+0)
	CALL	C.4755			; write sectors with error handling
	POP	HL
	POP	BC
	POP	DE
	LD	A,E
	ADD	A,(IX+16)
	LD	E,A
	JR	NC,J$75C3
	INC	D
J$75C3:	DJNZ	J.75A0
J.75C5:	POP	IX
	POP	HL
	POP	DE
	POP	BC
	XOR	A
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$75CC:	LD	A,(D.F338)
	OR	A			; have real time device ?
	RET	NZ			; yep, quit
	PUSH	IX
	CALL	C.5FEF			; get pointer to driver workarea
	LD	B,(IX+10)		; hours
	LD	C,(IX+11)		; minutes
	LD	D,(IX+12)		; seconds
	POP	IX
	XOR	A
	RET
J$75E3:	PUSH	IX
	PUSH	BC
	CALL	C.5FEF			; get pointer to driver workarea
	POP	BC
	LD	(IX+10),B		; update hours
	LD	(IX+11),C		; update minutes
	LD	(IX+12),D		; update seconds
	POP	IX
	RET

;	  Subroutine determine number of free clusters
;	     Inputs  ________________________
;	     Outputs ________________________

C$75F6:	LD	A,(X.F252)
	CP	0C9H			; get FAT entry content hook used ?
	JR	Z,J$760E		; nope, use fast method
J$75FD:	PUSH	DE			; store number of clusters
	PUSH	HL			; store start cluster number
	CALL	C.74E5			; get FAT entry content (with hook)
	POP	HL			; restore start cluster number
	POP	DE			; restore number of clusters
	JR	NZ,J$7607		; FAT entry used,
	INC	BC			; update free clusters
J$7607:	INC	HL			; update cluster number
	DEC	DE
	LD	A,E
	OR	D			; all clusters done ?
	JR	NZ,J$75FD		; nope, next cluster
	RET
J$760E:	PUSH	IX			; store pointer to DPB
	LD	HL,3
J$7613:	PUSH	DE			; store number of clusters
	LD	A,D
	CP	04H
	JR	C,J.7622
	JR	NZ,J$761F
	LD	A,E
	OR	A
	JR	Z,J.7622
J$761F:	LD	DE,0400H
J.7622:	PUSH	DE
	PUSH	HL
	PUSH	DE
	CALL	C.74F8
	EX	DE,HL
	POP	DE
	CALL	C$7647
	POP	HL
	LD	A,04H
	ADD	A,H
	POP	DE
	POP	HL			; restore number of clusters
	OR	A
	SBC	HL,DE
	EX	DE,HL			; update number of clusters
	LD	H,A
	LD	L,0
	LD	A,D
	OR	E			; done all clusters ?
	JR	NZ,J$7613		; nope, next
	CALL	C.45FB			; get pointer to FAT buffer
	PUSH	HL
	POP	IY
	POP	IX			; restore pointer to DPB
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7647:	CALL	C.4564
J$764A:	LD	A,(HL)
	INC	HL
	OR	A
	JR	NZ,J.7655
	LD	A,(HL)
	AND	0FH	; 15 
	JR	NZ,J.7655
	INC	BC
J.7655:	DEC	DE
	LD	A,D
	OR	E
	RET	Z
	INC	HL
	LD	A,(HL)
	OR	A
	JR	NZ,J.7666
	DEC	HL
	LD	A,(HL)
	INC	HL
	AND	0F0H
	JR	NZ,J.7666
	INC	BC
J.7666:	DEC	DE
	INC	HL
	LD	A,D
	OR	E
	JR	NZ,J$764A
	RET

;	  Subroutine CHOICE
;	     Inputs  ________________________
;	     Outputs ________________________

CHOICE:
J$766D:	LD	HL,I$7671
	RET

I$7671:	DEFB	13,10
	DEFB	"[Interleave 1]",13,10
	DEFB	"1. 180KB 5.25",34,13,10
	DEFB	"2. 360KB 5.25",34,13,10
	DEFB	"3. 360KB 3.5",34,13,10
	DEFB	"4. 720KB 3.5",34,13,10
	DEFB	10
	DEFB	"[Interleave 2]",13,10
	DEFB	"5. 180KB 5.25",34,13,10
	DEFB	"6. 360KB 5.25",34,13,10
	DEFB	"7. 360KB 3.5",34,13,10
	DEFB	"8. 720KB 3.5",34,13,10
	DEFB	10
	DEFB	0

; DSKFMT, continued
J$7712:	DEC	A
	LD	E,A			; choice
	LD	A,7
	CP	E			; valid choice ?
	LD	A,12
	RET	C			; nope, quit with bad parameter error
	LD	A,B
	CP	HIGH 1800H		; enough work area ?
	LD	A,14
	RET	C			; nope, quit with insufficient memory
	LD	A,D			; drive id
	CALL	C.41C1			; translate drive id to disk drive number
	JR	NC,J$7729		; no error, continue
	LD	A,2			; not ready error
	RET
J$7729:	LD	C,0FEH
	LD	(IX+0),C		; phantom drive = invalid
	LD	D,A			; disk drive number
J$772F:	PUSH	HL			; start work area
	PUSH	DE			; store disk drive number, choice
J$7731:	LD	HL,I.FB21
	LD	B,4			; number of interfaces = 4
J$7736:	LD	C,(HL)			; slot id
	INC	HL
	LD	A,(HL)			; number of drives
	INC	HL
	OR	C			; entry free ?
	JR	Z,J$7752		; yep, continue
	LD	C,A
J$773E:	PUSH	HL
	PUSH	BC
	LD	HL,D.7114
	CALL	WRSLT			; disable I/O ports
	POP	BC
	PUSH	BC
	LD	A,C
	LD	L,LOW D.711C
	CALL	WRSLT			; disable I/O ports
	POP	BC
	POP	HL
	DJNZ	J$7736			; next interface
J$7752:	POP	DE			; restore disk drive number, choice
	POP	HL			; restore start work area
	LD	IY,I$4F9F		; normal record table
	BIT	2,E			; interleaved choice ?
	JR	Z,J$7760		; nope,
	LD	IY,I$4FA8		; interleaved record table
J$7760:	LD	A,E			; choice
	LD	C,40			; number of cylinders = 40
	CP	2			; 5.25" choice ?
	JR	C,J$7769		; yep,
	LD	C,80			; number of cylinders = 80
J$7769:	LD	A,E
	AND	01H
	INC	A
	DEFB	0DDH
	LD	H,A			; IXH = number of sides
	LD	A,E
	AND	03H
	DEFB	0DDH
	LD	L,A			; IYL = choice without interleave
	CALL	C.41E8			; disable maskable interrupts and enable I/O ports
	LD	B,D			; disk drive number
	LD	D,0			; cylinder = 0
J$777A:	LD	E,0			; head = 0
J$777C:	CALL	C$78EA			; create format data for track
	CALL	C$7867			; format track
	JR	NC,J$778A		; no error,
	CALL	MTOFF			; motor off
	JP	J.79DA			; enable interrupts and disable I/O ports when enabled
J$778A:	INC	E			; update head
	LD	A,E
	DEFB	0DDH
	CP	H			; finished heads ?
	JR	NZ,J$777C		; nope, next head
	INC	D			; update cylinder
	LD	A,C
	CP	D			; finished cylinders ?
	JR	NZ,J$777A		; nope, next cylinder
	PUSH	HL
	POP	IY			; IY = start of work area
	PUSH	HL			; store start of work area
	PUSH	BC
	PUSH	HL			; store start of work area
	CALL	C.41E1			; clear 7 sectors buffer
	POP	DE			; restore start of work area
	LD	HL,I$4609
	LD	C,S.4609
	LDIR				; initialize part of BPB
	DEFB	0DDH
	LD	A,L
	OR	A			; choice = 5.25" single sided ?
	JR	NZ,J$77B4		; nope,
	INC	A
	LD	(IY+13),A		; BPB, sectors per cluster = 1
	LD	A,64
	LD	(IY+23),A		; ?? bug BPB, number of directory entries = 64
J$77B4:	DEFB	0DDH
	LD	A,L
	ADD	A,"1"
	LD	(IY+8),A		; BPB, OEM name
	DEFB	0DDH
	LD	A,H
	LD	(IY+26),A		; BPB, number of sides
	LD	B,A			; number of sides
	LD	A,0
J$77C3:	ADD	A,9
	DJNZ	J$77C3			; number of sectors per cylinder
	POP	BC
	PUSH	BC
	LD	B,A
	LD	HL,0
	LD	D,0
	LD	E,C			; number of cylinders
J$77D0:	ADD	HL,DE
	DJNZ	J$77D0
	LD	(IY+19),L
	LD	(IY+20),H		; BPB, number of sectors
	LD	A,9
	LD	(IY+24),A		; BPB, sectors per track
	LD	D,2			; assume 2 sectors per FAT
	LD	E,0FCH			; assume media descriptor 0FCH
	DEFB	0DDH
	LD	A,L
	CP	02H	; 2 
	JR	C,J.77F1
	SUB	02H	; 2 
	LD	E,0F8H
	CP	01H	; 1 
	JR	NZ,J.77F1
	INC	D
J.77F1:	ADD	A,E
	LD	E,A
	LD	(IY+21),E		; BPB, media descriptor
	LD	(IY+22),D		; BPB, sectors per FAT
	PUSH	DE
	PUSH	IY
	POP	HL			; start of work area
	LD	DE,0C01EH-0C000H
	ADD	HL,DE
	EX	DE,HL			; skip BPB
	LD	HL,I$7DA0
	LD	BC,S.VLID
	LDIR				; initialize volume id identifier
	EX	DE,HL
	PUSH	DE
	CALL	C.4696			; update with current time and date (volume id)
	POP	DE
	LD	BC,5
	ADD	HL,BC
	EX	DE,HL			; skip volume id
	LD	C,S.BTLD
	LDIR				; initialize boot loader
	POP	DE
	DEFB	0FDH
	INC	H
	DEFB	0FDH
	INC	H			; pointer to first FAT sector
	LD	B,2			; number of FATs = 2
J$7820:	LD	(IY+0),E		; media descriptor
	LD	A,0FFH
	LD	(IY+1),A
	LD	(IY+2),A		; cluster end markers
	LD	A,D			; sectors per FAT
	ADD	A,A
	DEFB	0FDH
	ADD	A,H
	DEFB	0FDH
	LD	H,A			; pointer to next FAT
	DJNZ	J$7820			; next FAT
	POP	BC
	POP	HL
	LD	D,B
	LD	C,E
	LD	B,5			; number of sectors = 5
	LD	A,C
	CP	0F9H
	JR	NZ,J$7840
	LD	B,7			; number of sectors = 7
J$7840:	SCF				; operation = write
	LD	A,D			; drive id
	LD	DE,0			; sector = 0
	PUSH	AF
	PUSH	BC
	PUSH	HL
	CALL	C.74A0			; do disk operation
	POP	HL
	JR	NC,J$7851		; no error, continue
	POP	BC
	POP	BC
	RET
J$7851:	PUSH	HL
	CALL	C.41E1			; clear 7 sectors buffer
	POP	HL
	POP	BC
	LD	E,B
	LD	D,0
	LD	B,7			; number of directory sectors = 7
	LD	A,C
	CP	0FCH
	JR	NZ,J$7863
	LD	B,4			; number of directory sectors = 4
J$7863:	POP	AF
	JP	C.74A0			; do disk operation and quit

;	  Subroutine format track
;	     Inputs  ________________________
;	     Outputs ________________________

C$7867:	PUSH	BC
	PUSH	DE
	CALL	C.7B3C			; reset FDC and wait for FDC ready
	CALL	C.7B4A			; translate disk drive number to motor on, select drive
	SLA	E
	SLA	E
	SLA	E
	SLA	E			; side in b4
	OR	E
	OUT	(0D4H),A		; motor on, select side, select drive
	CALL	C.7B40			; wait for FDC ready
	LD	A,1
	OUT	(0D2H),A		; record register = 1
	LD	A,D
	CALL	C.7B53			; select cylinder
	LD	E,3			; number of retries = 3
J$7887:	PUSH	HL
	PUSH	DE
	LD	C,0D3H			; FDC data port
	LD	A,0F4H			; WRITE TRACK, no 15 ms delay
	OUT	(0D0H),A		; execute FDC command
	CALL	C.7B5C			; wait long
	LD	DE,I$789C
	PUSH	DE			; return here after command
	LD	DE,I$78A4		; FDC data request service routine
	JP	J.7B21			; wait for FDC data request

; end command
I$789C:	JR	Z,J$78CC		; command finished,
	POP	DE
	POP	HL
	LD	A,80H			; not ready
	JR	J.78DD

; data request service routine
I$78A4:	OUTI
	LD	DE,3*256+1		; FDC busy+data request, FDC busy
	JR	J.78AE
J$78AB:	AND	E			; FDC command finished ?
	JR	Z,J.78CB		; yep,
J.78AE:	IN	A,(0D0H)		; read FDC status
	CP	D			; FDC waits for data ?
	JR	NZ,J$78AB		; nope,
	OUTI
	LD	A,(HL)
	INC	A			; end marker ?
	JP	NZ,J.78AE		; nope, next
	LD	H,4EH
	JR	J.78C1
J$78BE:	AND	E			; FDC command finished ?
	JR	Z,J.78CB		; yep,
J.78C1:	IN	A,(0D0H)		; read FDC status
	CP	D			; FDC waits for data ?
	JR	NZ,J$78BE		; nope,
	OUT	(C),H
	JP	J.78C1			; next
J.78CB:	POP	DE
J$78CC:	POP	DE
	POP	HL
	IN	A,(0D0H)		; read FDC status
	AND	7CH			; ignore ready, DRQ, BSY
	JP	Z,J$78E2		; no error,
	BIT	6,A
	JR	NZ,J.78DD
	DEC	E			; update retries
	JP	NZ,J$7887		; retry
J.78DD:	SCF
	CALL	C.79E8
	LD	A,C
J$78E2:	PUSH	AF
	CALL	C.7B3C			; reset FDC and wait for FDC ready
	POP	AF
	POP	DE
	POP	BC
	RET

;	  Subroutine create format data for track
;	     Inputs  ________________________
;	     Outputs ________________________

C$78EA:	PUSH	BC
	PUSH	HL
	PUSH	IY
	LD	B,62
	CALL	C.5351
	CALL	C.5349
	LD	BC,3*256+0F6H
	CALL	C.534C
	LD	(HL),0FCH
	INC	HL
	LD	B,50
	CALL	C.5351
	LD	B,9			; 9 sectors
J$7906:	PUSH	BC
	CALL	C.5349
	CALL	C.4363
	LD	(HL),0FEH
	INC	HL
	LD	(HL),D			; cylinder
	INC	HL
	LD	(HL),E			; side
	INC	HL
	LD	A,(IY+0)
	LD	(HL),A			; record number
	INC	HL
	INC	IY
	LD	(HL),2			; sector size = 512 bytes
	INC	HL
	LD	(HL),0F7H
	INC	HL
	LD	B,22
	CALL	C.5351
	CALL	C.5349
	CALL	C.4363
	LD	(HL),0FBH
	INC	HL
	PUSH	DE
	LD	A,40H
	LD	BC,512
	CALL	C.58E3			; initialize area
	POP	DE
	INC	HL
	LD	(HL),0F7H
	INC	HL
	LD	B,84
	CALL	C.5351
	POP	BC
	DJNZ	J$7906
	LD	(HL),0FFH		; end marker
	POP	IY
	POP	HL
	POP	BC
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.794C:	BIT	7,H
	SCF
	RET	NZ
	DEC	B
	LD	A,0FFH
	ADD	A,L
	LD	A,H
	ADC	A,01H	; 1 
	ADC	A,B
	ADC	A,B
	INC	B
	CP	40H	; "@"
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$795D:	PUSH	AF
	LD	A,D
	CP	5+1			; valid drive id ?
	LD	A,4
	JR	NC,J$7970		; nope, data (crc) error
	LD	A,C
	CP	0F8H			; valid media descriptor ?
	JR	C,J.796E		; nope,
	CP	0FEH			; valid media descriptor ?
	JR	C,J$7975		; yep, continue
J.796E:	LD	A,2			; not ready error
J$7970:	POP	BC
	LD	B,0			; number of sectors remaining = 0
	SCF				; error
	RET
J$7975:	POP	AF
	PUSH	AF
	CALL	C.41C1			; translate drive id to disk drive number
	JR	C,J.796E		; error,
	EX	(SP),HL
	LD	H,A			; disk drive number
	EX	(SP),HL
	PUSH	BC
	PUSH	HL
	CALL	C.794C
	JR	C,J$799C
	PUSH	DE
	LD	HL,I.7A04		; pointer to disk I/O routine
	LD	DE,I$50B1		; pointer to relocation table
	LD	BC,S.7A04		; size of routine
	LD	A,I.7A19+1-I.7A04	; master disk ROM slot id offset in routine
	CALL	C$7BAF			; relocate routine in $SECBUF
	LD	HL,0*256+0FFH		; ??
	LD	(D.F241),A		; update data buffer drive id
	POP	DE
J$799C:	CALL	C.41E8			; disable maskable interrupts and enable I/O ports
	POP	HL
	POP	BC
	POP	AF
	PUSH	BC
	PUSH	AF
J$79A4:	POP	AF
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	AF
	CALL	C.794C
	JR	C,J$79BB
	POP	AF
	LD	IY,I$79BF
	PUSH	IY
	LD	IY,(D.F34D)
	JP	(IY)
J$79BB:	POP	AF
	CALL	C.7A23
I$79BF:	POP	DE
	POP	BC
	JR	C,J$79CE
	INC	H
	INC	H
	INC	DE
	DEC	B
	JR	NZ,J$79A4
	POP	AF
	POP	BC
	XOR	A
	JR	J.79DA			; enable interrupts and disable I/O ports when enabled
J$79CE:	LD	C,A
	POP	AF
	LD	A,C
	CALL	C.79E8
	POP	HL
	LD	A,H
	SUB	B
	LD	B,A
	LD	A,C
	SCF

;	  Subroutine enable interrupts and disable I/O ports when enabled
;	     Inputs  ________________________
;	     Outputs ________________________

J.79DA:	PUSH	AF
	EI
	CALL	ENAINT

;	  Subroutine disable I/O ports of interface in current slot when two or more DDX or FAST disk interfaces
;	     Inputs  ________________________
;	     Outputs ________________________

J$79DF:	LD	A,(D.F33E)
	OR	A			; two or more DDX or FAST disk interfaces ?
	CALL	NZ,C.7BF1		; yep, disable I/O ports of interface in current slot
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.79E8:	JR	NC,J$79EF
	LD	C,00H
	BIT	6,A
	RET	NZ
J$79EF:	LD	C,02H	; 2 
	BIT	7,A
	RET	NZ
	LD	C,04H	; 4 
	BIT	3,A
	RET	NZ
	LD	C,06H	; 6 
	BIT	4,A
	RET	NZ
	LD	C,0AH	; 10 
	RET	C
	LD	C,0CH	; 12 
	RET
I.7A04:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,(D.F342)
	LD	H,HIGH 4000H
	CALL	ENASLT
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	CALL	C.7A23
	PUSH	AF
	PUSH	HL
I.7A19:	LD	A,0
	LD	H,HIGH 4000H
	CALL	ENASLT
	POP	HL
	POP	AF
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C.7A23:	PUSH	AF
	PUSH	BC
	CALL	C.7B40			; wait for FDC ready
	BIT	1,C			; 9 sector per track media ?
	LD	C,9			; 9 sectors per track
	JR	Z,J$7A2F		; yep,
	DEC	C			; 8 sectors per track
J$7A2F:	LD	B,8
	EX	DE,HL
J$7A32:	ADD	HL,HL
	LD	A,H
	SUB	C
	JR	C,J$7A39
	LD	H,A
	INC	L
J$7A39:	DJNZ	J$7A32
	INC	H
	EX	DE,HL
	POP	BC
	POP	AF
	PUSH	AF
	LD	B,A
	CALL	C.7B4A			; translate disk drive number to motor on, select drive
	BIT	0,C			; double side media ?
	JR	Z,J.7A4E		; nope,
	SRL	E
	JR	NC,J.7A4E
	OR	10H			; side 1
J.7A4E:	LD	B,A
	LD	A,C
	RRCA
	RRCA
	AND	0C0H
	OR	B
	LD	B,A
	OUT	(0D4H),A		; motor on, select side, select drive
	LD	A,D
	OUT	(0D2H),A		; update record register
	LD	A,(IX+0)
	OUT	(0D1H),A		; update cylinder register
	CP	E
	JR	Z,J$7A6A
	LD	A,E
	LD	(IX+0),A
	CALL	C.7B53			; select cylinder
J$7A6A:	POP	AF
	JR	C,J$7A73
	LD	D,9CH			; mask = no write protect, record type, DRQ, BSY
	LD	A,80H			; READ SECTOR, multiple off, no 15 ms delay, no side compare
	JR	J$7A77
J$7A73:	LD	D,0FCH			; mask = no DRQ, BSY
	LD	A,0A0H			; WRITE SECTOR, multiple off, no 15 ms delay, no side compare
J$7A77:	BIT	6,B			; double sided media ?
	JR	Z,J.7A83		; nope,
	OR	02H			; enable side compare
	BIT	4,B			; side 1 ?
	JR	Z,J.7A83		; nope,
	OR	08H			; side = 1
J.7A83:	LD	E,A			; FDC command
	LD	B,5			; number of retries = 5
	LD	C,0D3H			; FDC data port
J$7A88:	PUSH	HL
	PUSH	BC
	PUSH	DE
	CALL	C.7B40			; wait for FDC ready
	LD	A,E			; FDC command
	OUT	(0D0H),A		; execute FDC command
	PUSH	AF			; store FDC command
	CALL	C.7B5C			; wait long
	POP	AF			; restore FDC command
	BIT	5,A			; FDC command = write sector ?
	LD	DE,I.7AA4
	PUSH	DE			; return here after command
	JR	NZ,J$7AB7		; yep,
	LD	DE,I$7AB3		; FDC data request service routine read sector
	JP	J.7B21			; wait for FDC data request

; end command
I.7AA4:	JR	Z,J$7AD1		; command finished,
	POP	DE
	POP	BC
	POP	HL
	JR	J.7AE1			; time out, reset FDC and quit
J.7AAB:	IN	A,(0D0H)		; read FDC status
	RRCA				; FDC busy ?
	JR	NC,J.7AD0		; nope, command finished
	RRCA				; FDC requests data ?
	JR	NC,J.7AAB		; nope, wait

; data request service routine read sector
I$7AB3:	INI
	JR	J.7AAB
J$7AB7:	LD	DE,I$7ABD		; FDC data request service routine write sector
	JP	J.7B21			; wait for FDC data request

; data request service routine write sector
I$7ABD:	OUTI
	LD	DE,3*256+1		; FDC busy+data request, FDC busy
	JR	J.7AC7
J$7AC4:	AND	E			; FDC busy ?
	JR	Z,J.7AD0		; nope, command finished
J.7AC7:	IN	A,(0D0H)		; read FDC status
	CP	D			; FDC busy and requests data ?
	JR	NZ,J$7AC4		; nope, wait
	OUTI
	JR	J.7AC7			; next
J.7AD0:	POP	DE			; remove
J$7AD1:	POP	DE
	POP	BC
	POP	HL
	IN	A,(0D0H)		; read FDC status
	AND	D			; mask off bits
	JR	Z,J$7AE8		; no error,
	BIT	6,A			; write protect error ?
	JR	NZ,J.7AE1		; yep, reset FDC and quit
	DEC	B			; update retries
	JP	NZ,J$7A88		; some more, retry
J.7AE1:	SCF				; error flag
J.7AE2:	PUSH	AF			; store error, error flag
	CALL	C.7B3C			; reset FDC and wait for FDC ready
	POP	AF			; restore error, error flag
	RET
J$7AE8:	BIT	5,E			; FDC command = sector write ?
	JR	Z,J.7AE2		; nope, quit (with no error)
	LD	A,(D.F30D)
	OR	A			; read after write ?
	JR	Z,J.7AE2		; nope, quit (with no error)
	PUSH	HL
	LD	B,1
	PUSH	BC
	CALL	C.7B40			; wait for FDC ready
	RES	5,E			; FDC command = read sector
	LD	D,9CH			; mask = no write protect, record type, DRQ, BSY
	PUSH	DE
	LD	A,E			; FDC command
	OUT	(0D0H),A		; execute FDC command
	LD	DE,I.7AA4
	PUSH	DE			; return here after command
	LD	DE,I$7B13		; FDC data request service routine verify sector
	JP	J.7B21			; wait for FDC data request
J.7B0B:	IN	A,(0D0H)		; read FDC status
	RRCA				; FDC busy ?
	JR	NC,J.7AD0		; nope, command finished
	RRCA				; FDC requests data ?
	JR	NC,J.7B0B		; nope, wait

; data request service routine verify sector
I$7B13:	IN	A,(0D3H)		; read FDC data
	CPI				; compare data
	JR	Z,J.7B0B		; equal, next
	POP	DE
	POP	DE
	POP	BC
	POP	HL
	LD	A,24H			; ?? is this a valid error code ?
	JR	J.7AE1			; reset FDC and quit

; wait for FDC data request
J.7B21:	PUSH	DE			; store data request service routine
	LD	B,0
	LD	DE,01F2H
J.7B27:	IN	A,(0D0H)		; read FDC status
	RRCA				; FDC busy ?
	JR	NC,J$7B39		; nope, quit
	RRCA				; FDC request data ?
	RET	C			; yep, continue with data service routine
	DJNZ	J.7B27
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,J.7B27
	POP	DE			; discard routine
	OR	80H			; time out
	RET
J$7B39:	XOR	A			; command finished
	POP	DE			; discard routine
	RET

;	  Subroutine reset FDC and wait for FDC ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B3C:	LD	A,0D0H			; FORCE INTERRUPT
	OUT	(0D0H),A		; execute FDC command

;	  Subroutine wait for FDC ready
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B40:	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
	EX	(SP),HL
J$7B44:	IN	A,(0D0H)		; read FDC status
	RRCA				; FDC busy ?
	JR	C,J$7B44		; yep, wait
	RET

;	  Subroutine translate disk drive number to motor on, select drive
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B4A:	INC	B
	LD	A,80H
J$7B4D:	RLCA
	DJNZ	J$7B4D			; disk drive number to select drive
	ADD	A,20H			; motor on
	RET

;	  Subroutine select cylinder
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B53:	OUT	(0D3H),A		; data register = cylinder
	LD	A,10H			; SEEK, no head load, no cylinder verify, step rate = 0
	OUT	(0D0H),A		; execute FDC command
	CALL	C.7B40			; wait for FDC ready

;	  Subroutine wait long
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B5C:	LD	A,0E0H
J.7B5E:	EX	(SP),HL
	DEC	A
	JR	NZ,J.7B5E
	RET

;	  Subroutine wait short
;	     Inputs  ________________________
;	     Outputs ________________________

C$7B63:	LD	A,2AH
	JR	J.7B5E

S.7A04	EQU	$-I.7A04

;	  Subroutine DRIVES
;	     Inputs  ________________________
;	     Outputs ________________________

DRIVES:
C.7B67:	PUSH	AF			; store CTRL status
	CALL	C.532C			; get number of physical drives
	LD	L,A			; number of physical drives
	CP	1			; 1 drive ?
	JR	NZ,J$7B74		; nope, skip phantom
	POP	AF			; restore CTRL status
	RET	Z			; CTRL pressed, no phantom drive
	PUSH	AF			; store CTRL status
	INC	L			; 2 phantom drives
J$7B74:	POP	AF			; restore CTRL status
	RET

;	  Subroutine ensure I/O ports are enabled only in current slot
;	     Inputs  ________________________
;	     Outputs ________________________

C.7B76:	LD	HL,D.F33E
	XOR	A
	LD	(HL),A			; number of DDX or FAST disk interfaces = 0
	PUSH	HL
	CALL	C$7B9D			; copy disable I/O ports subroutine to temporary buffer and relocate subroutine
	CALL	X.F568			; execute disable I/O ports subroutine
	POP	HL
	DEC	(HL)			; number of DDX or FAST disk interfaces excluding this disk interface
	JP	C.517F			; enable I/O ports of interface in current slot

;	  Subroutine INIHRD
;	     Inputs  ________________________
;	     Outputs ________________________

INIHRD:
C$7B87:	CALL	C.7B76			; ensure I/O ports are enabled only in current slot
	LD	A,0ACH
	OUT	(0D1H),A		; update cylinder register
	CALL	C$7B63			; wait short
	IN	A,(0D1H)		; read cylinder register
	IN	A,(0D1H)		; read cylinder register
	CP	0ACH			; FDC working ?
	POP	HL
	RET	NZ			; nope, quit
	PUSH	HL
	JP	C.7BF1			; disable I/O ports

;	  Subroutine relocate I/O ports disable routine in temporary area
;	     Inputs  ________________________
;	     Outputs ________________________

C$7B9D:	LD	HL,I$7F8F		; disable I/O ports routine
	LD	DE,I$5090		; relocate table
	LD	BC,S.7F8F		; size of routine
	LD	A,I.7F94+1-I$7F8F	; master disk ROM slot id offset in routine
	PUSH	DE			; store pointer to relocation table
	PUSH	HL			; store pointer to routine
	LD	DE,X.F568		; target address
	JR	J$7BB5			; relocate

;	  Subroutine relocate routine in $SECBUF
;	     Inputs  ________________________
;	     Outputs ________________________

C$7BAF:	PUSH	DE
	PUSH	HL
	LD	DE,(D.F34D)
J$7BB5:	PUSH	DE			; store traget address routine
	PUSH	DE			; store target address routine
	LDIR				; copy routine to target
	LD	D,0
	LD	E,A			; offset of slot id
	PUSH	DE			; store offset
	IN	A,(0A8H)
	CALL	C$6017			; get pointer to EXPTBL entry of primairy slot in page 1
	CALL	C$5FE3			; make slot id
	POP	DE			; restore offset
	POP	HL			; target address routine
	ADD	HL,DE			; add offset
	LD	(HL),A			; update slot id
	POP	DE			; target address routine
	POP	BC			; restore pointer to routine
	POP	HL			; restore pointer to relocate table
	PUSH	IX
	CALL	C.62A1			; relocate routine
	POP	IX
	RET

;	  Subroutine detect disk drives
;	     Inputs  ________________________
;	     Outputs ________________________

C$7BD4:	CALL	C.7B76			; ensure I/O ports are enabled only in current slot
	CALL	C.4EDA			; get pointer to drive driver work area
	PUSH	IX
	LD	C,1			; disk drive 0
J$7BDE:	CALL	C.7BF8			; detect disk drive
	INC	IX
	RLC	C			; next disk drive
	LD	A,C
	CP	10H			; all disk drives done ?
	JR	NZ,J$7BDE		; nope, next disk drive
	POP	IX
	LD	C,1			; disk drive 0
	CALL	C.7BF8			; detect disk drive

;	  Subroutine disable I/O ports
;	     Inputs  ________________________
;	     Outputs ________________________

C.7BF1:	LD	(D.7114),A			; disable I/O ports
	LD	(D.711C),A			; disable I/O ports

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7BF7:	RET

;	  Subroutine detect disk drive
;	     Inputs  ________________________
;	     Outputs ________________________

C.7BF8:	DI
	XOR	A
	OUT	(0D4H),A		; motor off, side 0, unselect drive
	LD	A,0D0H			; FORCE INTERRUPT
	OUT	(0D0H),A		; execute FDC command
	LD	A,20H
	ADD	A,C
	OUT	(0D4H),A		; motor on, side 0, select drive
	CALL	C.5088			; wait for 5 maskable interrupts
	IN	A,(0D0H)
	BIT	7,A			; FDD ready ?
	JR	NZ,J.7C2B		; nope, no FDD detected
	AND	44H			; write protect OR at cylinder 0 ?
	JR	NZ,J.7C32		; yep,
	XOR	A
	OUT	(0D3H),A		; data register = cylinder 0
	LD	A,10H			; SEEK, no head load, no cylinder verify, step rate = 0
	OUT	(0D0H),A		; execute FDC command
	CALL	C.5088			; wait for 5 maskable interrupts
	IN	A,(0D0H)
	BIT	0,A			; FDC busy ?
	JR	NZ,J$7C26		; yep,
	BIT	2,A			; at cylinder 0 ?
	JR	Z,J.7C2B		; nope, no FDD detected
J$7C26:	CALL	C.7B40			; wait for FDC ready
	JR	J.7C32
J.7C2B:	CALL	C.7B3C			; reset FDC and wait for FDC ready
	LD	A,0FFH			; no FDD detected
	JR	J$7C3C
J.7C32:	CALL	C.7B3C			; reset FDC and wait for FDC ready
	XOR	A			; RESTORE, no head load, no cylinder verify, step rate = 0
	OUT	(0D0H),A		; execute FDC command
	CALL	C.7B40			; wait for FDC ready
	XOR	A			; FDD detected
J$7C3C:	LD	(IX+0),A
	XOR	A
	OUT	(0D4H),A		; motor off, side 0, unselect drive
	RET

;	  Subroutine __________________________
;	     Inputs  ________________________
;	     Outputs ________________________

C$7C43:	CALL	C.5FA9
	DEFB	12,"FAST! FDD DiskROM vr. 1.0a",10
	DEFB	34,"CDX-2 standard",34," release",10
	DEFB	"(c) 2005 A&L Software",10,10
	DEFB	"System:"
	DEFB	0
	LD	A,(D.F347)		; total number of drives
	CALL	C.7CBE			; number of logical drives to screen
	CALL	C.532C			; get number of physical drives
	LD	HL,J.7CDC		; this interface physical drives
	CALL	C$7CC1			; number of drives to screen
	LD	A,(D.F33F)
	AND	A			; CTRL key status
	CALL	DRIVES			; get drives
	LD	A,L			; number of drives
	CALL	C.7CBE			; number of logical drives to screen
	EI
	LD	B,180
J$7CB7:	HALT
	DJNZ	J$7CB7			; wait 3 seconds (60 Hz)
	XOR	A
	JP	CLS			; clear screeen and quit

;	  Subroutine number of logical drives to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C.7CBE:	LD	HL,I$7CF5		; log+ical

;	  Subroutine number of drives to screen
;	     Inputs  ________________________
;	     Outputs ________________________

C$7CC1:	PUSH	AF			; store number of drives
	CALL	C.5FAF			; string to screen
	CALL	C.5FA9
	DEFB	"ical drives: "
	DEFB	0
	POP	AF			; restore number of drives
	ADD	A,"0"			; to ASCII number
	JP	C.408F			; character to screen

J.7CDC:	DEFB	10,10,"This interface:",10
	DEFB	" -phys"
	DEFB	0

I$7CF5:	DEFB	10," -log"
	DEFB	0

;	  Subroutine GETDPB
;	     Inputs  ________________________
;	     Outputs ________________________

GETDPB:
C.7CFC:	EI
	LD	A,B
	CP	0F8H			; valid media descriptor ?
	RET	C			; nope, quit with error
	PUSH	IX
	PUSH	HL
	POP	IX
	INC	HL
	LD	(HL),A			; update media descriptor
	INC	HL
	EX	DE,HL
	LD	HL,I$5523
	LD	BC,9
	LDIR				; update sector size, directory mask, directory shift, cluster mask, cluster shift, first FAT sector, number of FATs
	LD	BC,2*256+112		; cluster shift = 2, number of directory entries = 112
	LD	DE,1*256+7		; cluster mask = 1
	CP	0FCH			; 80 track media ?
	JR	C,J.7D26		; yep,
	BIT	0,A			; double sided media ?
	JR	NZ,J.7D26		; yep,
	LD	BC,1*256+64		; cluster shift = 1, number of directory entries = 64
	LD	DE,0*256+4		; cluster maks = 0
J.7D26:	LD	(IX+7),B		; update cluster shift
	LD	(IX+11),C		; update number of directory entries
	LD	(IX+6),D		; update cluster mask
I$7D2F:	LD	B,1
I$7D31:	CP	0FEH
	JR	NC,J.7D3F
	CP	0FAH
	JR	Z,J.7D3F
	INC	B
	CP	0F9H
	JR	NZ,J.7D3F
	INC	B
J.7D3F:	LD	(IX+16),B
	SUB	0F8H
	LD	C,A			; media descriptor (0 based)
	LD	A,B
	ADD	A,A
	INC	A
	LD	(IX+17),A
	LD	(IX+18),0		; update first directory sector
	ADD	A,E
	LD	(IX+12),A
	LD	(IX+13),0		; update first data sector
	LD	HL,I$552C
	LD	B,0
	ADD	HL,BC
	ADD	HL,BC
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	LD	(IX+14),C
	LD	(IX+15),B		; update number of clusters+1
	POP	IX
	XOR	A
	RET

; table with BASIC CALL statements

I$7D6B:	DEFB	"SYSTEM",1
	DEFW	C.652E
	DEFB	"FORMAT",1
	DEFW	C.6547
	DEFB	"VERIFY ON",0
	DEFW	C.744F
	DEFB	"VERIFY OFF",0
	DEFW	C.7453
	DEFB	"CHKDSK",0
	DEFW	C.4FB1
	DEFB	0

I$7DA0:
	.PHASE	0C01EH

C.C01E:	JR	C.C030

	DEFB	"VOL_ID",0
S.VLID	EQU	$-C.C01E

	.DEPHASE

	.PHASE	0C030H
C.C030:	RET	NC
	LD	(C.C07B+1),DE		; store $DOSON
	LD	(D.C091+1),A		; store boot flag
	LD	(HL),LOW C.C079
	INC	HL
	LD	(HL),HIGH C.C079	; install disk error handler
J.7DB6:	LD	SP,I$F51F		; switch to temporary stack
	LD	HL,I$C0E4
	CALL	C.C0CB			; open SOLXDOS.SIS
	OR	A			; error ?
	JR	Z,J$7DCB		; nope,
	LD	HL,I$C0EF
	CALL	C.C0CB			; open MSXDOS.SYS
	INC	A			; error ?
	JR	Z,J$7DFE		; yep,
J$7DCB:	LD	DE,J.0100
	LD	C,1AH
	CALL	C.F37D			; update transfer address
	LD	A,(D.C0FA+0)
	LD	E,0			; drive A:
	LD	C,0EH
	OR	A			; default drive ?
	CALL	NZ,C.F37D		; nope, select drive
	LD	HL,1
	LD	(D.C0FA+14),HL		; block size = 1
	LD	DE,D.C0FA
	LD	HL,4000H-J.0100
	LD	C,27H
	CALL	C.F37D			; read DOS file
	JP	J.0100			; start DOS

C.C079:	DEFW	0C058H

C.C07B:	CALL	0			; select DOS kernel in page 1
	LD	A,C			; error code
	AND	0FEH			; ignore read/write
	CP	2			; NOT READY ?
	JR	NZ,J$7E10		; nope
J$7DFE:	LD	A,(D.C0FA)
	CP	1			; 1st try with default drive ?
	LD	A,1
	LD	(D.C0FA),A		; 2nd try with A: drive
	JR	NZ,J.7DB6		; yep, 2nd try
D.C091:	LD	A,0			; cold boot ?
	AND	A
	JP	Z,J.4022		; yep, start DiskBASIC
J$7E10:	LD	DE,I$C0AB
	LD	C,09H
	CALL	C.F37D			; print string
	LD	C,07H
	CALL	C.F37D			; get key
	CP	1BH			; ESC key ?
	JP	Z,J.4022		; yep, start DiskBASIC
	JR	J.7DB6			; retry
I$C0AB:	DEFB	"No DOS!",13,10
	DEFB	"Hit key (ESC=BASIC).",13,10
	DEFB	"$"
C.C0CB:	LD	DE,D.C0FA+1
	LD	BC,11
	LDIR
	PUSH	DE
	POP	HL
	INC	DE
	LD	(HL),0
	LD	C,19H
	LDIR				; prepare FCB
	LD	DE,D.C0FA
	LD	C,0FH
	JP	C.F37D			; open file

I$C0E4:	DEFB	"SOLXDOS SIS"
I$C0EF:	DEFB	"MSXDOS  SYS"
D.C0FA:	DEFB	0			; 1st try, use default drive

S.BTLD	EQU	$-C.C030

	.DEPHASE

;	  Subroutine CHKDSK
;	     Inputs  ________________________
;	     Outputs ________________________

C$7E74:	LD	(D.F339),SP
	CALL	C.6276			; allocate temporary work area
	LD	A,B
	CP	20H	; " "
	JP	C,J.723F
	PUSH	HL			; store BASIC pointer
	CALL	C.60D2			; prompt for drive (if multiple)
	PUSH	AF
	CALL	C.6198
	POP	AF
	INC	A
	LD	E,A
	LD	C,1BH
	CALL	C.F37D
	LD	A,(IX+6)		; cluster mask
	INC	A
	CP	17
	JP	NC,J.723F
	CCF
	SBC	HL,DE
J$7E9D:	JR	Z,J$7EDD
	CALL	C.5FA9
	DEFB	10,10,"Disk has data",10
	DEFB	"Marking bad clusters may corrupt files",10
	DEFB	0
	CALL	C.6198
J$7EDD:	POP	HL
	LD	B,(IX+12)
	LD	DE,0			; sector = 0
	CALL	C.46D7			; read sectors
	JR	NC,J$7EEF		; no error,
	LD	HL,I$7F55		; track 0 bad string
	JP	J.618F			; CR/LF + string + CR/LF to screen
J$7EEF:	LD	C,(IX+14)
	LD	B,(IX+15)		; number of clusters+1
	DEC	BC
	LD	DE,2
	LD	IY,0
J$7EFD:	PUSH	BC
	PUSH	DE
	EX	DE,HL
I$7F00:	XOR	A
	CALL	C.4EE3
	EX	DE,HL
	LD	B,(IX+6)		; cluster mask
	INC	B			; number of sectors per cluster
	CALL	C.46D7			; read sectors
	POP	DE
	JR	NC,J$7F1C		; no error,
	PUSH	DE
	PUSH	HL
	EX	DE,HL
J.7F12:	LD	BC,0FF7H
	CALL	C.74D1
	INC	IY
	POP	HL
	POP	DE
J$7F1C:	POP	BC
J$7F1D:	INC	DE
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,J$7EFD
	PUSH	IY
	POP	BC
	LD	A,B
	OR	C
	JR	Z,J$7F4F
	PUSH	HL
	CALL	C.45CC			; write FAT buffer
	POP	HL
J$7F2F:	LD	DE,10
	INC	H
	LD	(HL),00H
J.7F35:	PUSH	HL
	CALL	DIV16
	LD	A,L
J$7F3A:	ADD	A,"0"
	POP	HL
	DEC	HL
	LD	(HL),A
	LD	A,B
	OR	C
	JR	NZ,J.7F35
	CALL	C.6269			; CR/LF to screen
	CALL	C.5FAF			; string to screen
	LD	HL,I$7F78		; bad clusters string
	JP	J$6192			; string + CR/LF to screen
J$7F4F:	LD	HL,I$7F70		; disk ok string
	JP	J.618F			; CR/LF + string + CR/LF to screen

I$7F55:	DEFB	"Track 0 bad, disk unusable",0
I$7F70:	DEFB	"Disk OK",0
I$7F78:	DEFB	" bad cluster(s) marked",0

; disable I/O ports routine
I$7F8F:	LD	C,8FH+1			; start at slot 3-3
J.7F91:	DEC	C
	LD	H,HIGH 4000H		; page 1
I.7F94:	LD	A,0			; slot id
	BIT	7,C			; done all slots ?
	JP	Z,ENASLT		; yep, enable slot on page 1 and quit
	LD	A,C
	CP	84H			; secundairy slot 0 ?
	JR	C,J$7FAC		; yep,
	AND	03H
	INC	A
	OR	LOW (EXPTBL-1)
	LD	E,A
	LD	D,HIGH EXPTBL
	LD	A,(DE)
	RLCA				; slot expanded ?
	JR	NC,J.7F91		; nope, skip
J$7FAC:	PUSH	BC			; store slot id
	LD	A,C			; slot id
	CALL	ENASLT			; enable slot on page 1
	LD	HL,I.7FF5		; fast disk ROM string
	LD	DE,I.7FF5
	LD	B,S.7FF5
	CALL	C.7FD3			; test for string, disable I/O ports of interface when found
	JR	Z,J.7FD0		; fast disk ROM found,
	LD	HL,I$7F00
J$7FC1:	LD	DE,I$7FE6		; DDX interface ROM string
	LD	B,S.7FE6
	CALL	C.7FD3			; test for string, disable I/O ports of interface when found
	JR	Z,J.7FD0		; DDX disk ROM found,
	LD	A,H
	CP	HIGH 8000H		; at end of disk ROM ?
	JR	NZ,J$7FC1		; nope, try again
J.7FD0:	POP	BC			; restore slot id
	JR	J.7F91			; next slot

;	  Subroutine test for string, disable I/O ports of interface when found
;	     Inputs  ________________________
;	     Outputs ________________________

C.7FD3:	LD	A,(DE)
	CP	(HL)
	INC	HL
	RET	NZ
	INC	DE
	DJNZ	C.7FD3			; compare string
	LD	(D.7114),A		; disable I/O ports
	LD	(D.711C),A		; disable I/O ports
	LD	HL,D.F33E
	INC	(HL)			; update number of DDX or FAST disk interfaces
	XOR	A
	RET

I$7FE6:	DEFB	"DDX-DRIVE Inter"
S.7FE6	EQU	$-I$7FE6

I.7FF5:	DEFB	"FASTbyA&L05"
S.7FF5	EQU	$-I.7FF5

S.7F8F	EQU	$-I$7F8F

	END
