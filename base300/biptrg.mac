; BIPTRG.MAC

; BASIC DIMENSION & VARIABLE SEARCHING function, MSX 2+ version (version 3.0)

; Source re-created by Z80DIS 2.2
; Z80DIS was written by Kenneth Gielow, Palo Alto, CA

; Code Copyrighted by ASCII and maybe others
; Source comments by Arjen Zeilemaker

; Sourcecode supplied for STUDY ONLY
; Recreation NOT permitted without authorisation of the copyrightholders


        .Z80
        ASEG
        ORG     5E9AH


        INCLUDE MSX.INC


CGTABL          EQU     0004H
SYNCHR          EQU     0008H
RDSLT           EQU     000CH
CHRGTR          EQU     0010H
OUTDO           EQU     0018H
CALSLT          EQU     001CH
DCOMPR          EQU     0020H
ENASLT          EQU     0024H
GETYPR          EQU     0028H
INITIO          EQU     003BH
INIFNK          EQU     003EH
WRTVDP          EQU     0047H
WRTVRM          EQU     004DH
RDVRM           EQU     004AH
FILVRM          EQU     0056H
LDIRMV          EQU     0059H
LDIRVM          EQU     005CH
CHGMOD          EQU     005FH
CHGCLR          EQU     0062H
CLRSPR          EQU     0069H
INITXT          EQU     006CH
INIT32          EQU     006FH
SETTXT          EQU     0078H
SETGRP          EQU     007EH
SETMLT          EQU     0081H
CALPAT          EQU     0084H
CALATR          EQU     0087H
GSPSIZ          EQU     008AH
GRPPRT          EQU     008DH
GICINI          EQU     0090H
WRTPSG          EQU     0093H
STRTMS          EQU     0099H
CHSNS           EQU     009CH
CHGET           EQU     009FH
CHPUT           EQU     00A2H
LPTOUT          EQU     00A5H
CNVCHR          EQU     00ABH
PINLIN          EQU     00AEH
INLIN           EQU     00B1H
QINLIN          EQU     00B4H
ISCNTC          EQU     00BAH
CKCNTC          EQU     00BDH
BEEP            EQU     00C0H
CLS             EQU     00C3H
POSIT           EQU     00C6H
FNKSB           EQU     00C9H
ERAFNK          EQU     00CCH
DSPFNK          EQU     00CFH
TOTEXT          EQU     00D2H
GTSTCK          EQU     00D5H
GTTRIG          EQU     00D8H
GTPAD           EQU     00DBH
GTPDL           EQU     00DEH
TAPION          equ     00E1H
TAPIN           equ     00E4H
TAPIOF          equ     00E7H
TAPOON          equ     00EAH
TAPOUT          equ     00EDH
TAPOOF          equ     00F0H
STMOTR          equ     00F3H
LFTQ            EQU     00F6H
PUTQ            EQU     00F9H
LEFTC           EQU     00FFH
TUPC            EQU     0105H
DOWNC           EQU     0108H
TDOWNC          EQU     010BH
SCALXY          EQU     010EH
MAPXYC          EQU     0111H
FETCHC          EQU     0114H
STOREC          EQU     0117H
SETATR          EQU     011AH
READC           EQU     011DH
SETC            EQU     0120H
NSETCX          EQU     0123H
GTASPC          EQU     0126H
PNTINI          EQU     0129H
SCANR           EQU     012CH
SCANL           EQU     012FH
ISFLIO          EQU     014AH
OUTDLP          EQU     014DH
GETVCP          EQU     0150H
GETVC2          EQU     0153H

VARWRK          EQU     0F380H
LOW.            EQU     0F406h
ERRFLG          EQU     0F414H
LPTPOS          EQU     0F415H
PRTFLG          EQU     0F416H
NTMSXP          EQU     0F417H
VLZADR          EQU     0F419H
VLZDAT          EQU     0F41BH
CURLIN          EQU     0F41CH
KBFMIN          EQU     0F41EH
KBUF            EQU     0F41FH
BUFMIN          EQU     0F55DH
BUF             EQU     0F55EH
ENDBUF          EQU     0F660H
TTYPOS          EQU     0F661H
DIMFLG          EQU     0F662H
VALTYP          EQU     0F663H
DORES           EQU     0F664H
DONUM           EQU     0F665H
CONTXT          EQU     0F666H
CONSAV          EQU     0F668H
CONTYP          EQU     0F669H
CONLO           EQU     0F66AH
MEMSIZ          EQU     0F672H
STKTOP          EQU     0F674H
TXTTAB          EQU     0F676H
TEMPPT          EQU     0F678H
TEMPST          EQU     0F67AH
DSCTMP          EQU     0F698H
FRETOP          EQU     0F69BH
TEMP3           EQU     0F69DH
TEMP8           EQU     0F69FH
ENDFOR          EQU     0F6A1H
DATLIN          EQU     0F6A3H
SUBFLG          EQU     0F6A5H
FLGINP          EQU     0F6A6H
TEMP            EQU     0F6A7H
PTRFLG          EQU     0F6A9H
AUTFLG          EQU     0F6AAH
AUTLIN          EQU     0F6ABH
AUTINC          EQU     0F6ADH
SAVTXT          EQU     0F6AFH
SAVSTK          EQU     0F6B1H
ERRLIN          EQU     0F6B3H
DOT             EQU     0F6B5H
ERRTXT          EQU     0F6B7H
ONELIN          EQU     0F6B9H
ONEFLG          EQU     0F6BBH
TEMP2           EQU     0F6BCH
OLDLIN          EQU     0F6BEH
OLDTXT          EQU     0F6C0H
VARTAB          EQU     0F6C2H
ARYTAB          EQU     0F6C4H
STREND          EQU     0F6C6H
DATPTR          EQU     0F6C8H
DEFTBL          EQU     0F6CAH
PRMSTK          EQU     0F6E4H
PRMLEN          EQU     0F6E6H
PARM1           EQU     0F6E8H
PRMPRV          EQU     0F74CH
PRMLN2          EQU     0F74EH
PARM2           EQU     0F750H
PRMFLG          EQU     0F7B4H
ARYTA2          EQU     0F7B5H
NOFUNS          EQU     0F7B7H
TEMP9           EQU     0F7B8H
FUNACT          EQU     0F7BAH
SWPTMP          EQU     0F7BCH
TRCFLG          EQU     0F7C4H
DAC             EQU     0F7F6H
ARG             EQU     0F847H
MAXFIL          EQU     0F85FH
FILTAB          EQU     0F860H
NULBUF          EQU     0F862H
PTRFIL          EQU     0F864H
FILNAM          EQU     0F866H
FILNM2          EQU     0F871H
NLONLY          EQU     0F87CH
SAVEND          EQU     0F87DH
FNKSTR          EQU     0F87FH
CGPNT           EQU     0F91FH
MINDEL          EQU     0F92DH
MAXDEL          EQU     0F92FH
ASPECT          EQU     0F931H
CENCNT          EQU     0F933H
CLINEF          EQU     0F935H
CNPNTS          EQU     0F936H
CPLOTF          EQU     0F938H
CPCNT           EQU     0F939H
CPCNT8          EQU     0F93BH
CRCSUM          EQU     0F93DH
CSTCNT          EQU     0F93FH
CSCLXY          EQU     0F941H
CSAVEA          EQU     0F942H
CSAVEM          EQU     0F944H
CXOFF           EQU     0F945H
CYOFF           EQU     0F947H
LOHMSK          EQU     0F949H
LOHDIR          EQU     0F94AH
LOHADR          EQU     0F94BH
LOHCNT          EQU     0F94DH
SKPCNT          EQU     0F94FH
MOVCNT          EQU     0F951H
PDIREC          EQU     0F953H
LFPROG          EQU     0F954H
RTPROG          EQU     0F955H
MCLTAB          EQU     0F956H
MCLFLG          EQU     0F958H
QUETAB          EQU     0F959H
PRSCNT          EQU     0FB35H
SAVSP           EQU     0FB36H
VOICEN          EQU     0FB38H
SAVVOL          EQU     0FB39H
MCLLEN          EQU     0FB3BH
MCLPTR          EQU     0FB3CH
MUSICF          EQU     0FB3FH
PLYCNT          EQU     0FB40H
BASROM          EQU     0FBB1H
FNKFLG          EQU     0FBCEH
ONGSBF          EQU     0FBD8H
KEYBUF          EQU     0FBF0H
BOTTOM          EQU     0FC48H
HIMEM           EQU     0FC4AH
TRPTBL          EQU     0FC4CH
INTFLG          EQU     0FC9BH
JIFFY           EQU     0FC9EH
INTVAL          EQU     0FCA0H
INTCNT          EQU     0FCA2H
FLBMEM          EQU     0FCAEH
SCRMOD          EQU     0FCAFH
OLDSCR          EQU     0FCB0H
CASPRV          equ     0FCB1H
GXPOS           EQU     0FCB3H
GYPOS           EQU     0FCB5H
GRPACX          EQU     0FCB7H
GRPACY          EQU     0FCB9H
DRWFLG          EQU     0FCBBH
DRWSCL          EQU     0FCBCH
DRWANG          EQU     0FCBDH
RUNBNF          EQU     0FCBEH
SAVENT          EQU     0FCBFH
EXPTBL          EQU     0FCC1H
SLTTBL          EQU     0FCC5H
SLTATR          EQU     0FCC9H
SLTWRK          EQU     0FD09H
PROCNM          EQU     0FD89H
DEVICE          EQU     0FD99H

H.KEYI          EQU     0FD9AH
H.ONGO          EQU     0FDEAH
H.DSKO          EQU     0FDEFH
H.SETS          EQU     0FDF4H
H.NAME          EQU     0FDF9H
H.KILL          EQU     0FDFEH
H.IPL           EQU     0FE03H
H.COPY          EQU     0FE08H
H.CMD           EQU     0FE0DH
H.DSKF          EQU     0FE12H
H.DSKI          EQU     0FE17H
H.ATTR          EQU     0FE1CH
H.LSET          EQU     0FE21H
H.RSET          EQU     0FE26H
H.FIEL          EQU     0FE2BH
H.MKI$          EQU     0FE30H
H.MKS$          EQU     0FE35H
H.MKD$          EQU     0FE3AH
H.CVI           EQU     0FE3FH
H.CVS           EQU     0FE44H
H.CVD           EQU     0FE49H
H.GETP          EQU     0FE4EH
H.SETF          EQU     0FE53H
H.NOFO          EQU     0FE58H
H.NULO          EQU     0FE5DH
H.NTFL          EQU     0FE62H
H.MERG          EQU     0FE67H
H.SAVE          EQU     0FE6CH
H.BINS          EQU     0FE71H
H.BINL          EQU     0FE76H
H.FILE          EQU     0FE7BH
H.DGET          EQU     0FE80H
H.FILO          EQU     0FE85H
H.INDS          EQU     0FE8AH
H.RSLF          EQU     0FE8FH
H.SAVD          EQU     0FE94H
H.LOC           EQU     0FE99H
H.LOF           EQU     0FE9EH
H.EOF           EQU     0FEA3H
H.FPOS          EQU     0FEA8H
H.BAKU          EQU     0FEADH
H.PARD          EQU     0FEB2H
H.NODE          EQU     0FEB7H
H.POSD          EQU     0FEBCH
H.GEND          EQU     0FEC6H
H.RUNC          EQU     0FECBH
H.CLEA          EQU     0FED0H
H.LOPD          EQU     0FED5H
H.STKE          EQU     0FEDAH
H.CRDO          EQU     0FEE9H
H.DSKC          EQU     0FEEEH
H.DOGR          EQU     0FEF3H
H.PRGE          EQU     0FEF8H
H.ERRP          EQU     0FEFDH
H.ERRF          EQU     0FF02H
H.READ          EQU     0FF07H
H.MAIN          EQU     0FF0CH
H.DIRD          EQU     0FF11H
H.FINI          EQU     0FF16H
H.FINE          EQU     0FF1BH
H.CRUN          EQU     0FF20H
H.CRUS          EQU     0FF25H
H.ISRE          EQU     0FF2AH
H.NTFN          EQU     0FF2FH
H.NOTR          EQU     0FF34H
H.SNGF          EQU     0FF39H
H.NEWS          EQU     0FF3EH
H.GONE          EQU     0FF43H
H.CHRG          EQU     0FF48H
H.RETU          EQU     0FF4DH
H.PRTF          EQU     0FF52H
H.COMP          EQU     0FF57H
H.FINP          EQU     0FF5CH
H.TRMN          EQU     0FF61H
H.FRME          EQU     0FF66H
H.NTPL          EQU     0FF6BH
H.EVAL          EQU     0FF70H
H.OKNO          EQU     0FF75H
H.FING          EQU     0FF7AH
H.ISMI          EQU     0FF7FH
H.WIDT          EQU     0FF84H
H.LIST          EQU     0FF89H
H.BUFL          EQU     0FF8EH
H.FRQI          EQU     0FF93H
H.SCNE          EQU     0FF98H
H.FRET          EQU     0FF9DH
H.PTRG          EQU     0FFA2H
H.ERRO          EQU     0FFB1H
H.SCRE          EQU     0FFC0H
H.PLAY          EQU     0FFC5H
EXTBIO          EQU     0FFCAH
D.FFFF          EQU     0FFFFH

        PUBLIC  PTRGET
        PUBLIC  PTRGT2
        PUBLIC  PTRGTV
        PUBLIC  BSERR
        PUBLIC  DIM

        EXTRN   UMULT
        EXTRN   FCERR
        EXTRN   SNERR
        EXTRN   BLTU
        EXTRN   REASON
        EXTRN   OMERR
        EXTRN   DDERR
        EXTRN   ERROR
        EXTRN   NULSTR
        EXTRN   ISLET
        EXTRN   ISLET2
        EXTRN   GETSTK
        EXTRN   J3297
        EXTRN   ISVAR
        EXTRN   INTIDX

; START	SUBTTL	BIPTRG

	SUBTTL	BIPTRG

I5E9A:  DEC     HL
        RST     CHRGTR                  ; end of statement ?
        RET     Z                       ; yep, quit
        RST     SYNCHR
        DEFB    ","                     ; check for ,

;       Subroutine      DIM statement
;       Inputs          ________________________
;       Outputs         ________________________

DIM:
C5E9F:  LD      BC,I5E9A
        PUSH    BC                      ; 

;       Subroutine      locate array variable
;       Inputs          ________________________
;       Outputs         ________________________

        DEFB    0F6H                    ; OR 0AFH, trick to skip next instruction

;       Subroutine      locate variable
;       Inputs          ________________________
;       Outputs         ________________________

PTRGET:
C5EA4:  XOR     A                       ; not DIM
        LD      (DIMFLG),A
        LD      C,(HL)
PTRGT2:
J5EA9:  CALL    H.PTRG
        CALL    ISLET                   ; is current BASIC character a upcase letter ?
        JP      C,SNERR                 ; nope, syntax error
        XOR     A
        LD      B,A                     ; assume no 2nd variablename character
        RST     CHRGTR                  ; get next BASIC character
        JR      C,J5EBC                 ; digit, use as 2nd variablename character
        CALL    ISLET2                  ; is upcase letter character ?
        JR      C,J5EC5                 ; nope, may be a variabletype indicator
J5EBC:  LD      B,A                     ; 2nd variablename character
J5EBD:  RST     CHRGTR                  ; get next BASIC character
        JR      C,J5EBD                 ; digit, skip
        CALL    ISLET2                  ; is upcase letter character ?
        JR      NC,J5EBD                ; yep, skip
J5EC5:  CP      26H
        JR      NC,J5EE0                ; speedup for 26H-0FFH
        LD      DE,I5EEE
        PUSH    DE
        LD      D,2                     ; integer
        CP      "%"                     ; integer type indicator ?
        RET     Z                       ; yep, do not use default type
        INC     D                       ; string
        CP      "$"                     ; string type indicator ?
        RET     Z                       ; yep, do not use default type
        INC     D                       ; single real
        CP      "!"                     ; single real indicator ?
        RET     Z                       ; yep, do not use default type
        LD      D,8                     ; double real
        CP      "#"                     ; double real indicator ?
        RET     Z                       ; yep, do not use default type
        POP     AF
J5EE0:  LD      A,C
        AND     7FH                     ; clear b7 (for function variable)
        LD      E,A
        LD      D,0
        PUSH    HL
        LD      HL,DEFTBL-"A"
        ADD     HL,DE
        LD      D,(HL)                  ; default type
        POP     HL
        DEC     HL                      ; BASIC pointer back to compensate upcoming CHRGTR
I5EEE:  LD      A,D
        LD      (VALTYP),A              ; set DAC type
        RST     CHRGTR                  ; get next BASIC character (type indicator)
        LD      A,(SUBFLG)
        DEC     A                       ; variable search flags
        JP      Z,J5FE8                 ; search for ERASE statement,
        JP      P,J5F08                 ; search for function variables or loop variables, do not check for subscript
        LD      A,(HL)
        SUB     "("
        JP      Z,J5FBA                 ; array variable
        SUB     "["-"("
        JP      Z,J5FBA                 ; array variable
J5F08:  XOR     A
        LD      (SUBFLG),A              ; flag normal variable
        PUSH    HL                      ; save BASIC pointer
        LD      A,(NOFUNS)
        OR      A                       ; local function variables ?
        LD      (PRMFLG),A              ; yep, search simple variables afterwards
        JR      Z,J5F52                 ; nope, continue with simple variables
        LD      HL,(PRMLEN)
        LD      DE,PARM1                ; start of the local function variables
        ADD     HL,DE
        LD      (ARYTA2),HL             ; end of the local function variables
        EX      DE,HL
        JR      J5F3A                   ; start search

J5F23:  LD      A,(DE)
        LD      L,A                     ; variable type (also the length)
        INC     DE
        LD      A,(DE)                  ; first variablename character
        INC     DE
        CP      C                       ; match ?
        JR      NZ,J5F36                ; nope,
        LD      A,(VALTYP)
        CP      L                       ; correct variabletype ?
        JR      NZ,J5F36                ; nope,
        LD      A,(DE)                  ; second variablename character
        CP      B                       ; match ?
        JP      Z,J5FA4                 ; variable found, quit
J5F36:  INC     DE
        LD      H,0
        ADD     HL,DE                   ; to next variable
J5F3A:  EX      DE,HL
        LD      A,(ARYTA2+0)
        CP      E                       ; end of area ?
        JP      NZ,J5F23                ; nope, next variable
        LD      A,(ARYTA2+1)
        CP      D                       ; end of area ?
        JR      NZ,J5F23                ; nope, next variable
        LD      A,(PRMFLG)
        OR      A                       ; in local function variable search ?
        JR      Z,SMKVAR                ; nope, not found
        XOR     A
        LD      (PRMFLG),A              ; now search the simple variables
J5F52:  LD      HL,(ARYTAB)
        LD      (ARYTA2),HL             ; end of searcharea is the start of the array variable area
        LD      HL,(VARTAB)             ; start of area is the start of the simple variable area
        JR      J5F3A                   ; start search

;       Subroutine      locate variable (search only)
;       Inputs          ________________________
;       Outputs         ________________________

PTRGTV:
C5F5D:  CALL    PTRGET                  ; locate variable
        RET

J5F61:  LD      D,A
        LD      E,A                     ; null pointer
        POP     BC
        EX      (SP),HL
        RET

SMKVAR:
J5F66:  POP     HL
        EX      (SP),HL                 ; call address
        PUSH    DE
        LD      DE,PTRGTV+3
        RST     DCOMPR                  ; called from VARPTR ?
        JR      Z,J5F61                 ; yep, return without creating a variable
        LD      DE,ISVAR+3
        RST     DCOMPR                  ; called from factor evaluator ?
        POP     DE
        JR      Z,J5FA7                 ; yep, return value 0
        EX      (SP),HL
        PUSH    HL
        PUSH    BC
        LD      A,(VALTYP)
        LD      C,A
        PUSH    BC
        LD      B,0                     ; size of variable
        INC     BC
        INC     BC
        INC     BC                      ; three bytes for housekeeping
        LD      HL,(STREND)
        PUSH    HL
        ADD     HL,BC
        POP     BC
        PUSH    HL
        CALL    BLTU                    ; check for enough stackspace and move data
        POP     HL
        LD      (STREND),HL
        LD      H,B
        LD      L,C
        LD      (ARYTAB),HL
J5F96:  DEC     HL
        LD      (HL),0
        RST     DCOMPR
        JR      NZ,J5F96                ; clear variable
        POP     DE
        LD      (HL),E                  ; variable type
        INC     HL
        POP     DE
        LD      (HL),E
        INC     HL
        LD      (HL),D                  ; variable name
        EX      DE,HL
J5FA4:  INC     DE
        POP     HL
        RET

J5FA7:  LD      (DAC+0),A               ; if single real or double real, DAC = 0
        LD      H,A
        LD      L,A
        LD      (DAC+2),HL              ; if integer, DAC = 0
        RST     GETYPR                  ; get DAC type
        JR      NZ,J5FB8                ; not a string, quit
        LD      HL,NULSTR
        LD      (DAC+2),HL              ; empty string
J5FB8:  POP     HL                      ; restore BASIC pointer
        RET

;       Subroutine      locate array variable with subscript
;       Inputs          ________________________
;       Outputs         ________________________

J5FBA:  PUSH    HL
        LD      HL,(DIMFLG)
        EX      (SP),HL                 ; save DIMFLG
        LD      D,A                     ; index 0
J5FC0:  PUSH    DE
        PUSH    BC
        CALL    INTIDX                  ; skip basic char, evaluate word operand and check for 0-32767 range
        POP     BC
        POP     AF
        EX      DE,HL
        EX      (SP),HL
        PUSH    HL
        EX      DE,HL                   ; subscript on stack
        INC     A
        LD      D,A                     ; next index
        LD      A,(HL)
        CP      ","                     ; more subscripts ?
        JP      Z,J5FC0                 ; yep, get next subscript
        CP      ")"
        JR      Z,J5FDC
        CP      "]"
        JP      NZ,SNERR                ; nope, syntax error
J5FDC:  RST     CHRGTR                  ; get next BASIC character
        LD      (TEMP2),HL              ; save BASIC pointer
        POP     HL
        LD      (DIMFLG),HL             ; restore DIMFLG
        LD      E,0
        PUSH    DE
        DEFB    011H                    ; LD DE,xxxx, trick to skip next 2 instruction
J5FE8:  PUSH    HL
        PUSH    AF
        LD      HL,(ARYTAB)             ; start of the array variable area
        DEFB    03EH                    ; LD A,xx, trick to skip next instruction
J5FEE:  ADD     HL,DE
        LD      DE,(STREND)
        RST     DCOMPR                  ; end of the array variable area ?
        JR      Z,J6023                 ; yep, create array
        LD      E,(HL)                  ; arraytype
        INC     HL
        LD      A,(HL)                  ; first name character
        INC     HL
        CP      C                       ; match ?
        JR      NZ,J6005                ; nope, not found
        LD      A,(VALTYP)
        CP      E                       ; correct arraytype ?
        JR      NZ,J6005                ; nope, not found
        LD      A,(HL)                  ; second name character
        CP      B                       ; match ?
J6005:  INC     HL
        LD      E,(HL)
        INC     HL
        LD      D,(HL)                  ; offset to next array
        INC     HL
        JR      NZ,J5FEE                ; no match, next array
        LD      A,(DIMFLG)
        OR      A                       ; DIM statement ?
        JP      NZ,DDERR                ; yep, redimensioned array error
        POP     AF
        LD      B,H
        LD      C,L
        JP      Z,J3297                 ; ERASE, restore BASIC pointer and quit
        SUB     (HL)                    ; dimension correct ?
        JP      Z,J607D                 ; yep,

BSERR:
J601D:  LD      DE,9                    ; ?? LD E,9 should be enough ??
        JP      ERROR                   ; subscript out of range error

J6023:  LD      A,(VALTYP)
        LD      (HL),A
        INC     HL
        LD      E,A
        LD      D,0
        POP     AF
        JP      Z,FCERR                 ; ERASE, illegal function call
        LD      (HL),C
        INC     HL
        LD      (HL),B                  ; variablename
        INC     HL
        LD      C,A                     ; number of words
        CALL    GETSTK                  ; check if enough stackspace
        INC     HL
        INC     HL                      ; leave offset empty for now
        LD      (TEMP3),HL
        LD      (HL),C                  ; dimension
        INC     HL
        LD      A,(DIMFLG)
        RLA                             ; DIM statement ?
        LD      A,C
J6043:  LD      BC,11
        JR      NC,J604A                ; nope, use a default of 11
        POP     BC                      ; subscript
        INC     BC
J604A:  LD      (HL),C
        PUSH    AF
        INC     HL
        LD      (HL),B
        INC     HL
        CALL    UMULT                   ; unsigned integer multiply
        POP     AF
        DEC     A
        JR      NZ,J6043                ; next
        PUSH    AF
        LD      B,D
        LD      C,E
        EX      DE,HL
        ADD     HL,DE
        JP      C,OMERR                 ; out of memory
        CALL    REASON                  ; check if enough stackspace left
        LD      (STREND),HL             ; new end of array area
J6064:  DEC     HL
        LD      (HL),0
        RST     DCOMPR
        JR      NZ,J6064                ; clear array
        INC     BC
        LD      D,A
        LD      HL,(TEMP3)
        LD      E,(HL)
        EX      DE,HL
        ADD     HL,HL
        ADD     HL,BC
        EX      DE,HL
        DEC     HL
        DEC     HL
        LD      (HL),E
        INC     HL
        LD      (HL),D
        INC     HL
        POP     AF
        JR      C,J60AD
J607D:  LD      B,A
        LD      C,A
        LD      A,(HL)
        INC     HL
        DEFB    016H                    ; LD D,xx, trick to skip next instruction
J6082:  POP     HL
        LD      E,(HL)
        INC     HL
        LD      D,(HL)
        INC     HL
        EX      (SP),HL
        PUSH    AF
        RST     DCOMPR
        JP      NC,J601D                ; subscript out of range
        CALL    UMULT                   ; unsigned integer multiply
        ADD     HL,DE
        POP     AF
        DEC     A
        LD      B,H
        LD      C,L
        JR      NZ,J6082
        LD      A,(VALTYP)
        LD      B,H
        LD      C,L
        ADD     HL,HL
        SUB     4
        JR      C,J60A5
        ADD     HL,HL
        JR      Z,J60AA
        ADD     HL,HL
J60A5:  OR      A
        JP      PO,J60AA
        ADD     HL,BC
J60AA:  POP     BC
        ADD     HL,BC
        EX      DE,HL
J60AD:  LD      HL,(TEMP2)
        RET

; END	SUBTTL	BIPTRG

        END

